<Type Name="CIImage" FullName="MonoTouch.CoreImage.CIImage">
  <TypeSignature Language="C#" Value="public class CIImage : MonoTouch.Foundation.NSObject, IDisposable, MonoTouch.Foundation.INSCoding, MonoTouch.Foundation.INSCopying" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CIImage extends MonoTouch.Foundation.NSObject implements class MonoTouch.Foundation.INSCoding, class MonoTouch.Foundation.INSCopying, class MonoTouch.ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>MonoTouch.Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("CIImage", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a set of instructions to create an image for use by CoreImage.</summary>
    <remarks>
      <para>

	Unlike CoreGraphics images (<see cref="T:MonoTouch.CoreGraphics.CGImage" />) that are objects
	that hold the actual image data to be processed, CIImages
	represents a set of instructions to obtain an image.  These
	recipes are used during the CoreImage filtering, analysis or rendering
	pipeline to actually create the bitmap representation.   

      </para>
      <para>

	CIImages are either the result of loading an image from disk,
	an NSData array, a CoreVideo buffer a CoreGraphics image, or
	the result of processing an image pipeline by CoreImage.

      </para>
      <para>

	CIImages for example are used when chaining various filters
	(<see cref="T:MonoTouch.CoreImage.CIFilter" />) together and
	only their abstract representation is passed between the
	output of one filter and the input to another one.  The image
	might not even reside in the main memory, it could reside
	entirely on the GPU space as an intermediate step between two
	filters.

      </para>
      <format type="text/html">
        <h2>Auto Enhancement Filters</h2>
      </format>
      <para>

	The <see cref="M:MonoTouch.CoreImage.CIImage.GetAutoAdjustmentFilters" />
	method can be used to obtain a list of CIImage filters that
	can be used to correct various problems found in photos.

      </para>
      <para>
	These typically include:

	<list type="bullet"><item><term>
	      Adjusts the shadow details (using the <see cref="T:MonoTouch.CoreImage.CIHighlightShadowAdjust" /> filter).
	    </term></item><item><term>
	      Adjusts the image contrast (using the <see cref="T:MonoTouch.CoreImage.CIToneCurve" /> filter).
	    </term></item><item><term>
	      Adjusts the image saturation (using the <see cref="T:MonoTouch.CoreImage.CIVibrance" /> filter).
	    </term></item><item><term>
	      Adjusts the face color balance, adjust the tone of the skin (using the <see cref="T:MonoTouch.CoreImage.CIFaceBalance" /> filter).
	    </term></item><item><term>
	      Red Eye Correction (using the <see cref="T:MonoTouch.CoreImage.CIRedEyeCorrection" /> filter).
	    </term></item></list></para>
      <para>

	You can configure which kind of filters you want to get or
	configure by setting the properties of an <see cref="T:MonoTouch.CoreImage.CIAutoAdjustmentFilterOptions" />
	instance and then calling the appropriate method.

      </para>
      <example>
        <code lang="c#">
void PrepareFixes (CIImage img)
{
    var opt = new CIAutoAdjustmentFilterOptions () {
    	RedEye = true,
    	AutoAdjustCrop = true
    };
    foreach (var filter in img.GetAutoAdjustmentFilters (opt)) {
    	filter.Image = img;
    	img = filter.OutputImage;
    }
}
</code>
      </example>
    </remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=e2a0ccca-ab10-4e41-9c09-11831a8c1380">coreimage</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.CoreGraphics.CGImage image);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.CoreGraphics.CGImage image) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCGImage:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreGraphics.CGImage" />
      </Parameters>
      <Docs>
        <param name="image">CoreGraphics image.</param>
        <summary>Initializes a CoreImage Image from a CoreGraphics bitmap representation</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.CoreGraphics.CGLayer layer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.CoreGraphics.CGLayer layer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("A CIImage cannot be created from a CGLayer on iOS (only OSX)")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="layer" Type="MonoTouch.CoreGraphics.CGLayer" />
      </Parameters>
      <Docs>
        <param name="layer">CoreAnimation layer.</param>
        <summary>Initializes a CoreImage image from the contents of a CoreAnimation layer.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.CoreImage.CIColor color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.CoreImage.CIColor color) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithColor:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="color" Type="MonoTouch.CoreImage.CIColor" />
      </Parameters>
      <Docs>
        <param name="color">Color to use for the image.</param>
        <summary>Creates an image with infinite dimensions that is filled with the specified color.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.CoreVideo.CVImageBuffer imageBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.CoreVideo.CVImageBuffer imageBuffer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("CVImageBuffer is used on OSX, for iOS use CVPixelBuffer")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="imageBuffer" Type="MonoTouch.CoreVideo.CVImageBuffer" />
      </Parameters>
      <Docs>
        <param name="imageBuffer">CoreVideo image buffer.</param>
        <summary>Initializes a CoreImage image from the contents of the specified CoreVideo image buffer.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.CoreVideo.CVPixelBuffer buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.CoreVideo.CVPixelBuffer buffer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCVPixelBuffer:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="buffer" Type="MonoTouch.CoreVideo.CVPixelBuffer" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.Foundation.NSData data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSData data) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithData:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="data" Type="MonoTouch.Foundation.NSData" />
      </Parameters>
      <Docs>
        <param name="data">Image data, in a format supported by the system.</param>
        <summary>Creates a new CIImage from the specified data.   The image data must be premultiplied.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.Foundation.NSUrl url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSUrl url) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithContentsOfURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="url" Type="MonoTouch.Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="url">Location of the image data.</param>
        <summary>Initializes a CoreImage image from the contents of the file pointed by the specified url.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.UIKit.UIImage image);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.UIKit.UIImage image) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithImage:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.UIKit.UIImage" />
      </Parameters>
      <Docs>
        <param name="image">UIKit image.</param>
        <summary>Initializes a CoreImage image from a UIKit image.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImage (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.CoreGraphics.CGImage image, MonoTouch.CoreImage.CIImageInitializationOptionsWithMetadata options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.CoreGraphics.CGImage image, class MonoTouch.CoreImage.CIImageInitializationOptionsWithMetadata options) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreGraphics.CGImage" />
        <Parameter Name="options" Type="MonoTouch.CoreImage.CIImageInitializationOptionsWithMetadata" />
      </Parameters>
      <Docs>
        <param name="image">CoreGraphics image.</param>
        <param name="options">Options to initialize the image with.</param>
        <summary>Initializes a CoreImage Image from a CoreGraphics bitmap representation</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.CoreGraphics.CGImage image, MonoTouch.Foundation.NSDictionary d);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.CoreGraphics.CGImage image, class MonoTouch.Foundation.NSDictionary d) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCGImage:options:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreGraphics.CGImage" />
        <Parameter Name="d" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="image">CoreGraphics image.</param>
        <param name="d">
          <para>Metadata to initialize with, as an NSDictionary.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Initializes a CoreImage Image from a CoreGraphics bitmap representation</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.CoreGraphics.CGLayer layer, MonoTouch.CoreImage.CIImageInitializationOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.CoreGraphics.CGLayer layer, class MonoTouch.CoreImage.CIImageInitializationOptions options) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("A CIImage cannot be created from a CGLayer on iOS (only OSX)")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="layer" Type="MonoTouch.CoreGraphics.CGLayer" />
        <Parameter Name="options" Type="MonoTouch.CoreImage.CIImageInitializationOptions" />
      </Parameters>
      <Docs>
        <param name="layer">CoreAnimation layer.</param>
        <param name="options">Options to initialize the image with.</param>
        <summary>Initializes a CoreImage image from the contents of a CoreAnimation layer.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.CoreGraphics.CGLayer layer, MonoTouch.Foundation.NSDictionary d);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.CoreGraphics.CGLayer layer, class MonoTouch.Foundation.NSDictionary d) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("A CIImage cannot be created from a CGLayer on iOS (only OSX)")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="layer" Type="MonoTouch.CoreGraphics.CGLayer" />
        <Parameter Name="d" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="layer">CoreAnimation layer.</param>
        <param name="d">
          <para>Extra configuration options as an NSDictionary.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Initializes a CoreImage image from the contents of a CoreAnimation layer.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.CoreVideo.CVImageBuffer imageBuffer, MonoTouch.CoreImage.CIImageInitializationOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.CoreVideo.CVImageBuffer imageBuffer, class MonoTouch.CoreImage.CIImageInitializationOptions options) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("CVImageBuffer is used on OSX, for iOS use CVPixelBuffer")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="imageBuffer" Type="MonoTouch.CoreVideo.CVImageBuffer" />
        <Parameter Name="options" Type="MonoTouch.CoreImage.CIImageInitializationOptions" />
      </Parameters>
      <Docs>
        <param name="imageBuffer">CoreVideo image buffer.</param>
        <param name="options">Options to initialize the image with.</param>
        <summary>Initializes a CoreImage image from the contents of the specified CoreVideo image buffer.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.CoreVideo.CVImageBuffer imageBuffer, MonoTouch.Foundation.NSDictionary dict);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.CoreVideo.CVImageBuffer imageBuffer, class MonoTouch.Foundation.NSDictionary dict) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("CVImageBuffer is used on OSX, for iOS use CVPixelBuffer")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="imageBuffer" Type="MonoTouch.CoreVideo.CVImageBuffer" />
        <Parameter Name="dict" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="imageBuffer">CoreVideo image buffer.</param>
        <param name="dict">
          <para>Extra configuration options as an NSDictionary.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Initializes a CoreImage image from the contents of the specified CoreVideo image buffer.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.CoreVideo.CVPixelBuffer buffer, MonoTouch.CoreImage.CIImageInitializationOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.CoreVideo.CVPixelBuffer buffer, class MonoTouch.CoreImage.CIImageInitializationOptions options) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="buffer" Type="MonoTouch.CoreVideo.CVPixelBuffer" />
        <Parameter Name="options" Type="MonoTouch.CoreImage.CIImageInitializationOptions" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.CoreVideo.CVPixelBuffer buffer, MonoTouch.Foundation.NSDictionary dict);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.CoreVideo.CVPixelBuffer buffer, class MonoTouch.Foundation.NSDictionary dict) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCVPixelBuffer:options:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="buffer" Type="MonoTouch.CoreVideo.CVPixelBuffer" />
        <Parameter Name="dict" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="dict">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.Foundation.NSData data, MonoTouch.CoreImage.CIImageInitializationOptionsWithMetadata options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSData data, class MonoTouch.CoreImage.CIImageInitializationOptionsWithMetadata options) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="data" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="options" Type="MonoTouch.CoreImage.CIImageInitializationOptionsWithMetadata" />
      </Parameters>
      <Docs>
        <param name="data">Image data, in a format supported by the system.</param>
        <param name="options">Options to initialize the image with.</param>
        <summary>Creates a new CIImage from the specified data.   The image data must be premultiplied.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.Foundation.NSData data, MonoTouch.Foundation.NSDictionary d);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSData data, class MonoTouch.Foundation.NSDictionary d) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithData:options:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="data" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="d" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="data">Image data, in a format supported by the system.</param>
        <param name="d">
          <para>Extra configuration options, as an NSDictionary.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new CIImage from the specified data.   The image data must be premultiplied.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.Foundation.NSUrl url, MonoTouch.CoreImage.CIImageInitializationOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSUrl url, class MonoTouch.CoreImage.CIImageInitializationOptions options) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="options" Type="MonoTouch.CoreImage.CIImageInitializationOptions" />
      </Parameters>
      <Docs>
        <param name="url">Location of the image data.</param>
        <param name="options">Options to initialize the image with.</param>
        <summary>Initializes a CoreImage image from the contents of the file pointed by the specified url.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.Foundation.NSUrl url, MonoTouch.Foundation.NSDictionary d);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSUrl url, class MonoTouch.Foundation.NSDictionary d) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithContentsOfURL:options:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="url" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="d" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="url">Location of the image data.</param>
        <param name="d">
          <para>Extra configuration options, as an NSDictionary.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Initializes a CoreImage image from the contents of the file pointed by the specified url.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.UIKit.UIImage image, MonoTouch.CoreImage.CIImageInitializationOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.UIKit.UIImage image, class MonoTouch.CoreImage.CIImageInitializationOptions options) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.UIKit.UIImage" />
        <Parameter Name="options" Type="MonoTouch.CoreImage.CIImageInitializationOptions" />
      </Parameters>
      <Docs>
        <param name="image">UIKit image.</param>
        <param name="options">Options to initialize the image with.</param>
        <summary>Initializes a CoreImage image from a UIKit image.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.UIKit.UIImage image, MonoTouch.Foundation.NSDictionary options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.UIKit.UIImage image, class MonoTouch.Foundation.NSDictionary options) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithImage:options:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.UIKit.UIImage" />
        <Parameter Name="options" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="image">UIKit image.</param>
        <param name="options">
          <para>Extra configuration options, as an NSDictionary.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Initializes a CoreImage image from a UIKit image.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImage (int glTextureName, System.Drawing.SizeF size, bool flipped, MonoTouch.CoreGraphics.CGColorSpace colorSpace);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 glTextureName, valuetype System.Drawing.SizeF size, bool flipped, class MonoTouch.CoreGraphics.CGColorSpace colorSpace) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public CIImage (int glTextureName, MonoTouch.CoreGraphics.CGSize size, bool flipped, MonoTouch.CoreGraphics.CGColorSpace colorSpace);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 glTextureName, valuetype MonoTouch.CoreGraphics.CGSize size, bool flipped, class MonoTouch.CoreGraphics.CGColorSpace colorSpace) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithTexture:size:flipped:colorSpace:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="glTextureName" Type="System.Int32" />
        <Parameter Name="size" Type="System.Drawing.SizeF" apistyle="classic" />
        <Parameter Name="flipped" Type="System.Boolean" />
        <Parameter Name="colorSpace" Type="MonoTouch.CoreGraphics.CGColorSpace" />
        <Parameter Name="size" Type="MonoTouch.CoreGraphics.CGSize" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="glTextureName">OpenGL texture name.</param>
        <param name="size">Desired size.</param>
        <param name="flipped">Whether the image should be flipped to turn OpenGL coordinates into CoreImage coordinates.</param>
        <param name="colorSpace">Colorspace to use.</param>
        <summary>Initializes a CoreImage image from an OpenGL texture, using the specific dimensions and colorspace.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.Foundation.NSData d, int bytesPerRow, System.Drawing.SizeF size, int pixelFormat, MonoTouch.CoreGraphics.CGColorSpace colorSpace);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSData d, int32 bytesPerRow, valuetype System.Drawing.SizeF size, int32 pixelFormat, class MonoTouch.CoreGraphics.CGColorSpace colorSpace) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public CIImage (MonoTouch.Foundation.NSData d, nint bytesPerRow, MonoTouch.CoreGraphics.CGSize size, int pixelFormat, MonoTouch.CoreGraphics.CGColorSpace colorSpace);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSData d, valuetype System.nint bytesPerRow, valuetype MonoTouch.CoreGraphics.CGSize size, int32 pixelFormat, class MonoTouch.CoreGraphics.CGColorSpace colorSpace) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithBitmapData:bytesPerRow:size:format:colorSpace:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="d" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="bytesPerRow" Type="System.Int32" apistyle="classic" />
        <Parameter Name="size" Type="System.Drawing.SizeF" apistyle="classic" />
        <Parameter Name="pixelFormat" Type="System.Int32" />
        <Parameter Name="colorSpace" Type="MonoTouch.CoreGraphics.CGColorSpace" />
        <Parameter Name="bytesPerRow" Type="System.nint" apistyle="unified" />
        <Parameter Name="size" Type="MonoTouch.CoreGraphics.CGSize" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="d">Contains the raw image.</param>
        <param name="bytesPerRow">Numbers of bytes per image row.</param>
        <param name="size">Image size</param>
        <param name="pixelFormat">The pixel format (one of the values in the Format properties in this class).</param>
        <param name="colorSpace">colorspace.</param>
        <summary>Initializes a CoreImage from raw block provided by NSData.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject Copy (MonoTouch.Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject Copy(class MonoTouch.Foundation.NSZone zone) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="MonoTouch.Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateByClampingToExtent">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreImage.CIImage CreateByClampingToExtent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.CoreImage.CIImage CreateByClampingToExtent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageByClampingToExtent")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.Mac_10_10)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new image by clamping the current image to the rectangle that is defined by its <see cref="P:MonoTouch.CoreImage.CIImage.Extent" /> property.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateByCompositingOverImage">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreImage.CIImage CreateByCompositingOverImage (MonoTouch.CoreImage.CIImage dest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.CoreImage.CIImage CreateByCompositingOverImage(class MonoTouch.CoreImage.CIImage dest) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageByCompositingOverImage:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="MonoTouch.CoreImage.CIImage" />
      </Parameters>
      <Docs>
        <param name="dest">To be added.</param>
        <summary>Creates a new image by compositing this <see cref="T:MonoTouch.CoreImage.CIImage" /> over <paramref name="dest" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateByFiltering">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreImage.CIImage CreateByFiltering (string filterName, MonoTouch.Foundation.NSDictionary inputParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.CoreImage.CIImage CreateByFiltering(string filterName, class MonoTouch.Foundation.NSDictionary inputParameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageByApplyingFilter:withInputParameters:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.Mac_10_10)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterName" Type="System.String" />
        <Parameter Name="inputParameters" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="filterName">To be added.</param>
        <param name="inputParameters">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new image by applying <paramref name="filterName" /> to this <see cref="T:MonoTouch.CoreImage.CIImage" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWithOrientation">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreImage.CIImage CreateWithOrientation (MonoTouch.CoreImage.CIImageOrientation orientation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.CoreImage.CIImage CreateWithOrientation(valuetype MonoTouch.CoreImage.CIImageOrientation orientation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageByApplyingOrientation:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.Mac_10_10)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orientation" Type="MonoTouch.CoreImage.CIImageOrientation" />
      </Parameters>
      <Docs>
        <param name="orientation">To be added.</param>
        <summary>Creates a new image by applying the <paramref name="orientation" /> to this <see cref="T:MonoTouch.CoreImage.CIImage" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the CIImage object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the CIImage class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the CIImage ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyImage">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIImage EmptyImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.CoreImage.CIImage EmptyImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("emptyImage")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The empty image.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (MonoTouch.Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class MonoTouch.Foundation.NSCoder encoder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:MonoTouch.Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:MonoTouch.Foundation.NSKeyedArchived" /> and then invoke the <see cref="M:MonoTouch.Foundation.NSKeyedArchived.ArchiveRootObjectToFile" /> which will call into this method</para>
          <para>If you want to allow your object to be archived, you should override this method and store your state in using the provided <see paramref="encoder" /> parameter.   In addition, you should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="c#">public void override EncodeTo (NSCoder coder){
    c.Encode (1, key: "version");
    c.Encode (userName, key: "userName");
    c.Encode (hostName, key: "hostName");</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extent">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.RectangleF Extent { get; }" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF Extent" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGRect Extent { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreGraphics.CGRect Extent" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("extent")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the extent of the image.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatARGB8">
      <MemberSignature Language="C#" Value="public static int FormatARGB8 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 FormatARGB8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("kCIFormatARGB8", "CoreImage")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCIFormatARGB8</summary>
        <value>
        </value>
        <remarks>32-bit color in ARGB format.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatBGRA8">
      <MemberSignature Language="C#" Value="public static int FormatBGRA8 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 FormatBGRA8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("kCIFormatBGRA8", "CoreImage")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCIFormatBGRA8</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatRGBA8">
      <MemberSignature Language="C#" Value="public static int FormatRGBA8 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 FormatRGBA8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("kCIFormatRGBA8", "CoreImage")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCIFormatRGBA8</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatRGBAf">
      <MemberSignature Language="C#" Value="public static int FormatRGBAf { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 FormatRGBAf" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("kCIFormatRGBAf", "CoreImage")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_7_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_7_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCIFormatRGBAf</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatRGBAh">
      <MemberSignature Language="C#" Value="public static int FormatRGBAh { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 FormatRGBAh" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("kCIFormatRGBAh", "CoreImage")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCIFormatRGBAh</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromCGImage">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIImage FromCGImage (MonoTouch.CoreGraphics.CGImage image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIImage FromCGImage(class MonoTouch.CoreGraphics.CGImage image) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageWithCGImage:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreGraphics.CGImage" />
      </Parameters>
      <Docs>
        <param name="image">CoreGraphics image.</param>
        <summary>Creates an <see cref="T:MonoTouch.CoreImage.CIImage" /> from a <see cref="T:MonoTouch.CoreGraphics.CGImage" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromCGImage">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIImage FromCGImage (MonoTouch.CoreGraphics.CGImage image, MonoTouch.CoreGraphics.CGColorSpace colorSpace);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIImage FromCGImage(class MonoTouch.CoreGraphics.CGImage image, class MonoTouch.CoreGraphics.CGColorSpace colorSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreGraphics.CGImage" />
        <Parameter Name="colorSpace" Type="MonoTouch.CoreGraphics.CGColorSpace" />
      </Parameters>
      <Docs>
        <param name="image">CoreGraphics image.</param>
        <param name="colorSpace">Colorspace to use.</param>
        <summary>Creates a <see cref="T:MonoTouch.CoreImage.CIImage" /> in <paramref name="colorspace" /> from a <see cref="T:MonoTouch.CoreGraphics.CGImage" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromCGImage">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIImage FromCGImage (MonoTouch.CoreGraphics.CGImage image, MonoTouch.CoreImage.CIImageInitializationOptionsWithMetadata options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIImage FromCGImage(class MonoTouch.CoreGraphics.CGImage image, class MonoTouch.CoreImage.CIImageInitializationOptionsWithMetadata options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreGraphics.CGImage" />
        <Parameter Name="options" Type="MonoTouch.CoreImage.CIImageInitializationOptionsWithMetadata" />
      </Parameters>
      <Docs>
        <param name="image">CoreGraphics image.</param>
        <param name="options">Options to initialize the image with.</param>
        <summary>Creates a <see cref="T:MonoTouch.CoreImage.CIImage" />  from a <see cref="T:MonoTouch.CoreGraphics.CGImage" /> with the specified <paramref name="options" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromCGImage">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIImage FromCGImage (MonoTouch.CoreGraphics.CGImage image, MonoTouch.Foundation.NSDictionary d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIImage FromCGImage(class MonoTouch.CoreGraphics.CGImage image, class MonoTouch.Foundation.NSDictionary d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageWithCGImage:options:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreGraphics.CGImage" />
        <Parameter Name="d" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="image">CoreGraphics image.</param>
        <param name="d">
          <para>Extra metadata, as an NSDictionary.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a <see cref="T:MonoTouch.CoreImage.CIImage" />  from a <see cref="T:MonoTouch.CoreGraphics.CGImage" /> with the specified metadata,  <paramref name="d" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromData">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIImage FromData (MonoTouch.Foundation.NSData data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIImage FromData(class MonoTouch.Foundation.NSData data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageWithData:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="MonoTouch.Foundation.NSData" />
      </Parameters>
      <Docs>
        <param name="data">Image data, in a format supported by the system.</param>
        <summary>Creates a new image from the specified <paramref name="data" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromData">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIImage FromData (MonoTouch.Foundation.NSData data, MonoTouch.CoreImage.CIImageInitializationOptionsWithMetadata options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIImage FromData(class MonoTouch.Foundation.NSData data, class MonoTouch.CoreImage.CIImageInitializationOptionsWithMetadata options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="options" Type="MonoTouch.CoreImage.CIImageInitializationOptionsWithMetadata" />
      </Parameters>
      <Docs>
        <param name="data">Image data, in a format supported by the system.</param>
        <param name="options">Options to initialize the image with.</param>
        <summary>Creates a new image from the specified <paramref name="data" /> and <paramref name="options" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromData">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIImage FromData (MonoTouch.Foundation.NSData data, MonoTouch.Foundation.NSDictionary d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIImage FromData(class MonoTouch.Foundation.NSData data, class MonoTouch.Foundation.NSDictionary d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageWithData:options:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="d" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="data">Image data, in a format supported by the system.</param>
        <param name="d">
          <para>Extra configuration options, as an NSDictionary.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new image from the specified <paramref name="data" /> and <paramref name="d" /> options dictionary.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromData">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIImage FromData (MonoTouch.Foundation.NSData bitmapData, int bytesPerRow, System.Drawing.SizeF size, int pixelFormat, MonoTouch.CoreGraphics.CGColorSpace colorSpace);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIImage FromData(class MonoTouch.Foundation.NSData bitmapData, int32 bytesPerRow, valuetype System.Drawing.SizeF size, int32 pixelFormat, class MonoTouch.CoreGraphics.CGColorSpace colorSpace) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIImage FromData (MonoTouch.Foundation.NSData bitmapData, nint bytesPerRow, MonoTouch.CoreGraphics.CGSize size, int pixelFormat, MonoTouch.CoreGraphics.CGColorSpace colorSpace);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIImage FromData(class MonoTouch.Foundation.NSData bitmapData, valuetype System.nint bytesPerRow, valuetype MonoTouch.CoreGraphics.CGSize size, int32 pixelFormat, class MonoTouch.CoreGraphics.CGColorSpace colorSpace) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageWithBitmapData:bytesPerRow:size:format:colorSpace:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmapData" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="bytesPerRow" Type="System.Int32" apistyle="classic" />
        <Parameter Name="size" Type="System.Drawing.SizeF" apistyle="classic" />
        <Parameter Name="pixelFormat" Type="System.Int32" />
        <Parameter Name="colorSpace" Type="MonoTouch.CoreGraphics.CGColorSpace" />
        <Parameter Name="bytesPerRow" Type="System.nint" apistyle="unified" />
        <Parameter Name="size" Type="MonoTouch.CoreGraphics.CGSize" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="bitmapData">Contains the raw image.</param>
        <param name="bytesPerRow">Numbers of bytes per image row.</param>
        <param name="size">Image size</param>
        <param name="pixelFormat">The pixel format (one of the values in the Format properties in this class).</param>
        <param name="colorSpace">
          <para>colorspace.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="colorSpace">
          <para>The colorspace to use.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new image from the specified <paramref name="data" /> and allows the app developer fine control.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromImageBuffer">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIImage FromImageBuffer (MonoTouch.CoreVideo.CVPixelBuffer buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIImage FromImageBuffer(class MonoTouch.CoreVideo.CVPixelBuffer buffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageWithCVPixelBuffer:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="MonoTouch.CoreVideo.CVPixelBuffer" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>Creates a new image from the data that is contained in <paramref name="buffer" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromImageBuffer">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIImage FromImageBuffer (MonoTouch.CoreVideo.CVPixelBuffer buffer, MonoTouch.CoreImage.CIImageInitializationOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIImage FromImageBuffer(class MonoTouch.CoreVideo.CVPixelBuffer buffer, class MonoTouch.CoreImage.CIImageInitializationOptions options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="MonoTouch.CoreVideo.CVPixelBuffer" />
        <Parameter Name="options" Type="MonoTouch.CoreImage.CIImageInitializationOptions" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="options">Options to initialize the image with.</param>
        <summary>Creates a new image from the data that is contained in <paramref name="buffer" /> by using the specified <paramref name="options" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromImageBuffer">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIImage FromImageBuffer (MonoTouch.CoreVideo.CVPixelBuffer buffer, MonoTouch.Foundation.NSDictionary dict);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIImage FromImageBuffer(class MonoTouch.CoreVideo.CVPixelBuffer buffer, class MonoTouch.Foundation.NSDictionary dict) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageWithCVPixelBuffer:options:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="MonoTouch.CoreVideo.CVPixelBuffer" />
        <Parameter Name="dict" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="dict">
          <para>Extra configuration options, as an NSDictionary.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new image from the data that is contained in <paramref name="buffer" /> by using the options that are specified in <paramref name="dict" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUrl">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIImage FromUrl (MonoTouch.Foundation.NSUrl url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIImage FromUrl(class MonoTouch.Foundation.NSUrl url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageWithContentsOfURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="MonoTouch.Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <summary>Creates a new <see cref="T:MonoTouch.CoreImage.CIImage" /> from <paramref name="url" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUrl">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIImage FromUrl (MonoTouch.Foundation.NSUrl url, MonoTouch.CoreImage.CIImageInitializationOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIImage FromUrl(class MonoTouch.Foundation.NSUrl url, class MonoTouch.CoreImage.CIImageInitializationOptions options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="options" Type="MonoTouch.CoreImage.CIImageInitializationOptions" />
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <param name="options">Options to initialize the image with.</param>
        <summary>Creates a new <see cref="T:MonoTouch.CoreImage.CIImage" /> from <paramref name="url" /> by using the the specified <paramref name="options" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUrl">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIImage FromUrl (MonoTouch.Foundation.NSUrl url, MonoTouch.Foundation.NSDictionary d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIImage FromUrl(class MonoTouch.Foundation.NSUrl url, class MonoTouch.Foundation.NSDictionary d) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageWithContentsOfURL:options:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="d" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <param name="d">
          <para>Extra configuration options, as an NSDictionary.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new <see cref="T:MonoTouch.CoreImage.CIImage" /> from <paramref name="url" /> by using the options that are specified in <paramref name="d" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAutoAdjustmentFilters">
      <MemberSignature Language="C#" Value="public MonoTouch.CoreImage.CIFilter[] GetAutoAdjustmentFilters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.CoreImage.CIFilter[] GetAutoAdjustmentFilters() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIFilter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the filters that are required to perform some common image correction steps to an image.</summary>
        <returns>Returns an array of configured filters to apply to the image to automatically adjust it.</returns>
        <remarks>
          <para>

	    In general, you should try to use the <see cref="M:MonoTouch.CoreImage.CIImage.GetAutoAdjustmentFilters(MonoTouch.CoreImage.CIAutoAdjustmentFilterOptions)" />
	    as that method allows you to customize which kind of filters you want to get.

	  </para>
          <para>

	    This method is used to get a list of pre-configured
	    filters to remedy various common problems found in photos.   

	  </para>
          <example>
            <code lang="c#">
void PrepareFixes (CIImage img)
{
    foreach (var filter in img.GetAutoAdjustmentFilters ()) {
    	filter.Image = img;
    	img = filter.OutputImage;
    }
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAutoAdjustmentFilters">
      <MemberSignature Language="C#" Value="public MonoTouch.CoreImage.CIFilter[] GetAutoAdjustmentFilters (MonoTouch.CoreImage.CIAutoAdjustmentFilterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.CoreImage.CIFilter[] GetAutoAdjustmentFilters(class MonoTouch.CoreImage.CIAutoAdjustmentFilterOptions options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIFilter[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MonoTouch.CoreImage.CIAutoAdjustmentFilterOptions" />
      </Parameters>
      <Docs>
        <param name="options">Options to initialize the image with.</param>
        <summary>Gets the filters requires to perform some common image correction steps to an image.</summary>
        <returns>Returns an array of configured filters to apply to the image to automatically adjust it.</returns>
        <remarks>
          <para>
	    
	    This method is used to get a list of pre-configured
	    filters to remedy various common problems found in photos.   

	  </para>
          <example>
            <code lang="c#">
void PrepareFixes (CIImage img)
{
    var opt = new CIAutoAdjustmentFilterOptions () {
    	RedEye = true,
    	AutoAdjustCrop = true
    };
    CIImage img = null;
    foreach (var filter in img.GetAutoAdjustmentFilters (opt)) {
    	filter.Image = img;
    	img = filter.OutputImage;
    }
}
	    </code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetImageTransform">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGAffineTransform GetImageTransform (MonoTouch.CoreImage.CIImageOrientation orientation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGAffineTransform GetImageTransform(valuetype MonoTouch.CoreImage.CIImageOrientation orientation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageTransformForOrientation:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.Mac_10_10)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orientation" Type="MonoTouch.CoreImage.CIImageOrientation" />
      </Parameters>
      <Docs>
        <param name="orientation">To be added.</param>
        <summary>Gets a transformation that results in <paramref name="orientation" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRegionOfInterest">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.RectangleF GetRegionOfInterest (MonoTouch.CoreImage.CIImage im, System.Drawing.RectangleF r);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.RectangleF GetRegionOfInterest(class MonoTouch.CoreImage.CIImage im, valuetype System.Drawing.RectangleF r) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGRect GetRegionOfInterest (MonoTouch.CoreImage.CIImage im, MonoTouch.CoreGraphics.CGRect r);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGRect GetRegionOfInterest(class MonoTouch.CoreImage.CIImage im, valuetype MonoTouch.CoreGraphics.CGRect r) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("regionOfInterestForImage:inRect:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="im" Type="MonoTouch.CoreImage.CIImage" />
        <Parameter Name="r" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="r" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="im">To be added.</param>
        <param name="r">To be added.</param>
        <summary>Gets a rectangle that describes the region in <paramref name="im" />, an image in the transformation list, that corresponds to <paramref name="r" /> in this <see cref="T:MonoTouch.CoreImage.CIImage" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageByApplyingTransform">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreImage.CIImage ImageByApplyingTransform (MonoTouch.CoreGraphics.CGAffineTransform matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.CoreImage.CIImage ImageByApplyingTransform(valuetype MonoTouch.CoreGraphics.CGAffineTransform matrix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageByApplyingTransform:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="MonoTouch.CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="matrix">To be added.</param>
        <summary>Returns a new image that results from applying the affine transform <paramref name="matrix" /> to this <see cref="T:MonoTouch.CoreImage.CIImage" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageByCroppingToRect">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreImage.CIImage ImageByCroppingToRect (System.Drawing.RectangleF r);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.CoreImage.CIImage ImageByCroppingToRect(valuetype System.Drawing.RectangleF r) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreImage.CIImage ImageByCroppingToRect (MonoTouch.CoreGraphics.CGRect r);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.CoreImage.CIImage ImageByCroppingToRect(valuetype MonoTouch.CoreGraphics.CGRect r) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageByCroppingToRect:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="r" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="r">To be added.</param>
        <summary>Creates a new image by cropping this <see cref="T:MonoTouch.CoreImage.CIImage" /> to the rectangle <paramref name="r" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageWithColor">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIImage ImageWithColor (MonoTouch.CoreImage.CIColor color);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIImage ImageWithColor(class MonoTouch.CoreImage.CIColor color) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageWithColor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="MonoTouch.CoreImage.CIColor" />
      </Parameters>
      <Docs>
        <param name="color">To be added.</param>
        <summary>Creates a new single-color image.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageWithTexture">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIImage ImageWithTexture (uint glTextureName, System.Drawing.SizeF size, bool flipped, MonoTouch.CoreGraphics.CGColorSpace colorspace);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIImage ImageWithTexture(unsigned int32 glTextureName, valuetype System.Drawing.SizeF size, bool flipped, class MonoTouch.CoreGraphics.CGColorSpace colorspace) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIImage ImageWithTexture (uint glTextureName, MonoTouch.CoreGraphics.CGSize size, bool flipped, MonoTouch.CoreGraphics.CGColorSpace colorspace);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIImage ImageWithTexture(unsigned int32 glTextureName, valuetype MonoTouch.CoreGraphics.CGSize size, bool flipped, class MonoTouch.CoreGraphics.CGColorSpace colorspace) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageWithTexture:size:flipped:colorSpace:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glTextureName" Type="System.UInt32" />
        <Parameter Name="size" Type="System.Drawing.SizeF" apistyle="classic" />
        <Parameter Name="flipped" Type="System.Boolean" />
        <Parameter Name="colorspace" Type="MonoTouch.CoreGraphics.CGColorSpace" />
        <Parameter Name="size" Type="MonoTouch.CoreGraphics.CGSize" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="glTextureName">To be added.</param>
        <param name="size">To be added.</param>
        <param name="flipped">To be added.</param>
        <param name="colorspace">To be added.</param>
        <summary>Creates an image from a named texture.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIImage op_Implicit (MonoTouch.CoreGraphics.CGImage image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class MonoTouch.CoreImage.CIImage op_Implicit(class MonoTouch.CoreGraphics.CGImage image) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreGraphics.CGImage" />
      </Parameters>
      <Docs>
        <param name="image">CoreGraphics image</param>
        <summary>Implicit constructor that wraps a CGImage as a CIImage.</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public MonoTouch.CoreGraphics.CGImageProperties Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.CoreGraphics.CGImageProperties Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGImageProperties</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection of metadata for this <see cref="T:MonoTouch.CoreImage.CIImage" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
