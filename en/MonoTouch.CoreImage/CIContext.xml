<Type Name="CIContext" FullName="MonoTouch.CoreImage.CIContext">
  <TypeSignature Language="C#" Value="public class CIContext : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CIContext extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo apistyle="old">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="new">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("CIContext", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Orchestrates the rendering of a CIFilter pipeline.</summary>
    <remarks>
      <para>
	The CIContext class is used to orchestrate the rendering of a
	pipeline of filters into one of the supported output surfaces.
      </para>
      <para>

	The CGContext can render its results into a CoreGraphics
	CGImage, render directly into the screen with one of the
	various Draw methods, into a CoreVideo CVPixelBuffer or into a CoreGraphics context.
      </para>
    </remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=e2a0ccca-ab10-4e41-9c09-11831a8c1380">coreimage</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIContext (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIContext (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIContext (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIContext Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIContext Create() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCGImage">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGImage CreateCGImage (MonoTouch.CoreImage.CIImage image, System.Drawing.RectangleF fromRectangle);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.CoreGraphics.CGImage CreateCGImage(class MonoTouch.CoreImage.CIImage image, valuetype System.Drawing.RectangleF fromRectangle) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGImage CreateCGImage (MonoTouch.CoreImage.CIImage image, MonoTouch.CoreGraphics.CGRect fromRectangle);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.CoreGraphics.CGImage CreateCGImage(class MonoTouch.CoreImage.CIImage image, valuetype MonoTouch.CoreGraphics.CGRect fromRectangle) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("createCGImage:fromRect:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGImage</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>MonoTouch.ObjCRuntime.Release</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreImage.CIImage" />
        <Parameter Name="fromRectangle" Type="System.Drawing.RectangleF" apistyle="old" />
        <Parameter Name="fromRectangle" Type="MonoTouch.CoreGraphics.CGRect" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="fromRectangle">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCGImage">
      <MemberSignature Language="C#" Value="public MonoTouch.CoreGraphics.CGImage CreateCGImage (MonoTouch.CoreImage.CIImage image, System.Drawing.RectangleF fromRect, MonoTouch.CoreImage.CIFormat ciImageFormat, MonoTouch.CoreGraphics.CGColorSpace colorSpace);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.CoreGraphics.CGImage CreateCGImage(class MonoTouch.CoreImage.CIImage image, valuetype System.Drawing.RectangleF fromRect, valuetype MonoTouch.CoreImage.CIFormat ciImageFormat, class MonoTouch.CoreGraphics.CGColorSpace colorSpace) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public MonoTouch.CoreGraphics.CGImage CreateCGImage (MonoTouch.CoreImage.CIImage image, MonoTouch.CoreGraphics.CGRect fromRect, MonoTouch.CoreImage.CIFormat ciImageFormat, MonoTouch.CoreGraphics.CGColorSpace colorSpace);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.CoreGraphics.CGImage CreateCGImage(class MonoTouch.CoreImage.CIImage image, valuetype MonoTouch.CoreGraphics.CGRect fromRect, valuetype MonoTouch.CoreImage.CIFormat ciImageFormat, class MonoTouch.CoreGraphics.CGColorSpace colorSpace) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreImage.CIImage" />
        <Parameter Name="fromRect" Type="System.Drawing.RectangleF" apistyle="old" />
        <Parameter Name="ciImageFormat" Type="MonoTouch.CoreImage.CIFormat" />
        <Parameter Name="colorSpace" Type="MonoTouch.CoreGraphics.CGColorSpace" />
        <Parameter Name="fromRect" Type="MonoTouch.CoreGraphics.CGRect" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="fromRect">To be added.</param>
        <param name="ciImageFormat">To be added.</param>
        <param name="colorSpace">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCGImage">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGImage CreateCGImage (MonoTouch.CoreImage.CIImage image, System.Drawing.RectangleF fromRect, int ciImageFormat, MonoTouch.CoreGraphics.CGColorSpace colorSpace);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.CoreGraphics.CGImage CreateCGImage(class MonoTouch.CoreImage.CIImage image, valuetype System.Drawing.RectangleF fromRect, int32 ciImageFormat, class MonoTouch.CoreGraphics.CGColorSpace colorSpace) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGImage CreateCGImage (MonoTouch.CoreImage.CIImage image, MonoTouch.CoreGraphics.CGRect fromRect, int ciImageFormat, MonoTouch.CoreGraphics.CGColorSpace colorSpace);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.CoreGraphics.CGImage CreateCGImage(class MonoTouch.CoreImage.CIImage image, valuetype MonoTouch.CoreGraphics.CGRect fromRect, int32 ciImageFormat, class MonoTouch.CoreGraphics.CGColorSpace colorSpace) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("createCGImage:fromRect:format:colorSpace:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGImage</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>MonoTouch.ObjCRuntime.Release</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreImage.CIImage" />
        <Parameter Name="fromRect" Type="System.Drawing.RectangleF" apistyle="old" />
        <Parameter Name="ciImageFormat" Type="System.Int32" />
        <Parameter Name="colorSpace" Type="MonoTouch.CoreGraphics.CGColorSpace" />
        <Parameter Name="fromRect" Type="MonoTouch.CoreGraphics.CGRect" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="fromRect">To be added.</param>
        <param name="ciImageFormat">To be added.</param>
        <param name="colorSpace">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public virtual void DrawImage (MonoTouch.CoreImage.CIImage image, System.Drawing.PointF atPoint, System.Drawing.RectangleF fromRect);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawImage(class MonoTouch.CoreImage.CIImage image, valuetype System.Drawing.PointF atPoint, valuetype System.Drawing.RectangleF fromRect) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual void DrawImage (MonoTouch.CoreImage.CIImage image, MonoTouch.CoreGraphics.CGPoint atPoint, MonoTouch.CoreGraphics.CGRect fromRect);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawImage(class MonoTouch.CoreImage.CIImage image, valuetype MonoTouch.CoreGraphics.CGPoint atPoint, valuetype MonoTouch.CoreGraphics.CGRect fromRect) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("drawImage:atPoint:fromRect:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Deprecated in iOS 6.0. Use DrawImage (CIImage, CGRect, CGRect) instead", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreImage.CIImage" />
        <Parameter Name="atPoint" Type="System.Drawing.PointF" apistyle="old" />
        <Parameter Name="fromRect" Type="System.Drawing.RectangleF" apistyle="old" />
        <Parameter Name="atPoint" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="new" />
        <Parameter Name="fromRect" Type="MonoTouch.CoreGraphics.CGRect" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="atPoint">To be added.</param>
        <param name="fromRect">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public virtual void DrawImage (MonoTouch.CoreImage.CIImage image, System.Drawing.RectangleF inRectangle, System.Drawing.RectangleF fromRectangle);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawImage(class MonoTouch.CoreImage.CIImage image, valuetype System.Drawing.RectangleF inRectangle, valuetype System.Drawing.RectangleF fromRectangle) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual void DrawImage (MonoTouch.CoreImage.CIImage image, MonoTouch.CoreGraphics.CGRect inRectangle, MonoTouch.CoreGraphics.CGRect fromRectangle);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawImage(class MonoTouch.CoreImage.CIImage image, valuetype MonoTouch.CoreGraphics.CGRect inRectangle, valuetype MonoTouch.CoreGraphics.CGRect fromRectangle) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("drawImage:inRect:fromRect:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreImage.CIImage" />
        <Parameter Name="inRectangle" Type="System.Drawing.RectangleF" apistyle="old" />
        <Parameter Name="fromRectangle" Type="System.Drawing.RectangleF" apistyle="old" />
        <Parameter Name="inRectangle" Type="MonoTouch.CoreGraphics.CGRect" apistyle="new" />
        <Parameter Name="fromRectangle" Type="MonoTouch.CoreGraphics.CGRect" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="inRectangle">To be added.</param>
        <param name="fromRectangle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromContext">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIContext FromContext (MonoTouch.OpenGLES.EAGLContext eaglContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIContext FromContext(class MonoTouch.OpenGLES.EAGLContext eaglContext) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("contextWithEAGLContext:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eaglContext" Type="MonoTouch.OpenGLES.EAGLContext" />
      </Parameters>
      <Docs>
        <param name="eaglContext">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromContext">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIContext FromContext (MonoTouch.OpenGLES.EAGLContext eaglContext, MonoTouch.Foundation.NSDictionary dictionary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIContext FromContext(class MonoTouch.OpenGLES.EAGLContext eaglContext, class MonoTouch.Foundation.NSDictionary dictionary) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("contextWithEAGLContext:options:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eaglContext" Type="MonoTouch.OpenGLES.EAGLContext" />
        <Parameter Name="dictionary" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="eaglContext">To be added.</param>
        <param name="dictionary">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromOptions">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIContext FromOptions (MonoTouch.CoreImage.CIContextOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIContext FromOptions(class MonoTouch.CoreImage.CIContextOptions options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MonoTouch.CoreImage.CIContextOptions" />
      </Parameters>
      <Docs>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InputImageMaximumSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.SizeF InputImageMaximumSize { get; }" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.SizeF InputImageMaximumSize" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGSize InputImageMaximumSize { get; }" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreGraphics.CGSize InputImageMaximumSize" apistyle="new" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("inputImageMaximumSize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="old">System.Drawing.SizeF</ReturnType>
        <ReturnType apistyle="new">MonoTouch.CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputImageMaximumSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.SizeF OutputImageMaximumSize { get; }" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.SizeF OutputImageMaximumSize" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGSize OutputImageMaximumSize { get; }" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreGraphics.CGSize OutputImageMaximumSize" apistyle="new" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("outputImageMaximumSize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="old">System.Drawing.SizeF</ReturnType>
        <ReturnType apistyle="new">MonoTouch.CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public virtual void Render (MonoTouch.CoreImage.CIImage image, MonoTouch.CoreVideo.CVPixelBuffer buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Render(class MonoTouch.CoreImage.CIImage image, class MonoTouch.CoreVideo.CVPixelBuffer buffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("render:toCVPixelBuffer:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreImage.CIImage" />
        <Parameter Name="buffer" Type="MonoTouch.CoreVideo.CVPixelBuffer" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public virtual void Render (MonoTouch.CoreImage.CIImage image, MonoTouch.CoreVideo.CVPixelBuffer buffer, System.Drawing.RectangleF rectangle, MonoTouch.CoreGraphics.CGColorSpace cs);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Render(class MonoTouch.CoreImage.CIImage image, class MonoTouch.CoreVideo.CVPixelBuffer buffer, valuetype System.Drawing.RectangleF rectangle, class MonoTouch.CoreGraphics.CGColorSpace cs) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual void Render (MonoTouch.CoreImage.CIImage image, MonoTouch.CoreVideo.CVPixelBuffer buffer, MonoTouch.CoreGraphics.CGRect rectangle, MonoTouch.CoreGraphics.CGColorSpace cs);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Render(class MonoTouch.CoreImage.CIImage image, class MonoTouch.CoreVideo.CVPixelBuffer buffer, valuetype MonoTouch.CoreGraphics.CGRect rectangle, class MonoTouch.CoreGraphics.CGColorSpace cs) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("render:toCVPixelBuffer:bounds:colorSpace:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreImage.CIImage" />
        <Parameter Name="buffer" Type="MonoTouch.CoreVideo.CVPixelBuffer" />
        <Parameter Name="rectangle" Type="System.Drawing.RectangleF" apistyle="old" />
        <Parameter Name="cs" Type="MonoTouch.CoreGraphics.CGColorSpace" />
        <Parameter Name="rectangle" Type="MonoTouch.CoreGraphics.CGRect" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="buffer">To be added.</param>
        <param name="rectangle">To be added.</param>
        <param name="cs">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderToBitmap">
      <MemberSignature Language="C#" Value="public virtual void RenderToBitmap (MonoTouch.CoreImage.CIImage image, IntPtr bitmapPtr, int bytesPerRow, System.Drawing.RectangleF bounds, int bitmapFormat, MonoTouch.CoreGraphics.CGColorSpace colorSpace);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderToBitmap(class MonoTouch.CoreImage.CIImage image, native int bitmapPtr, int32 bytesPerRow, valuetype System.Drawing.RectangleF bounds, int32 bitmapFormat, class MonoTouch.CoreGraphics.CGColorSpace colorSpace) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual void RenderToBitmap (MonoTouch.CoreImage.CIImage image, IntPtr bitmapPtr, nint bytesPerRow, MonoTouch.CoreGraphics.CGRect bounds, int bitmapFormat, MonoTouch.CoreGraphics.CGColorSpace colorSpace);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderToBitmap(class MonoTouch.CoreImage.CIImage image, native int bitmapPtr, valuetype System.nint bytesPerRow, valuetype MonoTouch.CoreGraphics.CGRect bounds, int32 bitmapFormat, class MonoTouch.CoreGraphics.CGColorSpace colorSpace) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("render:toBitmap:rowBytes:bounds:format:colorSpace:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreImage.CIImage" />
        <Parameter Name="bitmapPtr" Type="System.IntPtr" />
        <Parameter Name="bytesPerRow" Type="System.Int32" apistyle="old" />
        <Parameter Name="bounds" Type="System.Drawing.RectangleF" apistyle="old" />
        <Parameter Name="bitmapFormat" Type="System.Int32" />
        <Parameter Name="colorSpace" Type="MonoTouch.CoreGraphics.CGColorSpace" />
        <Parameter Name="bytesPerRow" Type="System.nint" apistyle="new" />
        <Parameter Name="bounds" Type="MonoTouch.CoreGraphics.CGRect" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="bitmapPtr">To be added.</param>
        <param name="bytesPerRow">To be added.</param>
        <param name="bounds">To be added.</param>
        <param name="bitmapFormat">To be added.</param>
        <param name="colorSpace">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
