<Type Name="CGImage" FullName="CoreGraphics.CGImage">
  <TypeSignature Language="C#" Value="public class CGImage : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CGImage extends System.Object implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents bitmap images and bitmap masks.</summary>
    <remarks>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CGImage (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CGImage (int width, int height, int bitsPerComponent, int bitsPerPixel, int bytesPerRow, CoreGraphics.CGColorSpace colorSpace, CoreGraphics.CGBitmapFlags bitmapFlags, CoreGraphics.CGDataProvider provider, nfloat[] decode, bool shouldInterpolate, CoreGraphics.CGColorRenderingIntent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 width, int32 height, int32 bitsPerComponent, int32 bitsPerPixel, int32 bytesPerRow, class CoreGraphics.CGColorSpace colorSpace, valuetype CoreGraphics.CGBitmapFlags bitmapFlags, class CoreGraphics.CGDataProvider provider, valuetype System.nfloat[] decode, bool shouldInterpolate, valuetype CoreGraphics.CGColorRenderingIntent intent) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="bitsPerComponent" Type="System.Int32" />
        <Parameter Name="bitsPerPixel" Type="System.Int32" />
        <Parameter Name="bytesPerRow" Type="System.Int32" />
        <Parameter Name="colorSpace" Type="CoreGraphics.CGColorSpace" />
        <Parameter Name="bitmapFlags" Type="CoreGraphics.CGBitmapFlags" />
        <Parameter Name="provider" Type="CoreGraphics.CGDataProvider" />
        <Parameter Name="decode" Type="System.nfloat[]" />
        <Parameter Name="shouldInterpolate" Type="System.Boolean" />
        <Parameter Name="intent" Type="CoreGraphics.CGColorRenderingIntent" />
      </Parameters>
      <Docs>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <param name="bitsPerComponent">To be added.</param>
        <param name="bitsPerPixel">To be added.</param>
        <param name="bytesPerRow">To be added.</param>
        <param name="colorSpace">To be added.</param>
        <param name="bitmapFlags">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="decode">To be added.</param>
        <param name="shouldInterpolate">To be added.</param>
        <param name="intent">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CGImage (int width, int height, int bitsPerComponent, int bitsPerPixel, int bytesPerRow, CoreGraphics.CGColorSpace colorSpace, CoreGraphics.CGImageAlphaInfo alphaInfo, CoreGraphics.CGDataProvider provider, nfloat[] decode, bool shouldInterpolate, CoreGraphics.CGColorRenderingIntent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 width, int32 height, int32 bitsPerComponent, int32 bitsPerPixel, int32 bytesPerRow, class CoreGraphics.CGColorSpace colorSpace, valuetype CoreGraphics.CGImageAlphaInfo alphaInfo, class CoreGraphics.CGDataProvider provider, valuetype System.nfloat[] decode, bool shouldInterpolate, valuetype CoreGraphics.CGColorRenderingIntent intent) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="bitsPerComponent" Type="System.Int32" />
        <Parameter Name="bitsPerPixel" Type="System.Int32" />
        <Parameter Name="bytesPerRow" Type="System.Int32" />
        <Parameter Name="colorSpace" Type="CoreGraphics.CGColorSpace" />
        <Parameter Name="alphaInfo" Type="CoreGraphics.CGImageAlphaInfo" />
        <Parameter Name="provider" Type="CoreGraphics.CGDataProvider" />
        <Parameter Name="decode" Type="System.nfloat[]" />
        <Parameter Name="shouldInterpolate" Type="System.Boolean" />
        <Parameter Name="intent" Type="CoreGraphics.CGColorRenderingIntent" />
      </Parameters>
      <Docs>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <param name="bitsPerComponent">To be added.</param>
        <param name="bitsPerPixel">To be added.</param>
        <param name="bytesPerRow">To be added.</param>
        <param name="colorSpace">To be added.</param>
        <param name="alphaInfo">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="decode">To be added.</param>
        <param name="shouldInterpolate">To be added.</param>
        <param name="intent">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlphaInfo">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGImageAlphaInfo AlphaInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGImageAlphaInfo AlphaInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGImageAlphaInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The bitmap configuration.</summary>
        <value>
        </value>
        <remarks>The configuration of the image</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitmapInfo">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGBitmapFlags BitmapInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGBitmapFlags BitmapInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGBitmapFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The bitmap configuration.</summary>
        <value>
        </value>
        <remarks>The configuration of the image.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitsPerComponent">
      <MemberSignature Language="C#" Value="public nint BitsPerComponent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint BitsPerComponent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bits per component</summary>
        <value>
        </value>
        <remarks>The number of bits used per component in the image.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitsPerPixel">
      <MemberSignature Language="C#" Value="public nint BitsPerPixel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint BitsPerPixel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of bits per pixel.</summary>
        <value>
        </value>
        <remarks>The number of bits used per pixel.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesPerRow">
      <MemberSignature Language="C#" Value="public nint BytesPerRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint BytesPerRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of bytes per row in the image.</summary>
        <value>
        </value>
        <remarks>The number of bytes used per row.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGImage Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CoreGraphics.CGImage Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Makes a copy of the image.</summary>
        <returns>
        </returns>
        <remarks>Duplicates the image.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColorSpace">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGColorSpace ColorSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreGraphics.CGColorSpace ColorSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGColorSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The image colorspace.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMask">
      <MemberSignature Language="C#" Value="public static CoreGraphics.CGImage CreateMask (int width, int height, int bitsPerComponent, int bitsPerPixel, int bytesPerRow, CoreGraphics.CGDataProvider provider, nfloat[] decode, bool shouldInterpolate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreGraphics.CGImage CreateMask(int32 width, int32 height, int32 bitsPerComponent, int32 bitsPerPixel, int32 bytesPerRow, class CoreGraphics.CGDataProvider provider, valuetype System.nfloat[] decode, bool shouldInterpolate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="bitsPerComponent" Type="System.Int32" />
        <Parameter Name="bitsPerPixel" Type="System.Int32" />
        <Parameter Name="bytesPerRow" Type="System.Int32" />
        <Parameter Name="provider" Type="CoreGraphics.CGDataProvider" />
        <Parameter Name="decode" Type="System.nfloat[]" />
        <Parameter Name="shouldInterpolate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <param name="bitsPerComponent">To be added.</param>
        <param name="bitsPerPixel">To be added.</param>
        <param name="bytesPerRow">To be added.</param>
        <param name="provider">To be added.</param>
        <param name="decode">To be added.</param>
        <param name="shouldInterpolate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataProvider">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGDataProvider DataProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreGraphics.CGDataProvider DataProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGDataProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the image's data provider.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public nfloat* Decode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat* Decode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.nfloat*</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an array of values that consist of upper and lower limits, into which the corresponding image pixel data are linearly interpolated for decoding.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resources used by the CGImage object.</summary>
        <remarks>
          <para>The Dispose method releases the resources used by the CGImage class.</para>
          <para>Calling the Dispose method when the application is finished using the CGImage ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.  For more information on releasing resources see ``Cleaning up Unmananaged Resources'' at http://msdn.microsoft.com/en-us/library/498928w2.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the CGImage object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the CGImage class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the CGImage ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~CGImage ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finalizer for the CGImage object</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromJPEG">
      <MemberSignature Language="C#" Value="public static CoreGraphics.CGImage FromJPEG (CoreGraphics.CGDataProvider provider, nfloat[] decode, bool shouldInterpolate, CoreGraphics.CGColorRenderingIntent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreGraphics.CGImage FromJPEG(class CoreGraphics.CGDataProvider provider, valuetype System.nfloat[] decode, bool shouldInterpolate, valuetype CoreGraphics.CGColorRenderingIntent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="CoreGraphics.CGDataProvider" />
        <Parameter Name="decode" Type="System.nfloat[]" />
        <Parameter Name="shouldInterpolate" Type="System.Boolean" />
        <Parameter Name="intent" Type="CoreGraphics.CGColorRenderingIntent" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <param name="decode">To be added.</param>
        <param name="shouldInterpolate">To be added.</param>
        <param name="intent">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromPNG">
      <MemberSignature Language="C#" Value="public static CoreGraphics.CGImage FromPNG (CoreGraphics.CGDataProvider provider, nfloat[] decode, bool shouldInterpolate, CoreGraphics.CGColorRenderingIntent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreGraphics.CGImage FromPNG(class CoreGraphics.CGDataProvider provider, valuetype System.nfloat[] decode, bool shouldInterpolate, valuetype CoreGraphics.CGColorRenderingIntent intent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="CoreGraphics.CGDataProvider" />
        <Parameter Name="decode" Type="System.nfloat[]" />
        <Parameter Name="shouldInterpolate" Type="System.Boolean" />
        <Parameter Name="intent" Type="CoreGraphics.CGColorRenderingIntent" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <param name="decode">To be added.</param>
        <param name="shouldInterpolate">To be added.</param>
        <param name="intent">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Handle (pointer) to the unmanaged object representation.</summary>
        <value>A pointer</value>
        <remarks>This IntPtr is a handle to the underlying unmanaged representation for this object.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public nint Height { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The image height in pixels.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMask">
      <MemberSignature Language="C#" Value="public bool IsMask { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this image is a mask or a bitmap.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderingIntent">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGColorRenderingIntent RenderingIntent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGColorRenderingIntent RenderingIntent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGColorRenderingIntent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The rendering intent.</summary>
        <value>
        </value>
        <remarks>The intent determines how to handle colors that are outside of the requested colorspace.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScreenImage">
      <MemberSignature Language="C#" Value="public static CoreGraphics.CGImage ScreenImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class CoreGraphics.CGImage ScreenImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Takes a screenshot.</summary>
        <value>A CGImage</value>
        <remarks>
          <para>This property will return a new image with the current contents of the screen.</para>
          <para> Since this is a new image from the screen, it will
	    generate a new image each time it is invoked.  On an
	    iPhone4S this will consume about 2 megs of memory
	    (960*640*3) that you might want to Dispose as soon as you are done using it, to return the memory to the operating system. 
	  </para>
          <para>

	    In particular if you are taking many screenshots in a
	    tight loop, you will want to ensure that the memory is
	    released as soon as you use it.  The following example
	    shows one way of explicitly disposing the memory.  It uses
	    an NSAutoReleasePool to ensure that the image is disposed
	    before we return control to the main loop processing.

	  </para>
          <example>
            <code lang="C#"><![CDATA[
//
// Notice that this does not return control to the main loop,
// so the images, even if disposed by the `using' statement
// would not be released, because they are added to the main
// loop NSAutoReleasePool.   This sample uses an explicit
// NSAutoReleasePool that is disposed immediately after 
// it is used.
//
while (true){
    using (var pool = new NSAutoreleasePool ()) {
        using (var img = CGImage.ScreenImage) {       
        
        	// Use the contents of the image.
        }
    }
}
	    ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldInterpolate">
      <MemberSignature Language="C#" Value="public bool ShouldInterpolate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldInterpolate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether interpolation is enabled for this image.</summary>
        <value>
        </value>
        <remarks>If the value is true, then Quartz will perform edge smoothing on the image.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UTType">
      <MemberSignature Language="C#" Value="public Foundation.NSString UTType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSString UTType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the image's universal type identifier.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public nint Width { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The image width in pixels.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithColorSpace">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGImage WithColorSpace (CoreGraphics.CGColorSpace cs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CoreGraphics.CGImage WithColorSpace(class CoreGraphics.CGColorSpace cs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cs" Type="CoreGraphics.CGColorSpace" />
      </Parameters>
      <Docs>
        <param name="cs">To be added.</param>
        <summary>Creates a copy of the image based on the specified colorspace.</summary>
        <returns>
        </returns>
        <remarks>This method could return null if the image is a mask, or if there is a colorspace component mismatch between the images.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithImageInRect">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGImage WithImageInRect (CoreGraphics.CGRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CoreGraphics.CGImage WithImageInRect(valuetype CoreGraphics.CGRect rect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="rect">Region to copy.</param>
        <summary>Creates a new image with the dimensions specified in the rectangle</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithMask">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGImage WithMask (CoreGraphics.CGImage mask);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CoreGraphics.CGImage WithMask(class CoreGraphics.CGImage mask) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mask" Type="CoreGraphics.CGImage" />
      </Parameters>
      <Docs>
        <param name="mask">The mask.</param>
        <summary>Creates a new image that has been masked with the specified mask.</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithMaskingColors">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGImage WithMaskingColors (nfloat[] components);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CoreGraphics.CGImage WithMaskingColors(valuetype System.nfloat[] components) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="components" Type="System.nfloat[]" />
      </Parameters>
      <Docs>
        <param name="components">Array contains pairs of (min,max) floats for each component.</param>
        <summary>Creats a new image by masking the values in the image with the specified components.</summary>
        <returns>
        </returns>
        <remarks>If the image has three components (RGB for example) the components array should contains six values.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
