<Type Name="CGContext" FullName="CoreGraphics.CGContext">
  <TypeSignature Language="C#" Value="public class CGContext : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CGContext extends System.Object implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:CoreGraphics.CGContext" />
  <TypeSignature Language="F#" Value="type CGContext = class&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Graphics context and primitives to draw in them.</summary>
    <remarks>
      <para>A <see cref="T:CoreGraphics.CGContext" /> is a Quartz 2D destination for drawing. It holds parameters and their states (set with functions such as <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=Core%20Graphics%20CGContext%20Set%20Fill%20Color&amp;scope=Xamarin" title="M:CoreGraphics.CGContext.SetFillColor*">M:CoreGraphics.CGContext.SetFillColor*</a></format>) and device information (for instance, <see cref="M:CoreGraphics.CGContext.ConvertSizeToDeviceSpace(CoreGraphics.CGSize)" />). <see cref="T:CoreGraphics.CGContext" />s may represent a screen area, a bitmap, a PDF document, or a printer.</para>
      <para>There are a limited number of <see cref="T:CoreGraphics.CGContext" />s available and application developer's should be conscientious about disposing of them after use. Generally, that means putting the drawing code in <c>using</c> blocks, as shown in the following example:</para>
      <example>
        <code lang="C#"><![CDATA[
public override void Draw (RectangleF rect)
{
    base.Draw (rect);
    using (var context = UIGraphics.GetCurrentContext ())
    {
        // draw a rectangle using a path
	var myRectangleButtonPath = new CGPath ();
	myRectangleButtonPath.AddRect (new RectangleF (new PointF (100, 10), new SizeF (200, 400)));
	context.AddPath (myRectangleButtonPath);
	context.DrawPath (CGPathDrawingMode.Stroke);
    }
}          
          ]]></code>
      </example>
      <para>The example additionally shows the very common pattern of an overridden <see cref="M:UIKit.UIView.Draw(CoreGraphics.CGRect)" /> method in a custom <see cref="T:UIKit.UIView" /> and the use of <see cref="M:UIKit.UIGraphics.GetImageFromCurrentImageContext" /> to retrieve the current <see cref="T:CoreGraphics.CGContext" /> on which to draw.</para>
    </remarks>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/AVTouchSample/">avTouch</related>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/Drawing/">Example_Drawing</related>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/QuartzSample/">QuartzSample</related>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/ZoomingPdfViewer/">ZoomingPdfViewer</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CGContext (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new CoreGraphics.CGContext : nativeint -&gt; CoreGraphics.CGContext" Usage="new CoreGraphics.CGContext handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Handle to an unmanaged CGContextRef.</param>
        <summary>Creates a CGContext from an unmanaged CGContextRef handle.</summary>
        <remarks>
	  Calling this constructor will retain the underlying CGContextRef object.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddArc">
      <MemberSignature Language="C#" Value="public void AddArc (nfloat x, nfloat y, nfloat radius, nfloat startAngle, nfloat endAngle, bool clockwise);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddArc(valuetype System.nfloat x, valuetype System.nfloat y, valuetype System.nfloat radius, valuetype System.nfloat startAngle, valuetype System.nfloat endAngle, bool clockwise) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.AddArc(System.nfloat,System.nfloat,System.nfloat,System.nfloat,System.nfloat,System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.AddArc : nfloat * nfloat * nfloat * nfloat * nfloat * bool -&gt; unit" Usage="cGContext.AddArc (x, y, radius, startAngle, endAngle, clockwise)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.nfloat" />
        <Parameter Name="y" Type="System.nfloat" />
        <Parameter Name="radius" Type="System.nfloat" />
        <Parameter Name="startAngle" Type="System.nfloat" />
        <Parameter Name="endAngle" Type="System.nfloat" />
        <Parameter Name="clockwise" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <param name="radius">To be added.</param>
        <param name="startAngle">To be added.</param>
        <param name="endAngle">To be added.</param>
        <param name="clockwise">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddArcToPoint">
      <MemberSignature Language="C#" Value="public void AddArcToPoint (nfloat x1, nfloat y1, nfloat x2, nfloat y2, nfloat radius);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddArcToPoint(valuetype System.nfloat x1, valuetype System.nfloat y1, valuetype System.nfloat x2, valuetype System.nfloat y2, valuetype System.nfloat radius) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.AddArcToPoint(System.nfloat,System.nfloat,System.nfloat,System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.AddArcToPoint : nfloat * nfloat * nfloat * nfloat * nfloat -&gt; unit" Usage="cGContext.AddArcToPoint (x1, y1, x2, y2, radius)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x1" Type="System.nfloat" />
        <Parameter Name="y1" Type="System.nfloat" />
        <Parameter Name="x2" Type="System.nfloat" />
        <Parameter Name="y2" Type="System.nfloat" />
        <Parameter Name="radius" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="x1">X value for the end point of the first tangent line.</param>
        <param name="y1">Y value for the end point of the first tangent line.</param>
        <param name="x2">X value for the end point of the second tangent line.</param>
        <param name="y2">Y value for the end point of the second tangent line.</param>
        <param name="radius">The radius for the arc.</param>
        <summary>Adds an arc to the current path.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCurveToPoint">
      <MemberSignature Language="C#" Value="public void AddCurveToPoint (nfloat cp1x, nfloat cp1y, nfloat cp2x, nfloat cp2y, nfloat x, nfloat y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCurveToPoint(valuetype System.nfloat cp1x, valuetype System.nfloat cp1y, valuetype System.nfloat cp2x, valuetype System.nfloat cp2y, valuetype System.nfloat x, valuetype System.nfloat y) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.AddCurveToPoint(System.nfloat,System.nfloat,System.nfloat,System.nfloat,System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.AddCurveToPoint : nfloat * nfloat * nfloat * nfloat * nfloat * nfloat -&gt; unit" Usage="cGContext.AddCurveToPoint (cp1x, cp1y, cp2x, cp2y, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp1x" Type="System.nfloat" />
        <Parameter Name="cp1y" Type="System.nfloat" />
        <Parameter Name="cp2x" Type="System.nfloat" />
        <Parameter Name="cp2y" Type="System.nfloat" />
        <Parameter Name="x" Type="System.nfloat" />
        <Parameter Name="y" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="cp1x">The x-value of the first control point.</param>
        <param name="cp1y">The y-value of the first control point.</param>
        <param name="cp2x">The x-value of the second control point.</param>
        <param name="cp2y">The y-value of the second control point.</param>
        <param name="x">The x-value at which the Bézier curve should end.</param>
        <param name="y">The y-value at which the Bézier curve should end.</param>
        <summary>Adds a cubic Bézier curve at the current point, with the specified control parameters.</summary>
        <remarks>
          <para>All coordinates are in user space coordinates.</para>
          <example>
            <code lang="C#"><![CDATA[
public override void Draw (RectangleF rect)
{
	base.Draw (rect);
	using (var ctxt = UIGraphics.GetCurrentContext ()) {
		var startingPoint = new PointF (100, 100);
		var controlPoint1 = new PointF (20, 100);
		var controlPoint2 = new PointF (4, 110);
		var endingPoint = new PointF (120, 120);

		ctxt.SetStrokeColor (UIColor.Red.CGColor);
		ctxt.MoveTo (startingPoint.X, startingPoint.Y);
		ctxt.AddCurveToPoint (controlPoint1.X, controlPoint1.Y, controlPoint2.X, controlPoint2.Y, endingPoint.X, endingPoint.Y);
		ctxt.StrokePath ();

		//Illustrate parameters
		ctxt.SetStrokeColor (UIColor.Black.CGColor);
		var sz = new SizeF (2, 2);
		Func<PointF,PointF> offset = (PointF pt) => new PointF(pt.X - 1, pt.Y - 1);
		ctxt.AddEllipseInRect (new RectangleF (offset(startingPoint),sz));
		ctxt.AddEllipseInRect (new RectangleF (offset(controlPoint1), sz));
		ctxt.AddEllipseInRect (new RectangleF (offset(controlPoint2), sz));
		ctxt.AddEllipseInRect (new RectangleF (offset(endingPoint), sz));
		ctxt.StrokePath();
	}
}
              ]]></code>
          </example>
          <para>
            <img href="xamarin-media/CoreGraphics/_images/CGContext.AddCurveToPoint.png" />
          </para>
          <para>
            <img href="xamarin-media/CoreGraphics/_images/B%C3%A9zier_3_big.gif" />
          </para>
          <para>(Animated image by Phil Tregoning. Image via http://commons.wikimedia.org/wiki/File:B%C3%A9zier_3_big.gif)</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEllipseInRect">
      <MemberSignature Language="C#" Value="public void AddEllipseInRect (CoreGraphics.CGRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddEllipseInRect(valuetype CoreGraphics.CGRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.AddEllipseInRect(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="member this.AddEllipseInRect : CoreGraphics.CGRect -&gt; unit" Usage="cGContext.AddEllipseInRect rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="rect">The bounding rectangle of the ellipse.</param>
        <summary>Adds an ellipse that fits in the specified <paramref name="rect" />.</summary>
        <remarks>
          <para>The ellipse is centered in the <paramref name="rect" />, with major and minor axes defined such that the ellipse touches the <paramref name="rect" />'s edges. The ellipse is a complete subpath, with control points specified in clockwise order.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLines">
      <MemberSignature Language="C#" Value="public void AddLines (CoreGraphics.CGPoint[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddLines(valuetype CoreGraphics.CGPoint[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.AddLines(CoreGraphics.CGPoint[])" />
      <MemberSignature Language="F#" Value="member this.AddLines : CoreGraphics.CGPoint[] -&gt; unit" Usage="cGContext.AddLines points" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="CoreGraphics.CGPoint[]" />
      </Parameters>
      <Docs>
        <param name="points">An array of two or more <see cref="T:System.Drawing.PointF" />s. Straight segments are added between sequential points.</param>
        <summary>Adds the given lines to the current path.</summary>
        <remarks>
          <para>Lines are added to the current path, with the first line segment beginning at <paramref name="points" />[0]. A line is not added from the <see cref="M:CoreGraphics.CGContext.GetPathCurrentPoint" />. In the following example, the current location of the <see cref="T:CoreGraphics.CGContext" /> is {20,20} after the call to <see cref="M:CoreGraphics.CGContext.MoveTo(System.nfloat,System.nfloat)" />, but as shown in the image, only two line segments are added.</para>
          <example>
            <code lang="C#"><![CDATA[
using (var ctxt = UIGraphics.GetCurrentContext ()) {
	var startingPoint = new PointF (20, 20);
	ctxt.MoveTo (startingPoint.X, startingPoint.Y);
	ctxt.SetStrokeColor (UIColor.Red.CGColor);
	var sz = new SizeF (2, 2);
	Func<PointF,PointF> offset = (PointF pt) => new PointF (pt.X - 1, pt.Y - 1);
	ctxt.AddEllipseInRect (new RectangleF (offset (startingPoint), sz));

	ctxt.AddLines (new PointF[] {
		new PointF (30, 30),
		new PointF (60, 30),
		new PointF (40, 40)
	});

	ctxt.StrokePath ();
}              
              ]]></code>
          </example>
          <para>
            <img href="xamarin-media/CoreGraphics/_images/CGContext.AddLines.png" />
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLineToPoint">
      <MemberSignature Language="C#" Value="public void AddLineToPoint (nfloat x, nfloat y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddLineToPoint(valuetype System.nfloat x, valuetype System.nfloat y) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.AddLineToPoint(System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.AddLineToPoint : nfloat * nfloat -&gt; unit" Usage="cGContext.AddLineToPoint (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.nfloat" />
        <Parameter Name="y" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="x">The X-value at which the line segment should end.</param>
        <param name="y">The Y-value at which the line segment should end.</param>
        <summary>Appends a line from the current point (see <see cref="M:CoreGraphics.CGContext.GetPathCurrentPoint" />) to the specified coordinates in user space.</summary>
        <remarks>
          <para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPath">
      <MemberSignature Language="C#" Value="public void AddPath (CoreGraphics.CGPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPath(class CoreGraphics.CGPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.AddPath(CoreGraphics.CGPath)" />
      <MemberSignature Language="F#" Value="member this.AddPath : CoreGraphics.CGPath -&gt; unit" Usage="cGContext.AddPath path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="CoreGraphics.CGPath" />
      </Parameters>
      <Docs>
        <param name="path">The <see cref="T:CoreGraphics.CGPath" /> to be added.</param>
        <summary>Adds the specified path to the current path.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddQuadCurveToPoint">
      <MemberSignature Language="C#" Value="public void AddQuadCurveToPoint (nfloat cpx, nfloat cpy, nfloat x, nfloat y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddQuadCurveToPoint(valuetype System.nfloat cpx, valuetype System.nfloat cpy, valuetype System.nfloat x, valuetype System.nfloat y) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.AddQuadCurveToPoint(System.nfloat,System.nfloat,System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.AddQuadCurveToPoint : nfloat * nfloat * nfloat * nfloat -&gt; unit" Usage="cGContext.AddQuadCurveToPoint (cpx, cpy, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cpx" Type="System.nfloat" />
        <Parameter Name="cpy" Type="System.nfloat" />
        <Parameter Name="x" Type="System.nfloat" />
        <Parameter Name="y" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="cpx">X value for the control point.</param>
        <param name="cpy">Y value for the control point.</param>
        <param name="x">X value for the end of the curve.</param>
        <param name="y">Y value for the end of the curve.</param>
        <summary>Adds a quadratic Bézier curve to the current path.</summary>
        <remarks>
          <para>All coordinates are in user space coordinates.</para>
          <example>
            <code lang="C#"><![CDATA[
public override void Draw (RectangleF rect)
{
	base.Draw (rect);
	using (var ctxt = UIGraphics.GetCurrentContext ()) {
		var startingPoint = new PointF (100, 100);
		var controlPoint = new PointF (20, 100);
		var endingPoint = new PointF (120, 120);

		ctxt.SetStrokeColor (UIColor.Red.CGColor);
		ctxt.MoveTo (startingPoint.X, startingPoint.Y);
		ctxt.AddQuadCurveToPoint (c.X, c.Y, endingPoint.X, endingPoint.Y);
		ctxt.StrokePath ();

		//Illustrate control point
		ctxt.SetStrokeColor (UIColor.Black.CGColor);
		var sz = new SizeF (2, 2);
		Func<PointF,PointF> offset = (PointF pt) => new PointF (pt.X - 1, pt.Y - 1);
		ctxt.AddEllipseInRect (new RectangleF (offset (startingPoint), sz));
		ctxt.AddEllipseInRect (new RectangleF (offset (c), sz));
		ctxt.AddEllipseInRect (new RectangleF (offset (endingPoint), sz));
		ctxt.StrokePath ();
	}
}              ]]></code>
          </example>
          <para>
            <img href="xamarin-media/CoreGraphics/_images/CGContext.AddQuadCurveToPoint.png" />
          </para>
          <para>
            <img href="xamarin-media/CoreGraphics/_images/B%C3%A9zier_2_big.gif" />
          </para>
          <para>(Animated image by Phil Tregoning. Image via http://commons.wikimedia.org/wiki/File:B%C3%A9zier_2_big.gif)</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRect">
      <MemberSignature Language="C#" Value="public void AddRect (CoreGraphics.CGRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRect(valuetype CoreGraphics.CGRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.AddRect(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="member this.AddRect : CoreGraphics.CGRect -&gt; unit" Usage="cGContext.AddRect rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="rect">A rectangle.</param>
        <summary>Adds a rectangular path to the current path.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRects">
      <MemberSignature Language="C#" Value="public void AddRects (CoreGraphics.CGRect[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRects(valuetype CoreGraphics.CGRect[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.AddRects(CoreGraphics.CGRect[])" />
      <MemberSignature Language="F#" Value="member this.AddRects : CoreGraphics.CGRect[] -&gt; unit" Usage="cGContext.AddRects rects" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rects" Type="CoreGraphics.CGRect[]" />
      </Parameters>
      <Docs>
        <param name="rects">An array of rectangles.</param>
        <summary>Adds an array of rectangular paths to the current path.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsBitmapContext">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGBitmapContext AsBitmapContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CoreGraphics.CGBitmapContext AsBitmapContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.AsBitmapContext" />
      <MemberSignature Language="F#" Value="member this.AsBitmapContext : unit -&gt; CoreGraphics.CGBitmapContext" Usage="cGContext.AsBitmapContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGBitmapContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Casts the CGContext into a CGBitmapContext.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
	    While there are different kinds of CGContext kinds (regular, bitmap and PDF), Apple does not support a way
	    to tell those apart.   Certain CGContext objects are actually known to be CGBitmapContext objects in a few
	    situations (calling <see cref="M:UIKit.UIGraphics.GetImageFromCurrentImageContext" /> after creating a 
	    context with <see cref="M:UIKit.UIGraphics.BeginImageContext(CoreGraphics.CGSize)" /> or <see cref="M:UIKit.UIGraphics.BeginImageContextWithOptions(CoreGraphics.CGSize,System.Boolean,System.nfloat)" />).
	  </para>
          <para>
	    Those are really CGBitmapContext objects and by converting it, application developers can access the various bitmap properties
	    on it.
	  </para>
          <example>
            <code lang="C#"><![CDATA[
UIGraphics.BeginImageContextWithOptions (image.Size, false, UIScreen.MainScreen.Scale);
CGBitmapContext effectInContext = UIGraphics.GetCurrentContext ().AsBitmapContext ()
 
// Now, you can access some interesting properties like "Data", "Width", 
// "Height", "BytesPerRow" from the underlying bitmap
 
var effectInBuffer = new vImageBuffer () {
        Data = effectInContext.Data,
        Width = effectInContext.Width,
        Height = effectInContext.Height,
        BytesPerRow = effectInContext.BytesPerRow
};
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginPage">
      <MemberSignature Language="C#" Value="public void BeginPage (Nullable&lt;CoreGraphics.CGRect&gt; rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginPage(valuetype System.Nullable`1&lt;valuetype CoreGraphics.CGRect&gt; rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.BeginPage(System.Nullable{CoreGraphics.CGRect})" />
      <MemberSignature Language="F#" Value="member this.BeginPage : Nullable&lt;CoreGraphics.CGRect&gt; -&gt; unit" Usage="cGContext.BeginPage rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Nullable&lt;CoreGraphics.CGRect&gt;" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginPath">
      <MemberSignature Language="C#" Value="public void BeginPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.BeginPath" />
      <MemberSignature Language="F#" Value="member this.BeginPath : unit -&gt; unit" Usage="cGContext.BeginPath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts a new path in the graphics context.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTransparencyLayer">
      <MemberSignature Language="C#" Value="public void BeginTransparencyLayer (Foundation.NSDictionary auxiliaryInfo = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginTransparencyLayer(class Foundation.NSDictionary auxiliaryInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.BeginTransparencyLayer(Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="member this.BeginTransparencyLayer : Foundation.NSDictionary -&gt; unit" Usage="cGContext.BeginTransparencyLayer auxiliaryInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="auxiliaryInfo" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="auxiliaryInfo">A dictionary of auxiliary information. May be <see langword="null" />.</param>
        <summary>With <see cref="M:CoreGraphics.CGContext.EndTransparencyLayer" />, encloses operations on a fully transparent layer.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:CoreGraphics.CGContext.BeginTransparencyLayer" />
      </Docs>
    </Member>
    <Member MemberName="BeginTransparencyLayer">
      <MemberSignature Language="C#" Value="public void BeginTransparencyLayer (CoreGraphics.CGRect rectangle, Foundation.NSDictionary auxiliaryInfo = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginTransparencyLayer(valuetype CoreGraphics.CGRect rectangle, class Foundation.NSDictionary auxiliaryInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.BeginTransparencyLayer(CoreGraphics.CGRect,Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="member this.BeginTransparencyLayer : CoreGraphics.CGRect * Foundation.NSDictionary -&gt; unit" Usage="cGContext.BeginTransparencyLayer (rectangle, auxiliaryInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rectangle" Type="CoreGraphics.CGRect" />
        <Parameter Name="auxiliaryInfo" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="rectangle">To be added.</param>
        <param name="auxiliaryInfo">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearRect">
      <MemberSignature Language="C#" Value="public void ClearRect (CoreGraphics.CGRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearRect(valuetype CoreGraphics.CGRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ClearRect(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="member this.ClearRect : CoreGraphics.CGRect -&gt; unit" Usage="cGContext.ClearRect rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to clear.</param>
        <summary>Paints the rectangle transparently.</summary>
        <remarks>
          <para>This method should only be used in window and bitmap contexts. In those situations, it effectively clears the <paramref name="rect" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public void Clip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clip() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.Clip" />
      <MemberSignature Language="F#" Value="member this.Clip : unit -&gt; unit" Usage="cGContext.Clip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets the current path of the graphics context to be the clipping path.</summary>
        <remarks>
          <para>The current path is changed to become the current clipping path, with interiors determined by the "non-zero winding rule" (see <see cref="T:CoreGraphics.CGPathDrawingMode" />). Any open subpaths are closed, as if the developer had called <see cref="M:CoreGraphics.CGContext.ClosePath" />. The current path of the <see cref="T:CoreGraphics.CGContext" /> is then reset.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipToMask">
      <MemberSignature Language="C#" Value="public void ClipToMask (CoreGraphics.CGRect rect, CoreGraphics.CGImage mask);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClipToMask(valuetype CoreGraphics.CGRect rect, class CoreGraphics.CGImage mask) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ClipToMask(CoreGraphics.CGRect,CoreGraphics.CGImage)" />
      <MemberSignature Language="F#" Value="member this.ClipToMask : CoreGraphics.CGRect * CoreGraphics.CGImage -&gt; unit" Usage="cGContext.ClipToMask (rect, mask)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
        <Parameter Name="mask" Type="CoreGraphics.CGImage" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <param name="mask">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipToRect">
      <MemberSignature Language="C#" Value="public void ClipToRect (CoreGraphics.CGRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClipToRect(valuetype CoreGraphics.CGRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ClipToRect(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="member this.ClipToRect : CoreGraphics.CGRect -&gt; unit" Usage="cGContext.ClipToRect rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="rect">A rectangle.</param>
        <summary>Modifies the clipping path to be the intersection of the current path and the supplied rectangle.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipToRects">
      <MemberSignature Language="C#" Value="public void ClipToRects (CoreGraphics.CGRect[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClipToRects(valuetype CoreGraphics.CGRect[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ClipToRects(CoreGraphics.CGRect[])" />
      <MemberSignature Language="F#" Value="member this.ClipToRects : CoreGraphics.CGRect[] -&gt; unit" Usage="cGContext.ClipToRects rects" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rects" Type="CoreGraphics.CGRect[]" />
      </Parameters>
      <Docs>
        <param name="rects">An array of rectangles.</param>
        <summary>Modifies the current clipping path to be the insersection of the current clipping path and the region specified by the supplied rectangles.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClosePath">
      <MemberSignature Language="C#" Value="public void ClosePath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClosePath() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ClosePath" />
      <MemberSignature Language="F#" Value="member this.ClosePath : unit -&gt; unit" Usage="cGContext.ClosePath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes and completes the current path.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConcatCTM">
      <MemberSignature Language="C#" Value="public void ConcatCTM (CoreGraphics.CGAffineTransform transform);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ConcatCTM(valuetype CoreGraphics.CGAffineTransform transform) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ConcatCTM(CoreGraphics.CGAffineTransform)" />
      <MemberSignature Language="F#" Value="member this.ConcatCTM : CoreGraphics.CGAffineTransform -&gt; unit" Usage="cGContext.ConcatCTM transform" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transform" Type="CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="transform">The <see cref="T:CoreGraphics.CGAffineTransform" /> to concatenate onto the current context transformation matrix.</param>
        <summary>Concatenates the specified <paramref name="transform" /> onto the current transformation matrix.</summary>
        <remarks>
          <para>The <paramref name="transform" /> is concatenated to the current context transformation matrix to create the new CTM. (The example in the discussion of <see cref="M:CoreGraphics.CGContext.GetCTM" /> illustrates <see cref="M:CoreGraphics.CGContext.ConcatCTM(CoreGraphics.CGAffineTransform)" />.)</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextFillRects">
      <MemberSignature Language="C#" Value="public void ContextFillRects (CoreGraphics.CGRect[] rects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ContextFillRects(valuetype CoreGraphics.CGRect[] rects) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ContextFillRects(CoreGraphics.CGRect[])" />
      <MemberSignature Language="F#" Value="member this.ContextFillRects : CoreGraphics.CGRect[] -&gt; unit" Usage="cGContext.ContextFillRects rects" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rects" Type="CoreGraphics.CGRect[]" />
      </Parameters>
      <Docs>
        <param name="rects">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertPointToUserSpace">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGPoint ConvertPointToUserSpace (CoreGraphics.CGPoint point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGPoint ConvertPointToUserSpace(valuetype CoreGraphics.CGPoint point) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ConvertPointToUserSpace(CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="member this.ConvertPointToUserSpace : CoreGraphics.CGPoint -&gt; CoreGraphics.CGPoint" Usage="cGContext.ConvertPointToUserSpace point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="point">A point.</param>
        <summary>Converts a point from device space coordinates to user space coordinates.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertRectToDeviceSpace">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect ConvertRectToDeviceSpace (CoreGraphics.CGRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGRect ConvertRectToDeviceSpace(valuetype CoreGraphics.CGRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ConvertRectToDeviceSpace(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="member this.ConvertRectToDeviceSpace : CoreGraphics.CGRect -&gt; CoreGraphics.CGRect" Usage="cGContext.ConvertRectToDeviceSpace rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="rect">A rectangle.</param>
        <summary>Converts a rectangle from user space coordinates to device space coordinates.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertRectToUserSpace">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect ConvertRectToUserSpace (CoreGraphics.CGRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGRect ConvertRectToUserSpace(valuetype CoreGraphics.CGRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ConvertRectToUserSpace(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="member this.ConvertRectToUserSpace : CoreGraphics.CGRect -&gt; CoreGraphics.CGRect" Usage="cGContext.ConvertRectToUserSpace rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="rect">A rectangle</param>
        <summary>Converts a rectangle from device space coordinates to user space coordinates.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertSizeToDeviceSpace">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGSize ConvertSizeToDeviceSpace (CoreGraphics.CGSize size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGSize ConvertSizeToDeviceSpace(valuetype CoreGraphics.CGSize size) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ConvertSizeToDeviceSpace(CoreGraphics.CGSize)" />
      <MemberSignature Language="F#" Value="member this.ConvertSizeToDeviceSpace : CoreGraphics.CGSize -&gt; CoreGraphics.CGSize" Usage="cGContext.ConvertSizeToDeviceSpace size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="CoreGraphics.CGSize" />
      </Parameters>
      <Docs>
        <param name="size">A size.</param>
        <summary>Converts a size from user space coordinates to device space coordinates.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertSizeToUserSpace">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGSize ConvertSizeToUserSpace (CoreGraphics.CGSize size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGSize ConvertSizeToUserSpace(valuetype CoreGraphics.CGSize size) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ConvertSizeToUserSpace(CoreGraphics.CGSize)" />
      <MemberSignature Language="F#" Value="member this.ConvertSizeToUserSpace : CoreGraphics.CGSize -&gt; CoreGraphics.CGSize" Usage="cGContext.ConvertSizeToUserSpace size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="CoreGraphics.CGSize" />
      </Parameters>
      <Docs>
        <param name="size">A size.</param>
        <summary>Converts a size from device space coordinates to user space coordinates.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyPath">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGPath CopyPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CoreGraphics.CGPath CopyPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.CopyPath" />
      <MemberSignature Language="F#" Value="member this.CopyPath : unit -&gt; CoreGraphics.CGPath" Usage="cGContext.CopyPath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPath</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a deep copy of the current path in the current context.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.Dispose" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="cGContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resources used by the CGContext object.</summary>
        <remarks>
          <para>The Dispose method releases the resources used by the CGContext class.</para>
          <para>Calling the Dispose method when the application is finished using the CGContext ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.  For more information on releasing resources see ``Cleaning up Unmananaged Resources'' at http://msdn.microsoft.com/en-us/library/498928w2.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="cGContext.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the CGContext object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the CGContext class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the CGContext ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public void DrawImage (CoreGraphics.CGRect rect, CoreGraphics.CGImage image);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawImage(valuetype CoreGraphics.CGRect rect, class CoreGraphics.CGImage image) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.DrawImage(CoreGraphics.CGRect,CoreGraphics.CGImage)" />
      <MemberSignature Language="F#" Value="member this.DrawImage : CoreGraphics.CGRect * CoreGraphics.CGImage -&gt; unit" Usage="cGContext.DrawImage (rect, image)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
        <Parameter Name="image" Type="CoreGraphics.CGImage" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <param name="image">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawLayer">
      <MemberSignature Language="C#" Value="public void DrawLayer (CoreGraphics.CGLayer layer, CoreGraphics.CGPoint point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLayer(class CoreGraphics.CGLayer layer, valuetype CoreGraphics.CGPoint point) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.DrawLayer(CoreGraphics.CGLayer,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="member this.DrawLayer : CoreGraphics.CGLayer * CoreGraphics.CGPoint -&gt; unit" Usage="cGContext.DrawLayer (layer, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layer" Type="CoreGraphics.CGLayer" />
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="layer">The layer to draw.</param>
        <param name="point">The point in user space where to draw the layer.</param>
        <summary>Draws a layer into the graphics context at the specified point.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawLayer">
      <MemberSignature Language="C#" Value="public void DrawLayer (CoreGraphics.CGLayer layer, CoreGraphics.CGRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLayer(class CoreGraphics.CGLayer layer, valuetype CoreGraphics.CGRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.DrawLayer(CoreGraphics.CGLayer,CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="member this.DrawLayer : CoreGraphics.CGLayer * CoreGraphics.CGRect -&gt; unit" Usage="cGContext.DrawLayer (layer, rect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layer" Type="CoreGraphics.CGLayer" />
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="layer">The layer to draw.</param>
        <param name="rect">The bounding box in user space in which to draw the layer.</param>
        <summary>Draws a layer into the graphics context bounded by the specified rectangle.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawLinearGradient">
      <MemberSignature Language="C#" Value="public void DrawLinearGradient (CoreGraphics.CGGradient gradient, CoreGraphics.CGPoint startPoint, CoreGraphics.CGPoint endPoint, CoreGraphics.CGGradientDrawingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawLinearGradient(class CoreGraphics.CGGradient gradient, valuetype CoreGraphics.CGPoint startPoint, valuetype CoreGraphics.CGPoint endPoint, valuetype CoreGraphics.CGGradientDrawingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.DrawLinearGradient(CoreGraphics.CGGradient,CoreGraphics.CGPoint,CoreGraphics.CGPoint,CoreGraphics.CGGradientDrawingOptions)" />
      <MemberSignature Language="F#" Value="member this.DrawLinearGradient : CoreGraphics.CGGradient * CoreGraphics.CGPoint * CoreGraphics.CGPoint * CoreGraphics.CGGradientDrawingOptions -&gt; unit" Usage="cGContext.DrawLinearGradient (gradient, startPoint, endPoint, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gradient" Type="CoreGraphics.CGGradient" />
        <Parameter Name="startPoint" Type="CoreGraphics.CGPoint" />
        <Parameter Name="endPoint" Type="CoreGraphics.CGPoint" />
        <Parameter Name="options" Type="CoreGraphics.CGGradientDrawingOptions" />
      </Parameters>
      <Docs>
        <param name="gradient">To be added.</param>
        <param name="startPoint">To be added.</param>
        <param name="endPoint">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPath">
      <MemberSignature Language="C#" Value="public void DrawPath (CoreGraphics.CGPathDrawingMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPath(valuetype CoreGraphics.CGPathDrawingMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.DrawPath(CoreGraphics.CGPathDrawingMode)" />
      <MemberSignature Language="F#" Value="member this.DrawPath : CoreGraphics.CGPathDrawingMode -&gt; unit" Usage="cGContext.DrawPath mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="CoreGraphics.CGPathDrawingMode" />
      </Parameters>
      <Docs>
        <param name="mode">The <see cref="T:CoreGraphics.CGPathDrawingMode" /> for the the path.</param>
        <summary>Draws the <see cref="T:CoreGraphics.CGContext" />'s current path.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPDFPage">
      <MemberSignature Language="C#" Value="public void DrawPDFPage (CoreGraphics.CGPDFPage page);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawPDFPage(class CoreGraphics.CGPDFPage page) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.DrawPDFPage(CoreGraphics.CGPDFPage)" />
      <MemberSignature Language="F#" Value="member this.DrawPDFPage : CoreGraphics.CGPDFPage -&gt; unit" Usage="cGContext.DrawPDFPage page" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="CoreGraphics.CGPDFPage" />
      </Parameters>
      <Docs>
        <param name="page">The PDF page to be rendered.</param>
        <summary>Renders the specified PDF <paramref name="page" />.</summary>
        <remarks>
          <para>The following example shows how to render the first page of a PDF file:</para>
          <example>
            <code lang="C#"><![CDATA[
doc = CGPDFDocument.FromFile (Path.Combine (NSBundle.MainBundle.BundlePath, "Images/QuartzImageDrawing.pdf"));
if (doc == null)
		throw new Exception ("Could not load document");

using (var ctxt = UIGraphics.GetCurrentContext ()) {
  // PDF page drawing expects a Lower-Left coordinate system, so we flip the coordinate system
	// before we start drawing.
	context.TranslateCTM (0, Bounds.Height);
	context.ScaleCTM (1, -1);

	// Grab the first PDF page
	using (CGPDFPage page = doc.GetPage (1)){
		// We're about to modify the context CTM to draw the PDF page where we want it, so save the graphics state in case we want to do more drawing
		context.SaveState ();
		
		// CGPDFPageGetDrawingTransform provides an easy way to get the transform for a PDF page. It will scale down to fit, including any
		// base rotations necessary to display the PDF page correctly.
		
		CGAffineTransform pdfTransform = page.GetDrawingTransform (CGPDFBox.Crop, Bounds, 0, true);

		// And apply the transform.
		context.ConcatCTM (pdfTransform);
		// Finally, we draw the page and restore the graphics state for further manipulations!
		context.DrawPDFPage (page);
		context.RestoreState();
	}				
}
          ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawRadialGradient">
      <MemberSignature Language="C#" Value="public void DrawRadialGradient (CoreGraphics.CGGradient gradient, CoreGraphics.CGPoint startCenter, nfloat startRadius, CoreGraphics.CGPoint endCenter, nfloat endRadius, CoreGraphics.CGGradientDrawingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawRadialGradient(class CoreGraphics.CGGradient gradient, valuetype CoreGraphics.CGPoint startCenter, valuetype System.nfloat startRadius, valuetype CoreGraphics.CGPoint endCenter, valuetype System.nfloat endRadius, valuetype CoreGraphics.CGGradientDrawingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.DrawRadialGradient(CoreGraphics.CGGradient,CoreGraphics.CGPoint,System.nfloat,CoreGraphics.CGPoint,System.nfloat,CoreGraphics.CGGradientDrawingOptions)" />
      <MemberSignature Language="F#" Value="member this.DrawRadialGradient : CoreGraphics.CGGradient * CoreGraphics.CGPoint * nfloat * CoreGraphics.CGPoint * nfloat * CoreGraphics.CGGradientDrawingOptions -&gt; unit" Usage="cGContext.DrawRadialGradient (gradient, startCenter, startRadius, endCenter, endRadius, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gradient" Type="CoreGraphics.CGGradient" />
        <Parameter Name="startCenter" Type="CoreGraphics.CGPoint" />
        <Parameter Name="startRadius" Type="System.nfloat" />
        <Parameter Name="endCenter" Type="CoreGraphics.CGPoint" />
        <Parameter Name="endRadius" Type="System.nfloat" />
        <Parameter Name="options" Type="CoreGraphics.CGGradientDrawingOptions" />
      </Parameters>
      <Docs>
        <param name="gradient">To be added.</param>
        <param name="startCenter">To be added.</param>
        <param name="startRadius">To be added.</param>
        <param name="endCenter">To be added.</param>
        <param name="endRadius">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawShading">
      <MemberSignature Language="C#" Value="public void DrawShading (CoreGraphics.CGShading shading);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawShading(class CoreGraphics.CGShading shading) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.DrawShading(CoreGraphics.CGShading)" />
      <MemberSignature Language="F#" Value="member this.DrawShading : CoreGraphics.CGShading -&gt; unit" Usage="cGContext.DrawShading shading" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shading" Type="CoreGraphics.CGShading" />
      </Parameters>
      <Docs>
        <param name="shading">The <see cref="T:CoreGraphics.CGShading" /> to be drawn.</param>
        <summary>Renders the specified <paramref name="shading" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawTiledImage">
      <MemberSignature Language="C#" Value="public void DrawTiledImage (CoreGraphics.CGRect rect, CoreGraphics.CGImage image);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawTiledImage(valuetype CoreGraphics.CGRect rect, class CoreGraphics.CGImage image) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.DrawTiledImage(CoreGraphics.CGRect,CoreGraphics.CGImage)" />
      <MemberSignature Language="F#" Value="member this.DrawTiledImage : CoreGraphics.CGRect * CoreGraphics.CGImage -&gt; unit" Usage="cGContext.DrawTiledImage (rect, image)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
        <Parameter Name="image" Type="CoreGraphics.CGImage" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <param name="image">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndPage">
      <MemberSignature Language="C#" Value="public void EndPage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndPage() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.EndPage" />
      <MemberSignature Language="F#" Value="member this.EndPage : unit -&gt; unit" Usage="cGContext.EndPage " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called to indicate the end of a page in a page-based context.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndTransparencyLayer">
      <MemberSignature Language="C#" Value="public void EndTransparencyLayer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndTransparencyLayer() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.EndTransparencyLayer" />
      <MemberSignature Language="F#" Value="member this.EndTransparencyLayer : unit -&gt; unit" Usage="cGContext.EndTransparencyLayer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates the end of a transparency layer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EOClip">
      <MemberSignature Language="C#" Value="public void EOClip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EOClip() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.EOClip" />
      <MemberSignature Language="F#" Value="member this.EOClip : unit -&gt; unit" Usage="cGContext.EOClip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Modifies the current clipping path, using the Even-Odd rule.</summary>
        <remarks>
          <para>For an explanation of the Even-Odd and Non-Zero Winding rule, see <see cref="T:CoreGraphics.CGPathDrawingMode" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EOFillPath">
      <MemberSignature Language="C#" Value="public void EOFillPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EOFillPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.EOFillPath" />
      <MemberSignature Language="F#" Value="member this.EOFillPath : unit -&gt; unit" Usage="cGContext.EOFillPath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fills the current path, using the Even-Odd rule.</summary>
        <remarks>
          <para>For an explanation of the Even-Odd and Non-Zero Winding rule, see <see cref="T:CoreGraphics.CGPathDrawingMode" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillEllipseInRect">
      <MemberSignature Language="C#" Value="public void FillEllipseInRect (CoreGraphics.CGRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillEllipseInRect(valuetype CoreGraphics.CGRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.FillEllipseInRect(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="member this.FillEllipseInRect : CoreGraphics.CGRect -&gt; unit" Usage="cGContext.FillEllipseInRect rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="rect">The <see cref="T:System.Drawing.RectangleF" /> defining the ellipse's extent.</param>
        <summary>Paints the ellipse defined by <paramref name="rect" />. Afterwards, the current path is reset.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FillPath">
      <MemberSignature Language="C#" Value="public void FillPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.FillPath" />
      <MemberSignature Language="F#" Value="member this.FillPath : unit -&gt; unit" Usage="cGContext.FillPath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fills the current path, using Non-Zero Winding rule.</summary>
        <remarks>
          <para>For an explanation of the Even-Odd and Non-Zero Winding rule, see <see cref="T:CoreGraphics.CGPathDrawingMode" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillRect">
      <MemberSignature Language="C#" Value="public void FillRect (CoreGraphics.CGRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FillRect(valuetype CoreGraphics.CGRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.FillRect(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="member this.FillRect : CoreGraphics.CGRect -&gt; unit" Usage="cGContext.FillRect rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="rect">The <see cref="T:System.Drawing.RectangleF" /> to be filled.</param>
        <summary>Paints the specified <paramref name="rect" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~CGContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.Finalize" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="cGContext.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finalizer for the CGContext object</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.Flush" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="cGContext.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Forces all pending drawing to be rendered.</summary>
        <remarks>
          <para>Calling this method is not necessary under normal circumstances. Calling this method frequently may harm performance.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClipBoundingBox">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect GetClipBoundingBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGRect GetClipBoundingBox() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.GetClipBoundingBox" />
      <MemberSignature Language="F#" Value="member this.GetClipBoundingBox : unit -&gt; CoreGraphics.CGRect" Usage="cGContext.GetClipBoundingBox " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The bounding box of the current clipping path.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCTM">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGAffineTransform GetCTM ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGAffineTransform GetCTM() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.GetCTM" />
      <MemberSignature Language="F#" Value="member this.GetCTM : unit -&gt; CoreGraphics.CGAffineTransform" Usage="cGContext.GetCTM " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves the current Context Transformation Matrix.</summary>
        <returns>The <see cref="T:CoreGraphics.CGAffineTransform" /> currently being used by the <see cref="T:CoreGraphics.CGContext" />.</returns>
        <remarks>
          <para>The <see cref="T:CoreGraphics.CGContext" /> has, as part of its drawing state, a <see cref="T:CoreGraphics.CGAffineTransform" /> called the Context Transformation Matrix (CTM).</para>
          <para>By default, the CTM's X and Y axes increase to the right and downward, as indicated by the red rays in the following image. </para>
          <para>A common transform is to locate the origin in the lower left-hand corner, with X and Y increasing to the right and upward, as shown with the green rays in the following image (note that, for visibility, the rays are set to originate at (5,5) rather than (0,0)). This is done with <c>ScaleCTM(1,-1)</c> and  <c>TranslateCTM(0, -Bounds.Height)</c> (see example below).</para>
          <para>More complex transforms are, possible, as illustrated by the blue rays, which illustrate a transform that is both translated and rotated. Note that manipulation of the CTM is stateful and order-dependent: the final transform is translated and rotated relative to the CTM used to the draw the 2nd-to-last green rays.</para>
          <para>
            <img href="xamarin-media/CoreGraphics/_images/CGContext.CTM.png" />
          </para>
          <para>The following example shows the manipulation of the CTM to create the example image.</para>
          <example>
            <code lang="C#"><![CDATA[
public override void Draw (RectangleF rect)
{
	base.Draw (rect);

	using (var ctxt = UIGraphics.GetCurrentContext ()) {
		DrawRay (ctxt, new PointF (5, 5), new PointF (105, 5), UIColor.Red.CGColor);
		DrawRay (ctxt, new PointF (5, 5), new PointF (5, 105), UIColor.Red.CGColor);
		ctxt.ScaleCTM (1, -1);
		ctxt.TranslateCTM (0, -Bounds.Height);
		DrawRay (ctxt, new PointF (5, 5), new PointF (105, 5), UIColor.Green.CGColor);
		DrawRay (ctxt, new PointF (5, 5), new PointF (5, 105), UIColor.Green.CGColor);

		var cos = .707f;
		var sin = -.707f;
		var xform = new CGAffineTransform (cos, sin, -sin, cos, Bounds.Width / 2, 100);

		ctxt.ConcatCTM (xform);
		DrawRay (ctxt, new PointF (0, 0), new PointF (100, 0), UIColor.Blue.CGColor);
		DrawRay (ctxt, new PointF (0, 0), new PointF (0, 100), UIColor.Blue.CGColor);

	}
}              
              ]]></code>
          </example>
        </remarks>
        <altmember cref="M:CoreGraphics.CGContext.ConcatCTM" />
        <altmember cref="M:CoreGraphics.CGContext.RotateCTM" />
        <altmember cref="M:CoreGraphics.CGContext.ScaleCTM" />
        <altmember cref="M:CoreGraphics.CGContext.TranslateCTM" />
      </Docs>
    </Member>
    <Member MemberName="GetPathBoundingBox">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect GetPathBoundingBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGRect GetPathBoundingBox() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.GetPathBoundingBox" />
      <MemberSignature Language="F#" Value="member this.GetPathBoundingBox : unit -&gt; CoreGraphics.CGRect" Usage="cGContext.GetPathBoundingBox " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the bounding box for the current path.</summary>
        <returns>The bounding box for the current path.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPathCurrentPoint">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGPoint GetPathCurrentPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGPoint GetPathCurrentPoint() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.GetPathCurrentPoint" />
      <MemberSignature Language="F#" Value="member this.GetPathCurrentPoint : unit -&gt; CoreGraphics.CGPoint" Usage="cGContext.GetPathCurrentPoint " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The current point in the <see cref="T:CoreGraphics.CGContext" />'s path.</summary>
        <returns>The current point in the <see cref="T:CoreGraphics.CGContext" />'s path.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUserSpaceToDeviceSpaceTransform">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGAffineTransform GetUserSpaceToDeviceSpaceTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGAffineTransform GetUserSpaceToDeviceSpaceTransform() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.GetUserSpaceToDeviceSpaceTransform" />
      <MemberSignature Language="F#" Value="member this.GetUserSpaceToDeviceSpaceTransform : unit -&gt; CoreGraphics.CGAffineTransform" Usage="cGContext.GetUserSpaceToDeviceSpaceTransform " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The <see cref="T:CoreGraphics.CGAffineTransform" /> that maps user-space coordinates into device-space coordinates.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:CoreGraphics.CGContext.Handle" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="CoreGraphics.CGContext.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Handle (pointer) to the unmanaged object representation.</summary>
        <value>A pointer</value>
        <remarks>This IntPtr is a handle to the underlying unmanaged representation for this object.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolationQuality">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGInterpolationQuality InterpolationQuality { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGInterpolationQuality InterpolationQuality" />
      <MemberSignature Language="DocId" Value="P:CoreGraphics.CGContext.InterpolationQuality" />
      <MemberSignature Language="F#" Value="member this.InterpolationQuality : CoreGraphics.CGInterpolationQuality with get, set" Usage="CoreGraphics.CGContext.InterpolationQuality" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGInterpolationQuality</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A hint for the level of quality used when interpolating images (for example, when scaling).</summary>
        <value>To be added.</value>
        <remarks>
          <para>
            <see cref="P:CoreGraphics.CGContext.InterpolationQuality" /> is only a hint. Not all contexts support all <see cref="T:CoreGraphics.CGInterpolationQuality" /> values.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPathEmpty">
      <MemberSignature Language="C#" Value="public bool IsPathEmpty ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsPathEmpty() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.IsPathEmpty" />
      <MemberSignature Language="F#" Value="member this.IsPathEmpty : unit -&gt; bool" Usage="cGContext.IsPathEmpty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Whether the current path contains any subpaths.</summary>
        <returns>
          <see langword="true" /> if the current path does not contain any subpaths.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (nfloat x, nfloat y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(valuetype System.nfloat x, valuetype System.nfloat y) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.MoveTo(System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.MoveTo : nfloat * nfloat -&gt; unit" Usage="cGContext.MoveTo (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.nfloat" />
        <Parameter Name="y" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="x">The X position of the new subpath, in user-space coordinates.</param>
        <param name="y">The Y position of the new subpath, in user-space coordinates.</param>
        <summary>Begins a sub-path at the specified position.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PathContainsPoint">
      <MemberSignature Language="C#" Value="public bool PathContainsPoint (CoreGraphics.CGPoint point, CoreGraphics.CGPathDrawingMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool PathContainsPoint(valuetype CoreGraphics.CGPoint point, valuetype CoreGraphics.CGPathDrawingMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.PathContainsPoint(CoreGraphics.CGPoint,CoreGraphics.CGPathDrawingMode)" />
      <MemberSignature Language="F#" Value="member this.PathContainsPoint : CoreGraphics.CGPoint * CoreGraphics.CGPathDrawingMode -&gt; bool" Usage="cGContext.PathContainsPoint (point, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
        <Parameter Name="mode" Type="CoreGraphics.CGPathDrawingMode" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <param name="mode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PointToDeviceSpace">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGPoint PointToDeviceSpace (CoreGraphics.CGPoint point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGPoint PointToDeviceSpace(valuetype CoreGraphics.CGPoint point) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.PointToDeviceSpace(CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="member this.PointToDeviceSpace : CoreGraphics.CGPoint -&gt; CoreGraphics.CGPoint" Usage="cGContext.PointToDeviceSpace point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="point">A point in user-space coordinates.</param>
        <summary>Returns a new <see cref="T:System.Drawing.PointF" /> that converts the user-space <paramref name="point" /> into device space.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplacePathWithStrokedPath">
      <MemberSignature Language="C#" Value="public void ReplacePathWithStrokedPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplacePathWithStrokedPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ReplacePathWithStrokedPath" />
      <MemberSignature Language="F#" Value="member this.ReplacePathWithStrokedPath : unit -&gt; unit" Usage="cGContext.ReplacePathWithStrokedPath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Replaces the current path with the stroked version of the path, based on the stroke paremeters.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetClip">
      <MemberSignature Language="C#" Value="public void ResetClip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetClip() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ResetClip" />
      <MemberSignature Language="F#" Value="member this.ResetClip : unit -&gt; unit" Usage="cGContext.ResetClip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.TV(11, 0)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Watch(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreState">
      <MemberSignature Language="C#" Value="public void RestoreState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RestoreState() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.RestoreState" />
      <MemberSignature Language="F#" Value="member this.RestoreState : unit -&gt; unit" Usage="cGContext.RestoreState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets the state of the <see cref="T:CoreGraphics.CGContext" /> to what it was when <see cref="M:CoreGraphics.CGContext.SaveState" /> was last called.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateCTM">
      <MemberSignature Language="C#" Value="public void RotateCTM (nfloat angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateCTM(valuetype System.nfloat angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.RotateCTM(System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.RotateCTM : nfloat -&gt; unit" Usage="cGContext.RotateCTM angle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="angle">Angle, in radians, with positive values counterclockwise.</param>
        <summary>Rotates the current transformation matrix by <paramref name="angle" /> radians, with positive values rotating counterclockwise.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveState">
      <MemberSignature Language="C#" Value="public void SaveState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveState() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SaveState" />
      <MemberSignature Language="F#" Value="member this.SaveState : unit -&gt; unit" Usage="cGContext.SaveState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stores the state of the <see cref="T:CoreGraphics.CGContext" />. (See <see cref="M:CoreGraphics.CGContext.RestoreState" />.)</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleCTM">
      <MemberSignature Language="C#" Value="public void ScaleCTM (nfloat sx, nfloat sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleCTM(valuetype System.nfloat sx, valuetype System.nfloat sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ScaleCTM(System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.ScaleCTM : nfloat * nfloat -&gt; unit" Usage="cGContext.ScaleCTM (sx, sy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.nfloat" />
        <Parameter Name="sy" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="sx">The scale multiplier applied to the X axis of the CTM.</param>
        <param name="sy">The scale multiplier applied to the Y axis of the CTM.</param>
        <summary>Scales the current transformation matrix.</summary>
        <remarks>
          <para>Manipulation of the <see cref="T:CoreGraphics.CGContext" />'s current transformation matrix (CTM), is order-dependent and stateful. See<see cref="M:CoreGraphics.CGContext.GetCTM" /> for discussion and examples of <see cref="M:CoreGraphics.CGContext.ScaleCTM(System.nfloat,System.nfloat)" />. The current scaling factors are multiplied by <paramref name="sx" /> and <paramref name="sy" />.</para>
        </remarks>
        <altmember cref="M:CoreGraphics.CGContext.ConcatCTM" />
        <altmember cref="M:CoreGraphics.CGContext.RotateCTM" />
        <altmember cref="M:CoreGraphics.CGContext.GetCTM" />
        <altmember cref="M:CoreGraphics.CGContext.TranslateCTM" />
      </Docs>
    </Member>
    <Member MemberName="SelectFont">
      <MemberSignature Language="C#" Value="public void SelectFont (string name, nfloat size, CoreGraphics.CGTextEncoding textEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SelectFont(string name, valuetype System.nfloat size, valuetype CoreGraphics.CGTextEncoding textEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SelectFont(System.String,System.nfloat,CoreGraphics.CGTextEncoding)" />
      <MemberSignature Language="F#" Value="member this.SelectFont : string * nfloat * CoreGraphics.CGTextEncoding -&gt; unit" Usage="cGContext.SelectFont (name, size, textEncoding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="size" Type="System.nfloat" />
        <Parameter Name="textEncoding" Type="CoreGraphics.CGTextEncoding" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="size">To be added.</param>
        <param name="textEncoding">To be added.</param>
        <summary>Developers should not use this deprecated method. Developers should use the 'CoreText' API instead.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAllowsAntialiasing">
      <MemberSignature Language="C#" Value="public void SetAllowsAntialiasing (bool allowsAntialiasing);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAllowsAntialiasing(bool allowsAntialiasing) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetAllowsAntialiasing(System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.SetAllowsAntialiasing : bool -&gt; unit" Usage="cGContext.SetAllowsAntialiasing allowsAntialiasing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowsAntialiasing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allowsAntialiasing">
          <see langword="true" /> if antialiasing should be allowed.</param>
        <summary>Whether the context allows antialiasing.</summary>
        <remarks>
          <para>This property works in conjunction with <see cref="M:CoreGraphics.CGContext.SetShouldAntialias(System.Boolean)" />. Only if both values are <see langword="true" /> will antialiasing occur.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAllowsFontSmoothing">
      <MemberSignature Language="C#" Value="public void SetAllowsFontSmoothing (bool allows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAllowsFontSmoothing(bool allows) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetAllowsFontSmoothing(System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.SetAllowsFontSmoothing : bool -&gt; unit" Usage="cGContext.SetAllowsFontSmoothing allows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allows" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allows">
          <see langword="true" /> if font smoothing should be allowed.</param>
        <summary>Whether the context allows font smoothing.</summary>
        <remarks>
          <para>This property works in conjunction with <see cref="M:CoreGraphics.CGContext.SetShouldSmoothFonts(System.Boolean)" />. Only if both values are <see langword="true" /> will font smoothing occur.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAllowsFontSubpixelQuantization">
      <MemberSignature Language="C#" Value="public void SetAllowsFontSubpixelQuantization (bool allows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAllowsFontSubpixelQuantization(bool allows) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetAllowsFontSubpixelQuantization(System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.SetAllowsFontSubpixelQuantization : bool -&gt; unit" Usage="cGContext.SetAllowsFontSubpixelQuantization allows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allows" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allows">
          <see langword="true" /> if subpixel quantization should be allowed</param>
        <summary>Whether the context allows for glyphs to be drawn at subpixel locations.</summary>
        <remarks>
          <para>This property works in conjunction with <see cref="M:CoreGraphics.CGContext.ShouldSubpixelQuantizeFonts(System.Boolean)" />, <see cref="M:CoreGraphics.CGContext.SetAllowsSubpixelPositioning(System.Boolean)" />, and <see cref="M:CoreGraphics.CGContext.SetShouldSubpixelPositionFonts(System.Boolean)" />. Only if all these values are <see langword="true" /> will subpixel quantization be allowed.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAllowsSubpixelPositioning">
      <MemberSignature Language="C#" Value="public void SetAllowsSubpixelPositioning (bool allows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAllowsSubpixelPositioning(bool allows) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetAllowsSubpixelPositioning(System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.SetAllowsSubpixelPositioning : bool -&gt; unit" Usage="cGContext.SetAllowsSubpixelPositioning allows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allows" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allows">
          <see langword="true" /> if glyphs need not be aligned to pixel boundaries.</param>
        <summary>Whether the context allows for glyphs to be aligned other than to pixel boundaries.</summary>
        <remarks>This property works in conjunction with <see cref="M:CoreGraphics.CGContext.SetShouldSubpixelPositionFonts(System.Boolean)" />. Only if both values are <see langword="true" /> will glyphs not be aligned to pixel boundaries.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAlpha">
      <MemberSignature Language="C#" Value="public void SetAlpha (nfloat alpha);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAlpha(valuetype System.nfloat alpha) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetAlpha(System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.SetAlpha : nfloat -&gt; unit" Usage="cGContext.SetAlpha alpha" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alpha" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="alpha">Clipped to the range 0.0 (transparent) to 1.0 (opaque).</param>
        <summary>Sets the opacity for drawing, in the range 0.0 (transparent) to 1.0 (opaque).</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBlendMode">
      <MemberSignature Language="C#" Value="public void SetBlendMode (CoreGraphics.CGBlendMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBlendMode(valuetype CoreGraphics.CGBlendMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetBlendMode(CoreGraphics.CGBlendMode)" />
      <MemberSignature Language="F#" Value="member this.SetBlendMode : CoreGraphics.CGBlendMode -&gt; unit" Usage="cGContext.SetBlendMode mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="CoreGraphics.CGBlendMode" />
      </Parameters>
      <Docs>
        <param name="mode">The desired <see cref="T:CoreGraphics.CGBlendMode" />.</param>
        <summary>Specifies the compositing mode.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCharacterSpacing">
      <MemberSignature Language="C#" Value="public void SetCharacterSpacing (nfloat spacing);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCharacterSpacing(valuetype System.nfloat spacing) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetCharacterSpacing(System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.SetCharacterSpacing : nfloat -&gt; unit" Usage="cGContext.SetCharacterSpacing spacing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spacing" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="spacing">The amount of spacing, in text-space coordinates, to add between glyphs.</param>
        <summary>Adds additional spacing between glyphs.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFillColor">
      <MemberSignature Language="C#" Value="public void SetFillColor (CoreGraphics.CGColor color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFillColor(class CoreGraphics.CGColor color) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetFillColor(CoreGraphics.CGColor)" />
      <MemberSignature Language="F#" Value="member this.SetFillColor : CoreGraphics.CGColor -&gt; unit" Usage="cGContext.SetFillColor color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="CoreGraphics.CGColor" />
      </Parameters>
      <Docs>
        <param name="color">The desired <see cref="T:CoreGraphics.CGColor" />.</param>
        <summary>Sets the fill color to the specified <see cref="T:CoreGraphics.CGColor" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFillColor">
      <MemberSignature Language="C#" Value="public void SetFillColor (nfloat[] components);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFillColor(valuetype System.nfloat[] components) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetFillColor(System.nfloat[])" />
      <MemberSignature Language="F#" Value="member this.SetFillColor : nfloat[] -&gt; unit" Usage="cGContext.SetFillColor components" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="components" Type="System.nfloat[]" />
      </Parameters>
      <Docs>
        <param name="components">An array of components, specific to the currently selected colorspace</param>
        <summary>Sets the fill color. <see cref="M:CoreGraphics.CGContext.SetFillColorSpace(CoreGraphics.CGColorSpace)" /> must be called prior.</summary>
        <remarks>Sets the fill color to the values specified in the components array. The number of elements in this array must be equal to the number of components in the current colorspace plus an additional element for the alpha value. Developers must previously set the colorspace on the context using <see cref="M:CoreGraphics.CGContext.SetFillColorSpace(CoreGraphics.CGColorSpace)" />, otherwise the results of calling this method are unspecified.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFillColor">
      <MemberSignature Language="C#" Value="public void SetFillColor (nfloat gray, nfloat alpha);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFillColor(valuetype System.nfloat gray, valuetype System.nfloat alpha) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetFillColor(System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.SetFillColor : nfloat * nfloat -&gt; unit" Usage="cGContext.SetFillColor (gray, alpha)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gray" Type="System.nfloat" />
        <Parameter Name="alpha" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="gray">The amount of gray, in the range 0 (black) to 1 (white).</param>
        <param name="alpha">The opacity of the color, in the range 0 (transparent) to 1 (opaque).</param>
        <summary>Sets the fill color to a gray level, in the range 0 (black) to 1 (white).</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFillColor">
      <MemberSignature Language="C#" Value="public void SetFillColor (nfloat red, nfloat green, nfloat blue, nfloat alpha);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFillColor(valuetype System.nfloat red, valuetype System.nfloat green, valuetype System.nfloat blue, valuetype System.nfloat alpha) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetFillColor(System.nfloat,System.nfloat,System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.SetFillColor : nfloat * nfloat * nfloat * nfloat -&gt; unit" Usage="cGContext.SetFillColor (red, green, blue, alpha)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="red" Type="System.nfloat" />
        <Parameter Name="green" Type="System.nfloat" />
        <Parameter Name="blue" Type="System.nfloat" />
        <Parameter Name="alpha" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="red">The red component in the range 0 to 1.</param>
        <param name="green">The green component in the range 0 to 1.</param>
        <param name="blue">The blue component in the range 0 to 1.</param>
        <param name="alpha">The opacity, in the range 0 to 1.</param>
        <summary>Sets the fill color to the specified RGBA values.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFillColor">
      <MemberSignature Language="C#" Value="public void SetFillColor (nfloat cyan, nfloat magenta, nfloat yellow, nfloat black, nfloat alpha);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFillColor(valuetype System.nfloat cyan, valuetype System.nfloat magenta, valuetype System.nfloat yellow, valuetype System.nfloat black, valuetype System.nfloat alpha) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetFillColor(System.nfloat,System.nfloat,System.nfloat,System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.SetFillColor : nfloat * nfloat * nfloat * nfloat * nfloat -&gt; unit" Usage="cGContext.SetFillColor (cyan, magenta, yellow, black, alpha)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cyan" Type="System.nfloat" />
        <Parameter Name="magenta" Type="System.nfloat" />
        <Parameter Name="yellow" Type="System.nfloat" />
        <Parameter Name="black" Type="System.nfloat" />
        <Parameter Name="alpha" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="cyan">The amount of cyan in the range 0 to 1.</param>
        <param name="magenta">The amount of magenta in the range 0 to 1.</param>
        <param name="yellow">The amount of yellow in the range 0 to 1.</param>
        <param name="black">The amount of black in the range 0 to 1.</param>
        <param name="alpha">The opacity in the range 0 to 1.</param>
        <summary>Sets the fill color using CMYK color-space components, plus an alpha value.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFillColorSpace">
      <MemberSignature Language="C#" Value="public void SetFillColorSpace (CoreGraphics.CGColorSpace space);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFillColorSpace(class CoreGraphics.CGColorSpace space) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetFillColorSpace(CoreGraphics.CGColorSpace)" />
      <MemberSignature Language="F#" Value="member this.SetFillColorSpace : CoreGraphics.CGColorSpace -&gt; unit" Usage="cGContext.SetFillColorSpace space" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="space" Type="CoreGraphics.CGColorSpace" />
      </Parameters>
      <Docs>
        <param name="space">The desired <see cref="T:CoreGraphics.CGColorSpace" />.</param>
        <summary>Specifies the <see cref="T:CoreGraphics.CGColorSpace" /> to be used in the context.</summary>
        <remarks>
          <para>This method must be called prior to using <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=M:CoreGraphics.CGContext.SetFillColor(float[])&amp;scope=Xamarin" title="M:CoreGraphics.CGContext.SetFillColor(float[])">M:CoreGraphics.CGContext.SetFillColor(float[])</a></format>.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFillPattern">
      <MemberSignature Language="C#" Value="public void SetFillPattern (CoreGraphics.CGPattern pattern, nfloat[] components);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFillPattern(class CoreGraphics.CGPattern pattern, valuetype System.nfloat[] components) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetFillPattern(CoreGraphics.CGPattern,System.nfloat[])" />
      <MemberSignature Language="F#" Value="member this.SetFillPattern : CoreGraphics.CGPattern * nfloat[] -&gt; unit" Usage="cGContext.SetFillPattern (pattern, components)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="CoreGraphics.CGPattern" />
        <Parameter Name="components" Type="System.nfloat[]" />
      </Parameters>
      <Docs>
        <param name="pattern">The desired <see cref="T:CoreGraphics.CGPattern" />.</param>
        <param name="components">Color components used if the <paramref name="pattern" /> is a masking pattern. Otherwise, a single alpha value.</param>
        <summary>Sets the fill pattern of the context.</summary>
        <remarks>
          <para>Must be used after <see cref="M:CoreGraphics.CGContext.SetFillColorSpace(CoreGraphics.CGColorSpace)" /> has been set to <see cref="F:CoreGraphics.CGColorSpaceModel.Pattern" />. If the <paramref name="pattern" /> is an uncolored masking pattern, the <paramref name="components" /> must correspond to those in the base of the fill pattern colorspace, plus an alpha component. If the <paramref name="pattern" /> is colored, <paramref name="components" /> should contain a single value, specifying the opacity.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFlatness">
      <MemberSignature Language="C#" Value="public void SetFlatness (nfloat flatness);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFlatness(valuetype System.nfloat flatness) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetFlatness(System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.SetFlatness : nfloat -&gt; unit" Usage="cGContext.SetFlatness flatness" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flatness" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="flatness">The largest distance, in device pixels, between the true curve and its approximation.</param>
        <summary>The accuracy of curved paths.</summary>
        <remarks>
          <para>Application developers should be cautious about manipulating this property, which can have significant performance overhead. Setting <paramref name="flatness" /> to a value of less than 1.0 leads to highly accurate curves, but may be slow.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFont">
      <MemberSignature Language="C#" Value="public void SetFont (CoreGraphics.CGFont font);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFont(class CoreGraphics.CGFont font) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetFont(CoreGraphics.CGFont)" />
      <MemberSignature Language="F#" Value="member this.SetFont : CoreGraphics.CGFont -&gt; unit" Usage="cGContext.SetFont font" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="font" Type="CoreGraphics.CGFont" />
      </Parameters>
      <Docs>
        <param name="font">The <see cref="T:CoreGraphics.CGFont" /> used for the context.</param>
        <summary>Sets the <see cref="T:CoreGraphics.CGFont" /> used to render text.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFontSize">
      <MemberSignature Language="C#" Value="public void SetFontSize (nfloat size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFontSize(valuetype System.nfloat size) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetFontSize(System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.SetFontSize : nfloat -&gt; unit" Usage="cGContext.SetFontSize size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="size">The desired font size, in text space units.</param>
        <summary>Sets the size of the font used to rende text.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLineCap">
      <MemberSignature Language="C#" Value="public void SetLineCap (CoreGraphics.CGLineCap cap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLineCap(valuetype CoreGraphics.CGLineCap cap) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetLineCap(CoreGraphics.CGLineCap)" />
      <MemberSignature Language="F#" Value="member this.SetLineCap : CoreGraphics.CGLineCap -&gt; unit" Usage="cGContext.SetLineCap cap" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cap" Type="CoreGraphics.CGLineCap" />
      </Parameters>
      <Docs>
        <param name="cap">The desired <see cref="T:CoreGraphics.CGLineCap" />.</param>
        <summary>Sets the style for the ends of lines.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLineDash">
      <MemberSignature Language="C#" Value="public void SetLineDash (nfloat phase, nfloat[] lengths);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLineDash(valuetype System.nfloat phase, valuetype System.nfloat[] lengths) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetLineDash(System.nfloat,System.nfloat[])" />
      <MemberSignature Language="F#" Value="member this.SetLineDash : nfloat * nfloat[] -&gt; unit" Usage="cGContext.SetLineDash (phase, lengths)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phase" Type="System.nfloat" />
        <Parameter Name="lengths" Type="System.nfloat[]" />
      </Parameters>
      <Docs>
        <param name="phase">Distance from the start, in user space units, where the dash pattern starts.</param>
        <param name="lengths">The lengths, in user space units, of painted and unpainted segments. If <see langword="null" />, no dash pattern is drawn.</param>
        <summary>The pattern to be used for drawing dashed lines.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLineDash">
      <MemberSignature Language="C#" Value="public void SetLineDash (nfloat phase, nfloat[] lengths, int n);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLineDash(valuetype System.nfloat phase, valuetype System.nfloat[] lengths, int32 n) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetLineDash(System.nfloat,System.nfloat[],System.Int32)" />
      <MemberSignature Language="F#" Value="member this.SetLineDash : nfloat * nfloat[] * int -&gt; unit" Usage="cGContext.SetLineDash (phase, lengths, n)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phase" Type="System.nfloat" />
        <Parameter Name="lengths" Type="System.nfloat[]" />
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="phase">To be added.</param>
        <param name="lengths">To be added.</param>
        <param name="n">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLineJoin">
      <MemberSignature Language="C#" Value="public void SetLineJoin (CoreGraphics.CGLineJoin join);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLineJoin(valuetype CoreGraphics.CGLineJoin join) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetLineJoin(CoreGraphics.CGLineJoin)" />
      <MemberSignature Language="F#" Value="member this.SetLineJoin : CoreGraphics.CGLineJoin -&gt; unit" Usage="cGContext.SetLineJoin join" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="join" Type="CoreGraphics.CGLineJoin" />
      </Parameters>
      <Docs>
        <param name="join">The desired <see cref="T:CoreGraphics.CGLineJoin" />.</param>
        <summary>Sets the way lines are joined.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLineWidth">
      <MemberSignature Language="C#" Value="public void SetLineWidth (nfloat w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLineWidth(valuetype System.nfloat w) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetLineWidth(System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.SetLineWidth : nfloat -&gt; unit" Usage="cGContext.SetLineWidth w" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="w">The line width, in user space units.</param>
        <summary>Sets the width of the stroked line. The line extends for half <paramref name="w" /> to either side of the path.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMiterLimit">
      <MemberSignature Language="C#" Value="public void SetMiterLimit (nfloat limit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetMiterLimit(valuetype System.nfloat limit) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetMiterLimit(System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.SetMiterLimit : nfloat -&gt; unit" Usage="cGContext.SetMiterLimit limit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="limit" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="limit">The maximum ratio of the length of the miter to the line width.</param>
        <summary>Specifies the miter limit for connecting lines.</summary>
        <remarks>
          <para>If the length of the miter divided by the line width is greater than <paramref name="limit" />, a bevel is drawn rather than a miter.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPatternPhase">
      <MemberSignature Language="C#" Value="public void SetPatternPhase (CoreGraphics.CGSize phase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPatternPhase(valuetype CoreGraphics.CGSize phase) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetPatternPhase(CoreGraphics.CGSize)" />
      <MemberSignature Language="F#" Value="member this.SetPatternPhase : CoreGraphics.CGSize -&gt; unit" Usage="cGContext.SetPatternPhase phase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phase" Type="CoreGraphics.CGSize" />
      </Parameters>
      <Docs>
        <param name="phase">The pattern's origin, in user space.</param>
        <summary>Translates the pattern prior to beginning to tile it.</summary>
        <remarks>
          <para>The default <paramref name="phase" /> is [0,0]. The <paramref name="phase" /> is specified in user space and translates the pattern in X and Y before the pattern tiling begins.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRenderingIntent">
      <MemberSignature Language="C#" Value="public void SetRenderingIntent (CoreGraphics.CGColorRenderingIntent intent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetRenderingIntent(valuetype CoreGraphics.CGColorRenderingIntent intent) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetRenderingIntent(CoreGraphics.CGColorRenderingIntent)" />
      <MemberSignature Language="F#" Value="member this.SetRenderingIntent : CoreGraphics.CGColorRenderingIntent -&gt; unit" Usage="cGContext.SetRenderingIntent intent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="CoreGraphics.CGColorRenderingIntent" />
      </Parameters>
      <Docs>
        <param name="intent">The desired <see cref="T:CoreGraphics.CGColorRenderingIntent" />.</param>
        <summary>How colors outside the destination color space are handled.</summary>
        <remarks>
          <para>The default rendering intent is <see cref="F:CoreGraphics.CGColorRenderingIntent.RelativeColorimetric" /> for everyting but samples images, which are rendered with <see cref="F:CoreGraphics.CGColorRenderingIntent.Perceptual" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetShadow">
      <MemberSignature Language="C#" Value="public void SetShadow (CoreGraphics.CGSize offset, nfloat blur, CoreGraphics.CGColor color = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetShadow(valuetype CoreGraphics.CGSize offset, valuetype System.nfloat blur, class CoreGraphics.CGColor color) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetShadow(CoreGraphics.CGSize,System.nfloat,CoreGraphics.CGColor)" />
      <MemberSignature Language="F#" Value="member this.SetShadow : CoreGraphics.CGSize * nfloat * CoreGraphics.CGColor -&gt; unit" Usage="cGContext.SetShadow (offset, blur, color)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="CoreGraphics.CGSize" />
        <Parameter Name="blur" Type="System.nfloat" />
        <Parameter Name="color" Type="CoreGraphics.CGColor" />
      </Parameters>
      <Docs>
        <param name="offset">To be added.</param>
        <param name="blur">To be added.</param>
        <param name="color">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetShouldAntialias">
      <MemberSignature Language="C#" Value="public void SetShouldAntialias (bool shouldAntialias);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetShouldAntialias(bool shouldAntialias) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetShouldAntialias(System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.SetShouldAntialias : bool -&gt; unit" Usage="cGContext.SetShouldAntialias shouldAntialias" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shouldAntialias" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="shouldAntialias">
          <see langword="true" /> if antialiasing should be used.</param>
        <summary>Used in conjunction with <see cref="M:CoreGraphics.CGContext.SetAllowsAntialiasing(System.Boolean)" /> to enable or disable antialiasing.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetShouldSmoothFonts">
      <MemberSignature Language="C#" Value="public void SetShouldSmoothFonts (bool shouldSmoothFonts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetShouldSmoothFonts(bool shouldSmoothFonts) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetShouldSmoothFonts(System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.SetShouldSmoothFonts : bool -&gt; unit" Usage="cGContext.SetShouldSmoothFonts shouldSmoothFonts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shouldSmoothFonts" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="shouldSmoothFonts">
          <see langword="true" /> if fonts should be smoothed.</param>
        <summary>Used in conjunction with <see cref="M:CoreGraphics.CGContext.SetAllowsFontSmoothing(System.Boolean)" /> to enable or disable font smoothing.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetShouldSubpixelPositionFonts">
      <MemberSignature Language="C#" Value="public void SetShouldSubpixelPositionFonts (bool shouldSubpixelPositionFonts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetShouldSubpixelPositionFonts(bool shouldSubpixelPositionFonts) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetShouldSubpixelPositionFonts(System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.SetShouldSubpixelPositionFonts : bool -&gt; unit" Usage="cGContext.SetShouldSubpixelPositionFonts shouldSubpixelPositionFonts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shouldSubpixelPositionFonts" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="shouldSubpixelPositionFonts">
          <see langword="true" /> if glyphs need not be aligned to pixels.</param>
        <summary>Used in conjunction with <see cref="M:CoreGraphics.CGContext.SetAllowsSubpixelPositioning(System.Boolean)" /> to enable or disable glyph alignment with pixels.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStrokeColor">
      <MemberSignature Language="C#" Value="public void SetStrokeColor (CoreGraphics.CGColor color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetStrokeColor(class CoreGraphics.CGColor color) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetStrokeColor(CoreGraphics.CGColor)" />
      <MemberSignature Language="F#" Value="member this.SetStrokeColor : CoreGraphics.CGColor -&gt; unit" Usage="cGContext.SetStrokeColor color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="CoreGraphics.CGColor" />
      </Parameters>
      <Docs>
        <param name="color">The desired <see cref="T:CoreGraphics.CGColor" />.</param>
        <summary>Sets the stroke color.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStrokeColor">
      <MemberSignature Language="C#" Value="public void SetStrokeColor (nfloat[] components);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetStrokeColor(valuetype System.nfloat[] components) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetStrokeColor(System.nfloat[])" />
      <MemberSignature Language="F#" Value="member this.SetStrokeColor : nfloat[] -&gt; unit" Usage="cGContext.SetStrokeColor components" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="components" Type="System.nfloat[]" />
      </Parameters>
      <Docs>
        <param name="components">An array of components, specific to the currently selected colorspace</param>
        <summary>Sets the stroke color. This API has undefined behavior if you do not set the colorspace beforehand.</summary>
        <remarks>Sets the stroke color to the values specified in the components array. The number of elements in this array must be equal to the number of components in the current colorspace plus an additional element for the alpha value. For this API to work, you must previously set the colorspace on the context using SetStrokeColorSpace(), otherwise the results of calling this method are unspecified.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStrokeColor">
      <MemberSignature Language="C#" Value="public void SetStrokeColor (nfloat gray, nfloat alpha);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetStrokeColor(valuetype System.nfloat gray, valuetype System.nfloat alpha) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetStrokeColor(System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.SetStrokeColor : nfloat * nfloat -&gt; unit" Usage="cGContext.SetStrokeColor (gray, alpha)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gray" Type="System.nfloat" />
        <Parameter Name="alpha" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="gray">The grayscale value, in the range 0.0 (black) to 1.0 (white).</param>
        <param name="alpha">The opacity, in the range 0.0 to 1.0.</param>
        <summary>Sets the stroke color to a grayscale value.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStrokeColor">
      <MemberSignature Language="C#" Value="public void SetStrokeColor (nfloat red, nfloat green, nfloat blue, nfloat alpha);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetStrokeColor(valuetype System.nfloat red, valuetype System.nfloat green, valuetype System.nfloat blue, valuetype System.nfloat alpha) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetStrokeColor(System.nfloat,System.nfloat,System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.SetStrokeColor : nfloat * nfloat * nfloat * nfloat -&gt; unit" Usage="cGContext.SetStrokeColor (red, green, blue, alpha)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="red" Type="System.nfloat" />
        <Parameter Name="green" Type="System.nfloat" />
        <Parameter Name="blue" Type="System.nfloat" />
        <Parameter Name="alpha" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="red">The red component, in the range 0.0 to 1.0.</param>
        <param name="green">The green component, in the range 0.0 to 1.0.</param>
        <param name="blue">The blue component, in the range 0.0 to 1.0.</param>
        <param name="alpha">The opacity, in the range 0.0 to 1.0.</param>
        <summary>Sets the stroke color to an RGBA color.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStrokeColor">
      <MemberSignature Language="C#" Value="public void SetStrokeColor (nfloat cyan, nfloat magenta, nfloat yellow, nfloat black, nfloat alpha);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetStrokeColor(valuetype System.nfloat cyan, valuetype System.nfloat magenta, valuetype System.nfloat yellow, valuetype System.nfloat black, valuetype System.nfloat alpha) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetStrokeColor(System.nfloat,System.nfloat,System.nfloat,System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.SetStrokeColor : nfloat * nfloat * nfloat * nfloat * nfloat -&gt; unit" Usage="cGContext.SetStrokeColor (cyan, magenta, yellow, black, alpha)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cyan" Type="System.nfloat" />
        <Parameter Name="magenta" Type="System.nfloat" />
        <Parameter Name="yellow" Type="System.nfloat" />
        <Parameter Name="black" Type="System.nfloat" />
        <Parameter Name="alpha" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="cyan">The cyan component, in the range 0.0 to 1.0.</param>
        <param name="magenta">The magenta component, in the range 0.0 to 1.0.</param>
        <param name="yellow">The yellow component, in the range 0.0 to 1.0.</param>
        <param name="black">The black component, in the range 0.0 to 1.0.</param>
        <param name="alpha">The opacity, in the range 0.0 to 1.0.</param>
        <summary>Sets the stroke color to a CMYKA color.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStrokeColorSpace">
      <MemberSignature Language="C#" Value="public void SetStrokeColorSpace (CoreGraphics.CGColorSpace space);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetStrokeColorSpace(class CoreGraphics.CGColorSpace space) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetStrokeColorSpace(CoreGraphics.CGColorSpace)" />
      <MemberSignature Language="F#" Value="member this.SetStrokeColorSpace : CoreGraphics.CGColorSpace -&gt; unit" Usage="cGContext.SetStrokeColorSpace space" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="space" Type="CoreGraphics.CGColorSpace" />
      </Parameters>
      <Docs>
        <param name="space">The desired <see cref="T:CoreGraphics.CGColorSpace" />.</param>
        <summary>Sets the <see cref="T:CoreGraphics.CGColorSpace" /> to be used with <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=M:CoreGraphics.CGContext.SetStrokeColor(float[])&amp;scope=Xamarin" title="M:CoreGraphics.CGContext.SetStrokeColor(float[])">M:CoreGraphics.CGContext.SetStrokeColor(float[])</a></format>.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStrokePattern">
      <MemberSignature Language="C#" Value="public void SetStrokePattern (CoreGraphics.CGPattern pattern, nfloat[] components);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetStrokePattern(class CoreGraphics.CGPattern pattern, valuetype System.nfloat[] components) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetStrokePattern(CoreGraphics.CGPattern,System.nfloat[])" />
      <MemberSignature Language="F#" Value="member this.SetStrokePattern : CoreGraphics.CGPattern * nfloat[] -&gt; unit" Usage="cGContext.SetStrokePattern (pattern, components)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="CoreGraphics.CGPattern" />
        <Parameter Name="components" Type="System.nfloat[]" />
      </Parameters>
      <Docs>
        <param name="pattern">The desired <see cref="T:CoreGraphics.CGPattern" />.</param>
        <param name="components">Color components used if the <paramref name="pattern" /> is a masking pattern. Otherwise, a single alpha value.</param>
        <summary>Sets the stroke pattern of the context.</summary>
        <remarks>
          <para>Must be used after <see cref="M:CoreGraphics.CGContext.SetStrokeColorSpace(CoreGraphics.CGColorSpace)" /> has been set to <see cref="F:CoreGraphics.CGColorSpaceModel.Pattern" />. If the <paramref name="pattern" /> is an uncolored masking pattern, the <paramref name="components" /> must correspond to those in the base of the stroke pattern colorspace, plus an alpha component. If the <paramref name="pattern" /> is colored, <paramref name="components" /> should contain a single value, specifying the opacity.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTextDrawingMode">
      <MemberSignature Language="C#" Value="public void SetTextDrawingMode (CoreGraphics.CGTextDrawingMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetTextDrawingMode(valuetype CoreGraphics.CGTextDrawingMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.SetTextDrawingMode(CoreGraphics.CGTextDrawingMode)" />
      <MemberSignature Language="F#" Value="member this.SetTextDrawingMode : CoreGraphics.CGTextDrawingMode -&gt; unit" Usage="cGContext.SetTextDrawingMode mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="CoreGraphics.CGTextDrawingMode" />
      </Parameters>
      <Docs>
        <param name="mode">The desired <see cref="T:CoreGraphics.CGTextDrawingMode" />.</param>
        <summary>Specifies how glyphs should be rendered.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSubpixelQuantizeFonts">
      <MemberSignature Language="C#" Value="public void ShouldSubpixelQuantizeFonts (bool shouldSubpixelQuantizeFonts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShouldSubpixelQuantizeFonts(bool shouldSubpixelQuantizeFonts) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ShouldSubpixelQuantizeFonts(System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.ShouldSubpixelQuantizeFonts : bool -&gt; unit" Usage="cGContext.ShouldSubpixelQuantizeFonts shouldSubpixelQuantizeFonts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shouldSubpixelQuantizeFonts" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="shouldSubpixelQuantizeFonts">
          <see langword="true" /> if fonts should be drawn at subpixel positions.</param>
        <summary>With <see cref="M:CoreGraphics.CGContext.SetAllowsFontSubpixelQuantization(System.Boolean)" />, determines whether fonts should be drawn at subpixel locations.</summary>
        <remarks>
          <para>Subpixel quantization requires <see cref="M:CoreGraphics.CGContext.SetAllowsFontSubpixelQuantization(System.Boolean)" />, <see cref="M:CoreGraphics.CGContext.SetShouldSubpixelPositionFonts(System.Boolean)" />, and <see cref="M:CoreGraphics.CGContext.SetAllowsSubpixelPositioning(System.Boolean)" /> all to be <see langword="true" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowGlyphs">
      <MemberSignature Language="C#" Value="public void ShowGlyphs (ushort[] glyphs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowGlyphs(unsigned int16[] glyphs) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ShowGlyphs(System.UInt16[])" />
      <MemberSignature Language="F#" Value="member this.ShowGlyphs : uint16[] -&gt; unit" Usage="cGContext.ShowGlyphs glyphs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphs" Type="System.UInt16[]" />
      </Parameters>
      <Docs>
        <param name="glyphs">To be added.</param>
        <summary>This method has been deprecated in favor of <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=Core%20Text&amp;scope=Xamarin" title="N:CoreText">N:CoreText</a></format>.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowGlyphs">
      <MemberSignature Language="C#" Value="public void ShowGlyphs (ushort[] glyphs, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowGlyphs(unsigned int16[] glyphs, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ShowGlyphs(System.UInt16[],System.Int32)" />
      <MemberSignature Language="F#" Value="member this.ShowGlyphs : uint16[] * int -&gt; unit" Usage="cGContext.ShowGlyphs (glyphs, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphs" Type="System.UInt16[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="glyphs">To be added.</param>
        <param name="count">To be added.</param>
        <summary>This method has been deprecated in favor of <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=Core%20Text&amp;scope=Xamarin" title="N:CoreText">N:CoreText</a></format>.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowGlyphsAtPoint">
      <MemberSignature Language="C#" Value="public void ShowGlyphsAtPoint (nfloat x, nfloat y, ushort[] glyphs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowGlyphsAtPoint(valuetype System.nfloat x, valuetype System.nfloat y, unsigned int16[] glyphs) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ShowGlyphsAtPoint(System.nfloat,System.nfloat,System.UInt16[])" />
      <MemberSignature Language="F#" Value="member this.ShowGlyphsAtPoint : nfloat * nfloat * uint16[] -&gt; unit" Usage="cGContext.ShowGlyphsAtPoint (x, y, glyphs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.nfloat" />
        <Parameter Name="y" Type="System.nfloat" />
        <Parameter Name="glyphs" Type="System.UInt16[]" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <param name="glyphs">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowGlyphsAtPoint">
      <MemberSignature Language="C#" Value="public void ShowGlyphsAtPoint (nfloat x, nfloat y, ushort[] glyphs, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowGlyphsAtPoint(valuetype System.nfloat x, valuetype System.nfloat y, unsigned int16[] glyphs, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ShowGlyphsAtPoint(System.nfloat,System.nfloat,System.UInt16[],System.Int32)" />
      <MemberSignature Language="F#" Value="member this.ShowGlyphsAtPoint : nfloat * nfloat * uint16[] * int -&gt; unit" Usage="cGContext.ShowGlyphsAtPoint (x, y, glyphs, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.nfloat" />
        <Parameter Name="y" Type="System.nfloat" />
        <Parameter Name="glyphs" Type="System.UInt16[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <param name="glyphs">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowGlyphsAtPositions">
      <MemberSignature Language="C#" Value="public void ShowGlyphsAtPositions (ushort[] glyphs, CoreGraphics.CGPoint[] positions, int count = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowGlyphsAtPositions(unsigned int16[] glyphs, valuetype CoreGraphics.CGPoint[] positions, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ShowGlyphsAtPositions(System.UInt16[],CoreGraphics.CGPoint[],System.Int32)" />
      <MemberSignature Language="F#" Value="member this.ShowGlyphsAtPositions : uint16[] * CoreGraphics.CGPoint[] * int -&gt; unit" Usage="cGContext.ShowGlyphsAtPositions (glyphs, positions, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphs" Type="System.UInt16[]" />
        <Parameter Name="positions" Type="CoreGraphics.CGPoint[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="glyphs">To be added.</param>
        <param name="positions">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowGlyphsWithAdvances">
      <MemberSignature Language="C#" Value="public void ShowGlyphsWithAdvances (ushort[] glyphs, CoreGraphics.CGSize[] advances, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowGlyphsWithAdvances(unsigned int16[] glyphs, valuetype CoreGraphics.CGSize[] advances, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ShowGlyphsWithAdvances(System.UInt16[],CoreGraphics.CGSize[],System.Int32)" />
      <MemberSignature Language="F#" Value="member this.ShowGlyphsWithAdvances : uint16[] * CoreGraphics.CGSize[] * int -&gt; unit" Usage="cGContext.ShowGlyphsWithAdvances (glyphs, advances, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphs" Type="System.UInt16[]" />
        <Parameter Name="advances" Type="CoreGraphics.CGSize[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="glyphs">To be added.</param>
        <param name="advances">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowText">
      <MemberSignature Language="C#" Value="public void ShowText (byte[] bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowText(unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ShowText(System.Byte[])" />
      <MemberSignature Language="F#" Value="member this.ShowText : byte[] -&gt; unit" Usage="cGContext.ShowText bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <summary>This method has been deprecated in favor of <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=Core%20Text&amp;scope=Xamarin" title="N:CoreText">N:CoreText</a></format>.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowText">
      <MemberSignature Language="C#" Value="public void ShowText (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowText(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ShowText(System.String)" />
      <MemberSignature Language="F#" Value="member this.ShowText : string -&gt; unit" Usage="cGContext.ShowText str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">To be added.</param>
        <summary>This method has been deprecated in favor of <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=Core%20Text&amp;scope=Xamarin" title="N:CoreText">N:CoreText</a></format>.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowText">
      <MemberSignature Language="C#" Value="public void ShowText (byte[] bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowText(unsigned int8[] bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ShowText(System.Byte[],System.Int32)" />
      <MemberSignature Language="F#" Value="member this.ShowText : byte[] * int -&gt; unit" Usage="cGContext.ShowText (bytes, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <param name="count">To be added.</param>
        <summary>This method has been deprecated in favor of <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=Core%20Text&amp;scope=Xamarin" title="N:CoreText">N:CoreText</a></format>.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowText">
      <MemberSignature Language="C#" Value="public void ShowText (string str, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowText(string str, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ShowText(System.String,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.ShowText : string * int -&gt; unit" Usage="cGContext.ShowText (str, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">To be added.</param>
        <param name="count">To be added.</param>
        <summary>This method has been deprecated in favor of <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=Core%20Text&amp;scope=Xamarin" title="N:CoreText">N:CoreText</a></format>.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowTextAtPoint">
      <MemberSignature Language="C#" Value="public void ShowTextAtPoint (nfloat x, nfloat y, byte[] bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowTextAtPoint(valuetype System.nfloat x, valuetype System.nfloat y, unsigned int8[] bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ShowTextAtPoint(System.nfloat,System.nfloat,System.Byte[])" />
      <MemberSignature Language="F#" Value="member this.ShowTextAtPoint : nfloat * nfloat * byte[] -&gt; unit" Usage="cGContext.ShowTextAtPoint (x, y, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.nfloat" />
        <Parameter Name="y" Type="System.nfloat" />
        <Parameter Name="bytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <param name="bytes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowTextAtPoint">
      <MemberSignature Language="C#" Value="public void ShowTextAtPoint (nfloat x, nfloat y, string str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowTextAtPoint(valuetype System.nfloat x, valuetype System.nfloat y, string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ShowTextAtPoint(System.nfloat,System.nfloat,System.String)" />
      <MemberSignature Language="F#" Value="member this.ShowTextAtPoint : nfloat * nfloat * string -&gt; unit" Usage="cGContext.ShowTextAtPoint (x, y, str)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.nfloat" />
        <Parameter Name="y" Type="System.nfloat" />
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <param name="str">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowTextAtPoint">
      <MemberSignature Language="C#" Value="public void ShowTextAtPoint (nfloat x, nfloat y, byte[] bytes, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowTextAtPoint(valuetype System.nfloat x, valuetype System.nfloat y, unsigned int8[] bytes, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ShowTextAtPoint(System.nfloat,System.nfloat,System.Byte[],System.Int32)" />
      <MemberSignature Language="F#" Value="member this.ShowTextAtPoint : nfloat * nfloat * byte[] * int -&gt; unit" Usage="cGContext.ShowTextAtPoint (x, y, bytes, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.nfloat" />
        <Parameter Name="y" Type="System.nfloat" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <param name="bytes">To be added.</param>
        <param name="length">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowTextAtPoint">
      <MemberSignature Language="C#" Value="public void ShowTextAtPoint (nfloat x, nfloat y, string str, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowTextAtPoint(valuetype System.nfloat x, valuetype System.nfloat y, string str, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.ShowTextAtPoint(System.nfloat,System.nfloat,System.String,System.Int32)" />
      <MemberSignature Language="F#" Value="member this.ShowTextAtPoint : nfloat * nfloat * string * int -&gt; unit" Usage="cGContext.ShowTextAtPoint (x, y, str, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.None, "Use the 'CoreText' API instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.nfloat" />
        <Parameter Name="y" Type="System.nfloat" />
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <param name="str">To be added.</param>
        <param name="length">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StrokeEllipseInRect">
      <MemberSignature Language="C#" Value="public void StrokeEllipseInRect (CoreGraphics.CGRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StrokeEllipseInRect(valuetype CoreGraphics.CGRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.StrokeEllipseInRect(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="member this.StrokeEllipseInRect : CoreGraphics.CGRect -&gt; unit" Usage="cGContext.StrokeEllipseInRect rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="rect">The <see cref="T:System.Drawing.RectangleF" /> defining the ellipse's extent.</param>
        <summary>Strokes the ellipse defined by <paramref name="rect" />. Afterwards, the current path is reset.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StrokeLineSegments">
      <MemberSignature Language="C#" Value="public void StrokeLineSegments (CoreGraphics.CGPoint[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StrokeLineSegments(valuetype CoreGraphics.CGPoint[] points) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.StrokeLineSegments(CoreGraphics.CGPoint[])" />
      <MemberSignature Language="F#" Value="member this.StrokeLineSegments : CoreGraphics.CGPoint[] -&gt; unit" Usage="cGContext.StrokeLineSegments points" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="CoreGraphics.CGPoint[]" />
      </Parameters>
      <Docs>
        <param name="points">An array of points, defining starting and ending positions of the lines. The array must contain an even number of points.</param>
        <summary>Strokes the lines defined by the pairs in <paramref name="points" />. Afterwards, the current path is reset.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StrokePath">
      <MemberSignature Language="C#" Value="public void StrokePath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StrokePath() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.StrokePath" />
      <MemberSignature Language="F#" Value="member this.StrokePath : unit -&gt; unit" Usage="cGContext.StrokePath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Strokes the current path. Afterwards, the current path is reset.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StrokeRect">
      <MemberSignature Language="C#" Value="public void StrokeRect (CoreGraphics.CGRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StrokeRect(valuetype CoreGraphics.CGRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.StrokeRect(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="member this.StrokeRect : CoreGraphics.CGRect -&gt; unit" Usage="cGContext.StrokeRect rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to be stroked.</param>
        <summary>Strokes the specified <paramref name="rect" />. Afterwards, the current path is reset.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StrokeRectWithWidth">
      <MemberSignature Language="C#" Value="public void StrokeRectWithWidth (CoreGraphics.CGRect rect, nfloat width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StrokeRectWithWidth(valuetype CoreGraphics.CGRect rect, valuetype System.nfloat width) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.StrokeRectWithWidth(CoreGraphics.CGRect,System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.StrokeRectWithWidth : CoreGraphics.CGRect * nfloat -&gt; unit" Usage="cGContext.StrokeRectWithWidth (rect, width)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
        <Parameter Name="width" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to be stroked.</param>
        <param name="width">The width of the stroked line, in user space units.</param>
        <summary>Strokes the <paramref name="rect" />. The line extends half of <paramref name="width" /> to either side of the <paramref name="rect" /> perimeter. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Synchronize">
      <MemberSignature Language="C#" Value="public void Synchronize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Synchronize() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.Synchronize" />
      <MemberSignature Language="F#" Value="member this.Synchronize : unit -&gt; unit" Usage="cGContext.Synchronize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Marks a <see cref="T:CoreGraphics.CGContext" /> for update.</summary>
        <remarks>
          <para>Flushes all drawing operations since the last update. Does nothing for PDF and bitmap contexts. App devs do not typically need to call this method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextMatrix">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGAffineTransform TextMatrix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGAffineTransform TextMatrix" />
      <MemberSignature Language="DocId" Value="P:CoreGraphics.CGContext.TextMatrix" />
      <MemberSignature Language="F#" Value="member this.TextMatrix : CoreGraphics.CGAffineTransform with get, set" Usage="CoreGraphics.CGContext.TextMatrix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Defines the transform between text space and user space. Independent of the <see cref="T:CoreGraphics.CGContext" />'s state.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextPosition">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGPoint TextPosition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGPoint TextPosition" />
      <MemberSignature Language="DocId" Value="P:CoreGraphics.CGContext.TextPosition" />
      <MemberSignature Language="F#" Value="member this.TextPosition : CoreGraphics.CGPoint with get, set" Usage="CoreGraphics.CGContext.TextPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The location, in user space coordinates, at which to draw text.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateCTM">
      <MemberSignature Language="C#" Value="public void TranslateCTM (nfloat tx, nfloat ty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateCTM(valuetype System.nfloat tx, valuetype System.nfloat ty) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGContext.TranslateCTM(System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.TranslateCTM : nfloat * nfloat -&gt; unit" Usage="cGContext.TranslateCTM (tx, ty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="System.nfloat" />
        <Parameter Name="ty" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="tx">The X translation, in user space units, of the desired offset.</param>
        <param name="ty">The Y translation, in user space units, of the desired offset.</param>
        <summary>Changes the origin of the user coordinate system.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
