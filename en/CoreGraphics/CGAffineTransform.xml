<Type Name="CGAffineTransform" FullName="CoreGraphics.CGAffineTransform">
  <TypeSignature Language="C#" Value="public struct CGAffineTransform" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit CGAffineTransform extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:CoreGraphics.CGAffineTransform" />
  <TypeSignature Language="F#" Value="type CGAffineTransform = struct" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>2D Affine transformation used to convert between coordinate spaces.</summary>
    <remarks>
      <para>An affine transformation uses a matrix to transform poitns between coordinate spaces.   
</para>
      <para>
These transformation can be used to rotate, scale, shear and translate points and rectangles from one coordinate system into another.
</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CGAffineTransform (nfloat xx, nfloat yx, nfloat xy, nfloat yy, nfloat x0, nfloat y0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.nfloat xx, valuetype System.nfloat yx, valuetype System.nfloat xy, valuetype System.nfloat yy, valuetype System.nfloat x0, valuetype System.nfloat y0) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.#ctor(System.nfloat,System.nfloat,System.nfloat,System.nfloat,System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="new CoreGraphics.CGAffineTransform : nfloat * nfloat * nfloat * nfloat * nfloat * nfloat -&gt; CoreGraphics.CGAffineTransform" Usage="new CoreGraphics.CGAffineTransform (xx, yx, xy, yy, x0, y0)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xx" Type="System.nfloat" />
        <Parameter Name="yx" Type="System.nfloat" />
        <Parameter Name="xy" Type="System.nfloat" />
        <Parameter Name="yy" Type="System.nfloat" />
        <Parameter Name="x0" Type="System.nfloat" />
        <Parameter Name="y0" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="xx">The xx component.</param>
        <param name="yx">The yx component.</param>
        <param name="xy">The xy component.</param>
        <param name="yy">The yy component.</param>
        <param name="x0">The X translation component.</param>
        <param name="y0">The y translation component.</param>
        <summary>Initializes an affine transformation from the matrix values.</summary>
        <remarks>
          <para>
Defines an affine transformation matrix with the following components:
</para>
          <para>
| xx yx 0 |
</para>
          <para>
| xy yy 0 |
</para>
          <para>
| tx ty 1 |
</para>
          <para>
The third column always has the values 0, 0, 1 so only six values need to be provided.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CGAffineTransformInvert">
      <MemberSignature Language="C#" Value="public static CoreGraphics.CGAffineTransform CGAffineTransformInvert (CoreGraphics.CGAffineTransform t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;/System/Library/Frameworks/CoreGraphics.framework/CoreGraphics&quot; as &quot;CGAffineTransformInvert&quot; winapi)valuetype CoreGraphics.CGAffineTransform CGAffineTransformInvert(valuetype CoreGraphics.CGAffineTransform t) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.CGAffineTransformInvert(CoreGraphics.CGAffineTransform)" />
      <MemberSignature Language="F#" Value="static member CGAffineTransformInvert : CoreGraphics.CGAffineTransform -&gt; CoreGraphics.CGAffineTransform" Usage="CoreGraphics.CGAffineTransform.CGAffineTransformInvert t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="t">Affine transformation to invert.</param>
        <summary>Inverts the affine transformation matrix.</summary>
        <returns>If the affine transformation can not be inverted, the same matrix is returned.</returns>
        <remarks>You can use the inversion matrix to map points in the target coordinate space that had been mapped to the original coordinate space.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CGRectApplyAffineTransform">
      <MemberSignature Language="C#" Value="public static CoreGraphics.CGRect CGRectApplyAffineTransform (CoreGraphics.CGRect rect, CoreGraphics.CGAffineTransform t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;/System/Library/Frameworks/CoreGraphics.framework/CoreGraphics&quot; as &quot;CGRectApplyAffineTransform&quot; winapi)valuetype CoreGraphics.CGRect CGRectApplyAffineTransform(valuetype CoreGraphics.CGRect rect, valuetype CoreGraphics.CGAffineTransform t) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.CGRectApplyAffineTransform(CoreGraphics.CGRect,CoreGraphics.CGAffineTransform)" />
      <MemberSignature Language="F#" Value="static member CGRectApplyAffineTransform : CoreGraphics.CGRect * CoreGraphics.CGAffineTransform -&gt; CoreGraphics.CGRect" Usage="CoreGraphics.CGAffineTransform.CGRectApplyAffineTransform (rect, t)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
        <Parameter Name="t" Type="CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.Equals(System.Object)" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="cGAffineTransform.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">The object to compare this instance against.</param>
        <summary>Compares the objects for equality.</summary>
        <returns>
          <see langword="true" /> if the objects are equal, <see langword="false" /> if not.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.GetHashCode" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="cGAffineTransform.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The hashcode for this object.</summary>
        <returns>An integer value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invert">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGAffineTransform Invert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGAffineTransform Invert() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.Invert" />
      <MemberSignature Language="F#" Value="member this.Invert : unit -&gt; CoreGraphics.CGAffineTransform" Usage="cGAffineTransform.Invert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inverts this affine transformation.</summary>
        <returns>If the affine transformation can not be inverted, the matrix does not change.</returns>
        <remarks>You can use the inversion matrix to map points in the target coordinate space that had been mapped to the original coordinate space.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdentity">
      <MemberSignature Language="C#" Value="public bool IsIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIdentity" />
      <MemberSignature Language="DocId" Value="P:CoreGraphics.CGAffineTransform.IsIdentity" />
      <MemberSignature Language="F#" Value="member this.IsIdentity : bool" Usage="CoreGraphics.CGAffineTransform.IsIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determines if the affine corresponds to the identity affine.</summary>
        <value>Whether the affine is the identity.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeIdentity">
      <MemberSignature Language="C#" Value="public static CoreGraphics.CGAffineTransform MakeIdentity ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype CoreGraphics.CGAffineTransform MakeIdentity() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.MakeIdentity" />
      <MemberSignature Language="F#" Value="static member MakeIdentity : unit -&gt; CoreGraphics.CGAffineTransform" Usage="CoreGraphics.CGAffineTransform.MakeIdentity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the identity affine transformation.</summary>
        <returns>The identity matrix.</returns>
        <remarks>
          <para>
Sets up an identity transformation, like this:
</para>
          <para>
| 1 0 0 |
</para>
          <para>
| 0 1 0 |
</para>
          <para>
| 0 0 1 |
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeRotation">
      <MemberSignature Language="C#" Value="public static CoreGraphics.CGAffineTransform MakeRotation (nfloat angle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype CoreGraphics.CGAffineTransform MakeRotation(valuetype System.nfloat angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.MakeRotation(System.nfloat)" />
      <MemberSignature Language="F#" Value="static member MakeRotation : nfloat -&gt; CoreGraphics.CGAffineTransform" Usage="CoreGraphics.CGAffineTransform.MakeRotation angle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="angle">The angle in radians.</param>
        <summary>Returns an affine transformation for the requested rotation angle, in radians.</summary>
        <returns>The affine transformation for the requested rotation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeScale">
      <MemberSignature Language="C#" Value="public static CoreGraphics.CGAffineTransform MakeScale (nfloat sx, nfloat sy);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype CoreGraphics.CGAffineTransform MakeScale(valuetype System.nfloat sx, valuetype System.nfloat sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.MakeScale(System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="static member MakeScale : nfloat * nfloat -&gt; CoreGraphics.CGAffineTransform" Usage="CoreGraphics.CGAffineTransform.MakeScale (sx, sy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.nfloat" />
        <Parameter Name="sy" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="sx">Scale factor in the X coordinate.</param>
        <param name="sy">Scale factor for the Y coordinate.</param>
        <summary>Returns the affine transformation for the requested scaling in the X and Y coordinates.</summary>
        <returns>Returns the affine transformation for the requested scaling in the X and Y coordinates.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeTranslation">
      <MemberSignature Language="C#" Value="public static CoreGraphics.CGAffineTransform MakeTranslation (nfloat tx, nfloat ty);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype CoreGraphics.CGAffineTransform MakeTranslation(valuetype System.nfloat tx, valuetype System.nfloat ty) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.MakeTranslation(System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="static member MakeTranslation : nfloat * nfloat -&gt; CoreGraphics.CGAffineTransform" Usage="CoreGraphics.CGAffineTransform.MakeTranslation (tx, ty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="System.nfloat" />
        <Parameter Name="ty" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="tx">X translation.</param>
        <param name="ty">Y translation.</param>
        <summary>Return the affine transformation for translating to the requested location.</summary>
        <returns>Return the affine transformation for translating to the requested location.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public void Multiply (CoreGraphics.CGAffineTransform b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Multiply(valuetype CoreGraphics.CGAffineTransform b) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.Multiply(CoreGraphics.CGAffineTransform)" />
      <MemberSignature Language="F#" Value="member this.Multiply : CoreGraphics.CGAffineTransform -&gt; unit" Usage="cGAffineTransform.Multiply b" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="b">The affine used to multiply the current affine by.</param>
        <summary>Multiplies the current affine transformation by the specified affine transformation.</summary>
        <remarks>Use affine multiplication to compose multiple affine tranformations into a single affine.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static CoreGraphics.CGAffineTransform Multiply (CoreGraphics.CGAffineTransform a, CoreGraphics.CGAffineTransform b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype CoreGraphics.CGAffineTransform Multiply(valuetype CoreGraphics.CGAffineTransform a, valuetype CoreGraphics.CGAffineTransform b) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.Multiply(CoreGraphics.CGAffineTransform,CoreGraphics.CGAffineTransform)" />
      <MemberSignature Language="F#" Value="static member Multiply : CoreGraphics.CGAffineTransform * CoreGraphics.CGAffineTransform -&gt; CoreGraphics.CGAffineTransform" Usage="CoreGraphics.CGAffineTransform.Multiply (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="CoreGraphics.CGAffineTransform" />
        <Parameter Name="b" Type="CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="a">The first affine.</param>
        <param name="b">The second affine.</param>
        <summary>Multiplies the two affine transformations and returns the result.</summary>
        <returns>The multiplied affine.</returns>
        <remarks>Use affine multiplication to compose multiple affine tranformations into a single affine.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (CoreGraphics.CGAffineTransform lhs, CoreGraphics.CGAffineTransform rhs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype CoreGraphics.CGAffineTransform lhs, valuetype CoreGraphics.CGAffineTransform rhs) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.op_Equality(CoreGraphics.CGAffineTransform,CoreGraphics.CGAffineTransform)" />
      <MemberSignature Language="F#" Value="static member ( = ) : CoreGraphics.CGAffineTransform * CoreGraphics.CGAffineTransform -&gt; bool" Usage="lhs = rhs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lhs" Type="CoreGraphics.CGAffineTransform" />
        <Parameter Name="rhs" Type="CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="lhs">Left hand side affine.</param>
        <param name="rhs">Right hand side affine.</param>
        <summary>Operator overload, compares two affines.</summary>
        <returns>
          <see langword="true" /> if the affines are identical.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (CoreGraphics.CGAffineTransform lhs, CoreGraphics.CGAffineTransform rhs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype CoreGraphics.CGAffineTransform lhs, valuetype CoreGraphics.CGAffineTransform rhs) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.op_Inequality(CoreGraphics.CGAffineTransform,CoreGraphics.CGAffineTransform)" />
      <MemberSignature Language="F#" Value="static member op_Inequality : CoreGraphics.CGAffineTransform * CoreGraphics.CGAffineTransform -&gt; bool" Usage="CoreGraphics.CGAffineTransform.op_Inequality (lhs, rhs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lhs" Type="CoreGraphics.CGAffineTransform" />
        <Parameter Name="rhs" Type="CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="lhs">Left hand side affine.</param>
        <param name="rhs">Right hand side affine.</param>
        <summary>Compares affines for inequality.</summary>
        <returns>
          <see langword="true" /> if the affines are different.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static CoreGraphics.CGAffineTransform operator * (CoreGraphics.CGAffineTransform a, CoreGraphics.CGAffineTransform b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype CoreGraphics.CGAffineTransform op_Multiply(valuetype CoreGraphics.CGAffineTransform a, valuetype CoreGraphics.CGAffineTransform b) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.op_Multiply(CoreGraphics.CGAffineTransform,CoreGraphics.CGAffineTransform)" />
      <MemberSignature Language="F#" Value="static member ( * ) : CoreGraphics.CGAffineTransform * CoreGraphics.CGAffineTransform -&gt; CoreGraphics.CGAffineTransform" Usage="a * b" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="CoreGraphics.CGAffineTransform" />
        <Parameter Name="b" Type="CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="a">First affine transform.</param>
        <param name="b">Second affine transform.</param>
        <summary>Multiplies the two affine transformations and returns a new affine with the result.</summary>
        <returns>New affine transformation with the result.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rotate">
      <MemberSignature Language="C#" Value="public void Rotate (nfloat angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rotate(valuetype System.nfloat angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.Rotate(System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.Rotate : nfloat -&gt; unit" Usage="cGAffineTransform.Rotate angle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="angle">Angle represented in radians.</param>
        <summary>Applies a rotation to the affine by the specified angle, in radians.</summary>
        <remarks>
          <para>Modifies the affine in place.</para>
          <para>This method is not equivalent to the native CoreGraphics' CGAffineTransformRotate method (in which case use <see cref="M:CoreGraphics.CGAffineTransform.Rotate(CoreGraphics.CGAffineTransform,System.Single)" /> instead).</para>
          <para>Developers should note that this instance method, <see cref="M:CoreGraphics.CGAffineTransform.Rotate(System.Single)" />, right-multiplies itself by the rotation transformation that is defined by the <paramref name="angle" />. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rotate">
      <MemberSignature Language="C#" Value="public static CoreGraphics.CGAffineTransform Rotate (CoreGraphics.CGAffineTransform transform, nfloat angle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype CoreGraphics.CGAffineTransform Rotate(valuetype CoreGraphics.CGAffineTransform transform, valuetype System.nfloat angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.Rotate(CoreGraphics.CGAffineTransform,System.nfloat)" />
      <MemberSignature Language="F#" Value="static member Rotate : CoreGraphics.CGAffineTransform * nfloat -&gt; CoreGraphics.CGAffineTransform" Usage="CoreGraphics.CGAffineTransform.Rotate (transform, angle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transform" Type="CoreGraphics.CGAffineTransform" />
        <Parameter Name="angle" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="transform">The affine to rotate.</param>
        <param name="angle">Angle represented in radians.</param>
        <summary>Applies a rotation to the affine by the specified angle, in radians.</summary>
        <returns>The rotated affine.</returns>
        <remarks>
          <para>This method is equivalent to the native CoreGraphics' CGAffineTransformRotate method.</para>
          <para>Developers should note that this static method, <see cref="M:CoreGraphics.CGAffineTransform.Rotate(CoreGraphics.CGAffineTransform,System.Single)" />, left-multiplies <paramref name="transform" /> by the rotation transformation that is defined by the <paramref name="angle" />. The multiplication order is, importantly, the reverse of what the developer expects from the instance method, <see cref="M:CoreGraphics.CGAffineTransform.Rotate(System.Single)" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (nfloat sx, nfloat sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(valuetype System.nfloat sx, valuetype System.nfloat sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.Scale(System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.Scale : nfloat * nfloat -&gt; unit" Usage="cGAffineTransform.Scale (sx, sy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.nfloat" />
        <Parameter Name="sy" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="sx">The X scale factor.</param>
        <param name="sy">The Y scale factor.</param>
        <summary>Modify the affine to scale by the specified magnitudes.</summary>
        <remarks>
          <para>This method modifies the current affine with the requested scaling factors.</para>
          <para>This method is not equivalent to the native CoreGraphics' CGAffineTransformScale method (in which case use <see cref="M:CoreGraphics.CGAffineTransform.Scale(CoreGraphics.CGAffineTransform,System.Single,System.Single)" /> instead).</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public static CoreGraphics.CGAffineTransform Scale (CoreGraphics.CGAffineTransform transform, nfloat sx, nfloat sy);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype CoreGraphics.CGAffineTransform Scale(valuetype CoreGraphics.CGAffineTransform transform, valuetype System.nfloat sx, valuetype System.nfloat sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.Scale(CoreGraphics.CGAffineTransform,System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="static member Scale : CoreGraphics.CGAffineTransform * nfloat * nfloat -&gt; CoreGraphics.CGAffineTransform" Usage="CoreGraphics.CGAffineTransform.Scale (transform, sx, sy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transform" Type="CoreGraphics.CGAffineTransform" />
        <Parameter Name="sx" Type="System.nfloat" />
        <Parameter Name="sy" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="transform">The affine to scale.</param>
        <param name="sx">The X scale factor.</param>
        <param name="sy">The Y scale factor.</param>
        <summary>Scales the affine by the specified magnitudes and returns the result.</summary>
        <returns>The scaled affine.</returns>
        <remarks>This method is equivalent to the native CoreGraphics' CGAffineTransformScale method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.ToString" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="cGAffineTransform.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Renders the affine in textual form.</summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformPoint">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGPoint TransformPoint (CoreGraphics.CGPoint point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGPoint TransformPoint(valuetype CoreGraphics.CGPoint point) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.TransformPoint(CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="member this.TransformPoint : CoreGraphics.CGPoint -&gt; CoreGraphics.CGPoint" Usage="cGAffineTransform.TransformPoint point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="point">The point to transform.</param>
        <summary>Transforms the coordinates of the provided point by the affine.</summary>
        <returns>The point translated to the new coordinate space.</returns>
        <remarks>
          <para>
The point defined by x, y is transformed like this:
</para>
          <para>
new_x = xx * x + xy * y + x0;
</para>
          <para>
new_y = yx * x + yy * y + y0;
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformRect">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect TransformRect (CoreGraphics.CGRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGRect TransformRect(valuetype CoreGraphics.CGRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.TransformRect(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="member this.TransformRect : CoreGraphics.CGRect -&gt; CoreGraphics.CGRect" Usage="cGAffineTransform.TransformRect rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="rect">A rectangle to transform.</param>
        <summary>Applies the affine transform to the supplied rectangle and returns the transformed rectangle.</summary>
        <returns>The transformed rectangle.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformSize">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGSize TransformSize (CoreGraphics.CGSize size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGSize TransformSize(valuetype CoreGraphics.CGSize size) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.TransformSize(CoreGraphics.CGSize)" />
      <MemberSignature Language="F#" Value="member this.TransformSize : CoreGraphics.CGSize -&gt; CoreGraphics.CGSize" Usage="cGAffineTransform.TransformSize size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="CoreGraphics.CGSize" />
      </Parameters>
      <Docs>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public void Translate (nfloat tx, nfloat ty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Translate(valuetype System.nfloat tx, valuetype System.nfloat ty) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.Translate(System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.Translate : nfloat * nfloat -&gt; unit" Usage="cGAffineTransform.Translate (tx, ty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="System.nfloat" />
        <Parameter Name="ty" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="tx">X value to move the transform by.</param>
        <param name="ty">Y value to move the transform by.</param>
        <summary>Translates the affine transform by modifying every X value by the supplied X parameter and every Y value by the supplied Y parameter.</summary>
        <remarks>
          <para>Modifies the affine in place.</para>
          <para>This method is not equivalent to the native CoreGraphics' CGAffineTransformTranslate method (in which case use <see cref="M:CoreGraphics.CGAffineTransform.Translate(CoreGraphics.CGAffineTransform,System.Single,System.Single)" /> instead).</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public static CoreGraphics.CGAffineTransform Translate (CoreGraphics.CGAffineTransform transform, nfloat tx, nfloat ty);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype CoreGraphics.CGAffineTransform Translate(valuetype CoreGraphics.CGAffineTransform transform, valuetype System.nfloat tx, valuetype System.nfloat ty) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreGraphics.CGAffineTransform.Translate(CoreGraphics.CGAffineTransform,System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="static member Translate : CoreGraphics.CGAffineTransform * nfloat * nfloat -&gt; CoreGraphics.CGAffineTransform" Usage="CoreGraphics.CGAffineTransform.Translate (transform, tx, ty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transform" Type="CoreGraphics.CGAffineTransform" />
        <Parameter Name="tx" Type="System.nfloat" />
        <Parameter Name="ty" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="transform">The affine to translate.</param>
        <param name="tx">X value to move the transform by.</param>
        <param name="ty">Y value to move the transform by.</param>
        <summary>Translates the affine transform by modifying every X value by the supplied X parameter and every Y value by the supplied Y parameter.</summary>
        <returns>The translated affine transform.</returns>
        <remarks>This method is equivalent to the native CoreGraphics' CGAffineTransformTranslate method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="x0">
      <MemberSignature Language="C#" Value="public nfloat x0;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.nfloat x0" />
      <MemberSignature Language="DocId" Value="F:CoreGraphics.CGAffineTransform.x0" />
      <MemberSignature Language="F#" Value="val mutable x0 : nfloat" Usage="CoreGraphics.CGAffineTransform.x0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>X translation component of the affine transform.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="xx">
      <MemberSignature Language="C#" Value="public nfloat xx;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.nfloat xx" />
      <MemberSignature Language="DocId" Value="F:CoreGraphics.CGAffineTransform.xx" />
      <MemberSignature Language="F#" Value="val mutable xx : nfloat" Usage="CoreGraphics.CGAffineTransform.xx" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XX component of the affine.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="xy">
      <MemberSignature Language="C#" Value="public nfloat xy;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.nfloat xy" />
      <MemberSignature Language="DocId" Value="F:CoreGraphics.CGAffineTransform.xy" />
      <MemberSignature Language="F#" Value="val mutable xy : nfloat" Usage="CoreGraphics.CGAffineTransform.xy" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XY component of the affine.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="y0">
      <MemberSignature Language="C#" Value="public nfloat y0;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.nfloat y0" />
      <MemberSignature Language="DocId" Value="F:CoreGraphics.CGAffineTransform.y0" />
      <MemberSignature Language="F#" Value="val mutable y0 : nfloat" Usage="CoreGraphics.CGAffineTransform.y0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Y translation component of the affine transformation.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="yx">
      <MemberSignature Language="C#" Value="public nfloat yx;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.nfloat yx" />
      <MemberSignature Language="DocId" Value="F:CoreGraphics.CGAffineTransform.yx" />
      <MemberSignature Language="F#" Value="val mutable yx : nfloat" Usage="CoreGraphics.CGAffineTransform.yx" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>YX component of the affine.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="yy">
      <MemberSignature Language="C#" Value="public nfloat yy;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.nfloat yy" />
      <MemberSignature Language="DocId" Value="F:CoreGraphics.CGAffineTransform.yy" />
      <MemberSignature Language="F#" Value="val mutable yy : nfloat" Usage="CoreGraphics.CGAffineTransform.yy" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>YY component of the affine.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
