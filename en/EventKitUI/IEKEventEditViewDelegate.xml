<Type Name="IEKEventEditViewDelegate" FullName="EventKitUI.IEKEventEditViewDelegate">
  <TypeSignature Language="C#" Value="public interface IEKEventEditViewDelegate : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEKEventEditViewDelegate implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:EventKitUI.IEKEventEditViewDelegate" />
  <TypeSignature Language="F#" Value="type IEKEventEditViewDelegate = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="EKEventEditViewDelegate", WrapperType=typeof(EventKitUI.EKEventEditViewDelegateWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="Completed", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(EventKitUI.EKEventEditViewController), typeof(EventKitUI.EKEventEditViewAction) }, Selector="eventEditViewController:didCompleteWithAction:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetDefaultCalendarForNewEvents", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(EventKitUI.EKEventEditViewController) }, ReturnType=typeof(EventKit.EKCalendar), Selector="eventEditViewControllerDefaultCalendarForNewEvents:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface representing the required methods (if any) of the protocol <see cref="T:EventKitUI.EKEventEditViewDelegate" />.</summary>
    <remarks>
      <para>This interface contains the required methods (if any) from the protocol defined by <see cref="T:EventKitUI.EKEventEditViewDelegate" />.</para>
      <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="T:EventKitUI.EKEventEditViewDelegate" /> protocol.</para>
      <para>Optional methods (if any) are provided by the <see cref="T:EventKitUI.EKEventEditViewDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Completed">
      <MemberSignature Language="C#" Value="public void Completed (EventKitUI.EKEventEditViewController controller, EventKitUI.EKEventEditViewAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Completed(class EventKitUI.EKEventEditViewController controller, valuetype EventKitUI.EKEventEditViewAction action) cil managed" />
      <MemberSignature Language="DocId" Value="M:EventKitUI.IEKEventEditViewDelegate.Completed(EventKitUI.EKEventEditViewController,EventKitUI.EKEventEditViewAction)" />
      <MemberSignature Language="F#" Value="abstract member Completed : EventKitUI.EKEventEditViewController * EventKitUI.EKEventEditViewAction -&gt; unit" Usage="iEKEventEditViewDelegate.Completed (controller, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("eventEditViewController:didCompleteWithAction:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controller" Type="EventKitUI.EKEventEditViewController" />
        <Parameter Name="action" Type="EventKitUI.EKEventEditViewAction" />
      </Parameters>
      <Docs>
        <param name="controller">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
