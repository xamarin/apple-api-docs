<Type Name="DialogViewController" FullName="MonoTouch.Dialog.DialogViewController">
  <TypeSignature Language="C#" Value="public class DialogViewController : UIKit.UITableViewController" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DialogViewController extends UIKit.UITableViewController" />
  <TypeSignature Language="DocId" Value="T:MonoTouch.Dialog.DialogViewController" />
  <TypeSignature Language="F#" Value="type DialogViewController = class&#xA;    inherit UITableViewController" />
  <AssemblyInfo>
    <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.UITableViewController</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>The DialogViewController is the main entry point to use MonoTouch.Dialog, it provides a simplified API to the UITableViewController.</summary>
    <remarks>
      <para>
	The DialogViewController renders the contents assigned to the Root
	property of type RootElement.   This can be either passed at construction
	time or assigned after the DialogViewController has been created.
      </para>
      <para> RootElements can be created either manually with the
	"Elements" API by creating the various nodes necessary to
	render the information.  You would use this if you need
	control, if you want to extend the features supported by
	MonoTouch.Dialogs or if you want to dynamically generate the
	content for your dialog.  This is what is used for example in
	TweetStation for the main timeline views.  
      </para>
      <para>

	The Element API is the most complete API and the most
	customizable one.   This is how you would create a user interface definition:


      </para>
      <example>
        <code lang="c#">
        var root = new RootElement ("Settings") {
          new Section (){
            new BooleanElement ("Airplane Mode", false),
            new RootElement ("Notifications", 0, 0) {
              new Section (null, 
                  "Turn off Notifications to disable Sounds\n" +
                  "Alerts and Home Screen Badges for the."){
                new BooleanElement ("Notifications", false)
              }
            }},
          new Section (){
            new RootElement ("Brightness"){
              new Section (){
                new FloatElement (null, null, 0.5f),
                new BooleanElement ("Auto-brightness", false),
				new UILabel ("I am a simple UILabel!"),
              }
            },
          },
          new Section () {
            new EntryElement ("Login", "enter", "miguel"),
            new EntryElement ("Password", "enter", "password", true),
            new DateElement ("Select Date", DateTime.Now),
            new TimeElement ("Select Time", DateTime.Now),
          },
	};
	</code>
      </example>
      <para>
	
	This creates a toplevel RootElement that will label the view
	as "Settings", and then will show three sectionts.  The first
	section contains a boolean value (implemented with a UISwitch)
	followed by a nested table labeled "Notifications".  If the
	user taps on that notifications cell, a new table will be
	shown with the new Boolean Element.  The second and third
	section show some common elements that can be used. 

      </para>
      <para>
	Additionally, there is a trivial Reflection-based constructor that can
	be used for quickly putting together dialogs, for example, creating an
	account page is as trivial as:
      </para>
      <example>
        <code lang="c#">
    class AccountInfo {
        [Section]
        public bool AirplaneMode;
    
        [Section ("Data Entry", "Your credentials")]
    
        [Entry ("Enter your login name")]
        public string Login;
    
        [Caption ("Password"), Password ("Enter your password")]
        public string passwd;

        [Section ("Travel options")]
        public SeatPreference preference;
  }

    void Setup ()
    {
        account = new AccountInfo ();
    
        var bc = new BindingContext (this, account, "Seat Selection");
    }
	</code>
      </example>
      <para>
	Autorotation is supported by default by setting the Autorotate property
	in the DialogViewController.   Setting this value will propagate to 
	the various components that are shiped with MonoTouch.Dialog like the
	WebView and the date and time pickers
      </para>
      <para>
	Pull to Refresh is a visual effect originally found in Tweetie2 which
	became a popular effect among many applications.
      </para>
      <para>
	To add automatic pull-to-refersh support to your dialogs, you only
	need to do two things: hook up an event handler to be notified when
	the user pulls the data and notify the DialogViewController when the
	data has been loaded to go back to its default state.
      </para>
      <para>
	Hooking up a notification is simple, just connect to the
	RefreshRequested event on the DialogViewController, like this:
      </para>
      <example>
        <code lang="c#">
        dvc.RefreshRequested += OnUserRequestedRefresh;
	</code>
      </example>
      <para>
	Then on your method OnUserRequestedRefresh, you would queue some data
	loading, request some data from the net, or spin a thread to compute
	the data.  Once the data has been loaded, you must notify the
	DialogViewController that the new data is in, and to restore the view
	to its default state, you do this by calling ReloadComplete:
      </para>
      <example>
        <code lang="c#">
	  dvc.ReloadComplete ();
	</code>
      </example>
      <para>
	To support searching, set the EnableSearch property on your
	DialogViewController.   You can also set the SearchPlaceholder
	property to use as the watermark text in the search bar.
      </para>
      <para>
	Searching will change the contents of the view as the user types, it
	searches the visible fields and shows those to the user.  The
	DialogViewController exposes three methods to programatically
	initiate, terminate or trigger a new filter operation on the results: StartSearch, FinishSearch, PerformFilter.
      </para>
      <para>
	The system is extensible, so you can alter this behavior if you want,
	details are below.
      </para>
      <para>
	There is a high-level reflection API that can be used for quickly creating user interfaces.   For more information on this, see the <see cref="T:MonoTouch.Dialog.BindingContext" /> documentation.
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DialogViewController (MonoTouch.Dialog.RootElement root);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Dialog.RootElement root) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.#ctor(MonoTouch.Dialog.RootElement)" />
      <MemberSignature Language="F#" Value="new MonoTouch.Dialog.DialogViewController : MonoTouch.Dialog.RootElement -&gt; MonoTouch.Dialog.DialogViewController" Usage="new MonoTouch.Dialog.DialogViewController root" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="root" Type="MonoTouch.Dialog.RootElement" />
      </Parameters>
      <Docs>
        <param name="root">The RootElement that contains the information to the display on the table.</param>
        <summary>Constructor that creates a new DialogViewController from the specified RootElement.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DialogViewController (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new MonoTouch.Dialog.DialogViewController : nativeint -&gt; MonoTouch.Dialog.DialogViewController" Usage="new MonoTouch.Dialog.DialogViewController handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DialogViewController (MonoTouch.Dialog.RootElement root, bool pushing);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Dialog.RootElement root, bool pushing) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.#ctor(MonoTouch.Dialog.RootElement,System.Boolean)" />
      <MemberSignature Language="F#" Value="new MonoTouch.Dialog.DialogViewController : MonoTouch.Dialog.RootElement * bool -&gt; MonoTouch.Dialog.DialogViewController" Usage="new MonoTouch.Dialog.DialogViewController (root, pushing)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="root" Type="MonoTouch.Dialog.RootElement" />
        <Parameter Name="pushing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="root">
            The <see cref="T:MonoTouch.Dialog.RootElement" /> containing the information to render.
            </param>
        <param name="pushing">
            A <see cref="T:System.Boolean" /> describing whether this is being pushed
            (NavigationControllers) or not.   If pushing is true, then the back button
            will be shown, allowing the user to go back to the previous controller
            </param>
        <summary>
            Creates a new DialogViewController from a RootElement and sets the push status.
	  </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DialogViewController (UIKit.UITableViewStyle style, MonoTouch.Dialog.RootElement root);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype UIKit.UITableViewStyle style, class MonoTouch.Dialog.RootElement root) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.#ctor(UIKit.UITableViewStyle,MonoTouch.Dialog.RootElement)" />
      <MemberSignature Language="F#" Value="new MonoTouch.Dialog.DialogViewController : UIKit.UITableViewStyle * MonoTouch.Dialog.RootElement -&gt; MonoTouch.Dialog.DialogViewController" Usage="new MonoTouch.Dialog.DialogViewController (style, root)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="style" Type="UIKit.UITableViewStyle" />
        <Parameter Name="root" Type="MonoTouch.Dialog.RootElement" />
      </Parameters>
      <Docs>
        <param name="style">To be added.</param>
        <param name="root">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DialogViewController (UIKit.UITableViewStyle style, MonoTouch.Dialog.RootElement root, bool pushing);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype UIKit.UITableViewStyle style, class MonoTouch.Dialog.RootElement root, bool pushing) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.#ctor(UIKit.UITableViewStyle,MonoTouch.Dialog.RootElement,System.Boolean)" />
      <MemberSignature Language="F#" Value="new MonoTouch.Dialog.DialogViewController : UIKit.UITableViewStyle * MonoTouch.Dialog.RootElement * bool -&gt; MonoTouch.Dialog.DialogViewController" Usage="new MonoTouch.Dialog.DialogViewController (style, root, pushing)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="style" Type="UIKit.UITableViewStyle" />
        <Parameter Name="root" Type="MonoTouch.Dialog.RootElement" />
        <Parameter Name="pushing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="style">To be added.</param>
        <param name="root">To be added.</param>
        <param name="pushing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivateController">
      <MemberSignature Language="C#" Value="public void ActivateController (UIKit.UIViewController controller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ActivateController(class UIKit.UIViewController controller) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.ActivateController(UIKit.UIViewController)" />
      <MemberSignature Language="F#" Value="member this.ActivateController : UIKit.UIViewController -&gt; unit" Usage="dialogViewController.ActivateController controller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controller" Type="UIKit.UIViewController" />
      </Parameters>
      <Docs>
        <param name="controller">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoHideSearch">
      <MemberSignature Language="C#" Value="public bool AutoHideSearch { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoHideSearch" />
      <MemberSignature Language="DocId" Value="P:MonoTouch.Dialog.DialogViewController.AutoHideSearch" />
      <MemberSignature Language="F#" Value="member this.AutoHideSearch : bool with get, set" Usage="MonoTouch.Dialog.DialogViewController.AutoHideSearch" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determines whether the search bar is automatically hidden when showing the view controller.</summary>
        <value>
        </value>
        <remarks>If set, we automatically scroll the content to avoid showing the search bar until the user manually pulls it down.
      </remarks>
      </Docs>
    </Member>
    <Member MemberName="Autorotate">
      <MemberSignature Language="C#" Value="public bool Autorotate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Autorotate" />
      <MemberSignature Language="DocId" Value="P:MonoTouch.Dialog.DialogViewController.Autorotate" />
      <MemberSignature Language="F#" Value="member this.Autorotate : bool with get, set" Usage="MonoTouch.Dialog.DialogViewController.Autorotate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Controls whether the DialogViewController should auto rotate.
            </summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSizingSource">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Dialog.DialogViewController.Source CreateSizingSource (bool unevenRows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Dialog.DialogViewController/Source CreateSizingSource(bool unevenRows) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.CreateSizingSource(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CreateSizingSource : bool -&gt; MonoTouch.Dialog.DialogViewController.Source&#xA;override this.CreateSizingSource : bool -&gt; MonoTouch.Dialog.DialogViewController.Source" Usage="dialogViewController.CreateSizingSource unevenRows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Dialog.DialogViewController+Source</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unevenRows" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="unevenRows">Whether the Source object should support rows with different sizes.   If true, the returned object should override the UITableViewSource.GetHeightForRow.</param>
        <summary>Method invoked by the DialogViewController to create its UITableViewSource.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
	    This is a virtual method that subclasses of
	    DialogViewController can override to create their own
	    versions of the <see cref="T:MonoTouch.Dialog.DialogViewController.Source" /> object (which is merely a subclass of <see cref="T:MonoTouch.UIKit.UITableViewSource" />. 
	  </para>
          <para>
	    If the value of unevenRows is true, the resulting source should override the GetHeightForRow method as the DialogViewController has determined that there will be rows with different sizes
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeactivateController">
      <MemberSignature Language="C#" Value="public void DeactivateController (bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeactivateController(bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.DeactivateController(System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.DeactivateController : bool -&gt; unit" Usage="dialogViewController.DeactivateController animated" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="animated">Determines whether animation will be used to dismiss the controller.</param>
        <summary>
            Dismisses the view controller.   It either pops or dismisses
            based on the kind of container we are hosted in.
            </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deselected">
      <MemberSignature Language="C#" Value="public virtual void Deselected (Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deselected(class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.Deselected(Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member Deselected : Foundation.NSIndexPath -&gt; unit&#xA;override this.Deselected : Foundation.NSIndexPath -&gt; unit" Usage="dialogViewController.Deselected indexPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="indexPath">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidRotate">
      <MemberSignature Language="C#" Value="public override void DidRotate (UIKit.UIInterfaceOrientation fromInterfaceOrientation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void DidRotate(valuetype UIKit.UIInterfaceOrientation fromInterfaceOrientation) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.DidRotate(UIKit.UIInterfaceOrientation)" />
      <MemberSignature Language="F#" Value="override this.DidRotate : UIKit.UIInterfaceOrientation -&gt; unit" Usage="dialogViewController.DidRotate fromInterfaceOrientation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInterfaceOrientation" Type="UIKit.UIInterfaceOrientation" />
      </Parameters>
      <Docs>
        <param name="fromInterfaceOrientation">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableSearch">
      <MemberSignature Language="C#" Value="public bool EnableSearch { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableSearch" />
      <MemberSignature Language="DocId" Value="P:MonoTouch.Dialog.DialogViewController.EnableSearch" />
      <MemberSignature Language="F#" Value="member this.EnableSearch : bool with get, set" Usage="MonoTouch.Dialog.DialogViewController.EnableSearch" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determines whether a search box should be shown.   This value should be set before the DialogViewController's View is shown.</summary>
        <value>
        </value>
        <remarks>If this value is set to true then your DialogViewController will display a search bar, and will provide searching functionality over its elements.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishSearch">
      <MemberSignature Language="C#" Value="public virtual void FinishSearch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishSearch() cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.FinishSearch" />
      <MemberSignature Language="F#" Value="abstract member FinishSearch : unit -&gt; unit&#xA;override this.FinishSearch : unit -&gt; unit" Usage="dialogViewController.FinishSearch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Allows the caller to programatically stop searching.
            </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadView">
      <MemberSignature Language="C#" Value="public override void LoadView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void LoadView() cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.LoadView" />
      <MemberSignature Language="F#" Value="override this.LoadView : unit -&gt; unit" Usage="dialogViewController.LoadView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeRefreshTableHeaderView">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Dialog.RefreshTableHeaderView MakeRefreshTableHeaderView (CoreGraphics.CGRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Dialog.RefreshTableHeaderView MakeRefreshTableHeaderView(valuetype CoreGraphics.CGRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.MakeRefreshTableHeaderView(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member MakeRefreshTableHeaderView : CoreGraphics.CGRect -&gt; MonoTouch.Dialog.RefreshTableHeaderView&#xA;override this.MakeRefreshTableHeaderView : CoreGraphics.CGRect -&gt; MonoTouch.Dialog.RefreshTableHeaderView" Usage="dialogViewController.MakeRefreshTableHeaderView rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Dialog.RefreshTableHeaderView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeTableView">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITableView MakeTableView (CoreGraphics.CGRect bounds, UIKit.UITableViewStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UITableView MakeTableView(valuetype CoreGraphics.CGRect bounds, valuetype UIKit.UITableViewStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.MakeTableView(CoreGraphics.CGRect,UIKit.UITableViewStyle)" />
      <MemberSignature Language="F#" Value="abstract member MakeTableView : CoreGraphics.CGRect * UIKit.UITableViewStyle -&gt; UIKit.UITableView&#xA;override this.MakeTableView : CoreGraphics.CGRect * UIKit.UITableViewStyle -&gt; UIKit.UITableView" Usage="dialogViewController.MakeTableView (bounds, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UITableView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="CoreGraphics.CGRect" />
        <Parameter Name="style" Type="UIKit.UITableViewStyle" />
      </Parameters>
      <Docs>
        <param name="bounds">To be added.</param>
        <param name="style">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSearchTextChanged">
      <MemberSignature Language="C#" Value="public virtual void OnSearchTextChanged (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnSearchTextChanged(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.OnSearchTextChanged(System.String)" />
      <MemberSignature Language="F#" Value="abstract member OnSearchTextChanged : string -&gt; unit&#xA;override this.OnSearchTextChanged : string -&gt; unit" Usage="dialogViewController.OnSearchTextChanged text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The new text to search for</param>
        <summary>Virtual method invoked to raise the SearchTextChanged event.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelection">
      <MemberSignature Language="C#" Value="public event Action&lt;Foundation.NSIndexPath&gt; OnSelection;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Action`1&lt;class Foundation.NSIndexPath&gt; OnSelection" />
      <MemberSignature Language="DocId" Value="E:MonoTouch.Dialog.DialogViewController.OnSelection" />
      <MemberSignature Language="F#" Value="member this.OnSelection : Action&lt;Foundation.NSIndexPath&gt; " Usage="member this.OnSelection : System.Action&lt;Foundation.NSIndexPath&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;Foundation.NSIndexPath&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformFilter">
      <MemberSignature Language="C#" Value="public void PerformFilter (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformFilter(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.PerformFilter(System.String)" />
      <MemberSignature Language="F#" Value="member this.PerformFilter : string -&gt; unit" Usage="dialogViewController.PerformFilter text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Text to search for</param>
        <summary>Programmatic access to filter the displayed contents in the DialogViewController.</summary>
        <remarks>Any elements that respond to the Matches () method with true will be added to the list.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pushing">
      <MemberSignature Language="C#" Value="public bool Pushing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Pushing" />
      <MemberSignature Language="DocId" Value="P:MonoTouch.Dialog.DialogViewController.Pushing" />
      <MemberSignature Language="F#" Value="member this.Pushing : bool with get, set" Usage="MonoTouch.Dialog.DialogViewController.Pushing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshRequested">
      <MemberSignature Language="C#" Value="public event EventHandler RefreshRequested;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RefreshRequested" />
      <MemberSignature Language="DocId" Value="E:MonoTouch.Dialog.DialogViewController.RefreshRequested" />
      <MemberSignature Language="F#" Value="member this.RefreshRequested : EventHandler " Usage="member this.RefreshRequested : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            If you assign a handler to this event before the view is shown, the
            DialogViewController will have support for pull-to-refresh UI.
            </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReloadComplete">
      <MemberSignature Language="C#" Value="public void ReloadComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReloadComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.ReloadComplete" />
      <MemberSignature Language="F#" Value="member this.ReloadComplete : unit -&gt; unit" Usage="dialogViewController.ReloadComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Invoke this method to signal that a reload has completed, this will update the UI accordingly.
            </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReloadData">
      <MemberSignature Language="C#" Value="public void ReloadData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReloadData() cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.ReloadData" />
      <MemberSignature Language="F#" Value="member this.ReloadData : unit -&gt; unit" Usage="dialogViewController.ReloadData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Forces the data in the DialogViewController to be reloaded, forces a refresh.</summary>
        <remarks>Use this method if you have updated the Source for this DialogViewController.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Root">
      <MemberSignature Language="C#" Value="public MonoTouch.Dialog.RootElement Root { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Dialog.RootElement Root" />
      <MemberSignature Language="DocId" Value="P:MonoTouch.Dialog.DialogViewController.Root" />
      <MemberSignature Language="F#" Value="member this.Root : MonoTouch.Dialog.RootElement with get, set" Usage="MonoTouch.Dialog.DialogViewController.Root" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Dialog.RootElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The root element displayed by the DialogViewController, the value can be changed during runtime to update the contents.
            </summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchButtonClicked">
      <MemberSignature Language="C#" Value="public virtual void SearchButtonClicked (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SearchButtonClicked(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.SearchButtonClicked(System.String)" />
      <MemberSignature Language="F#" Value="abstract member SearchButtonClicked : string -&gt; unit&#xA;override this.SearchButtonClicked : string -&gt; unit" Usage="dialogViewController.SearchButtonClicked text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Text that the user is searching for.</param>
        <summary>This virtual method is invoked when the user presses the "Seach" button on the DialogViewController.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchPlaceholder">
      <MemberSignature Language="C#" Value="public string SearchPlaceholder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SearchPlaceholder" />
      <MemberSignature Language="DocId" Value="P:MonoTouch.Dialog.DialogViewController.SearchPlaceholder" />
      <MemberSignature Language="F#" Value="member this.SearchPlaceholder : string with get, set" Usage="MonoTouch.Dialog.DialogViewController.SearchPlaceholder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Text placeholder to show in the search bar</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchTextChanged">
      <MemberSignature Language="C#" Value="public event MonoTouch.Dialog.DialogViewController.SearchTextEventHandler SearchTextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class MonoTouch.Dialog.DialogViewController/SearchTextEventHandler SearchTextChanged" />
      <MemberSignature Language="DocId" Value="E:MonoTouch.Dialog.DialogViewController.SearchTextChanged" />
      <MemberSignature Language="F#" Value="member this.SearchTextChanged : MonoTouch.Dialog.DialogViewController.SearchTextEventHandler " Usage="member this.SearchTextChanged : MonoTouch.Dialog.DialogViewController.SearchTextEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Dialog.DialogViewController+SearchTextEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised when the user has changed the text to search for.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public virtual void Selected (Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Selected(class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.Selected(Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member Selected : Foundation.NSIndexPath -&gt; unit&#xA;override this.Selected : Foundation.NSIndexPath -&gt; unit" Usage="dialogViewController.Selected indexPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="indexPath">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldAutorotateToInterfaceOrientation">
      <MemberSignature Language="C#" Value="public override bool ShouldAutorotateToInterfaceOrientation (UIKit.UIInterfaceOrientation toInterfaceOrientation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool ShouldAutorotateToInterfaceOrientation(valuetype UIKit.UIInterfaceOrientation toInterfaceOrientation) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.ShouldAutorotateToInterfaceOrientation(UIKit.UIInterfaceOrientation)" />
      <MemberSignature Language="F#" Value="override this.ShouldAutorotateToInterfaceOrientation : UIKit.UIInterfaceOrientation -&gt; bool" Usage="dialogViewController.ShouldAutorotateToInterfaceOrientation toInterfaceOrientation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toInterfaceOrientation" Type="UIKit.UIInterfaceOrientation" />
      </Parameters>
      <Docs>
        <param name="toInterfaceOrientation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartSearch">
      <MemberSignature Language="C#" Value="public void StartSearch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartSearch() cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.StartSearch" />
      <MemberSignature Language="F#" Value="member this.StartSearch : unit -&gt; unit" Usage="dialogViewController.StartSearch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Allows caller to programatically activate the search bar and start the search process
            </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public UIKit.UITableViewStyle Style;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype UIKit.UITableViewStyle Style" />
      <MemberSignature Language="DocId" Value="F:MonoTouch.Dialog.DialogViewController.Style" />
      <MemberSignature Language="F#" Value="val mutable Style : UIKit.UITableViewStyle" Usage="MonoTouch.Dialog.DialogViewController.Style" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UITableViewStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The style to use for the UITableView.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TriggerRefresh">
      <MemberSignature Language="C#" Value="public void TriggerRefresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TriggerRefresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.TriggerRefresh" />
      <MemberSignature Language="F#" Value="member this.TriggerRefresh : unit -&gt; unit" Usage="dialogViewController.TriggerRefresh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Invoke this method to trigger a data refresh.
            </summary>
        <remarks>
            This will invoke the RerfeshRequested event handler, the code attached to it
            should start the background operation to fetch the data and when it completes
            it should call ReloadComplete to restore the control state.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewAppearing">
      <MemberSignature Language="C#" Value="public event EventHandler ViewAppearing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ViewAppearing" />
      <MemberSignature Language="DocId" Value="E:MonoTouch.Dialog.DialogViewController.ViewAppearing" />
      <MemberSignature Language="F#" Value="member this.ViewAppearing : EventHandler " Usage="member this.ViewAppearing : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewDisappearing">
      <MemberSignature Language="C#" Value="public event EventHandler ViewDisappearing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ViewDisappearing" />
      <MemberSignature Language="DocId" Value="E:MonoTouch.Dialog.DialogViewController.ViewDisappearing" />
      <MemberSignature Language="F#" Value="member this.ViewDisappearing : EventHandler " Usage="member this.ViewDisappearing : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Invoked when the UITableView is disappearing.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewDissapearing">
      <MemberSignature Language="C#" Value="public event EventHandler ViewDissapearing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ViewDissapearing" />
      <MemberSignature Language="DocId" Value="E:MonoTouch.Dialog.DialogViewController.ViewDissapearing" />
      <MemberSignature Language="F#" Value="member this.ViewDissapearing : EventHandler " Usage="member this.ViewDissapearing : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.Obsolete("Use the ViewDisappearing event instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewWillAppear">
      <MemberSignature Language="C#" Value="public override void ViewWillAppear (bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ViewWillAppear(bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.ViewWillAppear(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.ViewWillAppear : bool -&gt; unit" Usage="dialogViewController.ViewWillAppear animated" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="animated">
        </param>
        <summary>Invoked when the UITableView is going to be shown.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewWillDisappear">
      <MemberSignature Language="C#" Value="public override void ViewWillDisappear (bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ViewWillDisappear(bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.Dialog.DialogViewController.ViewWillDisappear(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.ViewWillDisappear : bool -&gt; unit" Usage="dialogViewController.ViewWillDisappear animated" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="animated">
        </param>
        <summary>Invoked when the UITableView is going to be hidden</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
