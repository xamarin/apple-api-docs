<Type Name="BlockLiteral" FullName="MonoTouch.ObjCRuntime.BlockLiteral">
  <TypeSignature Language="C#" Value="public struct BlockLiteral" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit BlockLiteral extends System.ValueType" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Wraps a ECMA CLI delegate (C# lambdas, anonymous methods or delegates) as an Objective-C block.</summary>
    <remarks>
      <para>
	This is a low-level class that is automatically used by the MonoTouch bindings when using Objective-C block APIs.
      </para>
      <para>
	In the C#/ECMA CLI world delegates are automatically turned into blocks that can be consumed by Objective-C blocks-aware APIs.
      </para>
      <para>

	If you need to P/Invoke a native C method that takes a block
	parameter, you would need to manually setup the BlockLiteral
	object and declare a proxy method that is invoked by the block
	handler and will invoke your managed code.

      </para>
      <example>
        <code lang="c#">
// Imagine that you want to invoke the following method:
// void SetupHandler (void (^block)(double offset, int count));

// Declare the signature of the method that users would have to provide
public delegate void SetupHandlerCallback (double offset, int count);
public delegate void SetupHandlerCallbackProxy (BlockLiteral *blockLiteral, double offset, int count);
// Static variable that points to our trampoline method
private static readonly SetupHandlerCallback static_handler = TrampolineHandler;

// Our trampoline method must be registered for reverse-callback with Mono
// it takes one extra parameter than the signature, which is the pointer
// to the block that was originally passed.
[MonoPInvokeCallback (typeof (SetupHandlerCallbackProxy))]
static void TrampolineHandler (BlockLiteral *block, double offset, int count)
{
    var callback = (SetupHandlerCallback) (block-&gt;Target);
    if (callback != null)
        callback (offset, count);
}

[DllImport ("YourLibrary")]
void SetupHandler (BlockLiteral *block_ptr_handler);

public void SetupHandler (SetupHandlerCallback callback)
{
    if (callback == null)
        throw new ArgumentNullException ("callback");
    unsafe {
        BlockLiteral *block_ptr_handler;
        BlockLiteral block_handler;
        block_handler = new BlockLiteral ();
        block_ptr_handler = &amp;block_handler;
        block_handler.SetupBlock (static_handler, callback);
        
        SetupHandler (handle, block_ptr_handler);
        block_ptr_handler-&gt;CleanupBlock ();
    }
}
</code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="block_descriptor">
      <MemberSignature Language="C#" Value="public IntPtr block_descriptor;" />
      <MemberSignature Language="ILAsm" Value=".field public native int block_descriptor" />
      <MemberType>Field</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Points to a BlockDescriptor structure.</summary>
        <remarks>
          <para>
This field is initialized by SetupBlock.
</para>
          <para>
MonoTouch uses a single descriptor that maps Objective-C blocks to ECMA CLI delegates, allowing users to map Blocks to C# delegates, anonymous methods and lambdas.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanupBlock">
      <MemberSignature Language="C#" Value="public void CleanupBlock ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CleanupBlock() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resources associated with this block.</summary>
        <remarks>This releases the GCHandle that points to the user delegate.</remarks>
      </Docs>
    </Member>
    <Member MemberName="flags">
      <MemberSignature Language="C#" Value="public MonoTouch.ObjCRuntime.BlockFlags flags;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype MonoTouch.ObjCRuntime.BlockFlags flags" />
      <MemberType>Field</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.ObjCRuntime.BlockFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The flags for this Block.</summary>
        <remarks>
          <para>
This field is initialized by SetupBlock.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDelegateForBlock&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetDelegateForBlock&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetDelegateForBlock&lt;class T&gt;() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Desired type to get, the delegate must be compatible with this type.</typeparam>
        <summary>This method supports the Xamarin.iOS runtime and is not intended for use by application developers.</summary>
        <returns>Returns a delegate of the given type that can be used to invoke the Objective-C block in the provided handle.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="global_handle">
      <MemberSignature Language="C#" Value="public IntPtr global_handle;" />
      <MemberSignature Language="ILAsm" Value=".field public native int global_handle" />
      <MemberType>Field</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Block global handle.</summary>
        <remarks>
          <para>
This field is initialized by SetupBlock.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="invoke">
      <MemberSignature Language="C#" Value="public IntPtr invoke;" />
      <MemberSignature Language="ILAsm" Value=".field public native int invoke" />
      <MemberType>Field</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The method to invoke.</summary>
        <remarks>
          <para>
This field is initialized by SetupBlock.
</para>
          <para>
When used with MonoTouch's SetupBlock this contains a GCHandle that points to the trampoline delegate.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="isa">
      <MemberSignature Language="C#" Value="public IntPtr isa;" />
      <MemberSignature Language="ILAsm" Value=".field public native int isa" />
      <MemberType>Field</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Internal Objective-C Block ABI.</summary>
        <remarks>
          <para>
This field is initialized by SetupBlock.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManagedBlock">
      <MemberSignature Language="C#" Value="public static bool IsManagedBlock (IntPtr block);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsManagedBlock(native int block) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="block" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="block">The pointer to the native block.</param>
        <summary>This method determines whether a block is wrapping a managed delegate or if it's an Objective-C block.</summary>
        <returns>Returns true if the specified block contains a managed delegate.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="local_handle">
      <MemberSignature Language="C#" Value="public IntPtr local_handle;" />
      <MemberSignature Language="ILAsm" Value=".field public native int local_handle" />
      <MemberType>Field</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Internal Objective-C Block ABI.</summary>
        <remarks>
          <para>
This field is initialized by SetupBlock.
</para>
          <para>
When used with MonoTouch's SetupBlock this contains a GCHandle that points to the user delegate.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="reserved">
      <MemberSignature Language="C#" Value="public int reserved;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 reserved" />
      <MemberType>Field</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reserved field.</summary>
        <remarks>
          <para>
This field is initialized by SetupBlock.
</para>
          <para>
Should be zero.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetupBlock">
      <MemberSignature Language="C#" Value="public void SetupBlock (Delegate trampoline, Delegate userDelegate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetupBlock(class System.Delegate trampoline, class System.Delegate userDelegate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trampoline" Type="System.Delegate" />
        <Parameter Name="userDelegate" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="trampoline">The trampoline must be a static delegate.   Your code needs to keep a reference to it somewhere.</param>
        <param name="userDelegate">The user code to invoke.</param>
        <summary>Sets up a block using a trampoline and a user delegate.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public object Target { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the target object for the block.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
