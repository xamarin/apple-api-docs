<Type Name="LinkWithAttribute" FullName="ObjCRuntime.LinkWithAttribute">
  <TypeSignature Language="C#" Value="public sealed class LinkWithAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LinkWithAttribute extends System.Attribute" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A LinkWith attribute specifies how the native library associated with the assembly should be linked to the resulting application.</summary>
    <remarks>
      <para>
	This attribute is only useful for assemblies that bind to native libraries.
      </para>
      <para>

	When using this attribute, the specified library in the
	constructor will be linked with the final application.  You
	can use one or more of the properties of the attribute to
	configure how the linking is done.

      </para>
      <example>
        <code lang="C#"><![CDATA[
// The following is used to link with GoogleAdMobAds:

[assembly: LinkWith ("libGoogleAdMobAds.a", 
		     LinkTarget.Simulator | LinkTarget.ArmV7, 
		     ForceLoad = true, 
		     Frameworks = "AudioToolbox MessageUI SystemConfiguration CoreGraphics MediaPlayer StoreKit", 
		     WeakFrameworks = "AdSupport", 
		     IsCxx = true, 
		     SmartLink = true,
		     LinkerFlags = "-lz -lsqlite3")]
[assembly: LinkerSafe]
]]></code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinkWithAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinkWithAttribute (string libraryName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string libraryName) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="libraryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="libraryName">The name of the native library. For example: libMyLibrary.a</param>
        <summary>Creates a new LinkWithAttribute for the specified native library.</summary>
        <remarks>The library name should be unique as it will become the resource name for the native library embedded in the built assembly.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinkWithAttribute (string libraryName, ObjCRuntime.LinkTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string libraryName, valuetype ObjCRuntime.LinkTarget target) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="libraryName" Type="System.String" />
        <Parameter Name="target" Type="ObjCRuntime.LinkTarget" />
      </Parameters>
      <Docs>
        <param name="libraryName">The name of the native library. For example: libMyLibrary.a</param>
        <param name="target">The target platform (or platforms) that this library is built for.</param>
        <summary>Creates a new LinkWithAttribute for the specified native library targetting the specified platform(s).</summary>
        <remarks>The library name should be unique as it will become the resource name for the native library embedded in the built assembly.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinkWithAttribute (string libraryName, ObjCRuntime.LinkTarget target, string linkerFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string libraryName, valuetype ObjCRuntime.LinkTarget target, string linkerFlags) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="libraryName" Type="System.String" />
        <Parameter Name="target" Type="ObjCRuntime.LinkTarget" />
        <Parameter Name="linkerFlags" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="libraryName">The name of the native library. For example: libMyLibrary.a</param>
        <param name="target">The target platform (or platforms) that this library is built for.</param>
        <param name="linkerFlags">Additional linker flags that are required for linking the native library to an application.</param>
        <summary>Creates a new LinkWithAttribute for the specified native library targetting the specified platform(s).</summary>
        <remarks>The library name should be unique as it will become the resource name for the native library embedded in the built assembly.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dlsym">
      <MemberSignature Language="C#" Value="public ObjCRuntime.DlsymOption Dlsym { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype ObjCRuntime.DlsymOption Dlsym" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ObjCRuntime.DlsymOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceLoad">
      <MemberSignature Language="C#" Value="public bool ForceLoad { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ForceLoad" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies whether or not the -force_load gcc argument is required when linking this native library.</summary>
        <value>This value should be set to <c>true</c> if the -force_load argument is required, or <c>false</c> otherwise.</value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Frameworks">
      <MemberSignature Language="C#" Value="public string Frameworks { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Frameworks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies a space-delimited list of platform Frameworks required by the native library.</summary>
        <value>This value should be set to a string containing a space-delimited list of platform Frameworks (e.g. "CoreGraphics CoreLocation CoreMedia MediaPlayer QuartzCore").</value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCxx">
      <MemberSignature Language="C#" Value="public bool IsCxx { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCxx" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies whether or not the native library is a C++ library.</summary>
        <value>This value should be set to <c>true</c> if a c++ compiler should be used when building the application consuming this native library.</value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="LibraryName">
      <MemberSignature Language="C#" Value="public string LibraryName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LibraryName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name of the native library.</summary>
        <value>A string representing the name of the native library.</value>
        <remarks>The library name should be unique as it will become the resource name for the native library embedded in the built assembly.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkerFlags">
      <MemberSignature Language="C#" Value="public string LinkerFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LinkerFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Additional linker flags that are required for linking the native library to an application.</summary>
        <value>A string containing the extra linker flags to be passed to gcc or <c>null</c> if unneeded.</value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkTarget">
      <MemberSignature Language="C#" Value="public ObjCRuntime.LinkTarget LinkTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype ObjCRuntime.LinkTarget LinkTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ObjCRuntime.LinkTarget</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The target platform (or platforms) that this library is built for.</summary>
        <value>A bitwise-or'ing of <see cref="T:ObjCRuntime.LinkTarget" />.</value>
        <remarks>Native libraries can target multiple platforms (often called Fat Binaries).</remarks>
      </Docs>
    </Member>
    <Member MemberName="NeedsGccExceptionHandling">
      <MemberSignature Language="C#" Value="public bool NeedsGccExceptionHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NeedsGccExceptionHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies whether or not the native library requires linking with the GCC Exception Handling library (libgcc_eh).</summary>
        <value>This value should be set to <c>true</c> if the native library requires linking with -lgcc_eh, or <c>false</c> otherwise.</value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="SmartLink">
      <MemberSignature Language="C#" Value="public bool SmartLink { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SmartLink" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If this is set true, the ForceLoad value will be ignored when it is deemed safe to do so.</summary>
        <value>This value should be set to true to let Xamarin.iOS determine whether ForceLoad is required or not.</value>
        <remarks>In the current implementation the ForceLoad flag is usually not required when the static registrar is used at compilation time. The exact logic is however an implementation detail and may change in future versions.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakFrameworks">
      <MemberSignature Language="C#" Value="public string WeakFrameworks { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WeakFrameworks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies a list of space-delimited platform Frameworks that should be weakly linked.</summary>
        <value>This value should be set to a string containing a space-delimited list of platform Frameworks (e.g. "CoreBluetooth NewsstandKit Twitter").</value>
        <remarks></remarks>
      </Docs>
    </Member>
  </Members>
</Type>