<Type Name="CMMotionManager" FullName="CoreMotion.CMMotionManager">
  <TypeSignature Language="C#" Value="public class CMMotionManager : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CMMotionManager extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:CoreMotion.CMMotionManager" />
  <TypeSignature Language="F#" Value="type CMMotionManager = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("CMMotionManager", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Core class that provides access to the motion services in iOS.</summary>
    <remarks>
      <para>Core Motion was introduced in iOS 7 and is not available on all devices (the iPhone 5S was the first phone to have the necessary coprocessor and the iPad Air 2 was the first tablet). Developers can check if Core Motion is available with <see cref="P:CoreMotion.CMMotionManager.DeviceMotionAvailable" />.</para>
      <para>Applications that wish to access Core Motion must have an <c>entitlements.plist</c> file.</para>
      <para>Users must explicitly grant access to Core Motion via a standard privacy dialog. Unlike most functions that require user permissions, there is not a corresponding API to check status. However, applications can perform a query and, if authorization is not available, will receive an error of type <see cref="F:CoreMotion.CMError.MotionActivityNotAuthorized" />. This technique is shown in the following example:</para>
      <example>
        <code lang="C#"><![CDATA[
var stepCounter = new CMStepCounter ();
stepCounter.QueryStepCount(
	NSDate.FromTimeIntervalSinceNow(-60 * 60 * 24),
	NSDate.Now,
	NSOperationQueue.MainQueue, ((steps, error) => {
		if(error != null && error.Code == (int) CMError.MotionActivityNotAuthorized)
		{
			motionStatus = "Not Authorized";
			UpdateStatus();
		}
		else
		{
			motionStatus = "Available";
			var stepMsg = String.Format("You have taken {0} steps in the past 24 hours", steps);
			InvokeOnMainThread(() => {
				stepsMessage.Text = stepMsg;
				UpdateStatus();
			});
		}
	}));
          ]]></code>
      </example>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/CoreMotion/Reference/CMMotionManager_Class/index.html">Apple documentation for <c>CMMotionManager</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CMMotionManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMMotionManager.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CMMotionManager (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMMotionManager.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new CoreMotion.CMMotionManager : Foundation.NSObjectFlag -&gt; CoreMotion.CMMotionManager" Usage="new CoreMotion.CMMotionManager t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal CMMotionManager (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMMotionManager.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new CoreMotion.CMMotionManager : nativeint -&gt; CoreMotion.CMMotionManager" Usage="new CoreMotion.CMMotionManager handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccelerometerActive">
      <MemberSignature Language="C#" Value="public virtual bool AccelerometerActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AccelerometerActive" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMMotionManager.AccelerometerActive" />
      <MemberSignature Language="F#" Value="member this.AccelerometerActive : bool" Usage="CoreMotion.CMMotionManager.AccelerometerActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isAccelerometerActive")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the accelerometer is currently sending updates.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccelerometerAvailable">
      <MemberSignature Language="C#" Value="public virtual bool AccelerometerAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AccelerometerAvailable" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMMotionManager.AccelerometerAvailable" />
      <MemberSignature Language="F#" Value="member this.AccelerometerAvailable : bool" Usage="CoreMotion.CMMotionManager.AccelerometerAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isAccelerometerAvailable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the device has an accelerometer.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccelerometerData">
      <MemberSignature Language="C#" Value="public virtual CoreMotion.CMAccelerometerData AccelerometerData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreMotion.CMAccelerometerData AccelerometerData" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMMotionManager.AccelerometerData" />
      <MemberSignature Language="F#" Value="member this.AccelerometerData : CoreMotion.CMAccelerometerData" Usage="CoreMotion.CMMotionManager.AccelerometerData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("accelerometerData")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreMotion.CMAccelerometerData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The latest accelerometer data.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccelerometerUpdateInterval">
      <MemberSignature Language="C#" Value="public virtual double AccelerometerUpdateInterval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 AccelerometerUpdateInterval" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMMotionManager.AccelerometerUpdateInterval" />
      <MemberSignature Language="F#" Value="member this.AccelerometerUpdateInterval : double with get, set" Usage="CoreMotion.CMMotionManager.AccelerometerUpdateInterval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("accelerometerUpdateInterval")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAccelerometerUpdateInterval:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The duration, in seconds, between accelerometer data updates.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttitudeReferenceFrame">
      <MemberSignature Language="C#" Value="public virtual CoreMotion.CMAttitudeReferenceFrame AttitudeReferenceFrame { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreMotion.CMAttitudeReferenceFrame AttitudeReferenceFrame" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMMotionManager.AttitudeReferenceFrame" />
      <MemberSignature Language="F#" Value="member this.AttitudeReferenceFrame : CoreMotion.CMAttitudeReferenceFrame" Usage="CoreMotion.CMMotionManager.AttitudeReferenceFrame" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("attitudeReferenceFrame")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreMotion.CMAttitudeReferenceFrame</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The current attitude reference frame.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AvailableAttitudeReferenceFrames">
      <MemberSignature Language="C#" Value="public static CoreMotion.CMAttitudeReferenceFrame AvailableAttitudeReferenceFrames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype CoreMotion.CMAttitudeReferenceFrame AvailableAttitudeReferenceFrames" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMMotionManager.AvailableAttitudeReferenceFrames" />
      <MemberSignature Language="F#" Value="member this.AvailableAttitudeReferenceFrames : CoreMotion.CMAttitudeReferenceFrame" Usage="CoreMotion.CMMotionManager.AvailableAttitudeReferenceFrames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("availableAttitudeReferenceFrames")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreMotion.CMAttitudeReferenceFrame</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a bit-mask of all the available reference frames.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMMotionManager.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="CoreMotion.CMMotionManager.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeviceMotion">
      <MemberSignature Language="C#" Value="public virtual CoreMotion.CMDeviceMotion DeviceMotion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreMotion.CMDeviceMotion DeviceMotion" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMMotionManager.DeviceMotion" />
      <MemberSignature Language="F#" Value="member this.DeviceMotion : CoreMotion.CMDeviceMotion" Usage="CoreMotion.CMMotionManager.DeviceMotion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("deviceMotion")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreMotion.CMDeviceMotion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The latest device-motion data.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeviceMotionActive">
      <MemberSignature Language="C#" Value="public virtual bool DeviceMotionActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DeviceMotionActive" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMMotionManager.DeviceMotionActive" />
      <MemberSignature Language="F#" Value="member this.DeviceMotionActive : bool" Usage="CoreMotion.CMMotionManager.DeviceMotionActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isDeviceMotionActive")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the device is delivering device-motion updates.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeviceMotionAvailable">
      <MemberSignature Language="C#" Value="public virtual bool DeviceMotionAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DeviceMotionAvailable" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMMotionManager.DeviceMotionAvailable" />
      <MemberSignature Language="F#" Value="member this.DeviceMotionAvailable : bool" Usage="CoreMotion.CMMotionManager.DeviceMotionAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isDeviceMotionAvailable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the device supports device-motion updates.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeviceMotionUpdateInterval">
      <MemberSignature Language="C#" Value="public virtual double DeviceMotionUpdateInterval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 DeviceMotionUpdateInterval" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMMotionManager.DeviceMotionUpdateInterval" />
      <MemberSignature Language="F#" Value="member this.DeviceMotionUpdateInterval : double with get, set" Usage="CoreMotion.CMMotionManager.DeviceMotionUpdateInterval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("deviceMotionUpdateInterval")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDeviceMotionUpdateInterval:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The interval, in seconds, between device-motion data updates.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GyroActive">
      <MemberSignature Language="C#" Value="public virtual bool GyroActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GyroActive" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMMotionManager.GyroActive" />
      <MemberSignature Language="F#" Value="member this.GyroActive : bool" Usage="CoreMotion.CMMotionManager.GyroActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isGyroActive")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the device gyroscope is delivering updates.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GyroAvailable">
      <MemberSignature Language="C#" Value="public virtual bool GyroAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GyroAvailable" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMMotionManager.GyroAvailable" />
      <MemberSignature Language="F#" Value="member this.GyroAvailable : bool" Usage="CoreMotion.CMMotionManager.GyroAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isGyroAvailable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the device has a gyroscope.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GyroData">
      <MemberSignature Language="C#" Value="public virtual CoreMotion.CMGyroData GyroData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreMotion.CMGyroData GyroData" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMMotionManager.GyroData" />
      <MemberSignature Language="F#" Value="member this.GyroData : CoreMotion.CMGyroData" Usage="CoreMotion.CMMotionManager.GyroData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("gyroData")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreMotion.CMGyroData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The latest gyroscopic data from the device.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GyroUpdateInterval">
      <MemberSignature Language="C#" Value="public virtual double GyroUpdateInterval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 GyroUpdateInterval" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMMotionManager.GyroUpdateInterval" />
      <MemberSignature Language="F#" Value="member this.GyroUpdateInterval : double with get, set" Usage="CoreMotion.CMMotionManager.GyroUpdateInterval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("gyroUpdateInterval")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setGyroUpdateInterval:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The interval, in seconds, between gyroscopic data updates.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MagnetometerActive">
      <MemberSignature Language="C#" Value="public virtual bool MagnetometerActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MagnetometerActive" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMMotionManager.MagnetometerActive" />
      <MemberSignature Language="F#" Value="member this.MagnetometerActive : bool" Usage="CoreMotion.CMMotionManager.MagnetometerActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isMagnetometerActive")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the magnetometer is delivering data updates.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MagnetometerAvailable">
      <MemberSignature Language="C#" Value="public virtual bool MagnetometerAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MagnetometerAvailable" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMMotionManager.MagnetometerAvailable" />
      <MemberSignature Language="F#" Value="member this.MagnetometerAvailable : bool" Usage="CoreMotion.CMMotionManager.MagnetometerAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isMagnetometerAvailable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the device has a magnetometer.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MagnetometerData">
      <MemberSignature Language="C#" Value="public virtual CoreMotion.CMMagnetometerData MagnetometerData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreMotion.CMMagnetometerData MagnetometerData" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMMotionManager.MagnetometerData" />
      <MemberSignature Language="F#" Value="member this.MagnetometerData : CoreMotion.CMMagnetometerData" Usage="CoreMotion.CMMotionManager.MagnetometerData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("magnetometerData")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreMotion.CMMagnetometerData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The latest magnetometer data.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MagnetometerUpdateInterval">
      <MemberSignature Language="C#" Value="public virtual double MagnetometerUpdateInterval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MagnetometerUpdateInterval" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMMotionManager.MagnetometerUpdateInterval" />
      <MemberSignature Language="F#" Value="member this.MagnetometerUpdateInterval : double with get, set" Usage="CoreMotion.CMMotionManager.MagnetometerUpdateInterval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("magnetometerUpdateInterval")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setMagnetometerUpdateInterval:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The interval, in seconds, between magnetometer updates.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsDeviceMovementDisplay">
      <MemberSignature Language="C#" Value="public virtual bool ShowsDeviceMovementDisplay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsDeviceMovementDisplay" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMMotionManager.ShowsDeviceMovementDisplay" />
      <MemberSignature Language="F#" Value="member this.ShowsDeviceMovementDisplay : bool with get, set" Usage="CoreMotion.CMMotionManager.ShowsDeviceMovementDisplay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("showsDeviceMovementDisplay")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setShowsDeviceMovementDisplay:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the device-movement display is shown.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartAccelerometerUpdates">
      <MemberSignature Language="C#" Value="public virtual void StartAccelerometerUpdates ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartAccelerometerUpdates() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMMotionManager.StartAccelerometerUpdates" />
      <MemberSignature Language="F#" Value="abstract member StartAccelerometerUpdates : unit -&gt; unit&#xA;override this.StartAccelerometerUpdates : unit -&gt; unit" Usage="cMMotionManager.StartAccelerometerUpdates " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("startAccelerometerUpdates")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Requests that the accelerometer begin delivering data updates.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartAccelerometerUpdates">
      <MemberSignature Language="C#" Value="public virtual void StartAccelerometerUpdates (Foundation.NSOperationQueue queue, CoreMotion.CMAccelerometerHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartAccelerometerUpdates(class Foundation.NSOperationQueue queue, class CoreMotion.CMAccelerometerHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMMotionManager.StartAccelerometerUpdates(Foundation.NSOperationQueue,CoreMotion.CMAccelerometerHandler)" />
      <MemberSignature Language="F#" Value="abstract member StartAccelerometerUpdates : Foundation.NSOperationQueue * CoreMotion.CMAccelerometerHandler -&gt; unit&#xA;override this.StartAccelerometerUpdates : Foundation.NSOperationQueue * CoreMotion.CMAccelerometerHandler -&gt; unit" Usage="cMMotionManager.StartAccelerometerUpdates (queue, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("startAccelerometerUpdatesToQueue:withHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queue" Type="Foundation.NSOperationQueue" />
        <Parameter Name="handler" Type="CoreMotion.CMAccelerometerHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDCMAccelerometerHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="queue">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>Requests that the accelerometer begin delivering data updates.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartDeviceMotionUpdates">
      <MemberSignature Language="C#" Value="public virtual void StartDeviceMotionUpdates ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartDeviceMotionUpdates() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMMotionManager.StartDeviceMotionUpdates" />
      <MemberSignature Language="F#" Value="abstract member StartDeviceMotionUpdates : unit -&gt; unit&#xA;override this.StartDeviceMotionUpdates : unit -&gt; unit" Usage="cMMotionManager.StartDeviceMotionUpdates " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("startDeviceMotionUpdates")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Requests that the device begin delivering device-motion data updates.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartDeviceMotionUpdates">
      <MemberSignature Language="C#" Value="public virtual void StartDeviceMotionUpdates (CoreMotion.CMAttitudeReferenceFrame referenceFrame);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartDeviceMotionUpdates(valuetype CoreMotion.CMAttitudeReferenceFrame referenceFrame) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMMotionManager.StartDeviceMotionUpdates(CoreMotion.CMAttitudeReferenceFrame)" />
      <MemberSignature Language="F#" Value="abstract member StartDeviceMotionUpdates : CoreMotion.CMAttitudeReferenceFrame -&gt; unit&#xA;override this.StartDeviceMotionUpdates : CoreMotion.CMAttitudeReferenceFrame -&gt; unit" Usage="cMMotionManager.StartDeviceMotionUpdates referenceFrame" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("startDeviceMotionUpdatesUsingReferenceFrame:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="referenceFrame" Type="CoreMotion.CMAttitudeReferenceFrame" />
      </Parameters>
      <Docs>
        <param name="referenceFrame">To be added.</param>
        <summary>Requests that the device begin delivering device-motion data updates, using <paramref name="referenceFrame" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartDeviceMotionUpdates">
      <MemberSignature Language="C#" Value="public virtual void StartDeviceMotionUpdates (Foundation.NSOperationQueue toQueue, CoreMotion.CMDeviceMotionHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartDeviceMotionUpdates(class Foundation.NSOperationQueue toQueue, class CoreMotion.CMDeviceMotionHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMMotionManager.StartDeviceMotionUpdates(Foundation.NSOperationQueue,CoreMotion.CMDeviceMotionHandler)" />
      <MemberSignature Language="F#" Value="abstract member StartDeviceMotionUpdates : Foundation.NSOperationQueue * CoreMotion.CMDeviceMotionHandler -&gt; unit&#xA;override this.StartDeviceMotionUpdates : Foundation.NSOperationQueue * CoreMotion.CMDeviceMotionHandler -&gt; unit" Usage="cMMotionManager.StartDeviceMotionUpdates (toQueue, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("startDeviceMotionUpdatesToQueue:withHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toQueue" Type="Foundation.NSOperationQueue" />
        <Parameter Name="handler" Type="CoreMotion.CMDeviceMotionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDCMDeviceMotionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="toQueue">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>Requests that the device begin delivering device-motion data updates.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartDeviceMotionUpdates">
      <MemberSignature Language="C#" Value="public virtual void StartDeviceMotionUpdates (CoreMotion.CMAttitudeReferenceFrame referenceFrame, Foundation.NSOperationQueue queue, CoreMotion.CMDeviceMotionHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartDeviceMotionUpdates(valuetype CoreMotion.CMAttitudeReferenceFrame referenceFrame, class Foundation.NSOperationQueue queue, class CoreMotion.CMDeviceMotionHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMMotionManager.StartDeviceMotionUpdates(CoreMotion.CMAttitudeReferenceFrame,Foundation.NSOperationQueue,CoreMotion.CMDeviceMotionHandler)" />
      <MemberSignature Language="F#" Value="abstract member StartDeviceMotionUpdates : CoreMotion.CMAttitudeReferenceFrame * Foundation.NSOperationQueue * CoreMotion.CMDeviceMotionHandler -&gt; unit&#xA;override this.StartDeviceMotionUpdates : CoreMotion.CMAttitudeReferenceFrame * Foundation.NSOperationQueue * CoreMotion.CMDeviceMotionHandler -&gt; unit" Usage="cMMotionManager.StartDeviceMotionUpdates (referenceFrame, queue, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("startDeviceMotionUpdatesUsingReferenceFrame:toQueue:withHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="referenceFrame" Type="CoreMotion.CMAttitudeReferenceFrame" />
        <Parameter Name="queue" Type="Foundation.NSOperationQueue" />
        <Parameter Name="handler" Type="CoreMotion.CMDeviceMotionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDCMDeviceMotionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="referenceFrame">To be added.</param>
        <param name="queue">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>Requests that the device begin delivering device-motion data updates.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartGyroUpdates">
      <MemberSignature Language="C#" Value="public virtual void StartGyroUpdates ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartGyroUpdates() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMMotionManager.StartGyroUpdates" />
      <MemberSignature Language="F#" Value="abstract member StartGyroUpdates : unit -&gt; unit&#xA;override this.StartGyroUpdates : unit -&gt; unit" Usage="cMMotionManager.StartGyroUpdates " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("startGyroUpdates")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Requests that the gyroscope begin delivering data updates.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartGyroUpdates">
      <MemberSignature Language="C#" Value="public virtual void StartGyroUpdates (Foundation.NSOperationQueue toQueue, CoreMotion.CMGyroHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartGyroUpdates(class Foundation.NSOperationQueue toQueue, class CoreMotion.CMGyroHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMMotionManager.StartGyroUpdates(Foundation.NSOperationQueue,CoreMotion.CMGyroHandler)" />
      <MemberSignature Language="F#" Value="abstract member StartGyroUpdates : Foundation.NSOperationQueue * CoreMotion.CMGyroHandler -&gt; unit&#xA;override this.StartGyroUpdates : Foundation.NSOperationQueue * CoreMotion.CMGyroHandler -&gt; unit" Usage="cMMotionManager.StartGyroUpdates (toQueue, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("startGyroUpdatesToQueue:withHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toQueue" Type="Foundation.NSOperationQueue" />
        <Parameter Name="handler" Type="CoreMotion.CMGyroHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDCMGyroHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="toQueue">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>Requests that the gyroscope begin delivering data updates.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartMagnetometerUpdates">
      <MemberSignature Language="C#" Value="public virtual void StartMagnetometerUpdates ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartMagnetometerUpdates() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMMotionManager.StartMagnetometerUpdates" />
      <MemberSignature Language="F#" Value="abstract member StartMagnetometerUpdates : unit -&gt; unit&#xA;override this.StartMagnetometerUpdates : unit -&gt; unit" Usage="cMMotionManager.StartMagnetometerUpdates " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("startMagnetometerUpdates")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Requests that the magnetometer begin delivering data updates.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartMagnetometerUpdates">
      <MemberSignature Language="C#" Value="public virtual void StartMagnetometerUpdates (Foundation.NSOperationQueue queue, CoreMotion.CMMagnetometerHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartMagnetometerUpdates(class Foundation.NSOperationQueue queue, class CoreMotion.CMMagnetometerHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMMotionManager.StartMagnetometerUpdates(Foundation.NSOperationQueue,CoreMotion.CMMagnetometerHandler)" />
      <MemberSignature Language="F#" Value="abstract member StartMagnetometerUpdates : Foundation.NSOperationQueue * CoreMotion.CMMagnetometerHandler -&gt; unit&#xA;override this.StartMagnetometerUpdates : Foundation.NSOperationQueue * CoreMotion.CMMagnetometerHandler -&gt; unit" Usage="cMMotionManager.StartMagnetometerUpdates (queue, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("startMagnetometerUpdatesToQueue:withHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queue" Type="Foundation.NSOperationQueue" />
        <Parameter Name="handler" Type="CoreMotion.CMMagnetometerHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDCMMagnetometerHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="queue">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>Requests that the gyroscope begin delivering data updates.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopAccelerometerUpdates">
      <MemberSignature Language="C#" Value="public virtual void StopAccelerometerUpdates ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopAccelerometerUpdates() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMMotionManager.StopAccelerometerUpdates" />
      <MemberSignature Language="F#" Value="abstract member StopAccelerometerUpdates : unit -&gt; unit&#xA;override this.StopAccelerometerUpdates : unit -&gt; unit" Usage="cMMotionManager.StopAccelerometerUpdates " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("stopAccelerometerUpdates")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Requests that the accelerometer stop delivering data updates.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopDeviceMotionUpdates">
      <MemberSignature Language="C#" Value="public virtual void StopDeviceMotionUpdates ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopDeviceMotionUpdates() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMMotionManager.StopDeviceMotionUpdates" />
      <MemberSignature Language="F#" Value="abstract member StopDeviceMotionUpdates : unit -&gt; unit&#xA;override this.StopDeviceMotionUpdates : unit -&gt; unit" Usage="cMMotionManager.StopDeviceMotionUpdates " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("stopDeviceMotionUpdates")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Requests that the device stop delivering device-motion updates.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopGyroUpdates">
      <MemberSignature Language="C#" Value="public virtual void StopGyroUpdates ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopGyroUpdates() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMMotionManager.StopGyroUpdates" />
      <MemberSignature Language="F#" Value="abstract member StopGyroUpdates : unit -&gt; unit&#xA;override this.StopGyroUpdates : unit -&gt; unit" Usage="cMMotionManager.StopGyroUpdates " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("stopGyroUpdates")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Requests that the gyroscope stop delivering data updates.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopMagnetometerUpdates">
      <MemberSignature Language="C#" Value="public virtual void StopMagnetometerUpdates ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopMagnetometerUpdates() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMMotionManager.StopMagnetometerUpdates" />
      <MemberSignature Language="F#" Value="abstract member StopMagnetometerUpdates : unit -&gt; unit&#xA;override this.StopMagnetometerUpdates : unit -&gt; unit" Usage="cMMotionManager.StopMagnetometerUpdates " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("stopMagnetometerUpdates")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Requests that the magnetometer begin delivering data updates.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
