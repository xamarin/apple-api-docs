<Type Name="CMPedometer" FullName="CoreMotion.CMPedometer">
  <TypeSignature Language="C#" Value="public class CMPedometer : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CMPedometer extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:CoreMotion.CMPedometer" />
  <TypeSignature Language="F#" Value="type CMPedometer = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("CMPedometer", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Generates step-counting data, including number of steps and floors climbed/descended.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/CoreMotion/Reference/CMPedometer_class/index.html">Apple documentation for <c>CMPedometer</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CMPedometer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMPedometer.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CMPedometer (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMPedometer.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new CoreMotion.CMPedometer : Foundation.NSObjectFlag -&gt; CoreMotion.CMPedometer" Usage="new CoreMotion.CMPedometer t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal CMPedometer (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMPedometer.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new CoreMotion.CMPedometer : nativeint -&gt; CoreMotion.CMPedometer" Usage="new CoreMotion.CMPedometer handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthorizationStatus">
      <MemberSignature Language="C#" Value="public static CoreMotion.CMAuthorizationStatus AuthorizationStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype CoreMotion.CMAuthorizationStatus AuthorizationStatus" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMPedometer.AuthorizationStatus" />
      <MemberSignature Language="F#" Value="member this.AuthorizationStatus : CoreMotion.CMAuthorizationStatus" Usage="CoreMotion.CMPedometer.AuthorizationStatus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("authorizationStatus")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreMotion.CMAuthorizationStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMPedometer.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="CoreMotion.CMPedometer.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCadenceAvailable">
      <MemberSignature Language="C#" Value="public static bool IsCadenceAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsCadenceAvailable" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMPedometer.IsCadenceAvailable" />
      <MemberSignature Language="F#" Value="member this.IsCadenceAvailable : bool" Usage="CoreMotion.CMPedometer.IsCadenceAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isCadenceAvailable")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the device can deliver cadence data.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDistanceAvailable">
      <MemberSignature Language="C#" Value="public static bool IsDistanceAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsDistanceAvailable" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMPedometer.IsDistanceAvailable" />
      <MemberSignature Language="F#" Value="member this.IsDistanceAvailable : bool" Usage="CoreMotion.CMPedometer.IsDistanceAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isDistanceAvailable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the device can estimate walking distance.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFloorCountingAvailable">
      <MemberSignature Language="C#" Value="public static bool IsFloorCountingAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsFloorCountingAvailable" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMPedometer.IsFloorCountingAvailable" />
      <MemberSignature Language="F#" Value="member this.IsFloorCountingAvailable : bool" Usage="CoreMotion.CMPedometer.IsFloorCountingAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isFloorCountingAvailable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the device can track floors climbed throughout the day.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaceAvailable">
      <MemberSignature Language="C#" Value="public static bool IsPaceAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsPaceAvailable" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMPedometer.IsPaceAvailable" />
      <MemberSignature Language="F#" Value="member this.IsPaceAvailable : bool" Usage="CoreMotion.CMPedometer.IsPaceAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isPaceAvailable")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the device can determine the user's pace.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPedometerEventTrackingAvailable">
      <MemberSignature Language="C#" Value="public static bool IsPedometerEventTrackingAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsPedometerEventTrackingAvailable" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMPedometer.IsPedometerEventTrackingAvailable" />
      <MemberSignature Language="F#" Value="member this.IsPedometerEventTrackingAvailable : bool" Usage="CoreMotion.CMPedometer.IsPedometerEventTrackingAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isPedometerEventTrackingAvailable")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that tells whether pedometer tracking data is available on the device.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsStepCountingAvailable">
      <MemberSignature Language="C#" Value="public static bool IsStepCountingAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsStepCountingAvailable" />
      <MemberSignature Language="DocId" Value="P:CoreMotion.CMPedometer.IsStepCountingAvailable" />
      <MemberSignature Language="F#" Value="member this.IsStepCountingAvailable : bool" Usage="CoreMotion.CMPedometer.IsStepCountingAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isStepCountingAvailable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the device has step-counting capabilities.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryPedometerData">
      <MemberSignature Language="C#" Value="public virtual void QueryPedometerData (Foundation.NSDate start, Foundation.NSDate end, Action&lt;CoreMotion.CMPedometerData,Foundation.NSError&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void QueryPedometerData(class Foundation.NSDate start, class Foundation.NSDate end, class System.Action`2&lt;class CoreMotion.CMPedometerData, class Foundation.NSError&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMPedometer.QueryPedometerData(Foundation.NSDate,Foundation.NSDate,System.Action{CoreMotion.CMPedometerData,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member QueryPedometerData : Foundation.NSDate * Foundation.NSDate * Action&lt;CoreMotion.CMPedometerData, Foundation.NSError&gt; -&gt; unit&#xA;override this.QueryPedometerData : Foundation.NSDate * Foundation.NSDate * Action&lt;CoreMotion.CMPedometerData, Foundation.NSError&gt; -&gt; unit" Usage="cMPedometer.QueryPedometerData (start, end, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("queryPedometerDataFromDate:toDate:withHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="Foundation.NSDate" />
        <Parameter Name="end" Type="Foundation.NSDate" />
        <Parameter Name="handler" Type="System.Action&lt;CoreMotion.CMPedometerData,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V14))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="end">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>Requests pedometer data for the specified range.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryPedometerDataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;CoreMotion.CMPedometerData&gt; QueryPedometerDataAsync (Foundation.NSDate start, Foundation.NSDate end);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class CoreMotion.CMPedometerData&gt; QueryPedometerDataAsync(class Foundation.NSDate start, class Foundation.NSDate end) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMPedometer.QueryPedometerDataAsync(Foundation.NSDate,Foundation.NSDate)" />
      <MemberSignature Language="F#" Value="abstract member QueryPedometerDataAsync : Foundation.NSDate * Foundation.NSDate -&gt; System.Threading.Tasks.Task&lt;CoreMotion.CMPedometerData&gt;&#xA;override this.QueryPedometerDataAsync : Foundation.NSDate * Foundation.NSDate -&gt; System.Threading.Tasks.Task&lt;CoreMotion.CMPedometerData&gt;" Usage="cMPedometer.QueryPedometerDataAsync (start, end)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;CoreMotion.CMPedometerData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="Foundation.NSDate" />
        <Parameter Name="end" Type="Foundation.NSDate" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="end">To be added.</param>
        <summary>Requests pedometer data for the specified range.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous QueryPedometerData operation.  The value of the TResult parameter is of type System.Action&lt;CoreMotion.CMPedometerData,Foundation.NSError&gt;.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartPedometerEventUpdates">
      <MemberSignature Language="C#" Value="public virtual void StartPedometerEventUpdates (Action&lt;CoreMotion.CMPedometerEvent,Foundation.NSError&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartPedometerEventUpdates(class System.Action`2&lt;class CoreMotion.CMPedometerEvent, class Foundation.NSError&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMPedometer.StartPedometerEventUpdates(System.Action{CoreMotion.CMPedometerEvent,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member StartPedometerEventUpdates : Action&lt;CoreMotion.CMPedometerEvent, Foundation.NSError&gt; -&gt; unit&#xA;override this.StartPedometerEventUpdates : Action&lt;CoreMotion.CMPedometerEvent, Foundation.NSError&gt; -&gt; unit" Usage="cMPedometer.StartPedometerEventUpdates handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("startPedometerEventUpdatesWithHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Action&lt;CoreMotion.CMPedometerEvent,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V23))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="handler">An event handler for pedometer update events.</param>
        <summary>Starts handling updates to pedestrian data.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartPedometerEventUpdatesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;CoreMotion.CMPedometerEvent&gt; StartPedometerEventUpdatesAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class CoreMotion.CMPedometerEvent&gt; StartPedometerEventUpdatesAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMPedometer.StartPedometerEventUpdatesAsync" />
      <MemberSignature Language="F#" Value="abstract member StartPedometerEventUpdatesAsync : unit -&gt; System.Threading.Tasks.Task&lt;CoreMotion.CMPedometerEvent&gt;&#xA;override this.StartPedometerEventUpdatesAsync : unit -&gt; System.Threading.Tasks.Task&lt;CoreMotion.CMPedometerEvent&gt;" Usage="cMPedometer.StartPedometerEventUpdatesAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;CoreMotion.CMPedometerEvent&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts handling updates to pedestrian data.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous StartPedometerEventUpdates operation.  The value of the TResult parameter is of type System.Action&lt;CoreMotion.CMPedometerEvent,Foundation.NSError&gt;.</para>
        </returns>
        <remarks>
          <para copied="true">The StartPedometerEventUpdatesAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartPedometerUpdates">
      <MemberSignature Language="C#" Value="public virtual void StartPedometerUpdates (Foundation.NSDate start, Action&lt;CoreMotion.CMPedometerData,Foundation.NSError&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartPedometerUpdates(class Foundation.NSDate start, class System.Action`2&lt;class CoreMotion.CMPedometerData, class Foundation.NSError&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMPedometer.StartPedometerUpdates(Foundation.NSDate,System.Action{CoreMotion.CMPedometerData,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member StartPedometerUpdates : Foundation.NSDate * Action&lt;CoreMotion.CMPedometerData, Foundation.NSError&gt; -&gt; unit&#xA;override this.StartPedometerUpdates : Foundation.NSDate * Action&lt;CoreMotion.CMPedometerData, Foundation.NSError&gt; -&gt; unit" Usage="cMPedometer.StartPedometerUpdates (start, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("startPedometerUpdatesFromDate:withHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="Foundation.NSDate" />
        <Parameter Name="handler" Type="System.Action&lt;CoreMotion.CMPedometerData,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V14))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>Requests that the pedometer begin sending periodic updates to the app.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartPedometerUpdatesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;CoreMotion.CMPedometerData&gt; StartPedometerUpdatesAsync (Foundation.NSDate start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class CoreMotion.CMPedometerData&gt; StartPedometerUpdatesAsync(class Foundation.NSDate start) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMPedometer.StartPedometerUpdatesAsync(Foundation.NSDate)" />
      <MemberSignature Language="F#" Value="abstract member StartPedometerUpdatesAsync : Foundation.NSDate -&gt; System.Threading.Tasks.Task&lt;CoreMotion.CMPedometerData&gt;&#xA;override this.StartPedometerUpdatesAsync : Foundation.NSDate -&gt; System.Threading.Tasks.Task&lt;CoreMotion.CMPedometerData&gt;" Usage="cMPedometer.StartPedometerUpdatesAsync start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;CoreMotion.CMPedometerData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="Foundation.NSDate" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <summary>Requests that the pedometer begin sending periodic updates to the app.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous StartPedometerUpdates operation.  The value of the TResult parameter is of type System.Action&lt;CoreMotion.CMPedometerData,Foundation.NSError&gt;.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopPedometerEventUpdates">
      <MemberSignature Language="C#" Value="public virtual void StopPedometerEventUpdates ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopPedometerEventUpdates() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMPedometer.StopPedometerEventUpdates" />
      <MemberSignature Language="F#" Value="abstract member StopPedometerEventUpdates : unit -&gt; unit&#xA;override this.StopPedometerEventUpdates : unit -&gt; unit" Usage="cMPedometer.StopPedometerEventUpdates " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("stopPedometerEventUpdates")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopPedometerUpdates">
      <MemberSignature Language="C#" Value="public virtual void StopPedometerUpdates ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopPedometerUpdates() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMotion.CMPedometer.StopPedometerUpdates" />
      <MemberSignature Language="F#" Value="abstract member StopPedometerUpdates : unit -&gt; unit&#xA;override this.StopPedometerUpdates : unit -&gt; unit" Usage="cMPedometer.StopPedometerUpdates " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("stopPedometerUpdates")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Requests that the pedometer stop sending periodic updates to the app.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
