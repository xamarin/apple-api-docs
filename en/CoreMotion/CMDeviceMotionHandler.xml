<Type Name="CMDeviceMotionHandler" FullName="CoreMotion.CMDeviceMotionHandler">
  <TypeSignature Language="C#" Value="public delegate void CMDeviceMotionHandler(CMDeviceMotion motion, NSError error);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CMDeviceMotionHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:CoreMotion.CMDeviceMotionHandler" />
  <TypeSignature Language="F#" Value="type CMDeviceMotionHandler = delegate of CMDeviceMotion * NSError -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="motion" Type="CoreMotion.CMDeviceMotion" />
    <Parameter Name="error" Type="Foundation.NSError" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="motion">The device motion for this event (attitude, rotation rate and acceleration for the device).</param>
    <param name="error">The error if any, or null if there are no errors to report.</param>
    <summary>A delegate signature used to receive events from <see cref="T:CoreMotion.CMMotionManager" /></summary>
    <remarks>
      <para>
This signature is used as an argument to the <see cref="T:CoreMotion.CMMotionManager" />'s StartDeviceMotionUpdates.  
</para>
      <para>
		For example:
	</para>
      <example>
        <code lang="C#"><![CDATA[
     var motionManager = new CMMotionManager ();
     motionManager.AccelerometerUpdateInterval = 0.01; // 100Hz
     motionManager.StartDeviceMotionUpdates (NSOperationQueue.CurrentQueue, (motion, error) => {
          Console.WriteLine ("RotationRate={0} Gravity={1} UserAcceleration={2} Attitude={3}", motion.RotationRate, motion.Gravity, motion.UserAcceleration, motion.Attitude);
     });
  ]]></code>
      </example>
    </remarks>
  </Docs>
</Type>
