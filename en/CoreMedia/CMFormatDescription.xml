<Type Name="CMFormatDescription" FullName="CoreMedia.CMFormatDescription">
  <TypeSignature Language="C#" Value="public class CMFormatDescription : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CMFormatDescription extends System.Object implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:CoreMedia.CMFormatDescription" />
  <TypeSignature Language="F#" Value="type CMFormatDescription = class&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Describes media data for audio, video, text and time codes </summary>
    <remarks>Some properties apply to all media types, while some others only apply to specific media types.   They are prefixed with Audio or Video in those cases.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AudioChannelLayout">
      <MemberSignature Language="C#" Value="public AudioToolbox.AudioChannelLayout AudioChannelLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AudioToolbox.AudioChannelLayout AudioChannelLayout" />
      <MemberSignature Language="DocId" Value="P:CoreMedia.CMFormatDescription.AudioChannelLayout" />
      <MemberSignature Language="F#" Value="member this.AudioChannelLayout : AudioToolbox.AudioChannelLayout" Usage="CoreMedia.CMFormatDescription.AudioChannelLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AudioToolbox.AudioChannelLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Audio-media only: describe the channel layout.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioFormats">
      <MemberSignature Language="C#" Value="public AudioToolbox.AudioFormat[] AudioFormats { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype AudioToolbox.AudioFormat[] AudioFormats" />
      <MemberSignature Language="DocId" Value="P:CoreMedia.CMFormatDescription.AudioFormats" />
      <MemberSignature Language="F#" Value="member this.AudioFormats : AudioToolbox.AudioFormat[]" Usage="CoreMedia.CMFormatDescription.AudioFormats" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AudioToolbox.AudioFormat[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Audio-media only: the supported audio formats, sorted from most rich to less.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioFormatType">
      <MemberSignature Language="C#" Value="public AudioToolbox.AudioFormatType AudioFormatType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype AudioToolbox.AudioFormatType AudioFormatType" />
      <MemberSignature Language="DocId" Value="P:CoreMedia.CMFormatDescription.AudioFormatType" />
      <MemberSignature Language="F#" Value="member this.AudioFormatType : AudioToolbox.AudioFormatType" Usage="CoreMedia.CMFormatDescription.AudioFormatType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AudioToolbox.AudioFormatType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioMagicCookie">
      <MemberSignature Language="C#" Value="public byte[] AudioMagicCookie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] AudioMagicCookie" />
      <MemberSignature Language="DocId" Value="P:CoreMedia.CMFormatDescription.AudioMagicCookie" />
      <MemberSignature Language="F#" Value="member this.AudioMagicCookie : byte[]" Usage="CoreMedia.CMFormatDescription.AudioMagicCookie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Audio-media only: magic cookie that might need to be passed to some backends.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioMostCompatibleFormat">
      <MemberSignature Language="C#" Value="public AudioToolbox.AudioFormat AudioMostCompatibleFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype AudioToolbox.AudioFormat AudioMostCompatibleFormat" />
      <MemberSignature Language="DocId" Value="P:CoreMedia.CMFormatDescription.AudioMostCompatibleFormat" />
      <MemberSignature Language="F#" Value="member this.AudioMostCompatibleFormat : AudioToolbox.AudioFormat" Usage="CoreMedia.CMFormatDescription.AudioMostCompatibleFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AudioToolbox.AudioFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Audio-media only: returns the most compaible audio format.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioRichestDecodableFormat">
      <MemberSignature Language="C#" Value="public AudioToolbox.AudioFormat AudioRichestDecodableFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype AudioToolbox.AudioFormat AudioRichestDecodableFormat" />
      <MemberSignature Language="DocId" Value="P:CoreMedia.CMFormatDescription.AudioRichestDecodableFormat" />
      <MemberSignature Language="F#" Value="member this.AudioRichestDecodableFormat : AudioToolbox.AudioFormat" Usage="CoreMedia.CMFormatDescription.AudioRichestDecodableFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AudioToolbox.AudioFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Audio-media only: Returns the richest decodable format.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioStreamBasicDescription">
      <MemberSignature Language="C#" Value="public Nullable&lt;AudioToolbox.AudioStreamBasicDescription&gt; AudioStreamBasicDescription { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype AudioToolbox.AudioStreamBasicDescription&gt; AudioStreamBasicDescription" />
      <MemberSignature Language="DocId" Value="P:CoreMedia.CMFormatDescription.AudioStreamBasicDescription" />
      <MemberSignature Language="F#" Value="member this.AudioStreamBasicDescription : Nullable&lt;AudioToolbox.AudioStreamBasicDescription&gt;" Usage="CoreMedia.CMFormatDescription.AudioStreamBasicDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;AudioToolbox.AudioStreamBasicDescription&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Audio-media only: Returns the AudioStreamBasicDescritpion object for the audio.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClosedCaptionFormatType">
      <MemberSignature Language="C#" Value="public CoreMedia.CMClosedCaptionFormatType ClosedCaptionFormatType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreMedia.CMClosedCaptionFormatType ClosedCaptionFormatType" />
      <MemberSignature Language="DocId" Value="P:CoreMedia.CMFormatDescription.ClosedCaptionFormatType" />
      <MemberSignature Language="F#" Value="member this.ClosedCaptionFormatType : CoreMedia.CMClosedCaptionFormatType" Usage="CoreMedia.CMFormatDescription.ClosedCaptionFormatType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreMedia.CMClosedCaptionFormatType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static CoreMedia.CMFormatDescription Create (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreMedia.CMFormatDescription Create(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMedia.CMFormatDescription.Create(System.IntPtr)" />
      <MemberSignature Language="F#" Value="static member Create : nativeint -&gt; CoreMedia.CMFormatDescription" Usage="CoreMedia.CMFormatDescription.Create handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreMedia.CMFormatDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">The native handle to a CMFormatDescription or a subclass of it.</param>
        <summary>Creates a CMFormatDescription (or a subclass of it) based on a native handle.</summary>
        <returns>The return can be either a CMFormatDescription a <see cref="T:CoreMedia.CMAudioFormatDescription" /> or a <see cref="T:CoreMedia.CMVideoFormatDescription" />, you can use the C# <see langword="is" /> expression to find out which subclass to cast the result to if you need access to the audio or video specific elements.</returns>
        <remarks>This is the recommended way of surfacing an unmanaged format description, as this will create the proper wrapper with a strong type for the audio or video versions of it.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static CoreMedia.CMFormatDescription Create (IntPtr handle, bool owns);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreMedia.CMFormatDescription Create(native int handle, bool owns) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMedia.CMFormatDescription.Create(System.IntPtr,System.Boolean)" />
      <MemberSignature Language="F#" Value="static member Create : nativeint * bool -&gt; CoreMedia.CMFormatDescription" Usage="CoreMedia.CMFormatDescription.Create (handle, owns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreMedia.CMFormatDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="owns" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handle">The native handle to a CMFormatDescription or a subclass of it.</param>
        <param name="owns">True if the handle is already owned by maanged code, false otherwise (and in this case, the code will manually call retain on the object).</param>
        <summary>Creates a CMFormatDescription (or a subclass of it) based on a native handle.</summary>
        <returns>
          <para>The return can be either a CMFormatDescription a <see cref="T:CoreMedia.CMAudioFormatDescription" /> or a <see cref="T:CoreMedia.CMVideoFormatDescription" />, you can use the C# <see langword="is" /> expression to find out which subclass to cast the result to if you need access to the audio or video specific elements.</para>
          <para>
          </para>
        </returns>
        <remarks>This is mostly used to support the binding infrastructure.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static CoreMedia.CMFormatDescription Create (CoreMedia.CMMediaType mediaType, uint mediaSubtype, out CoreMedia.CMFormatDescriptionError error);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreMedia.CMFormatDescription Create(valuetype CoreMedia.CMMediaType mediaType, unsigned int32 mediaSubtype, [out] valuetype CoreMedia.CMFormatDescriptionError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMedia.CMFormatDescription.Create(CoreMedia.CMMediaType,System.UInt32,CoreMedia.CMFormatDescriptionError@)" />
      <MemberSignature Language="F#" Value="static member Create : CoreMedia.CMMediaType * uint32 *  -&gt; CoreMedia.CMFormatDescription" Usage="CoreMedia.CMFormatDescription.Create (mediaType, mediaSubtype, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreMedia.CMFormatDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mediaType" Type="CoreMedia.CMMediaType" />
        <Parameter Name="mediaSubtype" Type="System.UInt32" />
        <Parameter Name="error" Type="CoreMedia.CMFormatDescriptionError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="mediaType">media type that we want to create a wrapper for</param>
        <param name="mediaSubtype">The media subtype</param>
        <param name="error">Errors, if any, are returned here.</param>
        <summary>Creates a CMFormatDescription (or a subclass of it) based on a native handle and to have it wrapped in a specific type.</summary>
        <returns>
          <para>The return can be either a CMFormatDescription a <see cref="T:CoreMedia.CMAudioFormatDescription" /> or a <see cref="T:CoreMedia.CMVideoFormatDescription" /> depending on the mediaType parameter that you passed.</para>
          <para>
          </para>
          <para />
        </returns>
        <remarks>
          <para>In general, the <see cref="M:CoreMedia.CMFormatDescription.Create(System.IntPtr)" /> is a better option as it probes for the underlying type and creates the correct subclass of <see cref="T:CoreMedia.CMFormatDescription" /></para>
          <para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMedia.CMFormatDescription.Dispose" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="cMFormatDescription.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resources used by the CMFormatDescription object.</summary>
        <remarks>
          <para>The Dispose method releases the resources used by the CMFormatDescription class.</para>
          <para>Calling the Dispose method when the application is finished using the CMFormatDescription ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.  For more information on releasing resources see ``Cleaning up Unmananaged Resources'' at http://msdn.microsoft.com/en-us/library/498928w2.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMedia.CMFormatDescription.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="cMFormatDescription.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the CMFormatDescription object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the CMFormatDescription class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the CMFormatDescription ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~CMFormatDescription ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMedia.CMFormatDescription.Finalize" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="cMFormatDescription.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finalizer for the CMFormatDescription object</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtension">
      <MemberSignature Language="C#" Value="public Foundation.NSObject GetExtension (string extensionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.NSObject GetExtension(string extensionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMedia.CMFormatDescription.GetExtension(System.String)" />
      <MemberSignature Language="F#" Value="member this.GetExtension : string -&gt; Foundation.NSObject" Usage="cMFormatDescription.GetExtension extensionKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extensionKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="extensionKey">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtensions">
      <MemberSignature Language="C#" Value="public Foundation.NSDictionary GetExtensions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.NSDictionary GetExtensions() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMedia.CMFormatDescription.GetExtensions" />
      <MemberSignature Language="F#" Value="member this.GetExtensions : unit -&gt; Foundation.NSDictionary" Usage="cMFormatDescription.GetExtensions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeID">
      <MemberSignature Language="C#" Value="public static nint GetTypeID ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.nint GetTypeID() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMedia.CMFormatDescription.GetTypeID" />
      <MemberSignature Language="F#" Value="static member GetTypeID : unit -&gt; nint" Usage="CoreMedia.CMFormatDescription.GetTypeID " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Type identifier for the CoreMedia.CMFormatDescription type.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>The returned token is the CoreFoundation type identifier (CFType) that has been assigned to this class.</para>
          <para>This can be used to determine type identity between different CoreFoundation objects.</para>
          <para>You can retrieve the type of a CoreFoundation object by invoking the <see cref="M:CoreFoundation.CFType.GetTypeID(System.IntPtr)" /> on the native handle of the object</para>
          <example>
            <code lang="C#"><![CDATA[bool isCMFormatDescription = (CFType.GetTypeID (foo.Handle) == CMFormatDescription.GetTypeID ());]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:CoreMedia.CMFormatDescription.Handle" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="CoreMedia.CMFormatDescription.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:ObjCRuntime.INativeObject.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Handle (pointer) to the unmanaged object representation.</summary>
        <value>A pointer</value>
        <remarks>This IntPtr is a handle to the underlying unmanaged representation for this object.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MediaSubType">
      <MemberSignature Language="C#" Value="public uint MediaSubType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32 MediaSubType" />
      <MemberSignature Language="DocId" Value="P:CoreMedia.CMFormatDescription.MediaSubType" />
      <MemberSignature Language="F#" Value="member this.MediaSubType : uint32" Usage="CoreMedia.CMFormatDescription.MediaSubType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the media subtype, ideally you should use the strongly typed versions instead.</summary>
        <value>
        </value>
        <remarks>
	  Instead of using this uint value, you can use the specific
	  strongly-typed version: AudioFormatType, SubtitleFormatType,
	  ClosedCaptionFormatType, MuxedStreamType, VideoCodecType,
	  MetadataFormatType or TimeCodeFormatType.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="MediaType">
      <MemberSignature Language="C#" Value="public CoreMedia.CMMediaType MediaType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreMedia.CMMediaType MediaType" />
      <MemberSignature Language="DocId" Value="P:CoreMedia.CMFormatDescription.MediaType" />
      <MemberSignature Language="F#" Value="member this.MediaType : CoreMedia.CMMediaType" Usage="CoreMedia.CMFormatDescription.MediaType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreMedia.CMMediaType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MetadataFormatType">
      <MemberSignature Language="C#" Value="public CoreMedia.CMMetadataFormatType MetadataFormatType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreMedia.CMMetadataFormatType MetadataFormatType" />
      <MemberSignature Language="DocId" Value="P:CoreMedia.CMFormatDescription.MetadataFormatType" />
      <MemberSignature Language="F#" Value="member this.MetadataFormatType : CoreMedia.CMMetadataFormatType" Usage="CoreMedia.CMFormatDescription.MetadataFormatType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreMedia.CMMetadataFormatType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MuxedStreamType">
      <MemberSignature Language="C#" Value="public CoreMedia.CMMuxedStreamType MuxedStreamType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreMedia.CMMuxedStreamType MuxedStreamType" />
      <MemberSignature Language="DocId" Value="P:CoreMedia.CMFormatDescription.MuxedStreamType" />
      <MemberSignature Language="F#" Value="member this.MuxedStreamType : CoreMedia.CMMuxedStreamType" Usage="CoreMedia.CMFormatDescription.MuxedStreamType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreMedia.CMMuxedStreamType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtitleFormatType">
      <MemberSignature Language="C#" Value="public CoreMedia.CMSubtitleFormatType SubtitleFormatType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreMedia.CMSubtitleFormatType SubtitleFormatType" />
      <MemberSignature Language="DocId" Value="P:CoreMedia.CMFormatDescription.SubtitleFormatType" />
      <MemberSignature Language="F#" Value="member this.SubtitleFormatType : CoreMedia.CMSubtitleFormatType" Usage="CoreMedia.CMFormatDescription.SubtitleFormatType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreMedia.CMSubtitleFormatType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeCodeFormatType">
      <MemberSignature Language="C#" Value="public CoreMedia.CMTimeCodeFormatType TimeCodeFormatType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreMedia.CMTimeCodeFormatType TimeCodeFormatType" />
      <MemberSignature Language="DocId" Value="P:CoreMedia.CMFormatDescription.TimeCodeFormatType" />
      <MemberSignature Language="F#" Value="member this.TimeCodeFormatType : CoreMedia.CMTimeCodeFormatType" Usage="CoreMedia.CMFormatDescription.TimeCodeFormatType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreMedia.CMTimeCodeFormatType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VideoCodecType">
      <MemberSignature Language="C#" Value="public CoreMedia.CMVideoCodecType VideoCodecType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreMedia.CMVideoCodecType VideoCodecType" />
      <MemberSignature Language="DocId" Value="P:CoreMedia.CMFormatDescription.VideoCodecType" />
      <MemberSignature Language="F#" Value="member this.VideoCodecType : CoreMedia.CMVideoCodecType" Usage="CoreMedia.CMFormatDescription.VideoCodecType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreMedia.CMVideoCodecType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
