<Type Name="NSFileHandle+Notifications" FullName="MonoTouch.Foundation.NSFileHandle+Notifications">
  <TypeSignature Language="C#" Value="public static class NSFileHandle.Notifications" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi abstract sealed beforefieldinit NSFileHandle/Notifications extends System.Object" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para>Notification posted by the <see cref="T:MonoTouch.Foundation.NSFileHandle" /> class.</para>
    </summary>
    <remarks>
      <para>This is a static class which contains various helper methods that allow developers to observe events posted in the iOS notification hub (<see cref="T:MonoTouch.Foundation.NSNotificationCenter" />).</para>
      <para>The methods defined in this class post events invoke the provided method or lambda with a <see cref="T:MonoTouch.Foundation.NSNotificationEventArgs" /> parameter which contains strongly typed properties for the notification arguments.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ObserveConnectionAccepted">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveConnectionAccepted (EventHandler&lt;MonoTouch.Foundation.NSFileHandleConnectionAcceptedEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveConnectionAccepted(class System.EventHandler`1&lt;class MonoTouch.Foundation.NSFileHandleConnectionAcceptedEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSFileHandleConnectionAcceptedEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Registers a method to be notified when the NSFileHandleConnectionAcceptedNotification notification is posted.</summary>
        <returns>
          <para>The returned NSObject represents the registered notification.   Either call Dispose on the object to stop receiving notifications, or pass it to <see cref="M:MonoTouch.Foundation.NSNotificationCenter.RemoveObserver" /></para>
        </returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = NSFileHandle.Notifications.ObserveConnectionAccepted ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("NearSocketConnection", args.NearSocketConnection);
    Console.WriteLine ("UnixErrorCode", args.UnixErrorCode);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, MonoTouch.Foundation.NSFileHandleConnectionAcceptedEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("NearSocketConnection", args.NearSocketConnection);
    Console.WriteLine ("UnixErrorCode", args.UnixErrorCode);
}

void Setup ()
{
    notification = NSFileHandle.Notifications.ObserveConnectionAccepted (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveDataAvailable">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveDataAvailable (EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveDataAvailable(class System.EventHandler`1&lt;class MonoTouch.Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Registers a method to be notified when the NSFileHandleDataAvailableNotification notification is posted.</summary>
        <returns>
          <para>The returned NSObject represents the registered notification.   Either call Dispose on the object to stop receiving notifications, or pass it to <see cref="M:MonoTouch.Foundation.NSNotificationCenter.RemoveObserver" /></para>
        </returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = NSFileHandle.Notifications.ObserveDataAvailable ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, MonoTouch.Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = NSFileHandle.Notifications.ObserveDataAvailable (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveReadCompletion">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveReadCompletion (EventHandler&lt;MonoTouch.Foundation.NSFileHandleReadEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveReadCompletion(class System.EventHandler`1&lt;class MonoTouch.Foundation.NSFileHandleReadEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSFileHandleReadEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Registers a method to be notified when the NSFileHandleReadCompletionNotification notification is posted.</summary>
        <returns>
          <para>The returned NSObject represents the registered notification.   Either call Dispose on the object to stop receiving notifications, or pass it to <see cref="M:MonoTouch.Foundation.NSNotificationCenter.RemoveObserver" /></para>
        </returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = NSFileHandle.Notifications.ObserveReadCompletion ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("AvailableData", args.AvailableData);
    Console.WriteLine ("UnixErrorCode", args.UnixErrorCode);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, MonoTouch.Foundation.NSFileHandleReadEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("AvailableData", args.AvailableData);
    Console.WriteLine ("UnixErrorCode", args.UnixErrorCode);
}

void Setup ()
{
    notification = NSFileHandle.Notifications.ObserveReadCompletion (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveReadToEndOfFileCompletion">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveReadToEndOfFileCompletion (EventHandler&lt;MonoTouch.Foundation.NSFileHandleReadEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveReadToEndOfFileCompletion(class System.EventHandler`1&lt;class MonoTouch.Foundation.NSFileHandleReadEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSFileHandleReadEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Registers a method to be notified when the NSFileHandleReadToEndOfFileCompletionNotification notification is posted.</summary>
        <returns>
          <para>The returned NSObject represents the registered notification.   Either call Dispose on the object to stop receiving notifications, or pass it to <see cref="M:MonoTouch.Foundation.NSNotificationCenter.RemoveObserver" /></para>
        </returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = NSFileHandle.Notifications.ObserveReadToEndOfFileCompletion ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("AvailableData", args.AvailableData);
    Console.WriteLine ("UnixErrorCode", args.UnixErrorCode);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, MonoTouch.Foundation.NSFileHandleReadEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("AvailableData", args.AvailableData);
    Console.WriteLine ("UnixErrorCode", args.UnixErrorCode);
}

void Setup ()
{
    notification = NSFileHandle.Notifications.ObserveReadToEndOfFileCompletion (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
