<Type Name="NSObject" FullName="MonoTouch.Foundation.NSObject">
  <TypeSignature Language="C#" Value="public class NSObject : IDisposable, IEquatable&lt;MonoTouch.Foundation.NSObject&gt;, MonoTouch.Foundation.INSObjectProtocol" apistyle="unified" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit NSObject extends System.Object implements class MonoTouch.Foundation.INSObjectProtocol, class MonoTouch.ObjCRuntime.INativeObject, class System.IDisposable, class System.IEquatable`1&lt;class MonoTouch.Foundation.NSObject&gt;" apistyle="unified" />
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.Foundation.INSObjectProtocol</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;MonoTouch.Foundation.NSObject&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("NSObject", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Base class for all bound objects that map to Objective-C objects.</summary>
    <remarks>
      <para>
	This is the base class that is used to bind Objective-C classes
	to C# classes.  Merely subclassing from NSObject will produce a
	class that can be passed to Objective-C.   
      </para>
      <para>

	The C# NSObject class and their subclasses are managed
	representations of the underlying Objective-C instances.  The
	pointer to the unmanaged code Objective-C object is stored in
	the <see cref="P:MonoTouch.Foundation.NSObject.Handle" />
	property.

      </para>
      <para>
	
	It is important to note that currently, the compiler does not
	support generic subclasses of NSObject.   

      </para>
      <format type="text/html">
        <h2>Class Registration</h2>
      </format>
      <para>

	When you create a subclass of NSObject this subclass is
	registered with the Objective-C runtime with a name based on
	the full .NET typename which is an implementation detail.  If
	you need to ensure that a C# class is exposed with a specific
	name in the Objective-C runtime, you can apply the <see cref="T:MonoTouch.ObjCRuntime.RegisterAttribute" /> to the
	class and specify the name that you want your class to have.

      </para>
      <para>

	The above is typically used in cases where either you want to
	reference the class by name on some Objective-C code, when
	using Interface Builder XIB and Storyboard files or when you
	are using an Objective-C serialization setup (for example when
	using <see cref="T:MonoTouch.Foundation.NSCoder" />).

      </para>
      <example>
        <code lang="C#"><![CDATA[
//
// This exposes the C# class _MySampleView as the Objective-C MyView
//
[Export ("MyView")]
public class _MySampleView : UIView {

}
]]></code>
      </example>
      <format type="text/html">
        <h2>Objective-C Methods</h2>
      </format>
      <para>
	
	In general, MonoTouch classes map one to one to the underlying
	Objective-C classes.  For example, the C# class
	"MonoTouch.Foundation.NSObject" maps to the Objective-C
	"NSObject" class.  But methods are different.  The Objective-C
	methods do not translate well to C# methods, so they have been
	in general been altered to match both the C# language, the C#
	idioms and the .NET Framework Design Guidelines.   

      </para>
      <para>

	Objective-C methods are surfaced to C# as virtual methods that
	have the special <see cref="T:MonoTouch.ObjCRuntime.ExportAttribute" /> applied to
	them.  This attribute is used by the compiler to map C# names
	to Objective-C names.  These attributes are shown in the API
	documentation on top of each function, to help you identify
	which Objective-C method a particular C# method is calling.

      </para>
      <para>
	
	To alter the behavior of a class you use the standard C#
	idioms: create a subclass and override the methods that you
	want to alter and use the "base." language feature to
	optionally call into your base class.

      </para>
      <example>
        <code lang="C#"><![CDATA[
public class MyView : UISlider {
	public override void Draw (RectangleF rect)
	{
		// Let the base class draw first
		base.Draw (rect);
	
		// Our custom code
		var ctx = UIGraphics.GetCurrentContext ();
		UIColor.Gray.SetColor ();
		ctx.StrokeEllipseInRect (rect);
	}
}
]]></code>
      </example>
      <para>
	
	By default, only methods that have been overwritten will be
	exposed to the Objective-C world.  If you want to expose an
	arbitrary C# method to the Objective-C world, you need to
	apply the <see cref="T:MonoTouch.ObjCRuntime.ExportAttribute" /> to your
	public method.  And this can be done to both static and
	instance methods.  Once the attribute is applied, the method
	will be exposed to Objective-C and the standard data type
	marshalling operations that are supported by the runtime are
	made available to those methods.

      </para>
      <example>
        <code lang="C#"><![CDATA[
//
// Exposes the class StringUtilities to Objective-C with the 
// method:
//    - (NSString *) joinArray:(NSArray *) stringArray withSeparator:(NSString *sep);
//
// Used like this:
//   id utilities = [[StringUtilities alloc] init];
//   NSLog (@"Joined: %@", [utilities joinArray:users withSeparator:@", "]);
//
public class StringUtilities : NSObject {
	[Export ("joinArray:withSeparator:")]
	public string Join (string [] array, string separator)
	{
		return string.Join (separator, array);
	}
}
]]></code>
      </example>
      <format type="text/html">
        <h2>Lifecycle</h2>
      </format>
      <para>
	The C# NSObject and their subclasses are managed wrappers for
	the underlying Objective-C object.  These are created either
	from C#, when you create a new instance by using the "new"
	operator or when an existing unmanaged object is surfaced to the C# world.
      </para>
      <para>

	When you create an object from C# using the "new" operator,
	the object will initially be owned by C#, and C# will retain a
	reference to the object.  This reference will only be dropped
	when the garbage collector determines that there are no
	pending managed references to it, or when you manually call
	the Dispose method on the object.

      </para>
      <para>

	C# NSObjects are also created on demand when you invoke a
	method or a property that returns an NSObject.  At this point,
	the runtime will look into an object cache and determine
	whether a given Objective-C NSObject has already been surfaced
	to the managed world or not.  If the object has been surfaced,
	the existing object will be returned, otherwise a constructor
	that takes an IntPtr as a parameter is invoked to construct
	the object.   

      </para>
      <para>

	Pure "peers" to framework objects (those objects
	that are merely C# representations of an Objective-C object
	and have no extra managed associated state) can be recreated
	by the runtime on demand by using the constructor mentioned before.   

      </para>
      <para>

	User-subclasses of NSObjects often contain C# state so
	whenever the Objective-C runtime performs a "retain" operation
	on one of these objects, the runtime creates a GCHandle that
	keeps the managed object alive, even if there are no C#
	visible references to the object.  This simplifies bookeeping
	a lot, since the state will be preserved automatically for
	you.

      </para>
      <para>

	The Dispose operation on an NSObject will always drop the
	reference to the underlying Objective-C object, but will not
	destroy the managed state, this will only happen when both the
	managed code and the unmanaged code have both released the
	objects.  This is slightly different from .NET, because on
	.NET once an object is disposed, it is not possible to invoke
	any methods on the object, as it is deemed to be useless.  That is not the case with NSObjects. 

      </para>
      <format type="text/html">
        <h2>Adopting Protocols</h2>
      </format>
      <para>

	In MonoTouch, most Objective-C protocols are mapped to classes
	that have the <see cref="T:MonoTouch.ObjCRuntime.ModelAttribute" /> applied to
	them.  And the way that you adopt a protocol is by subclassing
	and overwriting the methods that you want to adopt.

      </para>
      <para>

	There are some rare cases, where you want to adopt an ad-hoc
	protocol on your own.  If you need to adopt an Objective-C
	protocol, you should use the <see cref="T:MonoTouch.ObjCRuntime.AdoptsAttribute" /> on your class
	and provide the name of the protocol that you want to adopt.
	Typically, when adopting a protocol, you will also have to
	list all of the Objective-C selectors that you are adopting
	using the <see cref="T:MonoTouch.ObjCRuntime.ExportAttribute" />.

      </para>
      <example>
        <code lang="C#"><![CDATA[
[Adopts ("NSLocking")]
public class MyLockeingObject : NSObject {
	[Export ("lock")]
	public void Lock ()
	{
		// ...
	}

	[Export ("unlock")]
	public void Unlock ()
	{
		// ...
	}
}
]]></code>
      </example>
      <format type="text/html">
        <h2>Key Value Coding</h2>
      </format>
      <para>
	Key Value coding is a mechanism that allows you to access
	properties of an object by their name, as opposed to accessing
	them directly with a C# method.
      </para>
      <para>

	To expose a C# property to the Key-Value coding system all you
	need to do is add the <see cref="T:MonoTouch.ObjCRuntime.ExportAttribute" /> to your
	property. The names must only contain ASCII characters, start
	with a lowercase letter, and must not contain any spaces.

      </para>
      <example>
        <code lang="C#"><![CDATA[
public class CircleLayer : CALayer {
	[Export ("radius")]
	public double Radius { get; set; }

	// ...
}
]]></code>
      </example>
      <para>

	You use the <see cref="M:MonoTouch.Foundation.ValueForKey(MonoTouch.Foundation.NSString);" />
	to lookup a property using a name, and you use the of
	functions <see cref="M:MonoTouch.Foundation.SetValueForKey(MonoTouch.Foundation.NSObject,&#xA; MonoTouch.Foundation.NSString);" /> to set the value for the
	specified property.  For example, you could call
	foo.ValueForKey ("user") to grab the value of the user
	property in an object.  

      </para>
      <para>

	In addition, you can use Key Paths to have the runtime
	repeatedly call the ValueForKey or SetValueForKey for you.
	You separate the keys by using a dot.  For example the keypath
	"user.address.phone.mobile" would request the user property,
	and then request the address property on the user, then it
	would request the phone property on the address and finally
	request the mobile property on the phone and finally use the
	result as the value.  You use the <see cref="M:MonoTouch.Foundation.ValueForKeyPath(MonoTouch.Foundation.NSString);" /> to lookup a property using
	a keypath, and you use the <see cref="M:MonoTouch.Foundation.SetValueForKeyPath(MonoTouch.Foundation.NSObject, MonoTouch.Foundation.NSString);" /> to set a value using a
	keypath.

      </para>
      <para> When using keypaths, if a lookup fails, the <see cref="M:MonoTouch.Foundation.NSObject.SetValueForUndefinedKey(MonoTouch.Foundation.NSObject,MonoTouch.Foundation.NSString)" />
	will be invoked when setting a value, and the <see cref="M:MonoTouch.Foundation.NSObject.ValueForUndefinedKey(MonoTouch.Foundation.NSString)" />
	will be invoked when looking up a value.  Both methods by
	default raise an Objective-C exception, you can alter that behavior by overriding the methods. 
	</para>
      <format type="text/html">
        <h2>Key Value Observing</h2>
      </format>
      <para>
	Key value observing is a mechanism implemented by NSObject
	that can be used to monitor changes being done to an NSObject
	through the Key Value Coding system.
      </para>
      <para>

	For your class to observe a notification, you must override
	the <see cref="M:MonoTouch.Foundation.ObserveValue(MonoTouch.Foundation.NSString,MonoTouch.Foundation.NSObject,MonoTouch.Foundation.NSDictionary,IntPtr)" />
	method which will be invoked with the information about the value changes for a specific keypath.   Then you use the <see cref="M:MonoTouch.Foundation.AddObserver(MonoTouch.Foundation.NSObject,MonoTouch.Foundation.NSString,MonoTouch.Foundation.NSKeyValueObservingOptions,IntPtr)" /> to start observing changes and the <see cref="M:MonoTouch.Foundation.RemoveObserver(MonoTouch.Foundation.NSObject,MonoTouch.Foundation.NSString)" /> method to stop receiving notifications. 

      </para>
    </remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Protocols/NSObject_Protocol/index.html">Apple documentation for <c>NSObject</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSObject (MonoTouch.Foundation.NSObjectFlag x);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag x) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="x" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="x">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSObject (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSObject (IntPtr handle, bool alloced);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle, bool alloced) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="alloced" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <param name="alloced">Whether this object was allocated by managed code.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddObserver">
      <MemberSignature Language="C#" Value="public IDisposable AddObserver (MonoTouch.Foundation.NSString key, MonoTouch.Foundation.NSKeyValueObservingOptions options, Action&lt;MonoTouch.Foundation.NSObservedChange&gt; observer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IDisposable AddObserver(class MonoTouch.Foundation.NSString key, valuetype MonoTouch.Foundation.NSKeyValueObservingOptions options, class System.Action`1&lt;class MonoTouch.Foundation.NSObservedChange&gt; observer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="options" Type="MonoTouch.Foundation.NSKeyValueObservingOptions" />
        <Parameter Name="observer" Type="System.Action&lt;MonoTouch.Foundation.NSObservedChange&gt;" />
      </Parameters>
      <Docs>
        <param name="key">


Key-path to use to perform the value lookup. The keypath consists of a series of lowercase ASCII-strings with no spaces in them separated by dot characters.
  	   
  	   
  	   </param>
        <param name="options">


Flags indicating which notifications you are interested in receiving (New, Old, Initial, Prior).
  	   
  	   
  	   </param>
        <param name="observer">


Method that will receive the observed changes.   It will receive a <see cref="T:MonoTouch.Foundation.NSObservedChanged" /> parameter with the information that was changed.
  	   
  	   
  	   </param>
        <summary>Registers an object for being observed externally using an arbitrary method.</summary>
        <returns>


An IDisposable object.  Invoke the Dispose method on this object to remove the observer.
     
     </returns>
        <remarks>
          <para>When the object is registered for observation, changes to the object specified in the keyPath that match the flags requested in options will be sent to the specied method (a lambda or method that matches the signature).</para>
          <para>This version provides the convenience of exposing the changes as part of the strongly typed <see cref="T:MonoTouch.Foundation.NSObservedChanged" /> object that is received by the target.</para>
          <para></para>
          <example>
            <code lang="C#"><![CDATA[void Setup ()
{
    AddObserver (rateKey, NSKeyValueObservingOptions.Old | NSKeyValueObservingOptions.New, (observed) => {
        Console.WriteLine ("Change: {0}", observed.Change);
        Console.WriteLine ("NewValue: {0}", observed.NewValue);
        Console.WriteLine ("OldValue: {0}", observed.OldValue);
        Console.WriteLine ("Indexes: {0}", observed.Indexes);
        Console.WriteLine ("IsPrior: {0}", observed.IsPrior);
    });
}]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddObserver">
      <MemberSignature Language="C#" Value="public IDisposable AddObserver (string key, MonoTouch.Foundation.NSKeyValueObservingOptions options, Action&lt;MonoTouch.Foundation.NSObservedChange&gt; observer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IDisposable AddObserver(string key, valuetype MonoTouch.Foundation.NSKeyValueObservingOptions options, class System.Action`1&lt;class MonoTouch.Foundation.NSObservedChange&gt; observer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="options" Type="MonoTouch.Foundation.NSKeyValueObservingOptions" />
        <Parameter Name="observer" Type="System.Action&lt;MonoTouch.Foundation.NSObservedChange&gt;" />
      </Parameters>
      <Docs>
        <param name="key">


Key-path to use to perform the value lookup. The keypath consists of a series of lowercase ASCII-strings with no spaces in them separated by dot characters.
  	   
  	   
  	   </param>
        <param name="options">


Flags indicating which notifications you are interested in receiving (New, Old, Initial, Prior).
  	   
  	   
  	   </param>
        <param name="observer">


Method that will receive the observed changes.   It will receive a <see cref="T:MonoTouch.Foundation.NSObservedChanged" /> parameter with the information that was changed.
  	   
  	   
  	   </param>
        <summary>Registers an object for being observed externally using an arbitrary method.</summary>
        <returns>

An IDisposable object.  Invoke the Dispose method on this object to remove the observer.
     
     </returns>
        <remarks>
          <para>When the object is registered for observation, changes to the object specified in the keyPath that match the flags requested in options will be sent to the specied method (a lambda or method that matches the signature).</para>
          <para>This version provides the convenience of exposing the changes as part of the strongly typed <see cref="T:MonoTouch.Foundation.NSObservedChanged" /> object that is received by the target.</para>
          <para></para>
          <example>
            <code lang="C#"><![CDATA[void Setup ()
{
    AddObserver (rateKey, NSKeyValueObservingOptions.Old | NSKeyValueObservingOptions.New, (observed) => {
        Console.WriteLine ("Change: {0}", observed.Change);
        Console.WriteLine ("NewValue: {0}", observed.NewValue);
        Console.WriteLine ("OldValue: {0}", observed.OldValue);
        Console.WriteLine ("Indexes: {0}", observed.Indexes);
        Console.WriteLine ("IsPrior: {0}", observed.IsPrior);
    });
}]]></code>
          </example>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddObserver">
      <MemberSignature Language="C#" Value="public virtual void AddObserver (MonoTouch.Foundation.NSObject observer, MonoTouch.Foundation.NSString keyPath, MonoTouch.Foundation.NSKeyValueObservingOptions options, IntPtr context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddObserver(class MonoTouch.Foundation.NSObject observer, class MonoTouch.Foundation.NSString keyPath, valuetype MonoTouch.Foundation.NSKeyValueObservingOptions options, native int context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addObserver:forKeyPath:options:context:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="keyPath" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="options" Type="MonoTouch.Foundation.NSKeyValueObservingOptions" />
        <Parameter Name="context" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="observer">

The object that will receive the notifications
  	   
  	   </param>
        <param name="keyPath">

Key-path to use to perform the value lookup.   The keypath consists of a series of lowercase ASCII-strings with no spaces in them separated by dot characters.
  	   
  	   </param>
        <param name="options">

Flags indicating which notifications you are interested in receiving (New, Old, Initial, Prior).Context data passed to the <see cref="T:MonoTouch.Foundation.NSObjectObserveValue" /> method when one of the properties change.
  	   
  	   </param>
        <param name="context">Opaque constant that will be passed to the <see cref="M:MonoTouch.Foundation.NSObject.ObserveValue" /> method</param>
        <summary>Registers an object for being observed externally (using NSString keyPath).   Observed changes are dispatched to the observer’s object <see cref="M:MonoTouch.Foundation.NSObject.ObserveValue" /> method.</summary>
        <remarks>
          <para>When the object is registered for observation, changes to the object specified in the keyPath that match the flags requested in options will be sent to the <see cref="T:MonoTouch.Foundation.NSObjectObserveValue" /> method in the observer object.   </para>
          <para>To stop receiving notifications, call the <see cref="M:MonoTouch.Foundation.NSObject.RemoveObserver" /> method.</para>
          <para></para>
          <example>
            <code lang="C#"><![CDATA[class MySampleViewController : UIViewController {
    // A token to tell different observed properties appart.
    const IntPtr tokenObserveRate = (IntPtr) 1;
    const IntPtr tokenObserveVolume = (IntPtr) 2;

    void Setup ()
    {

        Player.AddObserver (this, (NSString)"rate",
            NSKeyValueObservingOptions.Old | NSKeyValueObservingOptions.New,
            tokenObserveRate);
        Player.AddObserver (this, (NSString)”volume",
            NSKeyValueObservingOptions.Old | NSKeyValueObservingOptions.New,
            tokenObserveVolume);

    }
    public override void ObserveValue (NSString keyPath, NSObject ofObject, NSDictionary change, IntPtr ctx)
    {
        // Handle change.
        if (ctx == tokenObserveRate) {
            // the rate changed
        } else if (ctx == tokenObserveVolume){
            // the volume changed
        } else {
            // invoke the base implementation for unhandled events
            base.ObserveValue (keyPath, ofObject, change, ctx);
        }
    }
}]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddObserver">
      <MemberSignature Language="C#" Value="public void AddObserver (MonoTouch.Foundation.NSObject observer, string keyPath, MonoTouch.Foundation.NSKeyValueObservingOptions options, IntPtr context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddObserver(class MonoTouch.Foundation.NSObject observer, string keyPath, valuetype MonoTouch.Foundation.NSKeyValueObservingOptions options, native int context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="keyPath" Type="System.String" />
        <Parameter Name="options" Type="MonoTouch.Foundation.NSKeyValueObservingOptions" />
        <Parameter Name="context" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="observer">
The object that will receive the notifications.   The object will receive notifications on its <see cref="M:MonoTouch.Foundation.NSObject.ObserveValue" /> method.</param>
        <param name="keyPath">
Key-path to use to perform the value lookup. The keypath consists of a series of lowercase ASCII-strings with no spaces in them separated by dot characters.
  	   </param>
        <param name="options">
Flags indicating which notifications you are interested in receiving (New, Old, Initial, Prior).
  	   </param>
        <param name="context">
Context data passed to
        the <see cref="M:MonoTouch.Foundation.NSObject.ObserveValue" />
        method when one of the properties change.
  	   </param>
        <summary>Registers an object for being observed externally (using string keyPath).   Observed changes are dispatched to the observer’s object <see cref="M:MonoTouch.Foundation.NSObject.ObserveValue" /> method.</summary>
        <remarks>
          <para>When the object is registered for observation, changes
          to the object specified in the keyPath that match the flags
          requested in options will be sent to the
<see cref="M:MonoTouch.Foundation.NSObject.ObserveValue" /> method in the observer object.</para>
          <para>To stop receiving notifications, call the <see cref="M:MonoTouch.Foundation.NSObject.RemoveObserver" /> method.</para>
          <para></para>
          <example>
            <code lang="C#"><![CDATA[class MySampleViewController : UIViewController {
    void Setup ()
    {
        Player.AddObserver (this, (NSString)"rate",
            NSKeyValueObservingOptions.Old | NSKeyValueObservingOptions.New,
            IntPtr.Zero);
    }
    public override void ObserveValue (NSString keyPath, NSObject ofObject, NSDictionary change, IntPtr ctx)
    {
        // Handle change.
    }
}]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Alloc">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject Alloc (MonoTouch.ObjCRuntime.Class kls);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject Alloc(class MonoTouch.ObjCRuntime.Class kls) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kls" Type="MonoTouch.ObjCRuntime.Class" />
      </Parameters>
      <Docs>
        <param name="kls">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutomaticallyNotifiesObserversForKey">
      <MemberSignature Language="C#" Value="public static bool AutomaticallyNotifiesObserversForKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AutomaticallyNotifiesObserversForKey(string key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("automaticallyNotifiesObserversForKey:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Name of the Objective-C property.  It must be an ASCII name, start with a lowercase letter and contain no spaces.</param>
        <summary>Whether this object is providing key-value notifications for the specified key.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AwakeFromNib">
      <MemberSignature Language="C#" Value="public virtual void AwakeFromNib ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AwakeFromNib() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("awakeFromNib")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Unavailable(MonoTouch.ObjCRuntime.PlatformName.WatchOS, MonoTouch.ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called after the object has been loaded from the nib file. Overriders must call base.AwakeFromNib().</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvokeOnMainThread" apistyle="unified">
      <MemberSignature Language="C#" Value="public void BeginInvokeOnMainThread (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginInvokeOnMainThread(class System.Action action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvokeOnMainThread">
      <MemberSignature Language="C#" Value="public void BeginInvokeOnMainThread (MonoTouch.ObjCRuntime.Selector sel, MonoTouch.Foundation.NSObject obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginInvokeOnMainThread(class MonoTouch.ObjCRuntime.Selector sel, class MonoTouch.Foundation.NSObject obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sel" Type="MonoTouch.ObjCRuntime.Selector" />
        <Parameter Name="obj" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="sel">Selector to invoke</param>
        <param name="obj">Object in which the selector is invoked</param>
        <summary>Invokes asynchrously the specified code on the main UI thread.</summary>
        <remarks>
          <para>
	    You use this method from a thread to invoke the code in
	    the specified object that is exposed with the specified
	    selector in the UI thread.  This is required for most
	    operations that affect UIKit or AppKit as neither one of
	    those APIs is thread safe.
	  </para>
          <para>
	    The code is executed when the main thread goes back to its
	    main loop for processing events.
	  </para>
          <para>
	    Unlike <see cref="M:MonoTouch.Foundation.NSObject.InvokeOnMainThread(MonoTouch.ObjCRuntime.Selector,MonoTouch.Foundation.NSObject)" />
	    this method merely queues the invocation and returns
	    immediately to the caller.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelPreviousPerformRequest">
      <MemberSignature Language="C#" Value="public static void CancelPreviousPerformRequest (MonoTouch.Foundation.NSObject aTarget);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CancelPreviousPerformRequest(class MonoTouch.Foundation.NSObject aTarget) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("cancelPreviousPerformRequestsWithTarget:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aTarget" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="aTarget">The object where the delayed invocation was performed.</param>
        <summary>Cancels a pending time-delayed Invoke or PerformSelector.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelPreviousPerformRequest">
      <MemberSignature Language="C#" Value="public static void CancelPreviousPerformRequest (MonoTouch.Foundation.NSObject aTarget, MonoTouch.ObjCRuntime.Selector selector, MonoTouch.Foundation.NSObject argument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CancelPreviousPerformRequest(class MonoTouch.Foundation.NSObject aTarget, class MonoTouch.ObjCRuntime.Selector selector, class MonoTouch.Foundation.NSObject argument) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("cancelPreviousPerformRequestsWithTarget:selector:object:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aTarget" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="selector" Type="MonoTouch.ObjCRuntime.Selector" />
        <Parameter Name="argument" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="aTarget">The object where the delayed invocation was performed.</param>
        <param name="selector">The selector that was going to be invoked.</param>
        <param name="argument">
          <para></para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Cancels a pending time-delayed PerformSelector.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeIndexesKey">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString ChangeIndexesKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString ChangeIndexesKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("NSKeyValueChangeIndexesKey", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant NSKeyValueChangeIndexesKey</summary>
        <value></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeKindKey">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString ChangeKindKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString ChangeKindKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("NSKeyValueChangeKindKey", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant NSKeyValueChangeKindKey</summary>
        <value></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeNewKey">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString ChangeNewKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString ChangeNewKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("NSKeyValueChangeNewKey", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant NSKeyValueChangeNewKey</summary>
        <value></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeNotificationIsPriorKey">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString ChangeNotificationIsPriorKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString ChangeNotificationIsPriorKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("NSKeyValueChangeNotificationIsPriorKey", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for ChangeNotificati</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:MonoTouch.Foundation.NSNotificationCenter" /> to register a listener for this notification.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (NSObject.ChangeNotificationIsPriorKey, (notification) => Console.WriteLine ("Received the notification NSObject", notification);

// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification NSObject", notification);
}
void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (NSObject.ChangeNotificationIsPriorKey, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeOldKey">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString ChangeOldKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString ChangeOldKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("NSKeyValueChangeOldKey", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant NSKeyValueChangeOldKey</summary>
        <value></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Class">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.ObjCRuntime.Class Class { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.ObjCRuntime.Class Class" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("class")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ObjCRuntime.Class</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public virtual IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformsToProtocol">
      <MemberSignature Language="C#" Value="public virtual bool ConformsToProtocol (IntPtr protocol);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ConformsToProtocol(native int protocol) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("conformsToProtocol:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protocol" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="protocol">Pointer to a protocol.</param>
        <summary>Invoked to determine if this object implements the specified protocol.</summary>
        <returns>Must return true if the class implements the protocol.</returns>
        <remarks>
          <para>
	    You can override this method if you need your class to
	    respond to Objective-C's query to the object as to whether
	    it implements the specified protocol.
	  </para>
          <para>
	    You can compare the IntPtr value with the result of
	    creating an AdoptsAttribute with the specified protocol
	    and fetching its ProtocolHandle.
	  </para>
          <example>
            <code lang="C#"><![CDATA[
static AdoptsAttribute myProtocol = new AdoptsAttribute ("MyProtocol");
public override ConformsToProtocol (IntPtr protocol)
{
	if (protocol == myProtocol.ProtocolHandle)
		return true;
	return false;
}
]]></code>
          </example>
          <para>
	    Although typically you would merely decorare your class
	    with the <see cref="T:MonoTouch.ObjCRuntime.AdoptsAttribute" /> and let
	    the runtime do this for you, like this:
	  </para>
          <example>
            <code lang="C#"><![CDATA[
[Adopts ("UITextInput")]
[Register ("MyCoreView")]
public class EditableCoreTextView : UIView {
	[Export ("inputDelegate")]
	public UITextInputDelegate InputDelegate {...}
}
]]></code>
          </example>
          <para>
	    For a complete sample of the AdoptsAttribute see the SimpleTextInput sample
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject Copy() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("copy")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>MonoTouch.ObjCRuntime.Release</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Convenience method that calls the Copy(null) method.   This is an implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DangerousAutorelease">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSObject DangerousAutorelease ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject DangerousAutorelease() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DangerousRelease">
      <MemberSignature Language="C#" Value="public void DangerousRelease ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DangerousRelease() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DangerousRetain">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSObject DangerousRetain ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject DangerousRetain() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DebugDescription">
      <MemberSignature Language="C#" Value="public virtual string DebugDescription { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DebugDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("debugDescription")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A developer-meaningful description of this object.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public virtual string Description { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("description")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Description of the object, the Objective-C version of ToString.</summary>
        <value></value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="DidChange">
      <MemberSignature Language="C#" Value="public virtual void DidChange (MonoTouch.Foundation.NSKeyValueChange changeKind, MonoTouch.Foundation.NSIndexSet indexes, MonoTouch.Foundation.NSString forKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidChange(valuetype MonoTouch.Foundation.NSKeyValueChange changeKind, class MonoTouch.Foundation.NSIndexSet indexes, class MonoTouch.Foundation.NSString forKey) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("didChange:valuesAtIndexes:forKey:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeKind" Type="MonoTouch.Foundation.NSKeyValueChange" />
        <Parameter Name="indexes" Type="MonoTouch.Foundation.NSIndexSet" />
        <Parameter Name="forKey" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="changeKind">To be added.</param>
        <param name="indexes">To be added.</param>
        <param name="forKey">The name of the key that was changed.</param>
        <summary>Indicates a change occurred to the indexes for a to-many relationship.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidChange">
      <MemberSignature Language="C#" Value="public virtual void DidChange (MonoTouch.Foundation.NSString forKey, MonoTouch.Foundation.NSKeyValueSetMutationKind mutationKind, MonoTouch.Foundation.NSSet objects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidChange(class MonoTouch.Foundation.NSString forKey, valuetype MonoTouch.Foundation.NSKeyValueSetMutationKind mutationKind, class MonoTouch.Foundation.NSSet objects) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("didChangeValueForKey:withSetMutation:usingObjects:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forKey" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="mutationKind" Type="MonoTouch.Foundation.NSKeyValueSetMutationKind" />
        <Parameter Name="objects" Type="MonoTouch.Foundation.NSSet" />
      </Parameters>
      <Docs>
        <param name="forKey">The name of the key that was changed.</param>
        <param name="mutationKind">To be added.</param>
        <param name="objects">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidChangeValue">
      <MemberSignature Language="C#" Value="public virtual void DidChangeValue (string forKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidChangeValue(string forKey) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("didChangeValueForKey:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="forKey">The name of the key that was changed.</param>
        <summary>Indicates that a change occurred on the specified key.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resources used by the NSObject object.</summary>
        <remarks>
          <para>The Dispose method releases the resources used by the NSObject class.</para>
          <para>Calling the Dispose method when the application is finished using the NSObject ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.  For more information on releasing resources see ``Cleaning up Unmananaged Resources'' at http://msdn.microsoft.com/en-us/library/498928w2.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the NSObject object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the NSObject class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the NSObject ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoesNotRecognizeSelector">
      <MemberSignature Language="C#" Value="public virtual void DoesNotRecognizeSelector (MonoTouch.ObjCRuntime.Selector sel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DoesNotRecognizeSelector(class MonoTouch.ObjCRuntime.Selector sel) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("doesNotRecognizeSelector:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sel" Type="MonoTouch.ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="sel">To be added.</param>
        <summary>Indicates that this object does not recognize the specified selector.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals" apistyle="unified">
      <MemberSignature Language="C#" Value="public bool Equals (MonoTouch.Foundation.NSObject obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class MonoTouch.Foundation.NSObject obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals" apistyle="unified">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NSObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finalizer for the NSObject object</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="FromObject">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject FromObject (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject FromObject(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">A ECMA CLI object.</param>
        <summary>Boxes an object into an NSObject.</summary>
        <returns>Boxed object or null if the type can not be boxed.</returns>
        <remarks>
          <para>
	    This method can box the following types from a core
	    runtime type to an NSObject type by boxing the values.
	  </para>
          <para>
	    bool, char, sbyte, byte, short, ushort, int, int32,
	    long, long64, float and double are boxed as NSNumbers.
	  </para>
          <para>
	    IntPtr are boxed as NSValue containing a pointer.
	  </para>
          <para>
	    System.Drawing.SizeF, System.Drawing.RectangleF,
	    System.Drawing.PointF,
	    MonoTouch.CoreGraphics.CGAffineTransform,
	    MonoTouch.UIKit.UIEdgeInsets and
	    MonoTouch.CoreAnimation.CATransform3D are boxed as an
	    NSValue containing the corresponding type.
	  </para>
          <para>
	    NSObjects and subclasses are returned as-is.
	  </para>
          <para>
	    The null value is returned as an NSNull.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDictionaryOfValuesFromKeys">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDictionary GetDictionaryOfValuesFromKeys (MonoTouch.Foundation.NSString[] keys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSDictionary GetDictionaryOfValuesFromKeys(class MonoTouch.Foundation.NSString[] keys) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("dictionaryWithValuesForKeys:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="MonoTouch.Foundation.NSString[]" />
      </Parameters>
      <Docs>
        <param name="keys">To be added.</param>
        <summary>Retrieves the values of the specified keys.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode" apistyle="unified">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Generates a hash code for the current instance.</summary>
        <returns>A int containing the hash code for this instance.</returns>
        <remarks>The algorithm used to generate the hash code is unspecified.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKeyPathsForValuesAffecting">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSSet GetKeyPathsForValuesAffecting (MonoTouch.Foundation.NSString key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSSet GetKeyPathsForValuesAffecting(class MonoTouch.Foundation.NSString key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("keyPathsForValuesAffectingValueForKey:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="key">Name of the Objective-C property.  It must be an ASCII name, start with a lowercase letter and contain no spaces.</param>
        <summary>The key paths whose values affect the value of the specified key.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodForSelector">
      <MemberSignature Language="C#" Value="public virtual IntPtr GetMethodForSelector (MonoTouch.ObjCRuntime.Selector sel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetMethodForSelector(class MonoTouch.ObjCRuntime.Selector sel) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("methodForSelector:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sel" Type="MonoTouch.ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="sel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNativeField">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSObject GetNativeField (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.Foundation.NSObject GetNativeField(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Do not use; this API does not properly retain/release existing/new values, so leaks and/or crashes may occur.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNativeHash">
      <MemberSignature Language="C#" Value="public virtual nuint GetNativeHash ();" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nuint GetNativeHash() cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("hash")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="unified">System.nuint</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Handle (pointer) to the unmanaged object representation.</summary>
        <value>A pointer</value>
        <remarks>This IntPtr is a handle to the underlying unmanaged representation for this object.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Init">
      <MemberSignature Language="C#" Value="public void Init ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Init() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeHandle">
      <MemberSignature Language="C#" Value="protected void InitializeHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializeHandle(native int handle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeHandle">
      <MemberSignature Language="C#" Value="protected void InitializeHandle (IntPtr handle, string initSelector);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializeHandle(native int handle, string initSelector) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="initSelector" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <param name="initSelector">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual void Invoke (Action action, double delay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invoke(class System.Action action, float64 delay) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="delay" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <param name="delay">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual void Invoke (Action action, TimeSpan delay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invoke(class System.Action action, valuetype System.TimeSpan delay) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="delay" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <param name="delay">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeInBackground" apistyle="unified">
      <MemberSignature Language="C#" Value="public static void InvokeInBackground (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InvokeInBackground(class System.Action action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeOnMainThread" apistyle="unified">
      <MemberSignature Language="C#" Value="public void InvokeOnMainThread (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeOnMainThread(class System.Action action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeOnMainThread">
      <MemberSignature Language="C#" Value="public void InvokeOnMainThread (MonoTouch.ObjCRuntime.Selector sel, MonoTouch.Foundation.NSObject obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeOnMainThread(class MonoTouch.ObjCRuntime.Selector sel, class MonoTouch.Foundation.NSObject obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sel" Type="MonoTouch.ObjCRuntime.Selector" />
        <Parameter Name="obj" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="sel">Selector to invoke</param>
        <param name="obj">Object in which the selector is invoked</param>
        <summary>Invokes synchrously the specified code on the main UI thread.</summary>
        <remarks>
          <para>
	    You use this method from a thread to invoke the code in
	    the specified object that is exposed with the specified
	    selector in the UI thread.  This is required for most
	    operations that affect UIKit or AppKit as neither one of
	    those APIs is thread safe.
	  </para>
          <para>
	    The code is executed when the main thread goes back to its
	    main loop for processing events.
	  </para>
          <para>
	    Unlike <see cref="M:MonoTouch.Foundation.NSObject.BeginInvokeOnMainThread(MonoTouch.ObjCRuntime.Selector,MonoTouch.Foundation.NSObject)" />
	    this method waits for the main thread to execute the method, and does not return until the code pointed by action has completed.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirectBinding" apistyle="unified">
      <MemberSignature Language="C#" Value="protected bool IsDirectBinding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirectBinding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEqual">
      <MemberSignature Language="C#" Value="public virtual bool IsEqual (MonoTouch.Foundation.NSObject anObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEqual(class MonoTouch.Foundation.NSObject anObject) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("isEqual:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="anObject">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKindOfClass">
      <MemberSignature Language="C#" Value="public virtual bool IsKindOfClass (MonoTouch.ObjCRuntime.Class aClass);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsKindOfClass(class MonoTouch.ObjCRuntime.Class aClass) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("isKindOfClass:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aClass" Type="MonoTouch.ObjCRuntime.Class" />
      </Parameters>
      <Docs>
        <param name="aClass">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMemberOfClass">
      <MemberSignature Language="C#" Value="public virtual bool IsMemberOfClass (MonoTouch.ObjCRuntime.Class aClass);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsMemberOfClass(class MonoTouch.ObjCRuntime.Class aClass) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("isMemberOfClass:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aClass" Type="MonoTouch.ObjCRuntime.Class" />
      </Parameters>
      <Docs>
        <param name="aClass">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNewRefcountEnabled">
      <MemberSignature Language="C#" Value="public static bool IsNewRefcountEnabled ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNewRefcountEnabled() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Internal -- Determines whether MonoTouch is using the new toggle-reference system or not</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsProxy">
      <MemberSignature Language="C#" Value="public virtual bool IsProxy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsProxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isProxy")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkDirty">
      <MemberSignature Language="C#" Value="protected void MarkDirty ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void MarkDirty() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Promotes a regular peer object (IsDirectBinding is true) into a toggleref object.</summary>
        <remarks>
	  This turns a regular peer object (one that has
	  IsDirectBinding set to true) into a toggleref object.  This
	  is necessary when you are storing to a backing field whose
	  objc_c semantics is not copy or retain.  This is an internal
	  method.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="MonoTouchAssembly">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Assembly MonoTouchAssembly;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.Assembly MonoTouchAssembly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use 'PlatformAssembly' for easier code sharing across platforms.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Points to the montoouch assembly.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MutableCopy">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject MutableCopy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject MutableCopy() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("mutableCopy")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>MonoTouch.ObjCRuntime.Release</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a mutable copy of the specified NSObject.</summary>
        <returns></returns>
        <remarks>
          <para>
	    Objects that implement the NSMutableCopying protocol will
	    a new instance of the mutable version of the object.  For
	    example calling MutableCopy on an NSCharacterSet returns
	    an NSMutableCharacterSet.
	  </para>
          <para> 
	    Types that implement the NSMutableCopying protocol
	    include: <see cref="T:MonoTouch.AVFoundation.AVAudioMix" />, <see cref="T:MonoTouch.AVFoundation.AVAudioMixInputParameters" />,
	    <see cref="T:MonoTouch.AVFoundation.AVComposition" />, <see cref="T:MonoTouch.AVFoundation.AVMetadataItem" />, <see cref="T:MonoTouch.AVFoundation.AVVideoComposition" />, <see cref="T:MonoTouch.AVFoundation.AVVideoCompositionInstruction" />,
	    <see cref="T:MonoTouch.AVFoundation.AVVideoCompositionLayerInstruction" />,
	    <see cref="T:MonoTouch.Foundation.NSArray" />, <see cref="T:MonoTouch.Foundation.NSAttributedString" />, <see cref="T:MonoTouch.Foundation.NSCharacterSet" />, <see cref="T:MonoTouch.Foundation.NSData" />, <see cref="T:MonoTouch.Foundation.NSDictionary" />, <see cref="T:MonoTouch.Foundation.NSIndexSet" />, <see cref="T:MonoTouch.Foundation.NSObject" />, <see cref="T:MonoTouch.Foundation.NSSet" />, <see cref="T:MonoTouch.Foundation.NSString" />, <see cref="T:MonoTouch.Foundation.NSUrlRequest" />, <see cref="T:MonoTouch.StoreKit.SKPayment" /> and <see cref="T:MonoTouch.UIKit.NSParagraphStyle" />.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveValue">
      <MemberSignature Language="C#" Value="public virtual void ObserveValue (MonoTouch.Foundation.NSString keyPath, MonoTouch.Foundation.NSObject ofObject, MonoTouch.Foundation.NSDictionary change, IntPtr context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ObserveValue(class MonoTouch.Foundation.NSString keyPath, class MonoTouch.Foundation.NSObject ofObject, class MonoTouch.Foundation.NSDictionary change, native int context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("observeValueForKeyPath:ofObject:change:context:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyPath" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="ofObject" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="change" Type="MonoTouch.Foundation.NSDictionary" />
        <Parameter Name="context" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="keyPath">Key-path to use to perform the value lookup.   The keypath consists of a series of lowercase ASCII-strings with no spaces in them separated by dot characters.</param>
        <param name="ofObject">To be added.</param>
        <param name="change">To be added.</param>
        <param name="context">To be added.</param>
        <summary>Indicates that the value at the specified keyPath relative to this object has changed.</summary>
        <remarks>This method is invoked if you have registered an observer using the <see cref="M:MonoTouch.Foundation.NSObject.AddObserver" /> method</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformSelector">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject PerformSelector (MonoTouch.ObjCRuntime.Selector aSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject PerformSelector(class MonoTouch.ObjCRuntime.Selector aSelector) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("performSelector:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aSelector" Type="MonoTouch.ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="aSelector">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformSelector">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject PerformSelector (MonoTouch.ObjCRuntime.Selector aSelector, MonoTouch.Foundation.NSObject anObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject PerformSelector(class MonoTouch.ObjCRuntime.Selector aSelector, class MonoTouch.Foundation.NSObject anObject) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("performSelector:withObject:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aSelector" Type="MonoTouch.ObjCRuntime.Selector" />
        <Parameter Name="anObject" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="aSelector">To be added.</param>
        <param name="anObject">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformSelector">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject PerformSelector (MonoTouch.ObjCRuntime.Selector aSelector, MonoTouch.Foundation.NSObject object1, MonoTouch.Foundation.NSObject object2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject PerformSelector(class MonoTouch.ObjCRuntime.Selector aSelector, class MonoTouch.Foundation.NSObject object1, class MonoTouch.Foundation.NSObject object2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("performSelector:withObject:withObject:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aSelector" Type="MonoTouch.ObjCRuntime.Selector" />
        <Parameter Name="object1" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="object2" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="aSelector">To be added.</param>
        <param name="object1">To be added.</param>
        <param name="object2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformSelector">
      <MemberSignature Language="C#" Value="public virtual void PerformSelector (MonoTouch.ObjCRuntime.Selector selector, MonoTouch.Foundation.NSObject withObject, double delay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformSelector(class MonoTouch.ObjCRuntime.Selector selector, class MonoTouch.Foundation.NSObject withObject, float64 delay) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("performSelector:withObject:afterDelay:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="MonoTouch.ObjCRuntime.Selector" />
        <Parameter Name="withObject" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="delay" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="selector">To be added.</param>
        <param name="withObject">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="delay">The delay in seconds before the method is invoked.</param>
        <summary>Invokes the selector on the current instance and if the <c>obj</c> is not null, it passes this as its single parameter.</summary>
        <remarks>
          <example>
            <code lang="C#"><![CDATA[
public override bool FinishedLaunching (UIApplication app, NSDictionary options)
{
	window = new UIWindow (UIScreen.MainScreen.Bounds);
	window.MakeKeyAndVisible ();
	// Invoke our method in 10 seconds
	PerformSelector (new MonoTouch.ObjCRuntime.Selector ("demo:"), new NSString ("hello world"), 10);
	return true;
}
// This registers the method "RunDemo" as responding to the selector "demo:"
[Export ("demo:")]
void RunDemo (NSString arg)
{
	Console.WriteLine ("This is the parameter I got {0}", arg);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformSelector">
      <MemberSignature Language="C#" Value="public virtual void PerformSelector (MonoTouch.ObjCRuntime.Selector selector, MonoTouch.Foundation.NSObject withObject, double afterDelay, MonoTouch.Foundation.NSString[] nsRunLoopModes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformSelector(class MonoTouch.ObjCRuntime.Selector selector, class MonoTouch.Foundation.NSObject withObject, float64 afterDelay, class MonoTouch.Foundation.NSString[] nsRunLoopModes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("performSelector:withObject:afterDelay:inModes:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="MonoTouch.ObjCRuntime.Selector" />
        <Parameter Name="withObject" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="afterDelay" Type="System.Double" />
        <Parameter Name="nsRunLoopModes" Type="MonoTouch.Foundation.NSString[]" />
      </Parameters>
      <Docs>
        <param name="selector">To be added.</param>
        <param name="withObject">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="afterDelay">To be added.</param>
        <param name="nsRunLoopModes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformSelector">
      <MemberSignature Language="C#" Value="public virtual void PerformSelector (MonoTouch.ObjCRuntime.Selector selector, MonoTouch.Foundation.NSThread onThread, MonoTouch.Foundation.NSObject withObject, bool waitUntilDone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformSelector(class MonoTouch.ObjCRuntime.Selector selector, class MonoTouch.Foundation.NSThread onThread, class MonoTouch.Foundation.NSObject withObject, bool waitUntilDone) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("performSelector:onThread:withObject:waitUntilDone:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="MonoTouch.ObjCRuntime.Selector" />
        <Parameter Name="onThread" Type="MonoTouch.Foundation.NSThread" />
        <Parameter Name="withObject" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="waitUntilDone" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="selector">To be added.</param>
        <param name="onThread">To be added.</param>
        <param name="withObject">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="waitUntilDone">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformSelector">
      <MemberSignature Language="C#" Value="public virtual void PerformSelector (MonoTouch.ObjCRuntime.Selector selector, MonoTouch.Foundation.NSThread onThread, MonoTouch.Foundation.NSObject withObject, bool waitUntilDone, MonoTouch.Foundation.NSString[] nsRunLoopModes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformSelector(class MonoTouch.ObjCRuntime.Selector selector, class MonoTouch.Foundation.NSThread onThread, class MonoTouch.Foundation.NSObject withObject, bool waitUntilDone, class MonoTouch.Foundation.NSString[] nsRunLoopModes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("performSelector:onThread:withObject:waitUntilDone:modes:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selector" Type="MonoTouch.ObjCRuntime.Selector" />
        <Parameter Name="onThread" Type="MonoTouch.Foundation.NSThread" />
        <Parameter Name="withObject" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="waitUntilDone" Type="System.Boolean" />
        <Parameter Name="nsRunLoopModes" Type="MonoTouch.Foundation.NSString[]" />
      </Parameters>
      <Docs>
        <param name="selector">To be added.</param>
        <param name="onThread">To be added.</param>
        <param name="withObject">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="waitUntilDone">To be added.</param>
        <param name="nsRunLoopModes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PlatformAssembly">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Assembly PlatformAssembly;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.Assembly PlatformAssembly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForInterfaceBuilder">
      <MemberSignature Language="C#" Value="public virtual void PrepareForInterfaceBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareForInterfaceBuilder() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("prepareForInterfaceBuilder")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 10, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Unavailable(MonoTouch.ObjCRuntime.PlatformName.WatchOS, MonoTouch.ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveObserver">
      <MemberSignature Language="C#" Value="public virtual void RemoveObserver (MonoTouch.Foundation.NSObject observer, MonoTouch.Foundation.NSString keyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveObserver(class MonoTouch.Foundation.NSObject observer, class MonoTouch.Foundation.NSString keyPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeObserver:forKeyPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="keyPath" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="observer">





Object currently receiving the observer notifications.
  	   
  	   
  	   </param>
        <param name="keyPath">





Key-path to use to perform the value lookup.   The keypath consists of a series of lowercase ASCII-strings with no spaces in them separated by dot characters.
  	   
  	   
  	   
  	   
  	   
  	   </param>
        <summary>Stops the specified observer from receiving further notifications of changed values for the specified keyPath.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveObserver">
      <MemberSignature Language="C#" Value="public void RemoveObserver (MonoTouch.Foundation.NSObject observer, string keyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveObserver(class MonoTouch.Foundation.NSObject observer, string keyPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="keyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="observer">

Object currently receiving the observer notifications.
  	   
  	   </param>
        <param name="keyPath">
Key-path to use to perform the value lookup. The keypath consists of a series of lowercase ASCII-strings with no spaces in them separated by dot characters.
  	   </param>
        <summary>Stops the specified observer from receiving further notifications of changed values for the specified keyPath.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveObserver">
      <MemberSignature Language="C#" Value="public virtual void RemoveObserver (MonoTouch.Foundation.NSObject observer, MonoTouch.Foundation.NSString keyPath, IntPtr context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveObserver(class MonoTouch.Foundation.NSObject observer, class MonoTouch.Foundation.NSString keyPath, native int context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeObserver:forKeyPath:context:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="keyPath" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="context" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="observer">


Object currently receiving the observer notifications.
  	   
  	   
  	   </param>
        <param name="keyPath">

Key-path to use to perform the value lookup. The keypath consists of a series of lowercase ASCII-strings with no spaces in them separated by dot characters.
  	   
  	   </param>
        <param name="context">
The context key that was used when the observer was originally started.
  	   </param>
        <summary>Stops the specified observer from receiving further notifications of changed values for the specified keyPath and context.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveObserver">
      <MemberSignature Language="C#" Value="public void RemoveObserver (MonoTouch.Foundation.NSObject observer, string keyPath, IntPtr context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveObserver(class MonoTouch.Foundation.NSObject observer, string keyPath, native int context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="keyPath" Type="System.String" />
        <Parameter Name="context" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="observer">


Object currently receiving the observer notifications.
  	   
  	   
  	   </param>
        <param name="keyPath">
Key-path to use to perform the value lookup. The keypath consists of a series of lowercase ASCII-strings with no spaces in them separated by dot characters.
  	   </param>
        <param name="context">




The context key that was used when the observer was originally started.
  	   </param>
        <summary>Stops the specified observer from receiving further notifications of changed values for the specified keyPath and context.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RespondsToSelector">
      <MemberSignature Language="C#" Value="public virtual bool RespondsToSelector (MonoTouch.ObjCRuntime.Selector sel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RespondsToSelector(class MonoTouch.ObjCRuntime.Selector sel) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("respondsToSelector:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sel" Type="MonoTouch.ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="sel">
Class representing the selector.</param>
        <summary>Whether this object recognizes the specified selector. </summary>
        <returns>This returns <see langword="true" /> if the object responds to the selector, <see langword="false" /> othwerise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RetainCount">
      <MemberSignature Language="C#" Value="public virtual nuint RetainCount { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint RetainCount" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("retainCount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="unified">System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the current Objective-C retain count for the object.</summary>
        <value></value>
        <remarks>
	  This property is exposed for debugging purposes, but in
	  general it might not be very useful, since the object might
	  have been added to an NSAutoReleasePool.  Unfortunatelly, it
	  is not a precise measuring tool.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="Self">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject Self { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject Self" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("self")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNativeField">
      <MemberSignature Language="C#" Value="public void SetNativeField (string name, MonoTouch.Foundation.NSObject value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetNativeField(string name, class MonoTouch.Foundation.NSObject value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Do not use; this API does not properly retain/release existing/new values, so leaks and/or crashes may occur.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNilValueForKey">
      <MemberSignature Language="C#" Value="public virtual void SetNilValueForKey (MonoTouch.Foundation.NSString key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetNilValueForKey(class MonoTouch.Foundation.NSString key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setNilValueForKey:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="key">Name of the Objective-C property.  It must be an ASCII name, start with a lowercase letter and contain no spaces.</param>
        <summary>Sets the value of the specified key to null.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValueForKey">
      <MemberSignature Language="C#" Value="public virtual void SetValueForKey (MonoTouch.Foundation.NSObject value, MonoTouch.Foundation.NSString key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValueForKey(class MonoTouch.Foundation.NSObject value, class MonoTouch.Foundation.NSString key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setValue:forKey:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="key" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="value">Value to set on the property.</param>
        <param name="key">Name of the Objective-C property whose value you want to retrieve.  It must be an ASCII name, start with a lowercase letter and contain no spaces.</param>
        <summary>Sets the value of the property specified by the key to the specified value.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValueForKeyPath">
      <MemberSignature Language="C#" Value="public virtual void SetValueForKeyPath (MonoTouch.Foundation.NSObject value, MonoTouch.Foundation.NSString keyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValueForKeyPath(class MonoTouch.Foundation.NSObject value, class MonoTouch.Foundation.NSString keyPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setValue:forKeyPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="keyPath" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="value">Value to set on the property.</param>
        <param name="keyPath">Key-path to use to perform the value lookup.   The keypath consists of a series of lowercase ASCII-strings with no spaces in them separated by dot characters.</param>
        <summary>Sets the value of a property that can be reached using a keypath.</summary>
        <remarks>
          <para>
	    The keypath is separated by dots, and each component is
	    used to lookup a specific key on the object.  The process
	    is repeated on each returning object until the last
	    element is processed.  
	  </para>
          <para>
	    If a component of the key path is
	    not found, the method <see cref="M:MonoTouch.Foundation.NSObject.SetValueForUndefinedKey(MonoTouch.Foundation.NSObject,MonoTouch.Foundation.NSString)" />
	    is invoked, and its default implementation raises an
	    Objective-C exception.   Subclasses can alter this behavior by overriding that method.
	  </para>
          <example>
            <code lang="C#"><![CDATA[
string SetMobilePhone (Order order, NSString phone)
{
	return order.SetValueForKeyPath ("user.address.phone.mobile", phone);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValueForKeyPath">
      <MemberSignature Language="C#" Value="public void SetValueForKeyPath (IntPtr handle, MonoTouch.Foundation.NSString keyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValueForKeyPath(native int handle, class MonoTouch.Foundation.NSString keyPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="keyPath" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <param name="keyPath">Key-path to use to perform the value lookup.   The keypath consists of a series of lowercase ASCII-strings with no spaces in them separated by dot characters.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValueForUndefinedKey">
      <MemberSignature Language="C#" Value="public virtual void SetValueForUndefinedKey (MonoTouch.Foundation.NSObject value, MonoTouch.Foundation.NSString undefinedKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValueForUndefinedKey(class MonoTouch.Foundation.NSObject value, class MonoTouch.Foundation.NSString undefinedKey) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setValue:forUndefinedKey:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="undefinedKey" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="undefinedKey">To be added.</param>
        <summary>Indicates an attempt to write a value to an undefined key. If not overridden, raises an NSUndefinedKeyException.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValuesForKeysWithDictionary">
      <MemberSignature Language="C#" Value="public virtual void SetValuesForKeysWithDictionary (MonoTouch.Foundation.NSDictionary keyedValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValuesForKeysWithDictionary(class MonoTouch.Foundation.NSDictionary keyedValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setValuesForKeysWithDictionary:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyedValues" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="keyedValues">To be added.</param>
        <summary>Sets the values of this NSObject to those in the specified dictionary.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Superclass">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.ObjCRuntime.Class Superclass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.ObjCRuntime.Class Superclass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("superclass")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ObjCRuntime.Class</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SuperHandle">
      <MemberSignature Language="C#" Value="public IntPtr SuperHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int SuperHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Handle used to represent the methods in the base class for this NSObject.</summary>
        <value>An opaque pointer, represents an Objective-C objc_super object pointing to our base class.</value>
        <remarks>
	  This property is used to access members of a base class.
	  This is typically used when you call any of the Messaging
	  methods to invoke methods that were implemented in your base
	  class, instead of invoking the implementation in the current
	  class.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string representation of the value of the current instance.</summary>
        <returns></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueForKey">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject ValueForKey (MonoTouch.Foundation.NSString key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject ValueForKey(class MonoTouch.Foundation.NSString key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("valueForKey:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="key">Name of the Objective-C property whose value you want to retrieve.  It must be an ASCII name, start with a lowercase letter and contain no spaces.</param>
        <summary>Returns the value of the property associated with the specified key.</summary>
        <returns>An NSObject containing the value.</returns>
        <remarks>
          <example>
            <code lang="C#"><![CDATA[
string GetName (NSObject myObject)
{
	return (string) myObject.ValueForKey ("name");
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueForKeyPath">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject ValueForKeyPath (MonoTouch.Foundation.NSString keyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject ValueForKeyPath(class MonoTouch.Foundation.NSString keyPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("valueForKeyPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyPath" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="keyPath">Key-path to use to perform the value lookup.   The keypath consists of a series of lowercase ASCII-strings with no spaces in them separated by dot characters.</param>
        <summary>Returns the value of a property that can be reached using a keypath.</summary>
        <returns>An NSObject containing the value for the specified keypath.</returns>
        <remarks>
          <para>
	    The keypath is separated by dots, and each component is
	    used to lookup a specific key on the object.  The process
	    is repeated on each returning object until the last
	    element is processed.  
	  </para>
          <para>
	    If a component of the key path is
	    not found, the method <see cref="M:MonoTouch.Foundation.NSObject.ValueForUndefinedKey(MonoTouch.Foundation.NSString)" />
	    is invoked, and its default implementation raises an
	    Objective-C exception.   Subclasses can alter this behavior by overriding that method.
	  </para>
          <example>
            <code lang="C#"><![CDATA[
string GetMobilePhone (Order order)
{
	return (string) order.ValueForKeyPath ("user.address.phone.mobile");
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueForUndefinedKey">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject ValueForUndefinedKey (MonoTouch.Foundation.NSString key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject ValueForUndefinedKey(class MonoTouch.Foundation.NSString key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("valueForUndefinedKey:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="key">Name of the Objective-C property.  It must be an ASCII name, start with a lowercase letter and contain no spaces.</param>
        <summary>Indicates an attempt to read a value of an undefined key. If not overridden, raises an NSUndefinedKeyException.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillChange">
      <MemberSignature Language="C#" Value="public virtual void WillChange (MonoTouch.Foundation.NSKeyValueChange changeKind, MonoTouch.Foundation.NSIndexSet indexes, MonoTouch.Foundation.NSString forKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillChange(valuetype MonoTouch.Foundation.NSKeyValueChange changeKind, class MonoTouch.Foundation.NSIndexSet indexes, class MonoTouch.Foundation.NSString forKey) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("willChange:valuesAtIndexes:forKey:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="changeKind" Type="MonoTouch.Foundation.NSKeyValueChange" />
        <Parameter Name="indexes" Type="MonoTouch.Foundation.NSIndexSet" />
        <Parameter Name="forKey" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="changeKind">To be added.</param>
        <param name="indexes">To be added.</param>
        <param name="forKey">The name of the key that is going to be changed.</param>
        <summary>Indicates that the values of the specified indices in the specified key are about to change.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillChange">
      <MemberSignature Language="C#" Value="public virtual void WillChange (MonoTouch.Foundation.NSString forKey, MonoTouch.Foundation.NSKeyValueSetMutationKind mutationKind, MonoTouch.Foundation.NSSet objects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillChange(class MonoTouch.Foundation.NSString forKey, valuetype MonoTouch.Foundation.NSKeyValueSetMutationKind mutationKind, class MonoTouch.Foundation.NSSet objects) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("willChangeValueForKey:withSetMutation:usingObjects:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forKey" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="mutationKind" Type="MonoTouch.Foundation.NSKeyValueSetMutationKind" />
        <Parameter Name="objects" Type="MonoTouch.Foundation.NSSet" />
      </Parameters>
      <Docs>
        <param name="forKey">The name of the key that is going to be changed.</param>
        <param name="mutationKind">To be added.</param>
        <param name="objects">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillChangeValue">
      <MemberSignature Language="C#" Value="public virtual void WillChangeValue (string forKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillChangeValue(string forKey) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("willChangeValueForKey:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="forKey">The name of the key that is going to be changed.</param>
        <summary>Indicates that the value of the specified key is about to change.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Zone">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSZone Zone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSZone Zone" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("zone")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSZone</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>