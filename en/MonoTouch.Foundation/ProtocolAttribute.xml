<Type Name="ProtocolAttribute" FullName="MonoTouch.Foundation.ProtocolAttribute">
  <TypeSignature Language="C#" Value="public sealed class ProtocolAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ProtocolAttribute extends System.Attribute" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Attribute applied to interfaces that represent Objective-C protocols.</summary>
    <remarks>
      <para>
        Xamarin.iOS will export any interfaces with this attribute as a protocol to Objective-C,
        and any classes that implement these interfaces will be marked as implementing
        the corresponding protocol when exported to Objective-C.
      </para>
      <example>
        <code lang="c#">
  // This will create an Objective-C protocol called 'IMyProtocol', with one required member ('requiredMethod')
  [Protocol ("IMyProtocol")]
  interface IMyProtocol
  {
    [Export ("requiredMethod")]
    void RequiredMethod ();
  }

  // This will export the equivalent of "@interface MyClass : NSObject &lt;IMyProtocol&gt;" to Objective-C.
  class MyClass : NSObject, IMyProtocol
  {
    void RequiredMethod ()
    {
    }
  }
        </code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProtocolAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInformal">
      <MemberSignature Language="C#" Value="public bool IsInformal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInformal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the Objective-C protocol is an informal protocol.</summary>
        <value>To be added.</value>
        <remarks>An informal protocol is the old name for an Objective-C category.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name of the protocol.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WrapperType">
      <MemberSignature Language="C#" Value="public Type WrapperType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type WrapperType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The type of a specific managed type that can be used to wrap an instane of this protocol.</summary>
        <value>To be added.</value>
        <remarks>Objective-C protocols are bound as interfaces in managed code, but sometimes a class is needed (in certain
          scenarios our Objective-C-managed bridge have the pointer to an instance of a native object and we only know that it
          implements a particular protocol; in that case we might need a managed type that can wrap this instance, because the
          actual type of the object may not formally implement the interface).</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
