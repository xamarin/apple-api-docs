<Type Name="NSString" FullName="MonoTouch.Foundation.NSString">
  <TypeSignature Language="C#" Value="public class NSString : MonoTouch.Foundation.NSObject, IDisposable, MonoTouch.Foundation.INSMutableCopying, MonoTouch.Foundation.INSSecureCoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSString extends MonoTouch.Foundation.NSObject implements class MonoTouch.Foundation.INSCoding, class MonoTouch.Foundation.INSCopying, class MonoTouch.Foundation.INSMutableCopying, class MonoTouch.Foundation.INSSecureCoding, class MonoTouch.ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.Foundation.INSMutableCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>MonoTouch.Foundation.INSSecureCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("NSString", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The Foundation String class.</summary>
    <remarks>
      <para>

	This is a mapping to the Objective-C NSString class.
	Generally, in .NET languages you use the native <see cref="T:System.String" /> type in your code.  In general, it is
	not worth using NSString in C#/Mono code as the cost of
	marshalling is higher when creating NSStrings manually from a
	C# string than letting the runtime marshal it.   

      </para>
      <para>
	There are a few cases where you will deal with NSString
	objects in MonoTouch.  Those are cases where the NSString is
	used as a handle or token.  That means that the underlying
	platform code is using the address of an NSString as a special
	handle (the code compares strings not by content, but by the
	address).  In those cases, the NSString has been surfaced in
	the MonoTouch binding.  You will typically find those as
	Notification constants or key constants.

      </para>
      <para>

	Another use for NSStrings in C# code is when you want to use
	some localization APIs exposed in NSStrings that map directly
	to the underlying platform localization tables.

      </para>
      <para>
	Code that interoperates with Objective-C automatically converts
	the internal C# string into an NSString.  Sometimes by doing a
	copy of the string, although the runtime supports zero-copy
	marshaling of .NET strings as NSStrings as well
      </para>
    </remarks>
    <altmember cref="T:MonoTouch.UIKit.NSExtendedStringDrawing" />
    <altmember cref="T:MonoTouch.UIKit.NSStringDrawing" />
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/index.html">Apple documentation for <c>NSString</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSString (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSString (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected NSString (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSString (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected NSString (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSString (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string str) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">A string.</param>
        <summary>Creates an NSString from a C# string.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSString (MonoTouch.Foundation.NSData data, MonoTouch.Foundation.NSStringEncoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSData data, valuetype MonoTouch.Foundation.NSStringEncoding encoding) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithData:encoding:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="data" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="encoding" Type="MonoTouch.Foundation.NSStringEncoding" />
      </Parameters>
      <Docs>
        <param name="data">Block of data wrapped in an NSData, encoded in the specified encoding.</param>
        <param name="encoding">Encoding to use to interpret the block in data.</param>
        <summary>Creates a string from a specified blob of data, using a specific encoding.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="_characterAtIndex" apistyle="classic">
      <MemberSignature Language="C#" Value="public virtual char _characterAtIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char _characterAtIndex(int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("characterAtIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>The character at the specified index.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AbbreviateTildeInPath">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSString AbbreviateTildeInPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSString AbbreviateTildeInPath() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("stringByAbbreviatingWithTildeInPath")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts a spath to a home-directory-relative path by substituting a tilde for the relevant portion of the path.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendPathComponent">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSString AppendPathComponent (MonoTouch.Foundation.NSString str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSString AppendPathComponent(class MonoTouch.Foundation.NSString str) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("stringByAppendingPathComponent:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="str">To be added.</param>
        <summary>Appends the specified str in a manner that results in a path.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendPathExtension">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSString AppendPathExtension (MonoTouch.Foundation.NSString str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSString AppendPathExtension(class MonoTouch.Foundation.NSString str) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("stringByAppendingPathExtension:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="str">To be added.</param>
        <summary>Creates a path by appending a path extension separator and then the specified str as a file extension.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendPaths">
      <MemberSignature Language="C#" Value="public virtual string[] AppendPaths (string[] paths);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] AppendPaths(string[] paths) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("stringsByAppendingPaths:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paths" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="paths">To be added.</param>
        <summary>Returns the array of strings created by appending this NSString to each of the specified input paths.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Capitalize">
      <MemberSignature Language="C#" Value="public virtual string Capitalize (MonoTouch.Foundation.NSLocale locale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Capitalize(class MonoTouch.Foundation.NSLocale locale) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("capitalizedStringWithLocale:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_6_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locale" Type="MonoTouch.Foundation.NSLocale" />
      </Parameters>
      <Docs>
        <param name="locale">
          <para>The locale to use for this operation.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Capitalizes a string using the rules of the specified locale.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommonPrefix">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSString CommonPrefix (MonoTouch.Foundation.NSString aString, MonoTouch.Foundation.NSStringCompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSString CommonPrefix(class MonoTouch.Foundation.NSString aString, valuetype MonoTouch.Foundation.NSStringCompareOptions options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("commonPrefixWithString:options:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aString" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="options" Type="MonoTouch.Foundation.NSStringCompareOptions" />
      </Parameters>
      <Docs>
        <param name="aString">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSComparisonResult Compare (MonoTouch.Foundation.NSString aString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.Foundation.NSComparisonResult Compare(class MonoTouch.Foundation.NSString aString) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("compare:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSComparisonResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aString" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="aString">The string to compare to.</param>
        <summary>Lexically compares this to the specified string.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSComparisonResult Compare (MonoTouch.Foundation.NSString aString, MonoTouch.Foundation.NSStringCompareOptions mask);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.Foundation.NSComparisonResult Compare(class MonoTouch.Foundation.NSString aString, valuetype MonoTouch.Foundation.NSStringCompareOptions mask) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("compare:options:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSComparisonResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aString" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="mask" Type="MonoTouch.Foundation.NSStringCompareOptions" />
      </Parameters>
      <Docs>
        <param name="aString">The string to compare to.</param>
        <param name="mask">Comparison flags.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSComparisonResult Compare (MonoTouch.Foundation.NSString aString, MonoTouch.Foundation.NSStringCompareOptions mask, MonoTouch.Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.Foundation.NSComparisonResult Compare(class MonoTouch.Foundation.NSString aString, valuetype MonoTouch.Foundation.NSStringCompareOptions mask, valuetype MonoTouch.Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("compare:options:range:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSComparisonResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aString" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="mask" Type="MonoTouch.Foundation.NSStringCompareOptions" />
        <Parameter Name="range" Type="MonoTouch.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="aString">The string to compare to.</param>
        <param name="mask">Comparison flags.</param>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSComparisonResult Compare (MonoTouch.Foundation.NSString aString, MonoTouch.Foundation.NSStringCompareOptions mask, MonoTouch.Foundation.NSRange range, MonoTouch.Foundation.NSLocale locale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.Foundation.NSComparisonResult Compare(class MonoTouch.Foundation.NSString aString, valuetype MonoTouch.Foundation.NSStringCompareOptions mask, valuetype MonoTouch.Foundation.NSRange range, class MonoTouch.Foundation.NSLocale locale) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("compare:options:range:locale:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSComparisonResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aString" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="mask" Type="MonoTouch.Foundation.NSStringCompareOptions" />
        <Parameter Name="range" Type="MonoTouch.Foundation.NSRange" />
        <Parameter Name="locale" Type="MonoTouch.Foundation.NSLocale" />
      </Parameters>
      <Docs>
        <param name="aString">The string to compare to.</param>
        <param name="mask">Comparison flags.</param>
        <param name="range">To be added.</param>
        <param name="locale">
          <para>Locale to use for the comparison.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (MonoTouch.Foundation.NSString str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class MonoTouch.Foundation.NSString str) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("containsString:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="str">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject Copy (MonoTouch.Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject Copy(class MonoTouch.Foundation.NSZone zone) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="MonoTouch.Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateNative">
      <MemberSignature Language="C#" Value="public static IntPtr CreateNative (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int CreateNative(string str) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">C# String to wrap</param>
        <summary>Creates an Objective-C NSString from the C# string and returns a pointer to it.</summary>
        <returns>Pointer to the NSString object, must be released with ReleaseNative.</returns>
        <remarks>
          <para>
	    This method creates an Objective-C NSString and returns an
	    IntPtr that points to it.  This does not create the managed
	    NSString object that points to it, which is ideal for
	    transient strings that must be passed to Objectiv-C as it is
	    not necessary for Mono's Garbage collector or the
	    MonoTouch/MonoMac engines to track this object.
	  </para>
          <para>

	    The memory associated with this object should be released
	    by calling the <see cref="M:MonoTouch.Foundation.NSString.ReleaseNative(System.IntPtr)" />
	    method.
	  </para>
          <example>
            <code lang="c#">
IntPtr objcString = NSString.CreateNative ("Hello");
// You can pass objcString to any methods that expect an Objective-C NSString pointer
NSString.ReleaseNative (objcString);
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataUsingEncoding" apistyle="classic">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSData DataUsingEncoding (MonoTouch.Foundation.NSStringEncoding enc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.Foundation.NSData DataUsingEncoding(valuetype MonoTouch.Foundation.NSStringEncoding enc) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Advice("Use Encode instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enc" Type="MonoTouch.Foundation.NSStringEncoding" />
      </Parameters>
      <Docs>
        <param name="enc">Encoding to use.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataUsingEncoding" apistyle="classic">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSData DataUsingEncoding (MonoTouch.Foundation.NSStringEncoding enc, bool allowLossyConversion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.Foundation.NSData DataUsingEncoding(valuetype MonoTouch.Foundation.NSStringEncoding enc, bool allowLossyConversion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Advice("Use Encode instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enc" Type="MonoTouch.Foundation.NSStringEncoding" />
        <Parameter Name="allowLossyConversion" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enc">Encoding to use.</param>
        <param name="allowLossyConversion">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteLastPathComponent">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSString DeleteLastPathComponent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSString DeleteLastPathComponent() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("stringByDeletingLastPathComponent")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a new string by deleting the last path component of this string.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletePathExtension">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSString DeletePathExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSString DeletePathExtension() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("stringByDeletingPathExtension")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a new string by deleting the path extension from this string.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectStringEncoding">
      <MemberSignature Language="C#" Value="public static uint DetectStringEncoding (MonoTouch.Foundation.NSData rawData, MonoTouch.Foundation.EncodingDetectionOptions options, out string convertedString, out bool usedLossyConversion);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 DetectStringEncoding(class MonoTouch.Foundation.NSData rawData, class MonoTouch.Foundation.EncodingDetectionOptions options, string convertedString, bool usedLossyConversion) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static nuint DetectStringEncoding (MonoTouch.Foundation.NSData rawData, MonoTouch.Foundation.EncodingDetectionOptions options, out string convertedString, out bool usedLossyConversion);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.nuint DetectStringEncoding(class MonoTouch.Foundation.NSData rawData, class MonoTouch.Foundation.EncodingDetectionOptions options, string convertedString, bool usedLossyConversion) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.Mac_10_10)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.UInt32</ReturnType>
        <ReturnType apistyle="unified">System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawData" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="options" Type="MonoTouch.Foundation.EncodingDetectionOptions" />
        <Parameter Name="convertedString" Type="System.String&amp;" RefType="out" />
        <Parameter Name="usedLossyConversion" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="rawData">To be added.</param>
        <param name="options">To be added.</param>
        <param name="convertedString">To be added.</param>
        <param name="usedLossyConversion">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetectStringEncoding">
      <MemberSignature Language="C#" Value="public static uint DetectStringEncoding (MonoTouch.Foundation.NSData rawData, MonoTouch.Foundation.NSDictionary options, out string convertedString, out bool usedLossyConversion);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 DetectStringEncoding(class MonoTouch.Foundation.NSData rawData, class MonoTouch.Foundation.NSDictionary options, string convertedString, bool usedLossyConversion) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static nuint DetectStringEncoding (MonoTouch.Foundation.NSData rawData, MonoTouch.Foundation.NSDictionary options, out string convertedString, out bool usedLossyConversion);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.nuint DetectStringEncoding(class MonoTouch.Foundation.NSData rawData, class MonoTouch.Foundation.NSDictionary options, string convertedString, bool usedLossyConversion) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("stringEncodingForData:encodingOptions:convertedString:usedLossyConversion:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.Mac_10_10)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.UInt32</ReturnType>
        <ReturnType apistyle="unified">System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawData" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="options" Type="MonoTouch.Foundation.NSDictionary" />
        <Parameter Name="convertedString" Type="System.String&amp;" RefType="out" />
        <Parameter Name="usedLossyConversion" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="rawData">To be added.</param>
        <param name="options">To be added.</param>
        <param name="convertedString">To be added.</param>
        <param name="usedLossyConversion">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the NSString object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the NSString class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the NSString ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawString" apistyle="classic">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF DrawString (System.Drawing.PointF point, MonoTouch.UIKit.UIFont font);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF DrawString(valuetype System.Drawing.PointF point, class MonoTouch.UIKit.UIFont font) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.CoreGraphics.CGSize DrawString (MonoTouch.CoreGraphics.CGPoint point, MonoTouch.UIKit.UIFont font);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype MonoTouch.CoreGraphics.CGSize DrawString(valuetype MonoTouch.CoreGraphics.CGPoint point, class MonoTouch.UIKit.UIFont font) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.SizeF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" apistyle="classic" />
        <Parameter Name="font" Type="MonoTouch.UIKit.UIFont" />
        <Parameter Name="point" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="point">The origin of the text drawing rectangle.</param>
        <param name="font">The font to use in drawing.</param>
        <summary>
          <para>
	    Deprecated in iOS7.  Use NSString.DrawString(PointF, UIStringAttributes) instead.
	    Draws the string at the given location with the given font.
	  </para>
        </summary>
        <returns>The actual size of the font with which the text was rendered.</returns>
        <remarks>
	    Deprecated in iOS7.  Use NSString.DrawString(PointF, UIStringAttributes) instead.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawString" apistyle="classic">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF DrawString (System.Drawing.RectangleF rect, MonoTouch.UIKit.UIFont font);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF DrawString(valuetype System.Drawing.RectangleF rect, class MonoTouch.UIKit.UIFont font) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.CoreGraphics.CGSize DrawString (MonoTouch.CoreGraphics.CGRect rect, MonoTouch.UIKit.UIFont font);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype MonoTouch.CoreGraphics.CGSize DrawString(valuetype MonoTouch.CoreGraphics.CGRect rect, class MonoTouch.UIKit.UIFont font) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.SizeF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="font" Type="MonoTouch.UIKit.UIFont" />
        <Parameter Name="rect" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <param name="font">To be added.</param>
        <summary>
          <para>
	    Deprecated in iOS7.  Use NSString.DrawString(PointF, UIStringAttributes) instead.
	  </para>
          <para>
	    Draws the string in the specified rectangle with the specified font.
	  </para>
        </summary>
        <returns>The actual size used by the rendering.</returns>
        <remarks>
          <para>This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawString" apistyle="classic">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF DrawString (System.Drawing.RectangleF rect, MonoTouch.UIKit.UIFont font, MonoTouch.UIKit.UILineBreakMode mode);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF DrawString(valuetype System.Drawing.RectangleF rect, class MonoTouch.UIKit.UIFont font, valuetype MonoTouch.UIKit.UILineBreakMode mode) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.CoreGraphics.CGSize DrawString (MonoTouch.CoreGraphics.CGRect rect, MonoTouch.UIKit.UIFont font, MonoTouch.UIKit.UILineBreakMode mode);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype MonoTouch.CoreGraphics.CGSize DrawString(valuetype MonoTouch.CoreGraphics.CGRect rect, class MonoTouch.UIKit.UIFont font, valuetype MonoTouch.UIKit.UILineBreakMode mode) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.SizeF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="font" Type="MonoTouch.UIKit.UIFont" />
        <Parameter Name="mode" Type="MonoTouch.UIKit.UILineBreakMode" />
        <Parameter Name="rect" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="rect">Bounding rectangle.</param>
        <param name="font">Font to use to draw the string.</param>
        <param name="mode">The linebreak mode to use to draw the string.</param>
        <summary>
          <para>
	    Deprecated in iOS7.  Use NSString.DrawString(RectangleF, UIStringAttributes) instead
	  </para>
          <para>
	    Draws the string in the specified rectangle with the specified font.
	  </para>
        </summary>
        <returns>The actual size used by the rendering.</returns>
        <remarks>
          <para>This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawString" apistyle="classic">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF DrawString (System.Drawing.RectangleF rect, MonoTouch.UIKit.UIFont font, MonoTouch.UIKit.UILineBreakMode mode, MonoTouch.UIKit.UITextAlignment alignment);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF DrawString(valuetype System.Drawing.RectangleF rect, class MonoTouch.UIKit.UIFont font, valuetype MonoTouch.UIKit.UILineBreakMode mode, valuetype MonoTouch.UIKit.UITextAlignment alignment) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.CoreGraphics.CGSize DrawString (MonoTouch.CoreGraphics.CGRect rect, MonoTouch.UIKit.UIFont font, MonoTouch.UIKit.UILineBreakMode mode, MonoTouch.UIKit.UITextAlignment alignment);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype MonoTouch.CoreGraphics.CGSize DrawString(valuetype MonoTouch.CoreGraphics.CGRect rect, class MonoTouch.UIKit.UIFont font, valuetype MonoTouch.UIKit.UILineBreakMode mode, valuetype MonoTouch.UIKit.UITextAlignment alignment) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.SizeF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="font" Type="MonoTouch.UIKit.UIFont" />
        <Parameter Name="mode" Type="MonoTouch.UIKit.UILineBreakMode" />
        <Parameter Name="alignment" Type="MonoTouch.UIKit.UITextAlignment" />
        <Parameter Name="rect" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="rect">Bounding rectangle.</param>
        <param name="font">Font to use to draw the string.</param>
        <param name="mode">The linebreak mode to use to draw the string.</param>
        <param name="alignment">The text alignment to use when drawing the string.</param>
        <summary>
          <para>Deprecated in iOS7.  Use NSString.DrawString(RectangleF, UIStringAttributes) instead.</para>
          <para>Draws the string in the specified rectangle with the specified font.</para>
        </summary>
        <returns>The actual size used by the rendering.</returns>
        <remarks>
          <para>This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawString" apistyle="classic">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF DrawString (System.Drawing.PointF point, float width, MonoTouch.UIKit.UIFont font, MonoTouch.UIKit.UILineBreakMode breakMode);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF DrawString(valuetype System.Drawing.PointF point, float32 width, class MonoTouch.UIKit.UIFont font, valuetype MonoTouch.UIKit.UILineBreakMode breakMode) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.CoreGraphics.CGSize DrawString (MonoTouch.CoreGraphics.CGPoint point, nfloat width, MonoTouch.UIKit.UIFont font, MonoTouch.UIKit.UILineBreakMode breakMode);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype MonoTouch.CoreGraphics.CGSize DrawString(valuetype MonoTouch.CoreGraphics.CGPoint point, valuetype System.nfloat width, class MonoTouch.UIKit.UIFont font, valuetype MonoTouch.UIKit.UILineBreakMode breakMode) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.SizeF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" apistyle="classic" />
        <Parameter Name="width" Type="System.Single" apistyle="classic" />
        <Parameter Name="font" Type="MonoTouch.UIKit.UIFont" />
        <Parameter Name="breakMode" Type="MonoTouch.UIKit.UILineBreakMode" />
        <Parameter Name="point" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="unified" />
        <Parameter Name="width" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="point">The position where the string should be drawn.</param>
        <param name="width">The maximum width to use when drawing.</param>
        <param name="font">Font to use to draw the string.</param>
        <param name="breakMode">The linebreak mode to use to draw the string.</param>
        <summary>
          <para>
	    Deprecated in iOS7.  Use NSString.DrawString(RectangleF, UIStringAttributes) instead.
	  </para>
          <para>
	    Draws the string in the specified rectangle with the specified font.
	  </para>
        </summary>
        <returns>The actual size used by the rendering.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawString" apistyle="classic">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF DrawString (System.Drawing.PointF point, float width, MonoTouch.UIKit.UIFont font, float minFontSize, float actualFontSize, MonoTouch.UIKit.UILineBreakMode breakMode, MonoTouch.UIKit.UIBaselineAdjustment adjustment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF DrawString(valuetype System.Drawing.PointF point, float32 width, class MonoTouch.UIKit.UIFont font, float32 minFontSize, float32 actualFontSize, valuetype MonoTouch.UIKit.UILineBreakMode breakMode, valuetype MonoTouch.UIKit.UIBaselineAdjustment adjustment) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Advice("Use the version with a `ref float actualFontSize`")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" />
        <Parameter Name="width" Type="System.Single" />
        <Parameter Name="font" Type="MonoTouch.UIKit.UIFont" />
        <Parameter Name="minFontSize" Type="System.Single" />
        <Parameter Name="actualFontSize" Type="System.Single" />
        <Parameter Name="breakMode" Type="MonoTouch.UIKit.UILineBreakMode" />
        <Parameter Name="adjustment" Type="MonoTouch.UIKit.UIBaselineAdjustment" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <param name="width">To be added.</param>
        <param name="font">To be added.</param>
        <param name="minFontSize">To be added.</param>
        <param name="actualFontSize">To be added.</param>
        <param name="breakMode">To be added.</param>
        <param name="adjustment">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawString" apistyle="classic">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF DrawString (System.Drawing.PointF point, float width, MonoTouch.UIKit.UIFont font, float fontSize, MonoTouch.UIKit.UILineBreakMode breakMode, MonoTouch.UIKit.UIBaselineAdjustment adjustment);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF DrawString(valuetype System.Drawing.PointF point, float32 width, class MonoTouch.UIKit.UIFont font, float32 fontSize, valuetype MonoTouch.UIKit.UILineBreakMode breakMode, valuetype MonoTouch.UIKit.UIBaselineAdjustment adjustment) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.CoreGraphics.CGSize DrawString (MonoTouch.CoreGraphics.CGPoint point, nfloat width, MonoTouch.UIKit.UIFont font, nfloat fontSize, MonoTouch.UIKit.UILineBreakMode breakMode, MonoTouch.UIKit.UIBaselineAdjustment adjustment);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype MonoTouch.CoreGraphics.CGSize DrawString(valuetype MonoTouch.CoreGraphics.CGPoint point, valuetype System.nfloat width, class MonoTouch.UIKit.UIFont font, valuetype System.nfloat fontSize, valuetype MonoTouch.UIKit.UILineBreakMode breakMode, valuetype MonoTouch.UIKit.UIBaselineAdjustment adjustment) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.SizeF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" apistyle="classic" />
        <Parameter Name="width" Type="System.Single" apistyle="classic" />
        <Parameter Name="font" Type="MonoTouch.UIKit.UIFont" />
        <Parameter Name="fontSize" Type="System.Single" apistyle="classic" />
        <Parameter Name="breakMode" Type="MonoTouch.UIKit.UILineBreakMode" />
        <Parameter Name="adjustment" Type="MonoTouch.UIKit.UIBaselineAdjustment" />
        <Parameter Name="point" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="unified" />
        <Parameter Name="width" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="fontSize" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="point">The position where the string should be drawn.</param>
        <param name="width">The maximum width to use when drawing.</param>
        <param name="font">Font to use to draw the string.</param>
        <param name="fontSize">The font size to use</param>
        <param name="breakMode">The linebreak mode to use to draw the string.</param>
        <param name="adjustment">Baseline adjustment to use.</param>
        <summary>
          <para>Deprecated in iOS7.  Use NSString.DrawString(RectangleF, UIStringAttributes) instead.</para>
          <para>Draws the string in the specified rectangle with the specified font.</para>
        </summary>
        <returns>The actual size used by the rendering.</returns>
        <remarks>
          <para>This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawString" apistyle="classic">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF DrawString (System.Drawing.PointF point, float width, MonoTouch.UIKit.UIFont font, float minFontSize, ref float actualFontSize, MonoTouch.UIKit.UILineBreakMode breakMode, MonoTouch.UIKit.UIBaselineAdjustment adjustment);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF DrawString(valuetype System.Drawing.PointF point, float32 width, class MonoTouch.UIKit.UIFont font, float32 minFontSize, float32 actualFontSize, valuetype MonoTouch.UIKit.UILineBreakMode breakMode, valuetype MonoTouch.UIKit.UIBaselineAdjustment adjustment) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.CoreGraphics.CGSize DrawString (MonoTouch.CoreGraphics.CGPoint point, nfloat width, MonoTouch.UIKit.UIFont font, nfloat minFontSize, ref nfloat actualFontSize, MonoTouch.UIKit.UILineBreakMode breakMode, MonoTouch.UIKit.UIBaselineAdjustment adjustment);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype MonoTouch.CoreGraphics.CGSize DrawString(valuetype MonoTouch.CoreGraphics.CGPoint point, valuetype System.nfloat width, class MonoTouch.UIKit.UIFont font, valuetype System.nfloat minFontSize, valuetype System.nfloat actualFontSize, valuetype MonoTouch.UIKit.UILineBreakMode breakMode, valuetype MonoTouch.UIKit.UIBaselineAdjustment adjustment) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.SizeF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" apistyle="classic" />
        <Parameter Name="width" Type="System.Single" apistyle="classic" />
        <Parameter Name="font" Type="MonoTouch.UIKit.UIFont" />
        <Parameter Name="minFontSize" Type="System.Single" apistyle="classic" />
        <Parameter Name="actualFontSize" Type="System.Single&amp;" RefType="ref" apistyle="classic" />
        <Parameter Name="breakMode" Type="MonoTouch.UIKit.UILineBreakMode" />
        <Parameter Name="adjustment" Type="MonoTouch.UIKit.UIBaselineAdjustment" />
        <Parameter Name="point" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="unified" />
        <Parameter Name="width" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="minFontSize" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="actualFontSize" Type="System.nfloat&amp;" RefType="ref" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="point">The position where the string should be drawn.</param>
        <param name="width">The maximum width to use when drawing.</param>
        <param name="font">Font to use to draw the string.</param>
        <param name="minFontSize">Minimum font size to use.</param>
        <param name="actualFontSize">Return value: the used font size.</param>
        <param name="breakMode">The linebreak mode to use to draw the string.</param>
        <param name="adjustment">Baseline adjustment to use.</param>
        <summary>
          <para>Deprecated in iOS7.  Use NSString.DrawString(RectangleF, UIStringAttributes) instead.</para>
          <para>Draws the string in the specified rectangle with the specified font.</para>
        </summary>
        <returns>The actual size used by the rendering.</returns>
        <remarks>
          <para>This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static readonly MonoTouch.Foundation.NSString Empty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class MonoTouch.Foundation.NSString Empty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encode" apistyle="classic">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSData Encode (MonoTouch.Foundation.NSStringEncoding enc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.Foundation.NSData Encode(valuetype MonoTouch.Foundation.NSStringEncoding enc) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enc" Type="MonoTouch.Foundation.NSStringEncoding" />
      </Parameters>
      <Docs>
        <param name="enc">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSData Encode (MonoTouch.Foundation.NSStringEncoding enc, bool allowLossyConversion);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.Foundation.NSData Encode(valuetype MonoTouch.Foundation.NSStringEncoding enc, bool allowLossyConversion) cil managed" />
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSData Encode (MonoTouch.Foundation.NSStringEncoding enc, bool allowLossyConversion = false);" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enc" Type="MonoTouch.Foundation.NSStringEncoding" />
        <Parameter Name="allowLossyConversion" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enc">To be added.</param>
        <param name="allowLossyConversion">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (MonoTouch.Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class MonoTouch.Foundation.NSCoder encoder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:MonoTouch.Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:MonoTouch.Foundation.NSKeyedArchived" /> and then invoke the <see cref="M:MonoTouch.Foundation.NSKeyedArchived.ArchiveRootObjectToFile" /> which will call into this method</para>
          <para>If you want to allow your object to be archived, you should override this method and store your state in using the provided <paramref name="encoder" /> parameter.   In addition, you should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="c#">public void override EncodeTo (NSCoder coder){
    c.Encode (1, key: "version");
    c.Encode (userName, key: "userName");
    c.Encode (hostName, key: "hostName");</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (MonoTouch.Foundation.NSString a, MonoTouch.Foundation.NSString b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(class MonoTouch.Foundation.NSString a, class MonoTouch.Foundation.NSString b) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="b" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <param name="b">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpandTildeInPath">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSString ExpandTildeInPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSString ExpandTildeInPath() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("stringByExpandingTildeInPath")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a new string that expands a tilde in this string (indicating the user's home dir) into a full path.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromData">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString FromData (MonoTouch.Foundation.NSData data, MonoTouch.Foundation.NSStringEncoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSString FromData(class MonoTouch.Foundation.NSData data, valuetype MonoTouch.Foundation.NSStringEncoding encoding) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="encoding" Type="MonoTouch.Foundation.NSStringEncoding" />
      </Parameters>
      <Docs>
        <param name="data">The byte buffer.</param>
        <param name="encoding">Use this encoding to intepret the byte buffer.</param>
        <summary>Creates an NSString from an NSData source.</summary>
        <returns>An NSString created by parsing the byte buffer using the specified encoding.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static string FromHandle (IntPtr usrhandle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FromHandle(native int usrhandle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usrhandle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="usrhandle">Pointer to an Objective-C NSString object (not the managed NSString object).</param>
        <summary>Utility method that returns a string from a pointer that points to an Objective-C NSString object.</summary>
        <returns>The Objective-C string in the NSString as a C# string.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Generates a hash code for the current instance.</summary>
        <returns>A int containing the hash code for this instance.</returns>
        <remarks>The algorithm used to generate the hash code is unspecified.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineStart">
      <MemberSignature Language="C#" Value="public virtual void GetLineStart (out uint startPtr, out uint lineEndPtr, out uint contentsEndPtr, MonoTouch.Foundation.NSRange range);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetLineStart(unsigned int32 startPtr, unsigned int32 lineEndPtr, unsigned int32 contentsEndPtr, valuetype MonoTouch.Foundation.NSRange range) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual void GetLineStart (out nuint startPtr, out nuint lineEndPtr, out nuint contentsEndPtr, MonoTouch.Foundation.NSRange range);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetLineStart(valuetype System.nuint startPtr, valuetype System.nuint lineEndPtr, valuetype System.nuint contentsEndPtr, valuetype MonoTouch.Foundation.NSRange range) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("getLineStart:end:contentsEnd:forRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startPtr" Type="System.UInt32&amp;" RefType="out" apistyle="classic" />
        <Parameter Name="lineEndPtr" Type="System.UInt32&amp;" RefType="out" apistyle="classic" />
        <Parameter Name="contentsEndPtr" Type="System.UInt32&amp;" RefType="out" apistyle="classic" />
        <Parameter Name="range" Type="MonoTouch.Foundation.NSRange" />
        <Parameter Name="startPtr" Type="System.nuint&amp;" RefType="out" apistyle="unified" />
        <Parameter Name="lineEndPtr" Type="System.nuint&amp;" RefType="out" apistyle="unified" />
        <Parameter Name="contentsEndPtr" Type="System.nuint&amp;" RefType="out" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="startPtr">To be added.</param>
        <param name="lineEndPtr">To be added.</param>
        <param name="contentsEndPtr">To be added.</param>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVariantFittingPresentationWidth">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSString GetVariantFittingPresentationWidth (int width);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSString GetVariantFittingPresentationWidth(int32 width) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSString GetVariantFittingPresentationWidth (nint width);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSString GetVariantFittingPresentationWidth(valuetype System.nint width) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("variantFittingPresentationWidth:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.Mac_10_11)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" apistyle="classic" />
        <Parameter Name="width" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="width">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPrefix">
      <MemberSignature Language="C#" Value="public virtual bool HasPrefix (MonoTouch.Foundation.NSString prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasPrefix(class MonoTouch.Foundation.NSString prefix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("hasPrefix:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="prefix">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSuffix">
      <MemberSignature Language="C#" Value="public virtual bool HasSuffix (MonoTouch.Foundation.NSString suffix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasSuffix(class MonoTouch.Foundation.NSString suffix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("hasSuffix:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="suffix" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="suffix">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAbsolutePath">
      <MemberSignature Language="C#" Value="public virtual bool IsAbsolutePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbsolutePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isAbsolutePath")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this is an absolute path.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public char this[int idx] { get; }" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".property instance char Item(int32)" apistyle="classic" />
      <MemberSignature Language="C#" Value="public char this[nint idx] { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance char Item(valuetype System.nint)" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idx" Type="System.Int32" apistyle="classic" />
        <Parameter Name="idx" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="idx">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastPathComponent">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSString LastPathComponent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSString LastPathComponent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("lastPathComponent")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The last path component of this string.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public virtual int Length { get; }" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nint Length { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint Length" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("length")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Int32</ReturnType>
        <ReturnType apistyle="unified">System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of Unicode characters in this string.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineRangeForRange">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSRange LineRangeForRange (MonoTouch.Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.Foundation.NSRange LineRangeForRange(valuetype MonoTouch.Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("lineRangeForRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoTouch.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalizedCapitalizedString">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSString LocalizedCapitalizedString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSString LocalizedCapitalizedString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.Mac_10_11)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("localizedCapitalizedString")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.Mac_10_11)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalizedCaseInsensitiveContains">
      <MemberSignature Language="C#" Value="public virtual bool LocalizedCaseInsensitiveContains (MonoTouch.Foundation.NSString str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool LocalizedCaseInsensitiveContains(class MonoTouch.Foundation.NSString str) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("localizedCaseInsensitiveContainsString:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.Mac_10_10)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="str">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalizedLowercaseString">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSString LocalizedLowercaseString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSString LocalizedLowercaseString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.Mac_10_11)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("localizedLowercaseString")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.Mac_10_11)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalizedStandardContainsString">
      <MemberSignature Language="C#" Value="public virtual bool LocalizedStandardContainsString (MonoTouch.Foundation.NSString str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool LocalizedStandardContainsString(class MonoTouch.Foundation.NSString str) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("localizedStandardContainsString:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.Mac_10_11)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="str">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalizedStandardRangeOfString">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSRange LocalizedStandardRangeOfString (MonoTouch.Foundation.NSString str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.Foundation.NSRange LocalizedStandardRangeOfString(class MonoTouch.Foundation.NSString str) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("localizedStandardRangeOfString:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.Mac_10_11)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="str">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalizedUppercaseString">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSString LocalizedUppercaseString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSString LocalizedUppercaseString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.Mac_10_11)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("localizedUppercaseString")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.Mac_10_11)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MutableCopy">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject MutableCopy (MonoTouch.Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject MutableCopy(class MonoTouch.Foundation.NSZone zone) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("mutableCopyWithZone:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>MonoTouch.ObjCRuntime.Release</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="MonoTouch.Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (MonoTouch.Foundation.NSString a, MonoTouch.Foundation.NSString b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class MonoTouch.Foundation.NSString a, class MonoTouch.Foundation.NSString b) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="b" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <param name="b">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString op_Explicit (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class MonoTouch.Foundation.NSString op_Explicit(string str) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static string op_Implicit (MonoTouch.Foundation.NSString str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname string op_Implicit(class MonoTouch.Foundation.NSString str) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="str">The NSString.</param>
        <summary>Converts the NSString to a CIL/C# string.</summary>
        <returns />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (MonoTouch.Foundation.NSString a, MonoTouch.Foundation.NSString b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class MonoTouch.Foundation.NSString a, class MonoTouch.Foundation.NSString b) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="b" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <param name="b">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PathComponents">
      <MemberSignature Language="C#" Value="public virtual string[] PathComponents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] PathComponents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("pathComponents")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of strings containing, in order, each path component of this string.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PathExtension">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSString PathExtension { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSString PathExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("pathExtension")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns this string's path extension, if it has one.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PathWithComponents">
      <MemberSignature Language="C#" Value="public static string[] PathWithComponents (string[] components);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] PathWithComponents(string[] components) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("pathWithComponents:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="components" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="components">To be added.</param>
        <summary>Constructs a path from the specified array of components.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseNative">
      <MemberSignature Language="C#" Value="public static void ReleaseNative (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReleaseNative(native int handle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Handle to the Objective-C native NSString object.</param>
        <summary>Releases a native Objective-C string.</summary>
        <remarks>Use this method to release Objective-C NSString handles that were previously allocated with <see cref="MonoTouch.Foundation.NSString.CreateNative(System.String)" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSString Replace (MonoTouch.Foundation.NSRange range, MonoTouch.Foundation.NSString replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSString Replace(valuetype MonoTouch.Foundation.NSRange range, class MonoTouch.Foundation.NSString replacement) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("stringByReplacingCharactersInRange:withString:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoTouch.Foundation.NSRange" />
        <Parameter Name="replacement" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <param name="replacement">To be added.</param>
        <summary>Returns a new string that substitutes the replacement string into this string, at the specified range.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveSymlinksInPath">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSString ResolveSymlinksInPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSString ResolveSymlinksInPath() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("stringByResolvingSymlinksInPath")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resolves all symbolic links in this and returns the standardized path result.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StandarizePath">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSString StandarizePath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSString StandarizePath() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("stringByStandardizingPath")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Standardizes this string into a path by, for instance, removing "/./" and similar constructs.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringSize" apistyle="classic">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF StringSize (MonoTouch.UIKit.UIFont font);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF StringSize(class MonoTouch.UIKit.UIFont font) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.CoreGraphics.CGSize StringSize (MonoTouch.UIKit.UIFont font);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype MonoTouch.CoreGraphics.CGSize StringSize(class MonoTouch.UIKit.UIFont font) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.SizeF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="font" Type="MonoTouch.UIKit.UIFont" />
      </Parameters>
      <Docs>
        <param name="font">The font to be used in the size calculation.</param>
        <summary>
          <para>Deprecated in iOS7.  Use NSString.GetSizeUsingAttributes(UIStringAttributes) instead.</para>
          <para>Calculates the <see cref="T:System.Drawing.SizeF" /> of the specified string if it were rendered with the specified font.</para>
        </summary>
        <returns>Returns the <see cref="T:System.Drawing.SizeF" /> of the specified string if it were rendered with the specified font.</returns>
        <remarks>
          <para>Application developers can use this method to calculate text metrics. It does not render or otherwise change state in the <see cref="T:MonoTouch.UIKit.UIView" />.</para>
          <para>In iOS 6 and later, this method calculates the size using the <see cref="M:MonoTouch.UIKit.UILineBreakMode.WordWrap" /> line-break mode. In earlier versions, this method returns the calculation without any line breaks.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringSize" apistyle="classic">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF StringSize (MonoTouch.UIKit.UIFont font, System.Drawing.SizeF constrainedToSize);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF StringSize(class MonoTouch.UIKit.UIFont font, valuetype System.Drawing.SizeF constrainedToSize) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.CoreGraphics.CGSize StringSize (MonoTouch.UIKit.UIFont font, MonoTouch.CoreGraphics.CGSize constrainedToSize);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype MonoTouch.CoreGraphics.CGSize StringSize(class MonoTouch.UIKit.UIFont font, valuetype MonoTouch.CoreGraphics.CGSize constrainedToSize) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.SizeF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="font" Type="MonoTouch.UIKit.UIFont" />
        <Parameter Name="constrainedToSize" Type="System.Drawing.SizeF" apistyle="classic" />
        <Parameter Name="constrainedToSize" Type="MonoTouch.CoreGraphics.CGSize" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="font">The font to be used in the size calculation.</param>
        <param name="constrainedToSize">The maximum <see cref="T:System.Drawing.SizeF" /> allowed for the string.</param>
        <summary>
          <para>Deprecated in iOS7.   Use NSString.GetBoundingRect (SizeF, NSStringDrawingOptions, UIStringAttributes,NSStringDrawingContext) instead.</para>
          <para>Calculates the <see cref="T:System.Drawing.SizeF" /> of the specified string if it were rendered with the specified font and constrained to the specified size.</para>
        </summary>
        <returns>Returns the <see cref="T:System.Drawing.SizeF" /> of the specified string if it were rendered with the specified font and constrained to the specified size.</returns>
        <remarks>
          <para>Application developers can use this method to calculate text metrics. It does not render or otherwise change state in the <see cref="T:MonoTouch.UIKit.UIView" />.</para>
          <para>This method calculates the size that the <paramref name="str" /> would require if rendered with the <paramref name="font" />, but if it the rendering were not allowed to exceed the dimensions of the <paramref name="constrainedToSize" /><see cref="T:System.Drawing.SizeF" />. This method calculates the size using <see cref="M:MonoTouch.UIKit.UILineBreakMode.WordWrap" /> line-break mode. If the calculated size exceeds the available dimensions, the method will attempt to truncate the string internally and return a <see cref="T:System.Drawing.SizeF" /> based on that truncated text. If the <see cref="P:System.Drawing.SizeF.Height" /> of the <paramref name="constrainedToSize" /> argument is less than that of a single line of text in the specfied font, the method may return a <see cref="T:System.Drawing.SizeF" /> whose <see cref="P:System.Drawing.SizeF.Height" /> is greater than that in <paramref name="constrainedToSize" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringSize" apistyle="classic">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF StringSize (MonoTouch.UIKit.UIFont font, System.Drawing.SizeF constrainedToSize, MonoTouch.UIKit.UILineBreakMode lineBreakMode);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF StringSize(class MonoTouch.UIKit.UIFont font, valuetype System.Drawing.SizeF constrainedToSize, valuetype MonoTouch.UIKit.UILineBreakMode lineBreakMode) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.CoreGraphics.CGSize StringSize (MonoTouch.UIKit.UIFont font, MonoTouch.CoreGraphics.CGSize constrainedToSize, MonoTouch.UIKit.UILineBreakMode lineBreakMode);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype MonoTouch.CoreGraphics.CGSize StringSize(class MonoTouch.UIKit.UIFont font, valuetype MonoTouch.CoreGraphics.CGSize constrainedToSize, valuetype MonoTouch.UIKit.UILineBreakMode lineBreakMode) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.SizeF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="font" Type="MonoTouch.UIKit.UIFont" />
        <Parameter Name="constrainedToSize" Type="System.Drawing.SizeF" apistyle="classic" />
        <Parameter Name="lineBreakMode" Type="MonoTouch.UIKit.UILineBreakMode" />
        <Parameter Name="constrainedToSize" Type="MonoTouch.CoreGraphics.CGSize" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="font">The font to be used in the size calculation.</param>
        <param name="constrainedToSize">The maximum <see cref="T:System.Drawing.SizeF" /> allowed for the string.</param>
        <param name="lineBreakMode">The line-break mode to be used in the calculation.</param>
        <summary>
          <para>Deprecated in iOS7.   Use NSString.GetBoundingRect (SizeF, NSStringDrawingOptions, UIStringAttributes,NSStringDrawingContext) instead.</para>
          <para>Calculates the <see cref="T:System.Drawing.SizeF" /> of the specified string if it were rendered with the specified: font, size constraint, and line-break mode.</para>
        </summary>
        <returns>Returns the <see cref="T:System.Drawing.SizeF" /> of the specified string if it were rendered with the specified: font, size constraint, and line-break mode.</returns>
        <remarks>
          <para>Application developers can use this method to calculate text metrics. It does not render or otherwise change state in the <see cref="T:MonoTouch.UIKit.UIView" />.</para>
          <para>This method calculates the size that the <paramref name="str" /> would require if rendered with the <paramref name="font" />, but if it the rendering were not allowed to exceed the dimensions of the <paramref name="constrainedToSize" /><see cref="T:System.Drawing.SizeF" />. This method calculates the size using the specified <paramref name="lineBreakMode" /> line-break mode. If the calculated size exceeds the available dimensions, the method will attempt to truncate the string internally and return a <see cref="T:System.Drawing.SizeF" /> based on that truncated text. If the <see cref="P:System.Drawing.SizeF.Height" /> of the <paramref name="constrainedToSize" /> argument is less than that of a single line of text in the specfied font, the method may return a <see cref="T:System.Drawing.SizeF" /> whose <see cref="P:System.Drawing.SizeF.Height" /> is greater than that in <paramref name="constrainedToSize" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringSize" apistyle="classic">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF StringSize (MonoTouch.UIKit.UIFont font, float forWidth, MonoTouch.UIKit.UILineBreakMode breakMode);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF StringSize(class MonoTouch.UIKit.UIFont font, float32 forWidth, valuetype MonoTouch.UIKit.UILineBreakMode breakMode) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.CoreGraphics.CGSize StringSize (MonoTouch.UIKit.UIFont font, nfloat forWidth, MonoTouch.UIKit.UILineBreakMode breakMode);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype MonoTouch.CoreGraphics.CGSize StringSize(class MonoTouch.UIKit.UIFont font, valuetype System.nfloat forWidth, valuetype MonoTouch.UIKit.UILineBreakMode breakMode) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.SizeF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="font" Type="MonoTouch.UIKit.UIFont" />
        <Parameter Name="forWidth" Type="System.Single" apistyle="classic" />
        <Parameter Name="breakMode" Type="MonoTouch.UIKit.UILineBreakMode" />
        <Parameter Name="forWidth" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="font">The font to be used in the size calculation.</param>
        <param name="forWidth">The maximum width to be used in the calculation.</param>
        <param name="breakMode">The line-break mode to be used in the calculation.</param>
        <summary>
          <para>Deprecated in iOS7.   Use NSString.GetBoundingRect (SizeF, NSStringDrawingOptions, UIStringAttributes,NSStringDrawingContext) instead.</para>
          <para>Calculates the <see cref="T:System.Drawing.SizeF" /> of a single line of the specified string if it were rendered with the specified: font, width constraint, and line-break mode.</para>
        </summary>
        <returns>Returns the <see cref="T:System.Drawing.SizeF" /> of the first line of the specified string if it were rendered with the specified: font, width constraint, and line-break mode.</returns>
        <remarks>
          <para>Application developers can use this method to calculate text metrics. It does not render or otherwise change state in the <see cref="T:MonoTouch.UIKit.UIView" />.</para>
          <para>This method calculates the size that the first line of the <paramref name="str" /> would require if rendered with the <paramref name="font" />, if the rendering were not allowed to exceed the width of  <paramref name="forWidth" />. This method uses the specified <paramref name="lineBreakMode" /> line-break mode to truncate the string when it exceeds <paramref name="forWidth" />. If the <see cref="P:System.Drawing.SizeF.Height" /> of the <paramref name="constrainedToSize" /> argument is less than that of a single line of text in the specfied font, the method may return a <see cref="T:System.Drawing.SizeF" /> whose <see cref="P:System.Drawing.SizeF.Height" /> is greater than that in <paramref name="constrainedToSize" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringSize" apistyle="classic">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF StringSize (MonoTouch.UIKit.UIFont font, float minFontSize, ref float actualFontSize, float forWidth, MonoTouch.UIKit.UILineBreakMode lineBreakMode);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF StringSize(class MonoTouch.UIKit.UIFont font, float32 minFontSize, float32 actualFontSize, float32 forWidth, valuetype MonoTouch.UIKit.UILineBreakMode lineBreakMode) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.CoreGraphics.CGSize StringSize (MonoTouch.UIKit.UIFont font, nfloat minFontSize, ref nfloat actualFontSize, nfloat forWidth, MonoTouch.UIKit.UILineBreakMode lineBreakMode);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype MonoTouch.CoreGraphics.CGSize StringSize(class MonoTouch.UIKit.UIFont font, valuetype System.nfloat minFontSize, valuetype System.nfloat actualFontSize, valuetype System.nfloat forWidth, valuetype MonoTouch.UIKit.UILineBreakMode lineBreakMode) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.SizeF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="font" Type="MonoTouch.UIKit.UIFont" />
        <Parameter Name="minFontSize" Type="System.Single" apistyle="classic" />
        <Parameter Name="actualFontSize" Type="System.Single&amp;" RefType="ref" apistyle="classic" />
        <Parameter Name="forWidth" Type="System.Single" apistyle="classic" />
        <Parameter Name="lineBreakMode" Type="MonoTouch.UIKit.UILineBreakMode" />
        <Parameter Name="minFontSize" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="actualFontSize" Type="System.nfloat&amp;" RefType="ref" apistyle="unified" />
        <Parameter Name="forWidth" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="font">The font to be used in the size calculation.</param>
        <param name="minFontSize">The minimum size to which the font can be shrunk before resorting to text-truncation.</param>
        <param name="actualFontSize">An output reference parameter that holds the calculate font size.</param>
        <param name="forWidth">The maximum width to be used in the calculation.</param>
        <param name="lineBreakMode">The line-break mode to be used in the calculation.</param>
        <summary>
          <para>Deprecated on iOS7.</para>
          <para>Calculates the <see cref="T:System.Drawing.SizeF" />  and size of the font of the first line of the specified string if it were rendered with the specified constraints.</para>
        </summary>
        <returns>Returns the <see cref="T:System.Drawing.SizeF" /> of the first line of the specified string if it were rendered with the specified constraints. Assigns the calculated font size to <paramref name="actualFontSize" />.</returns>
        <remarks>
          <para>Application developers can use this method to calculate text metrics. It does not render or otherwise change state in the <see cref="T:MonoTouch.UIKit.UIView" />.</para>
          <para>This method calculates the size that the first line of the <paramref name="str" /> would require if rendered with the <paramref name="font" />, if the font were allowed to shrink as necessary to fit in the width of  <paramref name="forWidth" />. This method tries to use smaller font sizes to fit the entire text in a single line of width less than or equal to <paramref name="forWidth" />. If, even with a font of <paramref name="minFontSize" /> size, the entire string cannot fit, the string is truncated using the <paramref name="lineBreakMode" /> line-break mode until it's rendered width is less than or equal to <paramref name="forWidth" />. </para>
          <para>The reference parameter <paramref name="actualFontSize" /> is assigned the font size that is ultimately used by the calculation.</para>
          <para>The following example code shows the use of this method. The output is "Metrics are {Width=100, Height=15} with required font size of: 7.5."</para>
          <example>
            <code lang="C#">
              var v = new UIView();
              var str = "Hark! I hear the cannons roar!";
              var font = UIFont.FromName("Helvetica", 12);
              var minFontSize = 6;
              Single actualFontSize = 0;
              var forWidth = 100;
              var lineBreakMode = UILineBreakMode.WordWrap;
              var textSize = v.StringSize(str, font, minFontSize, ref actualFontSize, forWidth, lineBreakMode);
              Console.WriteLine("Metrics are {0} with required font size of: {1}", textSize, actualFontSize);
            </code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public virtual string ToLower (MonoTouch.Foundation.NSLocale locale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToLower(class MonoTouch.Foundation.NSLocale locale) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("lowercaseStringWithLocale:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_6_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locale" Type="MonoTouch.Foundation.NSLocale" />
      </Parameters>
      <Docs>
        <param name="locale">The locale to use for this operation.</param>
        <summary>Returns a new string that is the lowercase version of this string, according to the rules of the specified locale.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string representation of the value of the current instance.</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public virtual string ToUpper (MonoTouch.Foundation.NSLocale locale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToUpper(class MonoTouch.Foundation.NSLocale locale) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("uppercaseStringWithLocale:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_6_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locale" Type="MonoTouch.Foundation.NSLocale" />
      </Parameters>
      <Docs>
        <param name="locale">The locale to use for this operation.</param>
        <summary>Returns a new string that is the uppercase version of this string, according to the rules of the specified locale.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransliterateString">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSString TransliterateString (MonoTouch.Foundation.NSString transform, bool reverse);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSString TransliterateString(class MonoTouch.Foundation.NSString transform, bool reverse) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("stringByApplyingTransform:reverse:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.Mac_10_11)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transform" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="reverse" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="transform">To be added.</param>
        <param name="reverse">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransliterateString">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSString TransliterateString (MonoTouch.Foundation.NSStringTransform transform, bool reverse);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.Foundation.NSString TransliterateString(valuetype MonoTouch.Foundation.NSStringTransform transform, bool reverse) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transform" Type="MonoTouch.Foundation.NSStringTransform" />
        <Parameter Name="reverse" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="transform">To be added.</param>
        <param name="reverse">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
