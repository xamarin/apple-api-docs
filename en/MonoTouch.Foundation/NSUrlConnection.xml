<Type Name="NSUrlConnection" FullName="MonoTouch.Foundation.NSUrlConnection">
  <TypeSignature Language="C#" Value="public class NSUrlConnection : MonoTouch.Foundation.NSObject, IDisposable, MonoTouch.Foundation.INSURLAuthenticationChallengeSender" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSUrlConnection extends MonoTouch.Foundation.NSObject implements class MonoTouch.Foundation.INSURLAuthenticationChallengeSender, class MonoTouch.ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.Foundation.INSURLAuthenticationChallengeSender</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("NSURLConnection", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A Web Client.</summary>
    <remarks>To be added.</remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=d01773c4-0073-4ca2-852f-2c2781f12484">HttpClient</related>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLConnection_Class/index.html">Apple documentation for <c>NSURLConnection</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSUrlConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public NSUrlConnection (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSUrlConnection (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected NSUrlConnection (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSUrlConnection (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected NSUrlConnection (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="unified">
      <MemberSignature Language="C#" Value="public NSUrlConnection (MonoTouch.Foundation.NSUrlRequest request, MonoTouch.Foundation.INSUrlConnectionDelegate connectionDelegate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSUrlRequest request, class MonoTouch.Foundation.INSUrlConnectionDelegate connectionDelegate) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithRequest:delegate:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="request" Type="MonoTouch.Foundation.NSUrlRequest" />
        <Parameter Name="connectionDelegate" Type="MonoTouch.Foundation.INSUrlConnectionDelegate" />
      </Parameters>
      <Docs>
        <param name="request">To be added.</param>
        <param name="connectionDelegate">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public NSUrlConnection (MonoTouch.Foundation.NSUrlRequest request, MonoTouch.Foundation.NSUrlConnectionDelegate connectionDelegate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSUrlRequest request, class MonoTouch.Foundation.NSUrlConnectionDelegate connectionDelegate) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithRequest:delegate:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="request" Type="MonoTouch.Foundation.NSUrlRequest" />
        <Parameter Name="connectionDelegate" Type="MonoTouch.Foundation.NSUrlConnectionDelegate" />
      </Parameters>
      <Docs>
        <param name="request">To be added.</param>
        <param name="connectionDelegate">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="unified">
      <MemberSignature Language="C#" Value="public NSUrlConnection (MonoTouch.Foundation.NSUrlRequest request, MonoTouch.Foundation.INSUrlConnectionDelegate connectionDelegate, bool startImmediately);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSUrlRequest request, class MonoTouch.Foundation.INSUrlConnectionDelegate connectionDelegate, bool startImmediately) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithRequest:delegate:startImmediately:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="request" Type="MonoTouch.Foundation.NSUrlRequest" />
        <Parameter Name="connectionDelegate" Type="MonoTouch.Foundation.INSUrlConnectionDelegate" />
        <Parameter Name="startImmediately" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="request">To be added.</param>
        <param name="connectionDelegate">To be added.</param>
        <param name="startImmediately">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public NSUrlConnection (MonoTouch.Foundation.NSUrlRequest request, MonoTouch.Foundation.NSUrlConnectionDelegate connectionDelegate, bool startImmediately);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSUrlRequest request, class MonoTouch.Foundation.NSUrlConnectionDelegate connectionDelegate, bool startImmediately) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithRequest:delegate:startImmediately:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="request" Type="MonoTouch.Foundation.NSUrlRequest" />
        <Parameter Name="connectionDelegate" Type="MonoTouch.Foundation.NSUrlConnectionDelegate" />
        <Parameter Name="startImmediately" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="request">To be added.</param>
        <param name="connectionDelegate">To be added.</param>
        <param name="startImmediately">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public virtual void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cancel() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("cancel")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancels the asynchronous load of a request.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAuthenticationChallenge">
      <MemberSignature Language="C#" Value="public virtual void CancelAuthenticationChallenge (MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelAuthenticationChallenge(class MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("cancelAuthenticationChallenge:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challenge" Type="MonoTouch.Foundation.NSUrlAuthenticationChallenge" />
      </Parameters>
      <Docs>
        <param name="challenge">To be added.</param>
        <summary>Cancels the specified challenge.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanHandleRequest">
      <MemberSignature Language="C#" Value="public static bool CanHandleRequest (MonoTouch.Foundation.NSUrlRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanHandleRequest(class MonoTouch.Foundation.NSUrlRequest request) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("canHandleRequest:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="MonoTouch.Foundation.NSUrlRequest" />
      </Parameters>
      <Docs>
        <param name="request">To be added.</param>
        <summary>Whether the specified request can be handled, based on a preflight evaluation.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinueWithoutCredential" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual void ContinueWithoutCredential (MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ContinueWithoutCredential(class MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("continueWithoutCredentialForAuthenticationChallenge:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challenge" Type="MonoTouch.Foundation.NSUrlAuthenticationChallenge" />
      </Parameters>
      <Docs>
        <param name="challenge">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinueWithoutCredentialForAuthenticationChallenge" apistyle="classic">
      <MemberSignature Language="C#" Value="public virtual void ContinueWithoutCredentialForAuthenticationChallenge (MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ContinueWithoutCredentialForAuthenticationChallenge(class MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("continueWithoutCredentialForAuthenticationChallenge:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challenge" Type="MonoTouch.Foundation.NSUrlAuthenticationChallenge" />
      </Parameters>
      <Docs>
        <param name="challenge">To be added.</param>
        <summary>Attempts to continue downloading a request without providing a credential for the specified challenge.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentRequest">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSUrlRequest CurrentRequest { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSUrlRequest CurrentRequest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("currentRequest")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSUrlRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The current connection request.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the NSUrlConnection object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the NSUrlConnection class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the NSUrlConnection ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromRequest" apistyle="unified">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSUrlConnection FromRequest (MonoTouch.Foundation.NSUrlRequest request, MonoTouch.Foundation.INSUrlConnectionDelegate connectionDelegate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSUrlConnection FromRequest(class MonoTouch.Foundation.NSUrlRequest request, class MonoTouch.Foundation.INSUrlConnectionDelegate connectionDelegate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("connectionWithRequest:delegate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSUrlConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="MonoTouch.Foundation.NSUrlRequest" />
        <Parameter Name="connectionDelegate" Type="MonoTouch.Foundation.INSUrlConnectionDelegate" />
      </Parameters>
      <Docs>
        <param name="request">To be added.</param>
        <param name="connectionDelegate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromRequest" apistyle="classic">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSUrlConnection FromRequest (MonoTouch.Foundation.NSUrlRequest request, MonoTouch.Foundation.NSUrlConnectionDelegate connectionDelegate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSUrlConnection FromRequest(class MonoTouch.Foundation.NSUrlRequest request, class MonoTouch.Foundation.NSUrlConnectionDelegate connectionDelegate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("connectionWithRequest:delegate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSUrlConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="MonoTouch.Foundation.NSUrlRequest" />
        <Parameter Name="connectionDelegate" Type="MonoTouch.Foundation.NSUrlConnectionDelegate" />
      </Parameters>
      <Docs>
        <param name="request">To be added.</param>
        <param name="connectionDelegate">To be added.</param>
        <summary>Factory method that creates an NSUrlConnection from the specified request.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewsstandAssetDownload">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.NewsstandKit.NKAssetDownload NewsstandAssetDownload { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.NewsstandKit.NKAssetDownload NewsstandAssetDownload" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("newsstandAssetDownload", MonoTouch.ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.NewsstandKit.NKAssetDownload</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieves the NKAssetDownload of this newsstand-related connection.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalRequest">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSUrlRequest OriginalRequest { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSUrlRequest OriginalRequest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("originalRequest")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSUrlRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A deep copy of the original connection request.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformDefaultHandling" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual void PerformDefaultHandling (MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformDefaultHandling(class MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("performDefaultHandlingForAuthenticationChallenge:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challenge" Type="MonoTouch.Foundation.NSUrlAuthenticationChallenge" />
      </Parameters>
      <Docs>
        <param name="challenge">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformDefaultHandlingForChallenge" apistyle="classic">
      <MemberSignature Language="C#" Value="public virtual void PerformDefaultHandlingForChallenge (MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformDefaultHandlingForChallenge(class MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("performDefaultHandlingForAuthenticationChallenge:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challenge" Type="MonoTouch.Foundation.NSUrlAuthenticationChallenge" />
      </Parameters>
      <Docs>
        <param name="challenge">To be added.</param>
        <summary>Uses default handling to respond to the specified challenge.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectProtectionSpaceAndContinue" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual void RejectProtectionSpaceAndContinue (MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RejectProtectionSpaceAndContinue(class MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("rejectProtectionSpaceAndContinueWithChallenge:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challenge" Type="MonoTouch.Foundation.NSUrlAuthenticationChallenge" />
      </Parameters>
      <Docs>
        <param name="challenge">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectProtectionSpaceAndContinueWithChallenge" apistyle="classic">
      <MemberSignature Language="C#" Value="public virtual void RejectProtectionSpaceAndContinueWithChallenge (MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RejectProtectionSpaceAndContinueWithChallenge(class MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("rejectProtectionSpaceAndContinueWithChallenge:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challenge" Type="MonoTouch.Foundation.NSUrlAuthenticationChallenge" />
      </Parameters>
      <Docs>
        <param name="challenge">To be added.</param>
        <summary>Rejects the current protection space.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public virtual void Schedule (MonoTouch.Foundation.NSRunLoop aRunLoop, MonoTouch.Foundation.NSString forMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Schedule(class MonoTouch.Foundation.NSRunLoop aRunLoop, class MonoTouch.Foundation.NSString forMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("scheduleInRunLoop:forMode:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aRunLoop" Type="MonoTouch.Foundation.NSRunLoop" />
        <Parameter Name="forMode" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="aRunLoop">The run loop to use.</param>
        <param name="forMode">The mode to use.</param>
        <summary>Sets the run loop and mode this connection uses.</summary>
        <remarks>.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule" apistyle="classic">
      <MemberSignature Language="C#" Value="public virtual void Schedule (MonoTouch.Foundation.NSRunLoop aRunLoop, string forMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Schedule(class MonoTouch.Foundation.NSRunLoop aRunLoop, string forMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Advice("Use Schedule (NSRunLoop, NSString) instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aRunLoop" Type="MonoTouch.Foundation.NSRunLoop" />
        <Parameter Name="forMode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="aRunLoop">The run loop to use.</param>
        <param name="forMode">The mode to use.</param>
        <summary>Sets the run loop and mode this connection uses.</summary>
        <remarks>This method is obsolete. Use the Schedule (NSRunLoop, NSString) overload instead.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendAsynchronousRequest">
      <MemberSignature Language="C#" Value="public static void SendAsynchronousRequest (MonoTouch.Foundation.NSUrlRequest request, MonoTouch.Foundation.NSOperationQueue queue, MonoTouch.Foundation.NSUrlConnectionDataResponse completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SendAsynchronousRequest(class MonoTouch.Foundation.NSUrlRequest request, class MonoTouch.Foundation.NSOperationQueue queue, class MonoTouch.Foundation.NSUrlConnectionDataResponse completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("sendAsynchronousRequest:queue:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="MonoTouch.Foundation.NSUrlRequest" />
        <Parameter Name="queue" Type="MonoTouch.Foundation.NSOperationQueue" />
        <Parameter Name="completionHandler" Type="MonoTouch.Foundation.NSUrlConnectionDataResponse">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDNSUrlConnectionDataResponse))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="request">Request to perform</param>
        <param name="queue">Operation queue to dispatch the completion to.</param>
        <param name="completionHandler">Method invoked upon completion</param>
        <summary>Loads the data and invokes a method upon completion.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendRequestAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;MonoTouch.Foundation.NSUrlAsyncResult&gt; SendRequestAsync (MonoTouch.Foundation.NSUrlRequest request, MonoTouch.Foundation.NSOperationQueue queue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class MonoTouch.Foundation.NSUrlAsyncResult&gt; SendRequestAsync(class MonoTouch.Foundation.NSUrlRequest request, class MonoTouch.Foundation.NSOperationQueue queue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.Foundation.NSUrlAsyncResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="MonoTouch.Foundation.NSUrlRequest" />
        <Parameter Name="queue" Type="MonoTouch.Foundation.NSOperationQueue" />
      </Parameters>
      <Docs>
        <param name="request">Request to perform</param>
        <param name="queue">Operation queue to dispatch the completion to.</param>
        <summary>Loads the data and invokes a method upon completion.</summary>
        <returns>
          <para>A task that represents the asynchronous SendAsynchronousRequest operation.   The value of the TResult parameter is of type MonoTouch.Foundation.NSUrlAsyncResult.  BLA BLA BLA BLA.</para>
        </returns>
        <remarks>
          <para copied="true">The SendRequestAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendSynchronousRequest">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSData SendSynchronousRequest (MonoTouch.Foundation.NSUrlRequest request, out MonoTouch.Foundation.NSUrlResponse response, out MonoTouch.Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSData SendSynchronousRequest(class MonoTouch.Foundation.NSUrlRequest request, class MonoTouch.Foundation.NSUrlResponse response, class MonoTouch.Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="MonoTouch.Foundation.NSUrlRequest" />
        <Parameter Name="response" Type="MonoTouch.Foundation.NSUrlResponse&amp;" RefType="out" />
        <Parameter Name="error" Type="MonoTouch.Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="request">To be added.</param>
        <param name="response">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDelegateQueue">
      <MemberSignature Language="C#" Value="public virtual void SetDelegateQueue (MonoTouch.Foundation.NSOperationQueue queue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDelegateQueue(class MonoTouch.Foundation.NSOperationQueue queue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setDelegateQueue:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queue" Type="MonoTouch.Foundation.NSOperationQueue" />
      </Parameters>
      <Docs>
        <param name="queue">To be added.</param>
        <summary>Sets the operations queue to be used by this connection's delegate object.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public virtual void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Start() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("start")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unschedule">
      <MemberSignature Language="C#" Value="public virtual void Unschedule (MonoTouch.Foundation.NSRunLoop aRunLoop, MonoTouch.Foundation.NSString forMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unschedule(class MonoTouch.Foundation.NSRunLoop aRunLoop, class MonoTouch.Foundation.NSString forMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("unscheduleFromRunLoop:forMode:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aRunLoop" Type="MonoTouch.Foundation.NSRunLoop" />
        <Parameter Name="forMode" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="aRunLoop">The run loop to unschedule.</param>
        <param name="forMode">The mode to unschedule.</param>
        <summary>Causes the connection to not use this run loop and mode.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unschedule" apistyle="classic">
      <MemberSignature Language="C#" Value="public virtual void Unschedule (MonoTouch.Foundation.NSRunLoop aRunLoop, string forMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unschedule(class MonoTouch.Foundation.NSRunLoop aRunLoop, string forMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Advice("Use Unschedule (NSRunLoop, NSString) instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aRunLoop" Type="MonoTouch.Foundation.NSRunLoop" />
        <Parameter Name="forMode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="aRunLoop">The run loop to unschedule.</param>
        <param name="forMode">The mode to unschedule.</param>
        <summary>Causes the connection to not use this run loop and mode.</summary>
        <remarks>This method is obsolete. Use the Unschedule (NSRunLoop, NSString) overload instead.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseCredential" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual void UseCredential (MonoTouch.Foundation.NSUrlCredential credential, MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UseCredential(class MonoTouch.Foundation.NSUrlCredential credential, class MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("useCredential:forAuthenticationChallenge:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="MonoTouch.Foundation.NSUrlCredential" />
        <Parameter Name="challenge" Type="MonoTouch.Foundation.NSUrlAuthenticationChallenge" />
      </Parameters>
      <Docs>
        <param name="credential">To be added.</param>
        <param name="challenge">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseCredentials" apistyle="classic">
      <MemberSignature Language="C#" Value="public virtual void UseCredentials (MonoTouch.Foundation.NSUrlCredential credential, MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UseCredentials(class MonoTouch.Foundation.NSUrlCredential credential, class MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("useCredential:forAuthenticationChallenge:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="MonoTouch.Foundation.NSUrlCredential" />
        <Parameter Name="challenge" Type="MonoTouch.Foundation.NSUrlAuthenticationChallenge" />
      </Parameters>
      <Docs>
        <param name="credential">To be added.</param>
        <param name="challenge">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
