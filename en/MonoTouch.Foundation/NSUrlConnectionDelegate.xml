<Type Name="NSUrlConnectionDelegate" FullName="MonoTouch.Foundation.NSUrlConnectionDelegate">
  <TypeSignature Language="C#" Value="public class NSUrlConnectionDelegate : MonoTouch.Foundation.NSObject, IDisposable, MonoTouch.Foundation.INSUrlConnectionDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSUrlConnectionDelegate extends MonoTouch.Foundation.NSObject implements class MonoTouch.Foundation.INSUrlConnectionDelegate, class MonoTouch.ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo apistyle="old">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="new">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.Foundation.INSUrlConnectionDelegate</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("NSURLConnectionDelegate", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Delegate class used by the Web Client NSUrlConnection.</summary>
    <remarks>To be added.</remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=d01773c4-0073-4ca2-852f-2c2781f12484">HttpClient</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSUrlConnectionDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSUrlConnectionDelegate (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSUrlConnectionDelegate (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSUrlConnectionDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanAuthenticateAgainstProtectionSpace">
      <MemberSignature Language="C#" Value="public virtual bool CanAuthenticateAgainstProtectionSpace (MonoTouch.Foundation.NSUrlConnection connection, MonoTouch.Foundation.NSUrlProtectionSpace protectionSpace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanAuthenticateAgainstProtectionSpace(class MonoTouch.Foundation.NSUrlConnection connection, class MonoTouch.Foundation.NSUrlProtectionSpace protectionSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("connection:canAuthenticateAgainstProtectionSpace:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Deprecated=MonoTouch.ObjCRuntime.Platform.iOS_8_0 | MonoTouch.ObjCRuntime.Platform.Mac_10_0 | MonoTouch.ObjCRuntime.Platform.Mac_10_1 | MonoTouch.ObjCRuntime.Platform.Mac_10_2 | MonoTouch.ObjCRuntime.Platform.Mac_10_3 | MonoTouch.ObjCRuntime.Platform.Mac_10_4 | MonoTouch.ObjCRuntime.Platform.Mac_10_5 | MonoTouch.ObjCRuntime.Platform.Mac_10_6 | MonoTouch.ObjCRuntime.Platform.Mac_10_7 | MonoTouch.ObjCRuntime.Platform.Mac_10_8 | MonoTouch.ObjCRuntime.Platform.Mac_10_9 | MonoTouch.ObjCRuntime.Platform.Mac_10_10 | MonoTouch.ObjCRuntime.Platform.iOS_Version | MonoTouch.ObjCRuntime.Platform.Mac_Version, Message="Use WillSendRequestForAuthenticationChallenge instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="MonoTouch.Foundation.NSUrlConnection" />
        <Parameter Name="protectionSpace" Type="MonoTouch.Foundation.NSUrlProtectionSpace" />
      </Parameters>
      <Docs>
        <param name="connection">To be added.</param>
        <param name="protectionSpace">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanceledAuthenticationChallenge">
      <MemberSignature Language="C#" Value="public virtual void CanceledAuthenticationChallenge (MonoTouch.Foundation.NSUrlConnection connection, MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CanceledAuthenticationChallenge(class MonoTouch.Foundation.NSUrlConnection connection, class MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("connection:didCancelAuthenticationChallenge:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Deprecated=MonoTouch.ObjCRuntime.Platform.iOS_8_0 | MonoTouch.ObjCRuntime.Platform.Mac_10_0 | MonoTouch.ObjCRuntime.Platform.Mac_10_1 | MonoTouch.ObjCRuntime.Platform.Mac_10_2 | MonoTouch.ObjCRuntime.Platform.Mac_10_3 | MonoTouch.ObjCRuntime.Platform.Mac_10_4 | MonoTouch.ObjCRuntime.Platform.Mac_10_5 | MonoTouch.ObjCRuntime.Platform.Mac_10_6 | MonoTouch.ObjCRuntime.Platform.Mac_10_7 | MonoTouch.ObjCRuntime.Platform.Mac_10_8 | MonoTouch.ObjCRuntime.Platform.Mac_10_9 | MonoTouch.ObjCRuntime.Platform.Mac_10_10 | MonoTouch.ObjCRuntime.Platform.iOS_Version | MonoTouch.ObjCRuntime.Platform.Mac_Version, Message="Use WillSendRequestForAuthenticationChallenge instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="MonoTouch.Foundation.NSUrlConnection" />
        <Parameter Name="challenge" Type="MonoTouch.Foundation.NSUrlAuthenticationChallenge" />
      </Parameters>
      <Docs>
        <param name="connection">To be added.</param>
        <param name="challenge">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionShouldUseCredentialStorage">
      <MemberSignature Language="C#" Value="public virtual bool ConnectionShouldUseCredentialStorage (MonoTouch.Foundation.NSUrlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ConnectionShouldUseCredentialStorage(class MonoTouch.Foundation.NSUrlConnection connection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("connectionShouldUseCredentialStorage:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="MonoTouch.Foundation.NSUrlConnection" />
      </Parameters>
      <Docs>
        <param name="connection">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FailedWithError">
      <MemberSignature Language="C#" Value="public virtual void FailedWithError (MonoTouch.Foundation.NSUrlConnection connection, MonoTouch.Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FailedWithError(class MonoTouch.Foundation.NSUrlConnection connection, class MonoTouch.Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("connection:didFailWithError:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="MonoTouch.Foundation.NSUrlConnection" />
        <Parameter Name="error" Type="MonoTouch.Foundation.NSError" />
      </Parameters>
      <Docs>
        <param name="connection">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishedLoading">
      <MemberSignature Language="C#" Value="public virtual void FinishedLoading (MonoTouch.Foundation.NSUrlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishedLoading(class MonoTouch.Foundation.NSUrlConnection connection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("connectionDidFinishLoading:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="MonoTouch.Foundation.NSUrlConnection" />
      </Parameters>
      <Docs>
        <param name="connection">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NeedNewBodyStream">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSInputStream NeedNewBodyStream (MonoTouch.Foundation.NSUrlConnection connection, MonoTouch.Foundation.NSUrlRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSInputStream NeedNewBodyStream(class MonoTouch.Foundation.NSUrlConnection connection, class MonoTouch.Foundation.NSUrlRequest request) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("connection:needNewBodyStream:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSInputStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="MonoTouch.Foundation.NSUrlConnection" />
        <Parameter Name="request" Type="MonoTouch.Foundation.NSUrlRequest" />
      </Parameters>
      <Docs>
        <param name="connection">To be added.</param>
        <param name="request">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceivedAuthenticationChallenge">
      <MemberSignature Language="C#" Value="public virtual void ReceivedAuthenticationChallenge (MonoTouch.Foundation.NSUrlConnection connection, MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReceivedAuthenticationChallenge(class MonoTouch.Foundation.NSUrlConnection connection, class MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("connection:didReceiveAuthenticationChallenge:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Deprecated=MonoTouch.ObjCRuntime.Platform.iOS_8_0 | MonoTouch.ObjCRuntime.Platform.Mac_10_0 | MonoTouch.ObjCRuntime.Platform.Mac_10_1 | MonoTouch.ObjCRuntime.Platform.Mac_10_2 | MonoTouch.ObjCRuntime.Platform.Mac_10_3 | MonoTouch.ObjCRuntime.Platform.Mac_10_4 | MonoTouch.ObjCRuntime.Platform.Mac_10_5 | MonoTouch.ObjCRuntime.Platform.Mac_10_6 | MonoTouch.ObjCRuntime.Platform.Mac_10_7 | MonoTouch.ObjCRuntime.Platform.Mac_10_8 | MonoTouch.ObjCRuntime.Platform.Mac_10_9 | MonoTouch.ObjCRuntime.Platform.Mac_10_10 | MonoTouch.ObjCRuntime.Platform.iOS_Version | MonoTouch.ObjCRuntime.Platform.Mac_Version, Message="Use WillSendRequestForAuthenticationChallenge instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="MonoTouch.Foundation.NSUrlConnection" />
        <Parameter Name="challenge" Type="MonoTouch.Foundation.NSUrlAuthenticationChallenge" />
      </Parameters>
      <Docs>
        <param name="connection">To be added.</param>
        <param name="challenge">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceivedData">
      <MemberSignature Language="C#" Value="public virtual void ReceivedData (MonoTouch.Foundation.NSUrlConnection connection, MonoTouch.Foundation.NSData data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReceivedData(class MonoTouch.Foundation.NSUrlConnection connection, class MonoTouch.Foundation.NSData data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("connection:didReceiveData:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="MonoTouch.Foundation.NSUrlConnection" />
        <Parameter Name="data" Type="MonoTouch.Foundation.NSData" />
      </Parameters>
      <Docs>
        <param name="connection">To be added.</param>
        <param name="data">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceivedResponse">
      <MemberSignature Language="C#" Value="public virtual void ReceivedResponse (MonoTouch.Foundation.NSUrlConnection connection, MonoTouch.Foundation.NSUrlResponse response);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReceivedResponse(class MonoTouch.Foundation.NSUrlConnection connection, class MonoTouch.Foundation.NSUrlResponse response) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("connection:didReceiveResponse:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="MonoTouch.Foundation.NSUrlConnection" />
        <Parameter Name="response" Type="MonoTouch.Foundation.NSUrlResponse" />
      </Parameters>
      <Docs>
        <param name="connection">To be added.</param>
        <param name="response">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SentBodyData">
      <MemberSignature Language="C#" Value="public virtual void SentBodyData (MonoTouch.Foundation.NSUrlConnection connection, int bytesWritten, int totalBytesWritten, int totalBytesExpectedToWrite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SentBodyData(class MonoTouch.Foundation.NSUrlConnection connection, int32 bytesWritten, int32 totalBytesWritten, int32 totalBytesExpectedToWrite) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("connection:didSendBodyData:totalBytesWritten:totalBytesExpectedToWrite:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="MonoTouch.Foundation.NSUrlConnection" />
        <Parameter Name="bytesWritten" Type="System.Int32" />
        <Parameter Name="totalBytesWritten" Type="System.Int32" />
        <Parameter Name="totalBytesExpectedToWrite" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="connection">To be added.</param>
        <param name="bytesWritten">To be added.</param>
        <param name="totalBytesWritten">To be added.</param>
        <param name="totalBytesExpectedToWrite">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillCacheResponse">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSCachedUrlResponse WillCacheResponse (MonoTouch.Foundation.NSUrlConnection connection, MonoTouch.Foundation.NSCachedUrlResponse cachedResponse);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSCachedUrlResponse WillCacheResponse(class MonoTouch.Foundation.NSUrlConnection connection, class MonoTouch.Foundation.NSCachedUrlResponse cachedResponse) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("connection:willCacheResponse:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSCachedUrlResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="MonoTouch.Foundation.NSUrlConnection" />
        <Parameter Name="cachedResponse" Type="MonoTouch.Foundation.NSCachedUrlResponse" />
      </Parameters>
      <Docs>
        <param name="connection">To be added.</param>
        <param name="cachedResponse">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillSendRequest">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSUrlRequest WillSendRequest (MonoTouch.Foundation.NSUrlConnection connection, MonoTouch.Foundation.NSUrlRequest request, MonoTouch.Foundation.NSUrlResponse response);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSUrlRequest WillSendRequest(class MonoTouch.Foundation.NSUrlConnection connection, class MonoTouch.Foundation.NSUrlRequest request, class MonoTouch.Foundation.NSUrlResponse response) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("connection:willSendRequest:redirectResponse:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSUrlRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="MonoTouch.Foundation.NSUrlConnection" />
        <Parameter Name="request" Type="MonoTouch.Foundation.NSUrlRequest" />
        <Parameter Name="response" Type="MonoTouch.Foundation.NSUrlResponse" />
      </Parameters>
      <Docs>
        <param name="connection">To be added.</param>
        <param name="request">To be added.</param>
        <param name="response">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillSendRequestForAuthenticationChallenge">
      <MemberSignature Language="C#" Value="public virtual void WillSendRequestForAuthenticationChallenge (MonoTouch.Foundation.NSUrlConnection connection, MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillSendRequestForAuthenticationChallenge(class MonoTouch.Foundation.NSUrlConnection connection, class MonoTouch.Foundation.NSUrlAuthenticationChallenge challenge) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("connection:willSendRequestForAuthenticationChallenge:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="MonoTouch.Foundation.NSUrlConnection" />
        <Parameter Name="challenge" Type="MonoTouch.Foundation.NSUrlAuthenticationChallenge" />
      </Parameters>
      <Docs>
        <param name="connection">To be added.</param>
        <param name="challenge">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
