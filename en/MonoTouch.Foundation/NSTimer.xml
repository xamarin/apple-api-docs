<Type Name="NSTimer" FullName="MonoTouch.Foundation.NSTimer">
  <TypeSignature Language="C#" Value="public class NSTimer : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSTimer extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("NSTimer", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The timer can trigger actions at certain time intervals.</summary>
    <remarks>
    </remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSTimer_Class/index.html">Apple documentation for <c>NSTimer</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public NSTimer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This instance of NSTimer would be unusable. Symbol kept for binary compatibility", true)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public NSTimer (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSTimer (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected NSTimer (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSTimer (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected NSTimer (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSTimer (MonoTouch.Foundation.NSDate date, double seconds, bool repeats, Action&lt;MonoTouch.Foundation.NSTimer&gt; block);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSDate date, float64 seconds, bool repeats, class System.Action`1&lt;class MonoTouch.Foundation.NSTimer&gt; block) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithFireDate:interval:repeats:block:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.WatchOS, 3, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.TvOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 12, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="date" Type="MonoTouch.Foundation.NSDate" />
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="repeats" Type="System.Boolean" />
        <Parameter Name="block" Type="System.Action&lt;MonoTouch.Foundation.NSTimer&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity1V22))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="date">To be added.</param>
        <param name="seconds">To be added.</param>
        <param name="repeats">To be added.</param>
        <param name="block">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public NSTimer (MonoTouch.Foundation.NSDate date, TimeSpan when, MonoTouch.Foundation.NSAction action, bool repeats);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSDate date, valuetype System.TimeSpan when, class MonoTouch.Foundation.NSAction action, bool repeats) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="date" Type="MonoTouch.Foundation.NSDate" />
        <Parameter Name="when" Type="System.TimeSpan" />
        <Parameter Name="action" Type="MonoTouch.Foundation.NSAction" />
        <Parameter Name="repeats" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="date">Time at which the timer will be fired.</param>
        <param name="when">This is the duration between when the timer will fire. </param>
        <param name="action">The action to be performed when the timer fires.</param>
        <param name="repeats">Whether this timer should repeat automatically (true) or will be invalidated after firing the first time (false).</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="unified">
      <MemberSignature Language="C#" Value="public NSTimer (MonoTouch.Foundation.NSDate date, TimeSpan when, Action&lt;MonoTouch.Foundation.NSTimer&gt; action, bool repeats);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSDate date, valuetype System.TimeSpan when, class System.Action`1&lt;class MonoTouch.Foundation.NSTimer&gt; action, bool repeats) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="date" Type="MonoTouch.Foundation.NSDate" />
        <Parameter Name="when" Type="System.TimeSpan" />
        <Parameter Name="action" Type="System.Action&lt;MonoTouch.Foundation.NSTimer&gt;" />
        <Parameter Name="repeats" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="date">To be added.</param>
        <param name="when">To be added.</param>
        <param name="action">To be added.</param>
        <param name="repeats">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSTimer (MonoTouch.Foundation.NSDate date, double seconds, MonoTouch.Foundation.NSObject target, MonoTouch.ObjCRuntime.Selector selector, MonoTouch.Foundation.NSObject userInfo, bool repeats);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSDate date, float64 seconds, class MonoTouch.Foundation.NSObject target, class MonoTouch.ObjCRuntime.Selector selector, class MonoTouch.Foundation.NSObject userInfo, bool repeats) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithFireDate:interval:target:selector:userInfo:repeats:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="date" Type="MonoTouch.Foundation.NSDate" />
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="target" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="selector" Type="MonoTouch.ObjCRuntime.Selector" />
        <Parameter Name="userInfo" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="repeats" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="date">Time at which the timer will be fired.</param>
        <param name="seconds">For repeating timers, the number of seconds to wait before firing the timer again.</param>
        <param name="target">This is an object containing the method to be invoked when the timer fires.</param>
        <param name="selector">The method on <paramref name="target" /> that will be invoked.</param>
        <param name="userInfo">
          <para>User info for the timer.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="repeats">Whether this timer should repeat automatically (true) or will be invalidated after firing the first time (false).</param>
        <summary>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepeatingScheduledTimer" apistyle="classic">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSTimer CreateRepeatingScheduledTimer (double seconds, MonoTouch.Foundation.NSAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSTimer CreateRepeatingScheduledTimer(float64 seconds, class MonoTouch.Foundation.NSAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="action" Type="MonoTouch.Foundation.NSAction" />
      </Parameters>
      <Docs>
        <param name="seconds">The number of seconds between the timer firing.</param>
        <param name="action">Some action to be performed when the timer fires.</param>
        <summary>Creates a repeating timer with the specified parameters and schedules it for execution on the current NSRunLoop in the default mode.</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepeatingScheduledTimer" apistyle="unified">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSTimer CreateRepeatingScheduledTimer (double seconds, Action&lt;MonoTouch.Foundation.NSTimer&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSTimer CreateRepeatingScheduledTimer(float64 seconds, class System.Action`1&lt;class MonoTouch.Foundation.NSTimer&gt; action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="action" Type="System.Action&lt;MonoTouch.Foundation.NSTimer&gt;" />
      </Parameters>
      <Docs>
        <param name="seconds">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepeatingScheduledTimer" apistyle="classic">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSTimer CreateRepeatingScheduledTimer (TimeSpan when, MonoTouch.Foundation.NSAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSTimer CreateRepeatingScheduledTimer(valuetype System.TimeSpan when, class MonoTouch.Foundation.NSAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.TimeSpan" />
        <Parameter Name="action" Type="MonoTouch.Foundation.NSAction" />
      </Parameters>
      <Docs>
        <param name="when">The time when the timer will first fire.</param>
        <param name="action">The action to be performed when the timer fires.</param>
        <summary>Creates a repeating timer with the specified parameters and schedules it for execution on the current NSRunLoop in the default mode.</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepeatingScheduledTimer" apistyle="unified">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSTimer CreateRepeatingScheduledTimer (TimeSpan when, Action&lt;MonoTouch.Foundation.NSTimer&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSTimer CreateRepeatingScheduledTimer(valuetype System.TimeSpan when, class System.Action`1&lt;class MonoTouch.Foundation.NSTimer&gt; action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.TimeSpan" />
        <Parameter Name="action" Type="System.Action&lt;MonoTouch.Foundation.NSTimer&gt;" />
      </Parameters>
      <Docs>
        <param name="when">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepeatingTimer" apistyle="classic">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSTimer CreateRepeatingTimer (double seconds, MonoTouch.Foundation.NSAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSTimer CreateRepeatingTimer(float64 seconds, class MonoTouch.Foundation.NSAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="action" Type="MonoTouch.Foundation.NSAction" />
      </Parameters>
      <Docs>
        <param name="seconds">The number of seconds between the timer firing.</param>
        <param name="action">The action to be performed.</param>
        <summary>Creates a repeating timer with the specified parameters that can later be added to an NSRunLoop.</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepeatingTimer" apistyle="unified">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSTimer CreateRepeatingTimer (double seconds, Action&lt;MonoTouch.Foundation.NSTimer&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSTimer CreateRepeatingTimer(float64 seconds, class System.Action`1&lt;class MonoTouch.Foundation.NSTimer&gt; action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="action" Type="System.Action&lt;MonoTouch.Foundation.NSTimer&gt;" />
      </Parameters>
      <Docs>
        <param name="seconds">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepeatingTimer" apistyle="classic">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSTimer CreateRepeatingTimer (TimeSpan when, MonoTouch.Foundation.NSAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSTimer CreateRepeatingTimer(valuetype System.TimeSpan when, class MonoTouch.Foundation.NSAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.TimeSpan" />
        <Parameter Name="action" Type="MonoTouch.Foundation.NSAction" />
      </Parameters>
      <Docs>
        <param name="when">To be added.</param>
        <param name="action">To be added.</param>
        <summary>Creates a repeating timer with the specified parameters that can later be added to an NSRunLoop.</summary>
        <returns>The timespan between firings of the timer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepeatingTimer" apistyle="unified">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSTimer CreateRepeatingTimer (TimeSpan when, Action&lt;MonoTouch.Foundation.NSTimer&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSTimer CreateRepeatingTimer(valuetype System.TimeSpan when, class System.Action`1&lt;class MonoTouch.Foundation.NSTimer&gt; action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.TimeSpan" />
        <Parameter Name="action" Type="System.Action&lt;MonoTouch.Foundation.NSTimer&gt;" />
      </Parameters>
      <Docs>
        <param name="when">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateScheduledTimer" apistyle="classic">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSTimer CreateScheduledTimer (double seconds, MonoTouch.Foundation.NSAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSTimer CreateScheduledTimer(float64 seconds, class MonoTouch.Foundation.NSAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="action" Type="MonoTouch.Foundation.NSAction" />
      </Parameters>
      <Docs>
        <param name="seconds">The number of seconds between the firings of the timer.</param>
        <param name="action">The action to be performed.</param>
        <summary>Creates a timer with the specified parameters and schedules it for execution on the current NSRunLoop in the default mode.</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateScheduledTimer" apistyle="unified">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSTimer CreateScheduledTimer (double seconds, Action&lt;MonoTouch.Foundation.NSTimer&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSTimer CreateScheduledTimer(float64 seconds, class System.Action`1&lt;class MonoTouch.Foundation.NSTimer&gt; action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="action" Type="System.Action&lt;MonoTouch.Foundation.NSTimer&gt;" />
      </Parameters>
      <Docs>
        <param name="seconds">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateScheduledTimer" apistyle="classic">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSTimer CreateScheduledTimer (TimeSpan when, MonoTouch.Foundation.NSAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSTimer CreateScheduledTimer(valuetype System.TimeSpan when, class MonoTouch.Foundation.NSAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.TimeSpan" />
        <Parameter Name="action" Type="MonoTouch.Foundation.NSAction" />
      </Parameters>
      <Docs>
        <param name="when">The interval between firings of the timer.</param>
        <param name="action">The action to be performed.</param>
        <summary>Creates a timer with the specified parameters that can later be added to an NSRunLoop.</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateScheduledTimer" apistyle="unified">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSTimer CreateScheduledTimer (TimeSpan when, Action&lt;MonoTouch.Foundation.NSTimer&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSTimer CreateScheduledTimer(valuetype System.TimeSpan when, class System.Action`1&lt;class MonoTouch.Foundation.NSTimer&gt; action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.TimeSpan" />
        <Parameter Name="action" Type="System.Action&lt;MonoTouch.Foundation.NSTimer&gt;" />
      </Parameters>
      <Docs>
        <param name="when">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateScheduledTimer">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSTimer CreateScheduledTimer (double interval, bool repeats, Action&lt;MonoTouch.Foundation.NSTimer&gt; block);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSTimer CreateScheduledTimer(float64 interval, bool repeats, class System.Action`1&lt;class MonoTouch.Foundation.NSTimer&gt; block) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("scheduledTimerWithTimeInterval:repeats:block:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.WatchOS, 3, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.TvOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 12, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="repeats" Type="System.Boolean" />
        <Parameter Name="block" Type="System.Action&lt;MonoTouch.Foundation.NSTimer&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity1V22))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="interval">To be added.</param>
        <param name="repeats">To be added.</param>
        <param name="block">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateScheduledTimer">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSTimer CreateScheduledTimer (double seconds, MonoTouch.Foundation.NSObject target, MonoTouch.ObjCRuntime.Selector selector, MonoTouch.Foundation.NSObject userInfo, bool repeats);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSTimer CreateScheduledTimer(float64 seconds, class MonoTouch.Foundation.NSObject target, class MonoTouch.ObjCRuntime.Selector selector, class MonoTouch.Foundation.NSObject userInfo, bool repeats) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="target" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="selector" Type="MonoTouch.ObjCRuntime.Selector" />
        <Parameter Name="userInfo" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="repeats" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="seconds">The number of seconds between firings of the timer.</param>
        <param name="target">An object that will be invoked when the timer fires.</param>
        <param name="selector">The method to invoke on <paramref name="target" />.</param>
        <param name="userInfo">
          <para>Custom user info for the timer.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="repeats">Whether this timer should repeat automatically (true) or will be invalidated after firing the first time (false).</param>
        <summary>Creates a timer with the specified parameters and schedules it for execution on the current NSRunLoop in the default mode. </summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTimer" apistyle="classic">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSTimer CreateTimer (double seconds, MonoTouch.Foundation.NSAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSTimer CreateTimer(float64 seconds, class MonoTouch.Foundation.NSAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="action" Type="MonoTouch.Foundation.NSAction" />
      </Parameters>
      <Docs>
        <param name="seconds">The number of seconds until the <paramref name="action" /> is invoked.</param>
        <param name="action">Some action to be performed.</param>
        <summary>Creates a timer object that can be later added to an NSRunLoop.</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTimer" apistyle="unified">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSTimer CreateTimer (double seconds, Action&lt;MonoTouch.Foundation.NSTimer&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSTimer CreateTimer(float64 seconds, class System.Action`1&lt;class MonoTouch.Foundation.NSTimer&gt; action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="action" Type="System.Action&lt;MonoTouch.Foundation.NSTimer&gt;" />
      </Parameters>
      <Docs>
        <param name="seconds">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTimer" apistyle="classic">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSTimer CreateTimer (TimeSpan when, MonoTouch.Foundation.NSAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSTimer CreateTimer(valuetype System.TimeSpan when, class MonoTouch.Foundation.NSAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.TimeSpan" />
        <Parameter Name="action" Type="MonoTouch.Foundation.NSAction" />
      </Parameters>
      <Docs>
        <param name="when">The length of time until the <paramref name="action" /> is invoked.</param>
        <param name="action">Some action to be performed.</param>
        <summary>Creates a timer object that can be later added to an NSRunLoop.</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTimer" apistyle="unified">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSTimer CreateTimer (TimeSpan when, Action&lt;MonoTouch.Foundation.NSTimer&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSTimer CreateTimer(valuetype System.TimeSpan when, class System.Action`1&lt;class MonoTouch.Foundation.NSTimer&gt; action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.TimeSpan" />
        <Parameter Name="action" Type="System.Action&lt;MonoTouch.Foundation.NSTimer&gt;" />
      </Parameters>
      <Docs>
        <param name="when">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTimer">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSTimer CreateTimer (double interval, bool repeats, Action&lt;MonoTouch.Foundation.NSTimer&gt; block);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSTimer CreateTimer(float64 interval, bool repeats, class System.Action`1&lt;class MonoTouch.Foundation.NSTimer&gt; block) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("timerWithTimeInterval:repeats:block:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.WatchOS, 3, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.TvOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 12, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="repeats" Type="System.Boolean" />
        <Parameter Name="block" Type="System.Action&lt;MonoTouch.Foundation.NSTimer&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity1V22))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="interval">To be added.</param>
        <param name="repeats">To be added.</param>
        <param name="block">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTimer">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSTimer CreateTimer (double seconds, MonoTouch.Foundation.NSObject target, MonoTouch.ObjCRuntime.Selector selector, MonoTouch.Foundation.NSObject userInfo, bool repeats);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSTimer CreateTimer(float64 seconds, class MonoTouch.Foundation.NSObject target, class MonoTouch.ObjCRuntime.Selector selector, class MonoTouch.Foundation.NSObject userInfo, bool repeats) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("timerWithTimeInterval:target:selector:userInfo:repeats:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="target" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="selector" Type="MonoTouch.ObjCRuntime.Selector" />
        <Parameter Name="userInfo" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="repeats" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="seconds">The number of seconds between firings of the timer.</param>
        <param name="target">An object that will be invoked when the timer fires.</param>
        <param name="selector">The method that will be invoked on <paramref name="target" />.</param>
        <param name="userInfo">
          <para>Custom user information.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="repeats">Whether this timer should repeat automatically (true) or will be invalidated after firing the first time (false).</param>
        <summary>Creates a timer object that can be later added to an NSRunLoop.</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the NSTimer object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the NSTimer class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the NSTimer ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fire">
      <MemberSignature Language="C#" Value="public virtual void Fire ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Fire() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("fire")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes the action to be performed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FireDate">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDate FireDate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSDate FireDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("fireDate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setFireDate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The date at with the action will be performed.</summary>
        <value>
          <para>
          </para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>If the timer is no longer valid, then this will return the last date the action was performed.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public virtual void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invalidate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("invalidate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public virtual bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isValid")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <see langword="true" /> if the the timer will still fire at some point in the future.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeInterval">
      <MemberSignature Language="C#" Value="public virtual double TimeInterval { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TimeInterval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("timeInterval")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The time interval for the timer.</summary>
        <value>
        </value>
        <remarks>Will return 0 for a non-repeating timer.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tolerance">
      <MemberSignature Language="C#" Value="public virtual double Tolerance { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Tolerance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 7, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 9, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("tolerance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 7, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 9, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setTolerance:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 7, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 9, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserInfo">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject UserInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject UserInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("userInfo")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Custom user information that has been provided to the timer.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
