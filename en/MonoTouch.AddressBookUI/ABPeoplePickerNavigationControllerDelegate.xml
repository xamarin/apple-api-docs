<Type Name="ABPeoplePickerNavigationControllerDelegate" FullName="MonoTouch.AddressBookUI.ABPeoplePickerNavigationControllerDelegate">
  <TypeSignature Language="C#" Value="public class ABPeoplePickerNavigationControllerDelegate : MonoTouch.UIKit.UINavigationControllerDelegate, IDisposable, MonoTouch.AddressBookUI.IABPeoplePickerNavigationControllerDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ABPeoplePickerNavigationControllerDelegate extends MonoTouch.UIKit.UINavigationControllerDelegate implements class MonoTouch.AddressBookUI.IABPeoplePickerNavigationControllerDelegate, class MonoTouch.ObjCRuntime.INativeObject, class MonoTouch.UIKit.IUINavigationControllerDelegate, class System.IDisposable" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.UIKit.UINavigationControllerDelegate</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.AddressBookUI.IABPeoplePickerNavigationControllerDelegate</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("ABPeoplePickerNavigationControllerDelegate", false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Availability(Deprecated=MonoTouch.ObjCRuntime.Platform.iOS_9_0, Message="Use Contacts API instead")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A delegate object that allows the application developer to have fine-grained control of events in the life-cycle of a <see cref="T:MonoTouch.AddressBookUI.ABPeoplePickerNavigationController" />.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/AddressBookUI/Reference/ABPeoplePickerNavigationControllerDelegate_Protocol/index.html">Apple documentation for <c>ABPeoplePickerNavigationControllerDelegate</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ABPeoplePickerNavigationControllerDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public ABPeoplePickerNavigationControllerDelegate (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ABPeoplePickerNavigationControllerDelegate (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected ABPeoplePickerNavigationControllerDelegate (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ABPeoplePickerNavigationControllerDelegate (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected ABPeoplePickerNavigationControllerDelegate (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancelled">
      <MemberSignature Language="C#" Value="public virtual void Cancelled (MonoTouch.AddressBookUI.ABPeoplePickerNavigationController peoplePicker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cancelled(class MonoTouch.AddressBookUI.ABPeoplePickerNavigationController peoplePicker) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("peoplePickerNavigationControllerDidCancel:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peoplePicker" Type="MonoTouch.AddressBookUI.ABPeoplePickerNavigationController" />
      </Parameters>
      <Docs>
        <param name="peoplePicker">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidSelectPerson">
      <MemberSignature Language="C#" Value="public virtual void DidSelectPerson (MonoTouch.AddressBookUI.ABPeoplePickerNavigationController peoplePicker, MonoTouch.AddressBook.ABPerson selectedPerson);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidSelectPerson(class MonoTouch.AddressBookUI.ABPeoplePickerNavigationController peoplePicker, class MonoTouch.AddressBook.ABPerson selectedPerson) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("peoplePickerNavigationController:didSelectPerson:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peoplePicker" Type="MonoTouch.AddressBookUI.ABPeoplePickerNavigationController" />
        <Parameter Name="selectedPerson" Type="MonoTouch.AddressBook.ABPerson" />
      </Parameters>
      <Docs>
        <param name="peoplePicker">To be added.</param>
        <param name="selectedPerson">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidSelectPerson" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual void DidSelectPerson (MonoTouch.AddressBookUI.ABPeoplePickerNavigationController peoplePicker, MonoTouch.AddressBook.ABPerson selectedPerson, int propertyId, int identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidSelectPerson(class MonoTouch.AddressBookUI.ABPeoplePickerNavigationController peoplePicker, class MonoTouch.AddressBook.ABPerson selectedPerson, int32 propertyId, int32 identifier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("peoplePickerNavigationController:didSelectPerson:property:identifier:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peoplePicker" Type="MonoTouch.AddressBookUI.ABPeoplePickerNavigationController" />
        <Parameter Name="selectedPerson" Type="MonoTouch.AddressBook.ABPerson" />
        <Parameter Name="propertyId" Type="System.Int32" />
        <Parameter Name="identifier" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="peoplePicker">To be added.</param>
        <param name="selectedPerson">To be added.</param>
        <param name="propertyId">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidSelectPerson" apistyle="classic">
      <MemberSignature Language="C#" Value="public virtual void DidSelectPerson (MonoTouch.AddressBookUI.ABPeoplePickerNavigationController peoplePicker, MonoTouch.AddressBook.ABPerson selectedPerson, int propertyId, IntPtr abMultiValueIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidSelectPerson(class MonoTouch.AddressBookUI.ABPeoplePickerNavigationController peoplePicker, class MonoTouch.AddressBook.ABPerson selectedPerson, int32 propertyId, native int abMultiValueIdentifier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("peoplePickerNavigationController:didSelectPerson:property:identifier:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peoplePicker" Type="MonoTouch.AddressBookUI.ABPeoplePickerNavigationController" />
        <Parameter Name="selectedPerson" Type="MonoTouch.AddressBook.ABPerson" />
        <Parameter Name="propertyId" Type="System.Int32" />
        <Parameter Name="abMultiValueIdentifier" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="peoplePicker">To be added.</param>
        <param name="selectedPerson">To be added.</param>
        <param name="propertyId">Low-level Property ID.</param>
        <param name="abMultiValueIdentifier">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>
	    You can use the <see cref="M:MonoTouch.AddressBook.ABPerson.LocalizedPropertyName(int)" />
	    and the <see cref="M:MonoTouch.AddressBook.ABPerson.GetPropertyType(int)" />
	    methods to lookup the values associated with the <paramref name="propertyId" />.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidShowViewController" apistyle="classic">
      <MemberSignature Language="C#" Value="public override void DidShowViewController (MonoTouch.UIKit.UINavigationController navigationController, MonoTouch.UIKit.UIViewController viewController, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void DidShowViewController(class MonoTouch.UIKit.UINavigationController navigationController, class MonoTouch.UIKit.UIViewController viewController, bool animated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("navigationController:didShowViewController:animated:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationController" Type="MonoTouch.UIKit.UINavigationController" />
        <Parameter Name="viewController" Type="MonoTouch.UIKit.UIViewController" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="navigationController">To be added.</param>
        <param name="viewController">To be added.</param>
        <param name="animated">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationControllerForOperation" apistyle="classic">
      <MemberSignature Language="C#" Value="public override MonoTouch.UIKit.IUIViewControllerAnimatedTransitioning GetAnimationControllerForOperation (MonoTouch.UIKit.UINavigationController navigationController, MonoTouch.UIKit.UINavigationControllerOperation operation, MonoTouch.UIKit.UIViewController fromViewController, MonoTouch.UIKit.UIViewController toViewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class MonoTouch.UIKit.IUIViewControllerAnimatedTransitioning GetAnimationControllerForOperation(class MonoTouch.UIKit.UINavigationController navigationController, valuetype MonoTouch.UIKit.UINavigationControllerOperation operation, class MonoTouch.UIKit.UIViewController fromViewController, class MonoTouch.UIKit.UIViewController toViewController) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("navigationController:animationControllerForOperation:fromViewController:toViewController:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.IUIViewControllerAnimatedTransitioning</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationController" Type="MonoTouch.UIKit.UINavigationController" />
        <Parameter Name="operation" Type="MonoTouch.UIKit.UINavigationControllerOperation" />
        <Parameter Name="fromViewController" Type="MonoTouch.UIKit.UIViewController" />
        <Parameter Name="toViewController" Type="MonoTouch.UIKit.UIViewController" />
      </Parameters>
      <Docs>
        <param name="navigationController">To be added.</param>
        <param name="operation">To be added.</param>
        <param name="fromViewController">To be added.</param>
        <param name="toViewController">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInteractionControllerForAnimationController" apistyle="classic">
      <MemberSignature Language="C#" Value="public override MonoTouch.UIKit.IUIViewControllerInteractiveTransitioning GetInteractionControllerForAnimationController (MonoTouch.UIKit.UINavigationController navigationController, MonoTouch.UIKit.IUIViewControllerAnimatedTransitioning animationController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class MonoTouch.UIKit.IUIViewControllerInteractiveTransitioning GetInteractionControllerForAnimationController(class MonoTouch.UIKit.UINavigationController navigationController, class MonoTouch.UIKit.IUIViewControllerAnimatedTransitioning animationController) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("navigationController:interactionControllerForAnimationController:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.IUIViewControllerInteractiveTransitioning</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationController" Type="MonoTouch.UIKit.UINavigationController" />
        <Parameter Name="animationController" Type="MonoTouch.UIKit.IUIViewControllerAnimatedTransitioning" />
      </Parameters>
      <Docs>
        <param name="navigationController">To be added.</param>
        <param name="animationController">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreferredInterfaceOrientation" apistyle="classic">
      <MemberSignature Language="C#" Value="public override MonoTouch.UIKit.UIInterfaceOrientation GetPreferredInterfaceOrientation (MonoTouch.UIKit.UINavigationController navigationController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype MonoTouch.UIKit.UIInterfaceOrientation GetPreferredInterfaceOrientation(class MonoTouch.UIKit.UINavigationController navigationController) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("navigationControllerPreferredInterfaceOrientationForPresentation:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIInterfaceOrientation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationController" Type="MonoTouch.UIKit.UINavigationController" />
      </Parameters>
      <Docs>
        <param name="navigationController">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldContinue" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual bool ShouldContinue (MonoTouch.AddressBookUI.ABPeoplePickerNavigationController peoplePicker, MonoTouch.AddressBook.ABPerson selectedPerson);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldContinue(class MonoTouch.AddressBookUI.ABPeoplePickerNavigationController peoplePicker, class MonoTouch.AddressBook.ABPerson selectedPerson) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("peoplePickerNavigationController:shouldContinueAfterSelectingPerson:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Deprecated=MonoTouch.ObjCRuntime.Platform.iOS_8_0, Message="Use DidSelectPerson instead (or ABPeoplePickerNavigationController.PredicateForSelectionOfPerson)")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peoplePicker" Type="MonoTouch.AddressBookUI.ABPeoplePickerNavigationController" />
        <Parameter Name="selectedPerson" Type="MonoTouch.AddressBook.ABPerson" />
      </Parameters>
      <Docs>
        <param name="peoplePicker">To be added.</param>
        <param name="selectedPerson">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldContinue" apistyle="classic">
      <MemberSignature Language="C#" Value="public virtual bool ShouldContinue (MonoTouch.AddressBookUI.ABPeoplePickerNavigationController peoplePicker, IntPtr selectedPerson);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldContinue(class MonoTouch.AddressBookUI.ABPeoplePickerNavigationController peoplePicker, native int selectedPerson) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("peoplePickerNavigationController:shouldContinueAfterSelectingPerson:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Deprecated=MonoTouch.ObjCRuntime.Platform.iOS_8_0, Message="Use DidSelectPerson instead (or ABPeoplePickerNavigationController.PredicateForSelectionOfPerson)")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peoplePicker" Type="MonoTouch.AddressBookUI.ABPeoplePickerNavigationController" />
        <Parameter Name="selectedPerson" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="peoplePicker">To be added.</param>
        <param name="selectedPerson">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldContinue" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual bool ShouldContinue (MonoTouch.AddressBookUI.ABPeoplePickerNavigationController peoplePicker, MonoTouch.AddressBook.ABPerson selectedPerson, int propertyId, int identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldContinue(class MonoTouch.AddressBookUI.ABPeoplePickerNavigationController peoplePicker, class MonoTouch.AddressBook.ABPerson selectedPerson, int32 propertyId, int32 identifier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("peoplePickerNavigationController:shouldContinueAfterSelectingPerson:property:identifier:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Deprecated=MonoTouch.ObjCRuntime.Platform.iOS_8_0, Message="Use DidSelectPerson instead (or ABPeoplePickerNavigationController.PredicateForSelectionOfProperty)")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peoplePicker" Type="MonoTouch.AddressBookUI.ABPeoplePickerNavigationController" />
        <Parameter Name="selectedPerson" Type="MonoTouch.AddressBook.ABPerson" />
        <Parameter Name="propertyId" Type="System.Int32" />
        <Parameter Name="identifier" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="peoplePicker">To be added.</param>
        <param name="selectedPerson">To be added.</param>
        <param name="propertyId">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldContinue" apistyle="classic">
      <MemberSignature Language="C#" Value="public virtual bool ShouldContinue (MonoTouch.AddressBookUI.ABPeoplePickerNavigationController peoplePicker, IntPtr selectedPerson, int propertyId, int identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldContinue(class MonoTouch.AddressBookUI.ABPeoplePickerNavigationController peoplePicker, native int selectedPerson, int32 propertyId, int32 identifier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("peoplePickerNavigationController:shouldContinueAfterSelectingPerson:property:identifier:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Deprecated=MonoTouch.ObjCRuntime.Platform.iOS_8_0, Message="Use DidSelectPerson instead (or ABPeoplePickerNavigationController.PredicateForSelectionOfProperty)")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peoplePicker" Type="MonoTouch.AddressBookUI.ABPeoplePickerNavigationController" />
        <Parameter Name="selectedPerson" Type="System.IntPtr" />
        <Parameter Name="propertyId" Type="System.Int32" />
        <Parameter Name="identifier" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="peoplePicker">To be added.</param>
        <param name="selectedPerson">To be added.</param>
        <param name="propertyId">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportedInterfaceOrientations" apistyle="classic">
      <MemberSignature Language="C#" Value="public override MonoTouch.UIKit.UIInterfaceOrientationMask SupportedInterfaceOrientations (MonoTouch.UIKit.UINavigationController navigationController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype MonoTouch.UIKit.UIInterfaceOrientationMask SupportedInterfaceOrientations(class MonoTouch.UIKit.UINavigationController navigationController) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("navigationControllerSupportedInterfaceOrientations:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIInterfaceOrientationMask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationController" Type="MonoTouch.UIKit.UINavigationController" />
      </Parameters>
      <Docs>
        <param name="navigationController">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillShowViewController" apistyle="classic">
      <MemberSignature Language="C#" Value="public override void WillShowViewController (MonoTouch.UIKit.UINavigationController navigationController, MonoTouch.UIKit.UIViewController viewController, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WillShowViewController(class MonoTouch.UIKit.UINavigationController navigationController, class MonoTouch.UIKit.UIViewController viewController, bool animated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("navigationController:willShowViewController:animated:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigationController" Type="MonoTouch.UIKit.UINavigationController" />
        <Parameter Name="viewController" Type="MonoTouch.UIKit.UIViewController" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="navigationController">To be added.</param>
        <param name="viewController">To be added.</param>
        <param name="animated">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
