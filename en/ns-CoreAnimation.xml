<Namespace Name="CoreAnimation">
  <Docs>
    <summary>The CoreAnimation namespace provides access to the underlying animation framework that powers UIKit.</summary>
    <remarks>
      <para>
	CoreAnimation is at the core of the iPhone UI.  The APIs
	in this namespace give you access to the underlying animation
	framwork that powers the UIKit.
      </para>
      <para>
	The UIKit controls are implemented on top of CoreAnimation
	which interfaces directly with the OpenGL and CoreGraphics to
	provide hardware accelerated rendering.
      </para>
      <para>
	Each <see cref="T:UIKit.UIView" /> is backed by a
	<see cref="T:CoreAnimation.CALayer" /> which is
	accessed through the <see cref="P:UIKit.UIView.Layer" /> property.  When you
	draw by overriding the <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=M:UIKit.UIView.Draw(System.Drawing.RectangleF)&amp;scope=Xamarin" title="M:UIKit.UIView.Draw(System.Drawing.RectangleF)">M:UIKit.UIView.Draw(System.Drawing.RectangleF)</a></format>
	method, you are drawing into the CoreAnimation layer.    
      </para>
      <para>

	Just like UIView's can contain other UIViews, CALayers can
	contain other CALayer instances.  You can insert child layers
	into a layer by calling <see cref="M:CoreAnimation.CALayer.AddSublayer(CoreAnimation.CALayer)" />,
	<format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=M:CoreAnimation.CALayer.InsertSublayer(CoreAnimation.CALayer,int)&amp;scope=Xamarin" title="M:CoreAnimation.CALayer.InsertSublayer(CoreAnimation.CALayer,int)">M:CoreAnimation.CALayer.InsertSublayer(CoreAnimation.CALayer,int)</a></format>,
	<see cref="M:CoreAnimation.CALayer.InsertSublayerBelow(CoreAnimation.CALayer,CoreAnimation.CALayer)" />,
	<see cref="M:CoreAnimation.CALayer.InsertSublayerAbove(CoreAnimation.CALayer,CoreAnimation.CALayer)" />
	or remove the layer by using <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=M:CoreAnimation.CALayer.RemoveFromSuperLayer()&amp;scope=Xamarin" title="M:CoreAnimation.CALayer.RemoveFromSuperLayer()">M:CoreAnimation.CALayer.RemoveFromSuperLayer()</a></format>.
	In addition, there are various kinds of CALayers provided by
	the operating system and you can create your own by
	subclassing one of the system provided layers: <see cref="T:CoreAnimation.CALayer" />, <see cref="T:CoreAnimation.CATiledLayer" />, <see cref="T:CoreAnimation.CATextLayer" />, <see cref="T:CoreAnimation.CAScrollLayer" />, <see cref="T:CoreAnimation.CAReplicatorLayer" />, <see cref="T:CoreAnimation.CAShapeLayer" />, <see cref="T:CoreAnimation.CAGradientLayer" />, <see cref="T:CoreAnimation.CATransformLayer" />, <see cref="T:CoreAnimation.CAEAGLLayer" /> and <see cref="T:CoreAnimation.CAEmitterLayer" />.   

      </para>
      <para>
	Layers will retain the contents that you draw into them,
	unlike other toolkits it is not necessary to implement a
	repaint method to respond to region-exposed events.  If you
	want to update the contents of the layer, you should call the
	<format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=M:CoreAnimation.CALayer.SetNeedsDisplay()&amp;scope=Xamarin" title="M:CoreAnimation.CALayer.SetNeedsDisplay()">M:CoreAnimation.CALayer.SetNeedsDisplay()</a></format>
	method which will trigger a call to the <see cref="M:CoreAnimation.CALayer.DrawInContext(CoreGraphics.CGContext)" />
	method which you can override.

      </para>
      <para>
	You can customize layer rendering by setting the <see cref="P:CoreAnimation.CALayer.Delegate" /> property
	of your layer to point to an instance of a <see cref="T:CoreAnimation.CALayerDelegate" /> subclass.
      </para>
      <para>

	You can apply 3D transformations to your layers by setting the
	<see cref="P:CoreAnimation.CALayer.Transform" />
	property and you can also control the 3D transform applied to
	sublayers by setting the <see cref="P:CoreAnimation.CALayer.SublayerTransform" />
	property.  If you use the SublayerTransform, you can also use
	the <see cref="P:CoreAnimation.CALayer.ZPosition" />
	property to give it a Z axis position.  This is helpful to do
	perspective renderings.

      </para>
      <para>	
	Layers provide the hardware accelerated components necessary
	for CoreAnimation to do its job efficiently.  On top of this
	functionality, CoreAnimation provides a set of APIs to animate
	layers.
      </para>
      <para>Prior to iOS 4, animations were specified as transactions: application developers would bracket the specification of their animations between calls to <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=UIKit%20UIView%20Begin%20Animations&amp;scope=Xamarin" title="M:UIKit.UIView.BeginAnimations*">M:UIKit.UIView.BeginAnimations*</a></format> and <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=UIKit%20UIView%20Commit%20Animations&amp;scope=Xamarin" title="M:UIKit.UIView.CommitAnimations*">M:UIKit.UIView.CommitAnimations*</a></format>. Reacting to animation events (such as continuation after the animation finishes) requires the use of a delegate object and custom selectors.  This technique is still available, but Apple recommends the use of "block-based" animations in modern apps. In C# terminology, these would be called "delegate-based" animations, where the delegate (or anonymous function) is of type <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=Foundation%20NSAction&amp;scope=Xamarin" title="T:Foundation.NSAction">T:Foundation.NSAction</a></format>. Additionally, Xamarin.iOS provides asynchronous wrappers for the commonly-used animation functions, so application developers can use C# 5+'s <c>async-await</c> facilities.</para>
      <para>The following example shows the different techniques:</para>
      <example>
        <code lang="C#"><![CDATA[
//Transaction-based (recommended only for iOS < 4)
UIView.BeginAnimations("transactional");
UIView.SetAnimationDuration(2.0);
imgView.Layer.Position = newPosition;
UIView.SetAnimationDelegate (this);
UIView.SetAnimationDidStopSelector (new Selector ("positionAnimationFinished:"));
UIView.CommitAnimations();
//...etc...
[Export("positionAnimationFinished:")]
void SlideStopped ()
{
    Console.WriteLine("Animation finished; logic continues here");
}
          ]]></code>
        <para>Block-based</para>
        <code lang="C#"><![CDATA[
//Block-based, with animations in lambda, continuation as delegate (either technique works in either position)
UIView.Animate(2.0, () => imgView.Layer.Position = newPosition, SlideStopped);
//...etc...
void SlideStopped() { 
     Console.WriteLine("Animation finished; logic continues here");
}
          ]]></code>
        <para>Asynchronous</para>
        <code lang="C#"><![CDATA[
async void MyAnimateAsync {
    await UIView.AnimateAsync(2.0, () => imgView.Layer.Position = newPosition);
    Console.WriteLine("Animation finished; logic continues here");
}          
        ]]></code>
      </example>
      <para>These UIKit-based techniques should satisfy most animation use-cases (also, Sprite Kit provides both animation and physics-modeling appropriate for high frame-rate use-cases such as games). However, in addition to these UIKit-based techniques, application developers who create their own <see cref="T:CoreAnimation.CALayer" />s have access to lower-level animation techniques: 
	Implicit Animations and Explicit Animations.
      </para>
      <para>N.B.: Layer animations are disabled in <see cref="T:UIKit.UIView" />s except in <see cref="T:UIKit.UIView" /> animation blocks. (See discussion below.) </para>
      <para>

	Implicit Animations take place when app developers change one or more of
	the properties in a layer and CoreAnimation will apply those
	changes gradually by interpolating the values from the current
	value to the new value over a predetermined period of time
	(unless configured, the animations will take 0.25 seconds to
	execute).

      </para>
      <example>
        <code lang="C#"><![CDATA[
//
// The following method sets the opacity to zero on the image's Layer
// and will trigger a 0.25 animation to vanish the image by setting the
// opacity to zero
//
void HideImage (UIImageView image)
{
    view.Layer.Opacity = 0;
}
]]></code>
      </example>
      <para>
	
	Application developers who want more control can use
	Explicit Animation.  To do this, they create an instance of one
	of the animation classes <see cref="T:CoreAnimation.CAPropertyAnimation" />, <see cref="T:CoreAnimation.CATransition" />, <see cref="T:CoreAnimation.CAAnimationGroup" />, <see cref="T:CoreAnimation.CABasicAnimation" /> or <see cref="T:CoreAnimation.CAKeyFrameAnimation" />.  The animation is attached to a layer, by calling the <see cref="M:CoreAnimation.CALayer.AddAnimation(CoreAnimation.CAAnimation,string)" />
	method.

      </para>
      <para>

	Unlike implicit animations which happen in reaction to changes
	in the layer's properties, explicit animations do not alter
	the properties of your objects.  Instead they alter the
	properties of a copy of your scene graph stored in the <see cref="P:CoreAnimation.CALayer.PresentationLayer" />.
	This means that any changes that you make to the objects as
	part of an explicit animation are not permanent.  Once the
	animation is finished, the objects will be rendered with the
	values that are still in the model.   

      </para>
      <example>
        <code lang="C#"><![CDATA[
//
// Notice that we set the final position for the layer before we start
// animating from 0 to 120 since this is an explicit animation and we
// do not want to see the object "jump" back to 0, 0 at the end of
// the animation
//
layer.Position = new PointF (0, 120);
var positionAnimation = (CAKeyFrameAnimation) CAKeyFrameAnimation.FromKeyPath ("position.y");
positionAnimation.Values = new NSNumber [] { 0, 30, 60, 120 };
layer.AddAnimation (positionAnimation, "myAnimation");
        ]]></code>
      </example>
      <block subset="none" type="type">Layer Animations of <see cref="T:UIKit.UIView" />s
      </block>
      <para>Layer-based animations are disabled by <see cref="T:UIKit.UIView" />s except within <see cref="T:UIKit.UIView" /> animation blocks. Layer-based animations within such blocks ignore the blocks' duration and operate at their own specified duration, either the implicit default of 0.25 seconds or an explicit length. This is shown in the following example, in which the <see cref="T:UIKit.UIView" /> animation block's duration is 1.0, but in actuality, the layer-based implicit opacity animation ends in 0.25 seconds and the re-positioning runs for 10 seconds.</para>
      <example>
        <code lang="C#"><![CDATA[
UIView.AnimateAsync(1.0, () => {
	imgView.Layer.Opacity = 0.0f;

	var theAnim = CABasicAnimation.FromKeyPath("position");
	theAnim.From = NSObject.FromObject(firstPosition);
	theAnim.To =  NSObject.FromObject(secondPosition);
	theAnim.Duration = 10.0;

	imgView.Layer.AddAnimation(theAnim, "AnimateFrame");
});
          ]]></code>
      </example>
    </remarks>
  </Docs>
</Namespace>
