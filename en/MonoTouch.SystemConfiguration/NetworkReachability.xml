<Type Name="NetworkReachability" FullName="SystemConfiguration.NetworkReachability">
  <TypeSignature Language="C#" Value="public class NetworkReachability : IDisposable, MonoTouch.ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NetworkReachability extends System.Object implements class MonoTouch.ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Used to detect the reachability of the network and to get notifications on network reachability changes.</summary>
    <remarks>
      <para>You instantiate this class with a hostname or an IP address, and then use the TryGetFlags to get the reachability status.   If you want to be notified of changes in the reachability of the specified host, you can use the SetCallback and Schedule methods.</para>
      <para>
You can detect the ad-hoc WiFi network using the IP address 169.254.0.0 and the general network availability with 0.0.0.0.
</para>
    </remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=7973effb-bd18-4109-b01f-a377f6f9cb73">reachability</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkReachability (System.Net.IPAddress ip);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress ip) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ip" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="ip">The IP address.   Only IPV4 is supported.</param>
        <summary>Creates a network reachability class based on an IP address.</summary>
        <remarks>In addition to probing general hosts on the Internet, you can detect the ad-hoc WiFi network using the IP address 169.254.0.0 and the general network availability with 0.0.0.0. </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkReachability (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string address) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">A host name.</param>
        <summary>Creates a network reachability object from a hostname.</summary>
        <remarks>The hostname is resolved using the current DNS settings.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkReachability (System.Net.IPAddress localAddress, System.Net.IPAddress remoteAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress localAddress, class System.Net.IPAddress remoteAddress) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localAddress" Type="System.Net.IPAddress" />
        <Parameter Name="remoteAddress" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="localAddress">To be added.</param>
        <param name="remoteAddress">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resources used by the NetworkReachability object.</summary>
        <remarks>
          <para>The Dispose method releases the resources used by the NetworkReachability class.</para>
          <para>Calling the Dispose method when you are finished using the NetworkReachability ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.  For more information on releasing resources see ``Cleaning up Unmananaged Resources'' at http://msdn.microsoft.com/en-us/library/498928w2.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose (bool disposing);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose(bool disposing) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the NetworkReachability object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the NetworkReachability class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the NetworkReachability ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NetworkReachability ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finalizer for the NetworkReachability object</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFlags" apistyle="classic">
      <MemberSignature Language="C#" Value="public MonoTouch.SystemConfiguration.StatusCode GetFlags (out MonoTouch.SystemConfiguration.NetworkReachabilityFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype MonoTouch.SystemConfiguration.StatusCode GetFlags(valuetype MonoTouch.SystemConfiguration.NetworkReachabilityFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.SystemConfiguration.StatusCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="MonoTouch.SystemConfiguration.NetworkReachabilityFlags&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="flags">To be added.</param>
        <summary>Determines if the target network is reachable and sets bits in <param name="flags" /> appropriately.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFlags" apistyle="unified">
      <MemberSignature Language="C#" Value="public SystemConfiguration.StatusCode GetFlags (out SystemConfiguration.NetworkReachabilityFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SystemConfiguration.StatusCode GetFlags(valuetype SystemConfiguration.NetworkReachabilityFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SystemConfiguration.StatusCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="SystemConfiguration.NetworkReachabilityFlags&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="flags">To be added.</param>
        <summary>Determines if the target network is reachable and sets bits in <param name="flags" /> appropriately.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Handle (pointer) to the unmanaged object representation.</summary>
        <value>A pointer</value>
        <remarks>This IntPtr is a handle to the underlying unmanaged representation for this object.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public bool Schedule ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Schedule() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public bool Schedule (MonoTouch.CoreFoundation.CFRunLoop runLoop, string mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Schedule(class MonoTouch.CoreFoundation.CFRunLoop runLoop, string mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runLoop" Type="MonoTouch.CoreFoundation.CFRunLoop" />
        <Parameter Name="mode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="runLoop">The run loop where the reachability callback is invoked.</param>
        <param name="mode">The run loop mode.</param>
        <summary>Schedules the delivery of the events (what is set with SetCallback) on the given run loop.</summary>
        <returns>True on success.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SetCallback" apistyle="classic">
      <MemberSignature Language="C#" Value="public bool SetCallback (MonoTouch.SystemConfiguration.NetworkReachability.Notification callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SetCallback(class MonoTouch.SystemConfiguration.NetworkReachability/Notification callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Advice("Use SetNotification instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="MonoTouch.SystemConfiguration.NetworkReachability+Notification" />
      </Parameters>
      <Docs>
        <param name="callback">The method to invoke if the reachability changes.</param>
        <summary>Configures a callback to be invoked when the reachability changes.</summary>
        <returns>True if the callback was set.</returns>
        <remarks>Once this is called, you need to schedule the event delivery using the Schedule method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDispatchQueue">
      <MemberSignature Language="C#" Value="public bool SetDispatchQueue (MonoTouch.CoreFoundation.DispatchQueue queue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SetDispatchQueue(class MonoTouch.CoreFoundation.DispatchQueue queue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queue" Type="MonoTouch.CoreFoundation.DispatchQueue" />
      </Parameters>
      <Docs>
        <param name="queue">To be added.</param>
        <summary>Specifies the <see cref="T:Monotouch.CoreFoundation.DispatchQueue" /> to be used for callbacks.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNotification" apistyle="classic">
      <MemberSignature Language="C#" Value="public MonoTouch.SystemConfiguration.StatusCode SetNotification (MonoTouch.SystemConfiguration.NetworkReachability.Notification callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype MonoTouch.SystemConfiguration.StatusCode SetNotification(class MonoTouch.SystemConfiguration.NetworkReachability/Notification callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.SystemConfiguration.StatusCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="MonoTouch.SystemConfiguration.NetworkReachability+Notification" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNotification" apistyle="unified">
      <MemberSignature Language="C#" Value="public SystemConfiguration.StatusCode SetNotification (SystemConfiguration.NetworkReachability.Notification callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype SystemConfiguration.StatusCode SetNotification(class SystemConfiguration.NetworkReachability/Notification callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SystemConfiguration.StatusCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="SystemConfiguration.NetworkReachability+Notification" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetFlags" apistyle="classic">
      <MemberSignature Language="C#" Value="public bool TryGetFlags (out MonoTouch.SystemConfiguration.NetworkReachabilityFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetFlags(valuetype MonoTouch.SystemConfiguration.NetworkReachabilityFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="MonoTouch.SystemConfiguration.NetworkReachabilityFlags&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="flags">Returned value of the current reachability for the specified host.</param>
        <summary>Method used to get the current reachability flags for this host.</summary>
        <returns>true on success, false if the reachability could not be determined.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="TryGetFlags" apistyle="unified">
      <MemberSignature Language="C#" Value="public bool TryGetFlags (out SystemConfiguration.NetworkReachabilityFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetFlags(valuetype SystemConfiguration.NetworkReachabilityFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="SystemConfiguration.NetworkReachabilityFlags&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="flags">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unschedule">
      <MemberSignature Language="C#" Value="public bool Unschedule ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Unschedule() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unschedule">
      <MemberSignature Language="C#" Value="public bool Unschedule (MonoTouch.CoreFoundation.CFRunLoop runLoop, string mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Unschedule(class MonoTouch.CoreFoundation.CFRunLoop runLoop, string mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runLoop" Type="MonoTouch.CoreFoundation.CFRunLoop" />
        <Parameter Name="mode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="runLoop">The run loop where the object was previously scheduled.</param>
        <param name="mode">The mode used.</param>
        <summary>Removes the NetworkRechability from the given run loop.</summary>
        <returns>True on success.</returns>
        <remarks />
      </Docs>
    </Member>
  </Members>
</Type>
