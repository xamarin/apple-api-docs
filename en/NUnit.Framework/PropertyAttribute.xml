<Type Name="PropertyAttribute" FullName="NUnit.Framework.PropertyAttribute">
  <TypeSignature Language="C#" Value="public class PropertyAttribute : NUnit.Framework.NUnitAttribute, NUnit.Framework.Internal.IApplyToTest" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyAttribute extends NUnit.Framework.NUnitAttribute implements class NUnit.Framework.Internal.IApplyToTest" />
  <TypeSignature Language="DocId" Value="T:NUnit.Framework.PropertyAttribute" />
  <TypeSignature Language="F#" Value="type PropertyAttribute = class&#xA;    inherit NUnitAttribute&#xA;    interface IApplyToTest" />
  <AssemblyInfo>
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>0.6.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>NUnit.Framework.NUnitAttribute</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>NUnit.Framework.Internal.IApplyToTest</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Method, AllowMultiple=true, Inherited=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            PropertyAttribute is used to attach information to a test as a name/value pair..
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PropertyAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.PropertyAttribute.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Constructor for derived classes that set the
            property dictionary directly.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PropertyAttribute (object propertyValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(object propertyValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.PropertyAttribute.#ctor(System.Object)" />
      <MemberSignature Language="F#" Value="new NUnit.Framework.PropertyAttribute : obj -&gt; NUnit.Framework.PropertyAttribute" Usage="new NUnit.Framework.PropertyAttribute propertyValue" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyValue">To be added.</param>
        <summary>
            Constructor for use by derived classes that use the
            name of the type as the property name. Derived classes
            must ensure that the Type of the property value is
            a standard type supported by the BCL. Any custom
            types will cause a serialization Exception when
            in the client.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyAttribute (string propertyName, double propertyValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, float64 propertyValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.Double)" />
      <MemberSignature Language="F#" Value="new NUnit.Framework.PropertyAttribute : string * double -&gt; NUnit.Framework.PropertyAttribute" Usage="new NUnit.Framework.PropertyAttribute (propertyName, propertyValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="propertyValue" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the property</param>
        <param name="propertyValue">The property value</param>
        <summary>
            Construct a PropertyAttribute with a name and double value
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyAttribute (string propertyName, int propertyValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, int32 propertyValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="F#" Value="new NUnit.Framework.PropertyAttribute : string * int -&gt; NUnit.Framework.PropertyAttribute" Usage="new NUnit.Framework.PropertyAttribute (propertyName, propertyValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="propertyValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the property</param>
        <param name="propertyValue">The property value</param>
        <summary>
            Construct a PropertyAttribute with a name and int value
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyAttribute (string propertyName, string propertyValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, string propertyValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.String)" />
      <MemberSignature Language="F#" Value="new NUnit.Framework.PropertyAttribute : string * string -&gt; NUnit.Framework.PropertyAttribute" Usage="new NUnit.Framework.PropertyAttribute (propertyName, propertyValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="propertyValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">The name of the property</param>
        <param name="propertyValue">The property value</param>
        <summary>
            Construct a PropertyAttribute with a name and string value
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyToTest">
      <MemberSignature Language="C#" Value="public virtual void ApplyToTest (NUnit.Framework.Internal.Test test);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyToTest(class NUnit.Framework.Internal.Test test) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.PropertyAttribute.ApplyToTest(NUnit.Framework.Internal.Test)" />
      <MemberSignature Language="F#" Value="abstract member ApplyToTest : NUnit.Framework.Internal.Test -&gt; unit&#xA;override this.ApplyToTest : NUnit.Framework.Internal.Test -&gt; unit" Usage="propertyAttribute.ApplyToTest test" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:NUnit.Framework.Internal.IApplyToTest.ApplyToTest(NUnit.Framework.Internal.Test)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="NUnit.Framework.Internal.Test" />
      </Parameters>
      <Docs>
        <param name="test">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Api.IPropertyBag Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Api.IPropertyBag Properties" />
      <MemberSignature Language="DocId" Value="P:NUnit.Framework.PropertyAttribute.Properties" />
      <MemberSignature Language="F#" Value="member this.Properties : NUnit.Framework.Api.IPropertyBag" Usage="NUnit.Framework.PropertyAttribute.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Api.IPropertyBag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the property dictionary for this attribute
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
