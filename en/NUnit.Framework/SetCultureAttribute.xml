<Type Name="SetCultureAttribute" FullName="NUnit.Framework.SetCultureAttribute">
  <TypeSignature Language="C#" Value="public class SetCultureAttribute : NUnit.Framework.PropertyAttribute, NUnit.Framework.Internal.IApplyToContext" apistyle="classic" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SetCultureAttribute extends NUnit.Framework.PropertyAttribute implements class NUnit.Framework.Internal.IApplyToContext" apistyle="classic" />
  <TypeSignature Language="C#" Value="public class SetCultureAttribute : Xamarin.iOS.dll=MonoTouch.NUnit.Framework.PropertyAttribute, Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Internal.IApplyToContext" apistyle="unified" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SetCultureAttribute extends Xamarin.iOS.dll=MonoTouch.NUnit.Framework.PropertyAttribute implements class Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Internal.IApplyToContext" apistyle="unified" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>0.7.0.0</AssemblyVersion>
    <AssemblyVersion>0.8.0.0</AssemblyVersion>
    <AssemblyVersion>0.9.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>NUnit.Framework.PropertyAttribute</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>NUnit.Framework.Internal.IApplyToContext</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Method, AllowMultiple=false, Inherited=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Summary description for SetCultureAttribute.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SetCultureAttribute (string culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string culture) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.7.0.0</AssemblyVersion>
        <AssemblyVersion>0.8.0.0</AssemblyVersion>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="culture">
        </param>
        <summary>
            Construct given the name of a culture
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NUnit.Framework.Internal.Commands.ICommandDecorator.Decorate" apistyle="classic">
      <MemberSignature Language="C#" Value="NUnit.Framework.Internal.Commands.TestCommand ICommandDecorator.Decorate (NUnit.Framework.Internal.Commands.TestCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class NUnit.Framework.Internal.Commands.TestCommand NUnit.Framework.Internal.Commands.ICommandDecorator.Decorate(class NUnit.Framework.Internal.Commands.TestCommand command) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Internal.Commands.TestCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="NUnit.Framework.Internal.Commands.TestCommand" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NUnit.Framework.Internal.Commands.ICommandDecorator.Priority" apistyle="classic">
      <MemberSignature Language="C#" Value="int NUnit.Framework.Internal.Commands.ICommandDecorator.Priority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NUnit.Framework.Internal.Commands.ICommandDecorator.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NUnit.Framework.Internal.Commands.ICommandDecorator.Stage" apistyle="classic">
      <MemberSignature Language="C#" Value="NUnit.Framework.Internal.Commands.CommandStage NUnit.Framework.Internal.Commands.ICommandDecorator.Stage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype NUnit.Framework.Internal.Commands.CommandStage NUnit.Framework.Internal.Commands.ICommandDecorator.Stage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Internal.Commands.CommandStage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NUnit.Framework.Internal.IApplyToContext.ApplyToContext">
      <MemberSignature Language="C#" Value="void IApplyToContext.ApplyToContext (NUnit.Framework.Internal.TestExecutionContext context);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void NUnit.Framework.Internal.IApplyToContext.ApplyToContext(class NUnit.Framework.Internal.TestExecutionContext context) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="void IApplyToContext.ApplyToContext (Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Internal.TestExecutionContext context);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void NUnit.Framework.Internal.IApplyToContext.ApplyToContext(class Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Internal.TestExecutionContext context) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.8.0.0</AssemblyVersion>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="NUnit.Framework.Internal.TestExecutionContext" apistyle="classic" />
        <Parameter Name="context" Type="Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Internal.TestExecutionContext" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
