<Type Name="Assert" FullName="NUnit.Framework.Assert">
  <TypeSignature Language="C#" Value="public class Assert" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Assert extends System.Object" />
  <TypeSignature Language="DocId" Value="T:NUnit.Framework.Assert" />
  <TypeSignature Language="F#" Value="type Assert = class" />
  <AssemblyInfo>
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>0.6.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The Assert class contains a collection of static methods that
            implement the most common assertions used in NUnit.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            We don't actually want any instances of this object, but some people
            like to inherit from it to add other static methods. Hence, the
            protected constructor disallows any instances of this object.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (decimal expected, decimal actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(valuetype System.Decimal expected, valuetype System.Decimal actual) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal)" />
      <MemberSignature Language="F#" Value="static member AreEqual : decimal * decimal -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Decimal" />
        <Parameter Name="actual" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (int expected, int actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(int32 expected, int32 actual) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="static member AreEqual : int * int -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int32" />
        <Parameter Name="actual" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (long expected, long actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(int64 expected, int64 actual) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="static member AreEqual : int64 * int64 -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int64" />
        <Parameter Name="actual" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (object expected, object actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(object expected, object actual) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object)" />
      <MemberSignature Language="F#" Value="static member AreEqual : obj * obj -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (uint expected, uint actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(unsigned int32 expected, unsigned int32 actual) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.UInt32,System.UInt32)" />
      <MemberSignature Language="F#" Value="static member AreEqual : uint32 * uint32 -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt32" />
        <Parameter Name="actual" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (ulong expected, ulong actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(unsigned int64 expected, unsigned int64 actual) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.UInt64,System.UInt64)" />
      <MemberSignature Language="F#" Value="static member AreEqual : uint64 * uint64 -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt64" />
        <Parameter Name="actual" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (decimal expected, decimal actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(valuetype System.Decimal expected, valuetype System.Decimal actual, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal,System.String)" />
      <MemberSignature Language="F#" Value="static member AreEqual : decimal * decimal * string -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Decimal" />
        <Parameter Name="actual" Type="System.Decimal" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (double expected, double actual, double delta);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(float64 expected, float64 actual, float64 delta) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="F#" Value="static member AreEqual : double * double * double -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual, delta)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Double" />
        <Parameter Name="actual" Type="System.Double" />
        <Parameter Name="delta" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="delta">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (double expected, Nullable&lt;double&gt; actual, double delta);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(float64 expected, valuetype System.Nullable`1&lt;float64&gt; actual, float64 delta) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Nullable{System.Double},System.Double)" />
      <MemberSignature Language="F#" Value="static member AreEqual : double * Nullable&lt;double&gt; * double -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual, delta)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Double" />
        <Parameter Name="actual" Type="System.Nullable&lt;System.Double&gt;" />
        <Parameter Name="delta" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="delta">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (int expected, int actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(int32 expected, int32 actual, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="F#" Value="static member AreEqual : int * int * string -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int32" />
        <Parameter Name="actual" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (long expected, long actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(int64 expected, int64 actual, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.Int64,System.Int64,System.String)" />
      <MemberSignature Language="F#" Value="static member AreEqual : int64 * int64 * string -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int64" />
        <Parameter Name="actual" Type="System.Int64" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (object expected, object actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(object expected, object actual, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object,System.String)" />
      <MemberSignature Language="F#" Value="static member AreEqual : obj * obj * string -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (uint expected, uint actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(unsigned int32 expected, unsigned int32 actual, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.UInt32,System.UInt32,System.String)" />
      <MemberSignature Language="F#" Value="static member AreEqual : uint32 * uint32 * string -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt32" />
        <Parameter Name="actual" Type="System.UInt32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (ulong expected, ulong actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(unsigned int64 expected, unsigned int64 actual, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.UInt64,System.UInt64,System.String)" />
      <MemberSignature Language="F#" Value="static member AreEqual : uint64 * uint64 * string -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt64" />
        <Parameter Name="actual" Type="System.UInt64" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (decimal expected, decimal actual, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(valuetype System.Decimal expected, valuetype System.Decimal actual, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member AreEqual : decimal * decimal * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Decimal" />
        <Parameter Name="actual" Type="System.Decimal" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (double expected, double actual, double delta, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(float64 expected, float64 actual, float64 delta, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double,System.String)" />
      <MemberSignature Language="F#" Value="static member AreEqual : double * double * double * string -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual, delta, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Double" />
        <Parameter Name="actual" Type="System.Double" />
        <Parameter Name="delta" Type="System.Double" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="delta">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (double expected, Nullable&lt;double&gt; actual, double delta, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(float64 expected, valuetype System.Nullable`1&lt;float64&gt; actual, float64 delta, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Nullable{System.Double},System.Double,System.String)" />
      <MemberSignature Language="F#" Value="static member AreEqual : double * Nullable&lt;double&gt; * double * string -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual, delta, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Double" />
        <Parameter Name="actual" Type="System.Nullable&lt;System.Double&gt;" />
        <Parameter Name="delta" Type="System.Double" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="delta">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (int expected, int actual, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(int32 expected, int32 actual, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.Int32,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member AreEqual : int * int * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int32" />
        <Parameter Name="actual" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (long expected, long actual, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(int64 expected, int64 actual, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.Int64,System.Int64,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member AreEqual : int64 * int64 * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int64" />
        <Parameter Name="actual" Type="System.Int64" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (object expected, object actual, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(object expected, object actual, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member AreEqual : obj * obj * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (uint expected, uint actual, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(unsigned int32 expected, unsigned int32 actual, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.UInt32,System.UInt32,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member AreEqual : uint32 * uint32 * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt32" />
        <Parameter Name="actual" Type="System.UInt32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (ulong expected, ulong actual, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(unsigned int64 expected, unsigned int64 actual, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.UInt64,System.UInt64,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member AreEqual : uint64 * uint64 * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt64" />
        <Parameter Name="actual" Type="System.UInt64" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (double expected, double actual, double delta, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(float64 expected, float64 actual, float64 delta, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member AreEqual : double * double * double * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual, delta, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Double" />
        <Parameter Name="actual" Type="System.Double" />
        <Parameter Name="delta" Type="System.Double" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="delta">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreEqual">
      <MemberSignature Language="C#" Value="public static void AreEqual (double expected, Nullable&lt;double&gt; actual, double delta, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreEqual(float64 expected, valuetype System.Nullable`1&lt;float64&gt; actual, float64 delta, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Nullable{System.Double},System.Double,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member AreEqual : double * Nullable&lt;double&gt; * double * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.AreEqual (expected, actual, delta, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Double" />
        <Parameter Name="actual" Type="System.Nullable&lt;System.Double&gt;" />
        <Parameter Name="delta" Type="System.Double" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="delta">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (decimal expected, decimal actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(valuetype System.Decimal expected, valuetype System.Decimal actual) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal)" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : decimal * decimal -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Decimal" />
        <Parameter Name="actual" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (double expected, double actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(float64 expected, float64 actual) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.Double,System.Double)" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : double * double -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Double" />
        <Parameter Name="actual" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (int expected, int actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(int32 expected, int32 actual) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : int * int -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int32" />
        <Parameter Name="actual" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (long expected, long actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(int64 expected, int64 actual) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : int64 * int64 -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int64" />
        <Parameter Name="actual" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (object expected, object actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(object expected, object actual) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.Object,System.Object)" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : obj * obj -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (float expected, float actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(float32 expected, float32 actual) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : single * single -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Single" />
        <Parameter Name="actual" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (uint expected, uint actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(unsigned int32 expected, unsigned int32 actual) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32)" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : uint32 * uint32 -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt32" />
        <Parameter Name="actual" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (ulong expected, ulong actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(unsigned int64 expected, unsigned int64 actual) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.UInt64,System.UInt64)" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : uint64 * uint64 -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt64" />
        <Parameter Name="actual" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (decimal expected, decimal actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(valuetype System.Decimal expected, valuetype System.Decimal actual, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal,System.String)" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : decimal * decimal * string -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Decimal" />
        <Parameter Name="actual" Type="System.Decimal" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (double expected, double actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(float64 expected, float64 actual, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.Double,System.Double,System.String)" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : double * double * string -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Double" />
        <Parameter Name="actual" Type="System.Double" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (int expected, int actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(int32 expected, int32 actual, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : int * int * string -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int32" />
        <Parameter Name="actual" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (long expected, long actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(int64 expected, int64 actual, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.Int64,System.Int64,System.String)" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : int64 * int64 * string -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int64" />
        <Parameter Name="actual" Type="System.Int64" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (object expected, object actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(object expected, object actual, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.Object,System.Object,System.String)" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : obj * obj * string -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (float expected, float actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(float32 expected, float32 actual, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.Single,System.Single,System.String)" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : single * single * string -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Single" />
        <Parameter Name="actual" Type="System.Single" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (uint expected, uint actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(unsigned int32 expected, unsigned int32 actual, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32,System.String)" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : uint32 * uint32 * string -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt32" />
        <Parameter Name="actual" Type="System.UInt32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (ulong expected, ulong actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(unsigned int64 expected, unsigned int64 actual, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.UInt64,System.UInt64,System.String)" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : uint64 * uint64 * string -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt64" />
        <Parameter Name="actual" Type="System.UInt64" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (decimal expected, decimal actual, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(valuetype System.Decimal expected, valuetype System.Decimal actual, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : decimal * decimal * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Decimal" />
        <Parameter Name="actual" Type="System.Decimal" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (double expected, double actual, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(float64 expected, float64 actual, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.Double,System.Double,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : double * double * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Double" />
        <Parameter Name="actual" Type="System.Double" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (int expected, int actual, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(int32 expected, int32 actual, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : int * int * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int32" />
        <Parameter Name="actual" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (long expected, long actual, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(int64 expected, int64 actual, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.Int64,System.Int64,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : int64 * int64 * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Int64" />
        <Parameter Name="actual" Type="System.Int64" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (object expected, object actual, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(object expected, object actual, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.Object,System.Object,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : obj * obj * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (float expected, float actual, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(float32 expected, float32 actual, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.Single,System.Single,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : single * single * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Single" />
        <Parameter Name="actual" Type="System.Single" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (uint expected, uint actual, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(unsigned int32 expected, unsigned int32 actual, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : uint32 * uint32 * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt32" />
        <Parameter Name="actual" Type="System.UInt32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotEqual">
      <MemberSignature Language="C#" Value="public static void AreNotEqual (ulong expected, ulong actual, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotEqual(unsigned int64 expected, unsigned int64 actual, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotEqual(System.UInt64,System.UInt64,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member AreNotEqual : uint64 * uint64 * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.AreNotEqual (expected, actual, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.UInt64" />
        <Parameter Name="actual" Type="System.UInt64" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotSame">
      <MemberSignature Language="C#" Value="public static void AreNotSame (object expected, object actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotSame(object expected, object actual) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotSame(System.Object,System.Object)" />
      <MemberSignature Language="F#" Value="static member AreNotSame : obj * obj -&gt; unit" Usage="NUnit.Framework.Assert.AreNotSame (expected, actual)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotSame">
      <MemberSignature Language="C#" Value="public static void AreNotSame (object expected, object actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotSame(object expected, object actual, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotSame(System.Object,System.Object,System.String)" />
      <MemberSignature Language="F#" Value="static member AreNotSame : obj * obj * string -&gt; unit" Usage="NUnit.Framework.Assert.AreNotSame (expected, actual, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreNotSame">
      <MemberSignature Language="C#" Value="public static void AreNotSame (object expected, object actual, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreNotSame(object expected, object actual, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreNotSame(System.Object,System.Object,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member AreNotSame : obj * obj * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.AreNotSame (expected, actual, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreSame">
      <MemberSignature Language="C#" Value="public static void AreSame (object expected, object actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreSame(object expected, object actual) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreSame(System.Object,System.Object)" />
      <MemberSignature Language="F#" Value="static member AreSame : obj * obj -&gt; unit" Usage="NUnit.Framework.Assert.AreSame (expected, actual)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreSame">
      <MemberSignature Language="C#" Value="public static void AreSame (object expected, object actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreSame(object expected, object actual, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreSame(System.Object,System.Object,System.String)" />
      <MemberSignature Language="F#" Value="static member AreSame : obj * obj * string -&gt; unit" Usage="NUnit.Framework.Assert.AreSame (expected, actual, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreSame">
      <MemberSignature Language="C#" Value="public static void AreSame (object expected, object actual, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AreSame(object expected, object actual, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AreSame(System.Object,System.Object,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member AreSame : obj * obj * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.AreSame (expected, actual, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssertDoublesAreEqual">
      <MemberSignature Language="C#" Value="protected static void AssertDoublesAreEqual (double expected, double actual, double delta, string message, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void AssertDoublesAreEqual(float64 expected, float64 actual, float64 delta, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.AssertDoublesAreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member AssertDoublesAreEqual : double * double * double * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.AssertDoublesAreEqual (expected, actual, delta, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Double" />
        <Parameter Name="actual" Type="System.Double" />
        <Parameter Name="delta" Type="System.Double" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="delta">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ByVal">
      <MemberSignature Language="C#" Value="public static void ByVal (object actual, NUnit.Framework.Constraints.IResolveConstraint expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ByVal(object actual, class NUnit.Framework.Constraints.IResolveConstraint expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.ByVal(System.Object,NUnit.Framework.Constraints.IResolveConstraint)" />
      <MemberSignature Language="F#" Value="static member ByVal : obj * NUnit.Framework.Constraints.IResolveConstraint -&gt; unit" Usage="NUnit.Framework.Assert.ByVal (actual, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="expression" Type="NUnit.Framework.Constraints.IResolveConstraint" />
      </Parameters>
      <Docs>
        <param name="actual">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ByVal">
      <MemberSignature Language="C#" Value="public static void ByVal (object actual, NUnit.Framework.Constraints.IResolveConstraint expression, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ByVal(object actual, class NUnit.Framework.Constraints.IResolveConstraint expression, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.ByVal(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String)" />
      <MemberSignature Language="F#" Value="static member ByVal : obj * NUnit.Framework.Constraints.IResolveConstraint * string -&gt; unit" Usage="NUnit.Framework.Assert.ByVal (actual, expression, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="expression" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="actual">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ByVal">
      <MemberSignature Language="C#" Value="public static void ByVal (object actual, NUnit.Framework.Constraints.IResolveConstraint expression, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ByVal(object actual, class NUnit.Framework.Constraints.IResolveConstraint expression, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.ByVal(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member ByVal : obj * NUnit.Framework.Constraints.IResolveConstraint * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.ByVal (actual, expression, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="expression" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="actual">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static Exception Catch (NUnit.Framework.TestDelegate code);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Catch(class NUnit.Framework.TestDelegate code) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Catch(NUnit.Framework.TestDelegate)" />
      <MemberSignature Language="F#" Value="static member Catch : NUnit.Framework.TestDelegate -&gt; Exception" Usage="NUnit.Framework.Assert.Catch code" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
      </Parameters>
      <Docs>
        <param name="code">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static Exception Catch (NUnit.Framework.TestDelegate code, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Catch(class NUnit.Framework.TestDelegate code, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Catch(NUnit.Framework.TestDelegate,System.String)" />
      <MemberSignature Language="F#" Value="static member Catch : NUnit.Framework.TestDelegate * string -&gt; Exception" Usage="NUnit.Framework.Assert.Catch (code, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="code">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static Exception Catch (Type expectedExceptionType, NUnit.Framework.TestDelegate code);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Catch(class System.Type expectedExceptionType, class NUnit.Framework.TestDelegate code) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Catch(System.Type,NUnit.Framework.TestDelegate)" />
      <MemberSignature Language="F#" Value="static member Catch : Type * NUnit.Framework.TestDelegate -&gt; Exception" Usage="NUnit.Framework.Assert.Catch (expectedExceptionType, code)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedExceptionType" Type="System.Type" />
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
      </Parameters>
      <Docs>
        <param name="expectedExceptionType">To be added.</param>
        <param name="code">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static Exception Catch (NUnit.Framework.TestDelegate code, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Catch(class NUnit.Framework.TestDelegate code, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Catch(NUnit.Framework.TestDelegate,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member Catch : NUnit.Framework.TestDelegate * string * obj[] -&gt; Exception" Usage="NUnit.Framework.Assert.Catch (code, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="code">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static Exception Catch (Type expectedExceptionType, NUnit.Framework.TestDelegate code, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Catch(class System.Type expectedExceptionType, class NUnit.Framework.TestDelegate code, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Catch(System.Type,NUnit.Framework.TestDelegate,System.String)" />
      <MemberSignature Language="F#" Value="static member Catch : Type * NUnit.Framework.TestDelegate * string -&gt; Exception" Usage="NUnit.Framework.Assert.Catch (expectedExceptionType, code, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedExceptionType" Type="System.Type" />
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expectedExceptionType">To be added.</param>
        <param name="code">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static Exception Catch (Type expectedExceptionType, NUnit.Framework.TestDelegate code, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Catch(class System.Type expectedExceptionType, class NUnit.Framework.TestDelegate code, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Catch(System.Type,NUnit.Framework.TestDelegate,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member Catch : Type * NUnit.Framework.TestDelegate * string * obj[] -&gt; Exception" Usage="NUnit.Framework.Assert.Catch (expectedExceptionType, code, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedExceptionType" Type="System.Type" />
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expectedExceptionType">To be added.</param>
        <param name="code">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Catch&lt;T&gt; (NUnit.Framework.TestDelegate code) where T : Exception;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Catch&lt;(class System.Exception) T&gt;(class NUnit.Framework.TestDelegate code) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Catch``1(NUnit.Framework.TestDelegate)" />
      <MemberSignature Language="F#" Value="static member Catch : NUnit.Framework.TestDelegate -&gt; 'T (requires 'T :&gt; Exception)" Usage="NUnit.Framework.Assert.Catch code" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Exception</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="code">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Catch&lt;T&gt; (NUnit.Framework.TestDelegate code, string message) where T : Exception;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Catch&lt;(class System.Exception) T&gt;(class NUnit.Framework.TestDelegate code, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Catch``1(NUnit.Framework.TestDelegate,System.String)" />
      <MemberSignature Language="F#" Value="static member Catch : NUnit.Framework.TestDelegate * string -&gt; 'T (requires 'T :&gt; Exception)" Usage="NUnit.Framework.Assert.Catch (code, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Exception</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="code">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Catch&lt;T&gt; (NUnit.Framework.TestDelegate code, string message, params object[] args) where T : Exception;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Catch&lt;(class System.Exception) T&gt;(class NUnit.Framework.TestDelegate code, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Catch``1(NUnit.Framework.TestDelegate,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member Catch : NUnit.Framework.TestDelegate * string * obj[] -&gt; 'T (requires 'T :&gt; Exception)" Usage="NUnit.Framework.Assert.Catch (code, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Exception</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="code">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoesNotThrow">
      <MemberSignature Language="C#" Value="public static void DoesNotThrow (NUnit.Framework.TestDelegate code);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DoesNotThrow(class NUnit.Framework.TestDelegate code) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.DoesNotThrow(NUnit.Framework.TestDelegate)" />
      <MemberSignature Language="F#" Value="static member DoesNotThrow : NUnit.Framework.TestDelegate -&gt; unit" Usage="NUnit.Framework.Assert.DoesNotThrow code" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
      </Parameters>
      <Docs>
        <param name="code">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoesNotThrow">
      <MemberSignature Language="C#" Value="public static void DoesNotThrow (NUnit.Framework.TestDelegate code, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DoesNotThrow(class NUnit.Framework.TestDelegate code, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.DoesNotThrow(NUnit.Framework.TestDelegate,System.String)" />
      <MemberSignature Language="F#" Value="static member DoesNotThrow : NUnit.Framework.TestDelegate * string -&gt; unit" Usage="NUnit.Framework.Assert.DoesNotThrow (code, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="code">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoesNotThrow">
      <MemberSignature Language="C#" Value="public static void DoesNotThrow (NUnit.Framework.TestDelegate code, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DoesNotThrow(class NUnit.Framework.TestDelegate code, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.DoesNotThrow(NUnit.Framework.TestDelegate,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member DoesNotThrow : NUnit.Framework.TestDelegate * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.DoesNotThrow (code, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="code">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (object a, object b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(object a, object b) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Equals(System.Object,System.Object)" />
      <MemberSignature Language="F#" Value="static member Equals : obj * obj -&gt; bool" Usage="NUnit.Framework.Assert.Equals (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Object" />
        <Parameter Name="b" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="a"></param>
        <param name="b"></param>
        <summary>
            The Equals method throws an AssertionException. This is done
            to make sure there is no mistake by calling this function.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail() cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Fail" />
      <MemberSignature Language="F#" Value="static member Fail : unit -&gt; unit" Usage="NUnit.Framework.Assert.Fail " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Fail(System.String)" />
      <MemberSignature Language="F#" Value="static member Fail : string -&gt; unit" Usage="NUnit.Framework.Assert.Fail message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Fail(System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member Fail : string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.Fail (message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="message">The message, possibly with format placeholders</param>
        <param name="args">Arguments used in formatting the string</param>
        <summary>
            Throw an assertion exception with a message and optional arguments
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="False">
      <MemberSignature Language="C#" Value="public static void False (bool condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void False(bool condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.False(System.Boolean)" />
      <MemberSignature Language="F#" Value="static member False : bool -&gt; unit" Usage="NUnit.Framework.Assert.False condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="False">
      <MemberSignature Language="C#" Value="public static void False (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void False(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.False(System.Boolean,System.String)" />
      <MemberSignature Language="F#" Value="static member False : bool * string -&gt; unit" Usage="NUnit.Framework.Assert.False (condition, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <param name="message">The message to display if the condition is true</param>
        <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="False">
      <MemberSignature Language="C#" Value="public static void False (bool condition, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void False(bool condition, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.False(System.Boolean,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member False : bool * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.False (condition, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <param name="message">The message to display if the condition is true</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Asserts that a condition is false. If the condition is true the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore">
      <MemberSignature Language="C#" Value="public static void Ignore ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Ignore() cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Ignore" />
      <MemberSignature Language="F#" Value="static member Ignore : unit -&gt; unit" Usage="NUnit.Framework.Assert.Ignore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException" />.
            This causes the test to be reported as ignored.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore">
      <MemberSignature Language="C#" Value="public static void Ignore (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Ignore(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Ignore(System.String)" />
      <MemberSignature Language="F#" Value="static member Ignore : string -&gt; unit" Usage="NUnit.Framework.Assert.Ignore message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException" /> with.</param>
        <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException" /> with the message that is
            passed in. This causes the test to be reported as ignored.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ignore">
      <MemberSignature Language="C#" Value="public static void Ignore (string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Ignore(string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Ignore(System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member Ignore : string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.Ignore (message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException" /> with.</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException" /> with the message and arguments
            that are passed in.  This causes the test to be reported as ignored.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Inconclusive">
      <MemberSignature Language="C#" Value="public static void Inconclusive ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Inconclusive() cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Inconclusive" />
      <MemberSignature Language="F#" Value="static member Inconclusive : unit -&gt; unit" Usage="NUnit.Framework.Assert.Inconclusive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Throws an <see cref="T:NUnit.Framework.InconclusiveException" />.
            This causes the test to be reported as Inconclusive.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Inconclusive">
      <MemberSignature Language="C#" Value="public static void Inconclusive (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Inconclusive(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Inconclusive(System.String)" />
      <MemberSignature Language="F#" Value="static member Inconclusive : string -&gt; unit" Usage="NUnit.Framework.Assert.Inconclusive message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The message to initialize the <see cref="T:NUnit.Framework.InconclusiveException" /> with.</param>
        <summary>
            Throws an <see cref="T:NUnit.Framework.InconclusiveException" /> with the message that is
            passed in. This causes the test to be reported as inconclusive.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Inconclusive">
      <MemberSignature Language="C#" Value="public static void Inconclusive (string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Inconclusive(string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Inconclusive(System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member Inconclusive : string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.Inconclusive (message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="message">The message to initialize the <see cref="T:NUnit.Framework.InconclusiveException" /> with.</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Throws an <see cref="T:NUnit.Framework.InconclusiveException" /> with the message and arguments
            that are passed in.  This causes the test to be reported as inconclusive.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static void IsFalse (bool condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsFalse(bool condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.IsFalse(System.Boolean)" />
      <MemberSignature Language="F#" Value="static member IsFalse : bool -&gt; unit" Usage="NUnit.Framework.Assert.IsFalse condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static void IsFalse (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsFalse(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.IsFalse(System.Boolean,System.String)" />
      <MemberSignature Language="F#" Value="static member IsFalse : bool * string -&gt; unit" Usage="NUnit.Framework.Assert.IsFalse (condition, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static void IsFalse (bool condition, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsFalse(bool condition, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.IsFalse(System.Boolean,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member IsFalse : bool * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.IsFalse (condition, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="condition">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInstanceOfType">
      <MemberSignature Language="C#" Value="public static void IsInstanceOfType (Type expected, object actual);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInstanceOfType(class System.Type expected, object actual) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object)" />
      <MemberSignature Language="F#" Value="static member IsInstanceOfType : Type * obj -&gt; unit" Usage="NUnit.Framework.Assert.IsInstanceOfType (expected, actual)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Type" />
        <Parameter Name="actual" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInstanceOfType">
      <MemberSignature Language="C#" Value="public static void IsInstanceOfType (object anObject, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInstanceOfType(object anObject, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.IsInstanceOfType(System.Object,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member IsInstanceOfType : obj * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.IsInstanceOfType (anObject, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="anObject">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInstanceOfType">
      <MemberSignature Language="C#" Value="public static void IsInstanceOfType (Type expected, object actual, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInstanceOfType(class System.Type expected, object actual, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object,System.String)" />
      <MemberSignature Language="F#" Value="static member IsInstanceOfType : Type * obj * string -&gt; unit" Usage="NUnit.Framework.Assert.IsInstanceOfType (expected, actual, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Type" />
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInstanceOfType">
      <MemberSignature Language="C#" Value="public static void IsInstanceOfType (Type expected, object actual, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsInstanceOfType(class System.Type expected, object actual, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member IsInstanceOfType : Type * obj * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.IsInstanceOfType (expected, actual, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Type" />
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <param name="actual">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotNull">
      <MemberSignature Language="C#" Value="public static void IsNotNull (object anObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotNull(object anObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.IsNotNull(System.Object)" />
      <MemberSignature Language="F#" Value="static member IsNotNull : obj -&gt; unit" Usage="NUnit.Framework.Assert.IsNotNull anObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="anObject">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotNull">
      <MemberSignature Language="C#" Value="public static void IsNotNull (object anObject, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotNull(object anObject, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.IsNotNull(System.Object,System.String)" />
      <MemberSignature Language="F#" Value="static member IsNotNull : obj * string -&gt; unit" Usage="NUnit.Framework.Assert.IsNotNull (anObject, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="anObject">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotNull">
      <MemberSignature Language="C#" Value="public static void IsNotNull (object anObject, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNotNull(object anObject, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.IsNotNull(System.Object,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member IsNotNull : obj * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.IsNotNull (anObject, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="anObject">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public static void IsNull (object anObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNull(object anObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.IsNull(System.Object)" />
      <MemberSignature Language="F#" Value="static member IsNull : obj -&gt; unit" Usage="NUnit.Framework.Assert.IsNull anObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="anObject">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public static void IsNull (object anObject, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNull(object anObject, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.IsNull(System.Object,System.String)" />
      <MemberSignature Language="F#" Value="static member IsNull : obj * string -&gt; unit" Usage="NUnit.Framework.Assert.IsNull (anObject, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="anObject">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public static void IsNull (object anObject, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsNull(object anObject, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.IsNull(System.Object,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member IsNull : obj * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.IsNull (anObject, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="anObject">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static void IsTrue (bool condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsTrue(bool condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.IsTrue(System.Boolean)" />
      <MemberSignature Language="F#" Value="static member IsTrue : bool -&gt; unit" Usage="NUnit.Framework.Assert.IsTrue condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static void IsTrue (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsTrue(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.IsTrue(System.Boolean,System.String)" />
      <MemberSignature Language="F#" Value="static member IsTrue : bool * string -&gt; unit" Usage="NUnit.Framework.Assert.IsTrue (condition, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static void IsTrue (bool condition, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void IsTrue(bool condition, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.IsTrue(System.Boolean,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member IsTrue : bool * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.IsTrue (condition, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="condition">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotNull">
      <MemberSignature Language="C#" Value="public static void NotNull (object anObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void NotNull(object anObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.NotNull(System.Object)" />
      <MemberSignature Language="F#" Value="static member NotNull : obj -&gt; unit" Usage="NUnit.Framework.Assert.NotNull anObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="anObject">The object that is to be tested</param>
        <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException" />
            is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotNull">
      <MemberSignature Language="C#" Value="public static void NotNull (object anObject, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void NotNull(object anObject, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.NotNull(System.Object,System.String)" />
      <MemberSignature Language="F#" Value="static member NotNull : obj * string -&gt; unit" Usage="NUnit.Framework.Assert.NotNull (anObject, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="anObject">The object that is to be tested</param>
        <param name="message">The message to be displayed when the object is null</param>
        <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException" />
            is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotNull">
      <MemberSignature Language="C#" Value="public static void NotNull (object anObject, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void NotNull(object anObject, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.NotNull(System.Object,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member NotNull : obj * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.NotNull (anObject, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="anObject">The object that is to be tested</param>
        <param name="message">The message to be displayed when the object is null</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Verifies that the object that is passed in is not equal to <code>null</code>
            If the object is <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException" />
            is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static void Null (object anObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Null(object anObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Null(System.Object)" />
      <MemberSignature Language="F#" Value="static member Null : obj -&gt; unit" Usage="NUnit.Framework.Assert.Null anObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="anObject">The object that is to be tested</param>
        <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not null <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException" />
            is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static void Null (object anObject, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Null(object anObject, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Null(System.Object,System.String)" />
      <MemberSignature Language="F#" Value="static member Null : obj * string -&gt; unit" Usage="NUnit.Framework.Assert.Null (anObject, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="anObject">The object that is to be tested</param>
        <param name="message">The message to be displayed when the object is not null</param>
        <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException" />
            is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static void Null (object anObject, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Null(object anObject, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Null(System.Object,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member Null : obj * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.Null (anObject, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="anObject">The object that is to be tested</param>
        <param name="message">The message to be displayed when the object is not null</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Verifies that the object that is passed in is equal to <code>null</code>
            If the object is not <code>null</code> then an <see cref="T:NUnit.Framework.AssertionException" />
            is thrown.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pass">
      <MemberSignature Language="C#" Value="public static void Pass ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pass() cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Pass" />
      <MemberSignature Language="F#" Value="static member Pass : unit -&gt; unit" Usage="NUnit.Framework.Assert.Pass " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Throws a <see cref="T:NUnit.Framework.SuccessException" /> with the message and arguments
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pass">
      <MemberSignature Language="C#" Value="public static void Pass (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pass(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Pass(System.String)" />
      <MemberSignature Language="F#" Value="static member Pass : string -&gt; unit" Usage="NUnit.Framework.Assert.Pass message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException" /> with.</param>
        <summary>
            Throws a <see cref="T:NUnit.Framework.SuccessException" /> with the message and arguments
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pass">
      <MemberSignature Language="C#" Value="public static void Pass (string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Pass(string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Pass(System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member Pass : string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.Pass (message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException" /> with.</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Throws a <see cref="T:NUnit.Framework.SuccessException" /> with the message and arguments
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceEquals">
      <MemberSignature Language="C#" Value="public static void ReferenceEquals (object a, object b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReferenceEquals(object a, object b) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.ReferenceEquals(System.Object,System.Object)" />
      <MemberSignature Language="F#" Value="static member ReferenceEquals : obj * obj -&gt; unit" Usage="NUnit.Framework.Assert.ReferenceEquals (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Object" />
        <Parameter Name="b" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="a"></param>
        <param name="b"></param>
        <summary>
            override the default ReferenceEquals to throw an AssertionException. This
            implementation makes sure there is no mistake in calling this function
            as part of Assert.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That">
      <MemberSignature Language="C#" Value="public static void That (bool condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That(bool condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.That(System.Boolean)" />
      <MemberSignature Language="F#" Value="static member That : bool -&gt; unit" Usage="NUnit.Framework.Assert.That condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That">
      <MemberSignature Language="C#" Value="public static void That (NUnit.Framework.TestDelegate code, NUnit.Framework.Constraints.IResolveConstraint constraint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That(class NUnit.Framework.TestDelegate code, class NUnit.Framework.Constraints.IResolveConstraint constraint) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.That(NUnit.Framework.TestDelegate,NUnit.Framework.Constraints.IResolveConstraint)" />
      <MemberSignature Language="F#" Value="static member That : NUnit.Framework.TestDelegate * NUnit.Framework.Constraints.IResolveConstraint -&gt; unit" Usage="NUnit.Framework.Assert.That (code, constraint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="constraint" Type="NUnit.Framework.Constraints.IResolveConstraint" />
      </Parameters>
      <Docs>
        <param name="code">To be added.</param>
        <param name="constraint">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That">
      <MemberSignature Language="C#" Value="public static void That (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.That(System.Boolean,System.String)" />
      <MemberSignature Language="F#" Value="static member That : bool * string -&gt; unit" Usage="NUnit.Framework.Assert.That (condition, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <param name="message">The message to display if the condition is false</param>
        <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That">
      <MemberSignature Language="C#" Value="public static void That (object actual, NUnit.Framework.Constraints.IResolveConstraint expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That(object actual, class NUnit.Framework.Constraints.IResolveConstraint expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint)" />
      <MemberSignature Language="F#" Value="static member That : obj * NUnit.Framework.Constraints.IResolveConstraint -&gt; unit" Usage="NUnit.Framework.Assert.That (actual, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="expression" Type="NUnit.Framework.Constraints.IResolveConstraint" />
      </Parameters>
      <Docs>
        <param name="actual">The actual value to test</param>
        <param name="expression">A Constraint to be applied</param>
        <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That">
      <MemberSignature Language="C#" Value="public static void That (bool condition, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That(bool condition, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member That : bool * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.That (condition, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <param name="message">The message to display if the condition is false</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That">
      <MemberSignature Language="C#" Value="public static void That (object actual, NUnit.Framework.Constraints.IResolveConstraint expression, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That(object actual, class NUnit.Framework.Constraints.IResolveConstraint expression, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String)" />
      <MemberSignature Language="F#" Value="static member That : obj * NUnit.Framework.Constraints.IResolveConstraint * string -&gt; unit" Usage="NUnit.Framework.Assert.That (actual, expression, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="expression" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="actual">The actual value to test</param>
        <param name="expression">A Constraint to be applied</param>
        <param name="message">The message that will be displayed on failure</param>
        <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That">
      <MemberSignature Language="C#" Value="public static void That (object actual, NUnit.Framework.Constraints.IResolveConstraint expression, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That(object actual, class NUnit.Framework.Constraints.IResolveConstraint expression, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.That(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member That : obj * NUnit.Framework.Constraints.IResolveConstraint * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.That (actual, expression, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actual" Type="System.Object" />
        <Parameter Name="expression" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="actual">The actual value to test</param>
        <param name="expression">A Constraint to be applied</param>
        <param name="message">The message that will be displayed on failure</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void That&lt;T&gt; (NUnit.Framework.Constraints.ActualValueDelegate&lt;T&gt; del, NUnit.Framework.Constraints.IResolveConstraint expr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That&lt;T&gt;(class NUnit.Framework.Constraints.ActualValueDelegate`1&lt;!!T&gt; del, class NUnit.Framework.Constraints.IResolveConstraint expr) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.That``1(NUnit.Framework.Constraints.ActualValueDelegate{``0},NUnit.Framework.Constraints.IResolveConstraint)" />
      <MemberSignature Language="F#" Value="static member That : NUnit.Framework.Constraints.ActualValueDelegate&lt;'T&gt; * NUnit.Framework.Constraints.IResolveConstraint -&gt; unit" Usage="NUnit.Framework.Assert.That (del, expr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="del" Type="NUnit.Framework.Constraints.ActualValueDelegate&lt;T&gt;" />
        <Parameter Name="expr" Type="NUnit.Framework.Constraints.IResolveConstraint" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="del">To be added.</param>
        <param name="expr">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void That&lt;T&gt; (ref T actual, NUnit.Framework.Constraints.IResolveConstraint expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That&lt;T&gt;(!!T&amp; actual, class NUnit.Framework.Constraints.IResolveConstraint expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.That``1(``0@,NUnit.Framework.Constraints.IResolveConstraint)" />
      <MemberSignature Language="F#" Value="static member That :  * NUnit.Framework.Constraints.IResolveConstraint -&gt; unit" Usage="NUnit.Framework.Assert.That (actual, expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="actual" Type="T" RefType="ref" />
        <Parameter Name="expression" Type="NUnit.Framework.Constraints.IResolveConstraint" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="actual">To be added.</param>
        <param name="expression">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void That&lt;T&gt; (NUnit.Framework.Constraints.ActualValueDelegate&lt;T&gt; del, NUnit.Framework.Constraints.IResolveConstraint expr, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That&lt;T&gt;(class NUnit.Framework.Constraints.ActualValueDelegate`1&lt;!!T&gt; del, class NUnit.Framework.Constraints.IResolveConstraint expr, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.That``1(NUnit.Framework.Constraints.ActualValueDelegate{``0},NUnit.Framework.Constraints.IResolveConstraint,System.String)" />
      <MemberSignature Language="F#" Value="static member That : NUnit.Framework.Constraints.ActualValueDelegate&lt;'T&gt; * NUnit.Framework.Constraints.IResolveConstraint * string -&gt; unit" Usage="NUnit.Framework.Assert.That (del, expr, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="del" Type="NUnit.Framework.Constraints.ActualValueDelegate&lt;T&gt;" />
        <Parameter Name="expr" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="del">To be added.</param>
        <param name="expr">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void That&lt;T&gt; (ref T actual, NUnit.Framework.Constraints.IResolveConstraint expression, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That&lt;T&gt;(!!T&amp; actual, class NUnit.Framework.Constraints.IResolveConstraint expression, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.That``1(``0@,NUnit.Framework.Constraints.IResolveConstraint,System.String)" />
      <MemberSignature Language="F#" Value="static member That :  * NUnit.Framework.Constraints.IResolveConstraint * string -&gt; unit" Usage="NUnit.Framework.Assert.That (actual, expression, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="actual" Type="T" RefType="ref" />
        <Parameter Name="expression" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="actual">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void That&lt;T&gt; (NUnit.Framework.Constraints.ActualValueDelegate&lt;T&gt; del, NUnit.Framework.Constraints.IResolveConstraint expr, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That&lt;T&gt;(class NUnit.Framework.Constraints.ActualValueDelegate`1&lt;!!T&gt; del, class NUnit.Framework.Constraints.IResolveConstraint expr, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.That``1(NUnit.Framework.Constraints.ActualValueDelegate{``0},NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member That : NUnit.Framework.Constraints.ActualValueDelegate&lt;'T&gt; * NUnit.Framework.Constraints.IResolveConstraint * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.That (del, expr, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="del" Type="NUnit.Framework.Constraints.ActualValueDelegate&lt;T&gt;" />
        <Parameter Name="expr" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="del">To be added.</param>
        <param name="expr">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="That&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void That&lt;T&gt; (ref T actual, NUnit.Framework.Constraints.IResolveConstraint expression, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void That&lt;T&gt;(!!T&amp; actual, class NUnit.Framework.Constraints.IResolveConstraint expression, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.That``1(``0@,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member That :  * NUnit.Framework.Constraints.IResolveConstraint * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.That (actual, expression, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="actual" Type="T" RefType="ref" />
        <Parameter Name="expression" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="actual">To be added.</param>
        <param name="expression">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Throws">
      <MemberSignature Language="C#" Value="public static Exception Throws (NUnit.Framework.Constraints.IResolveConstraint expression, NUnit.Framework.TestDelegate code);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Throws(class NUnit.Framework.Constraints.IResolveConstraint expression, class NUnit.Framework.TestDelegate code) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Throws(NUnit.Framework.Constraints.IResolveConstraint,NUnit.Framework.TestDelegate)" />
      <MemberSignature Language="F#" Value="static member Throws : NUnit.Framework.Constraints.IResolveConstraint * NUnit.Framework.TestDelegate -&gt; Exception" Usage="NUnit.Framework.Assert.Throws (expression, code)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="code">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Throws">
      <MemberSignature Language="C#" Value="public static Exception Throws (Type expectedExceptionType, NUnit.Framework.TestDelegate code);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Throws(class System.Type expectedExceptionType, class NUnit.Framework.TestDelegate code) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Throws(System.Type,NUnit.Framework.TestDelegate)" />
      <MemberSignature Language="F#" Value="static member Throws : Type * NUnit.Framework.TestDelegate -&gt; Exception" Usage="NUnit.Framework.Assert.Throws (expectedExceptionType, code)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedExceptionType" Type="System.Type" />
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
      </Parameters>
      <Docs>
        <param name="expectedExceptionType">To be added.</param>
        <param name="code">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Throws">
      <MemberSignature Language="C#" Value="public static Exception Throws (NUnit.Framework.Constraints.IResolveConstraint expression, NUnit.Framework.TestDelegate code, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Throws(class NUnit.Framework.Constraints.IResolveConstraint expression, class NUnit.Framework.TestDelegate code, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Throws(NUnit.Framework.Constraints.IResolveConstraint,NUnit.Framework.TestDelegate,System.String)" />
      <MemberSignature Language="F#" Value="static member Throws : NUnit.Framework.Constraints.IResolveConstraint * NUnit.Framework.TestDelegate * string -&gt; Exception" Usage="NUnit.Framework.Assert.Throws (expression, code, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="code">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Throws">
      <MemberSignature Language="C#" Value="public static Exception Throws (Type expectedExceptionType, NUnit.Framework.TestDelegate code, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Throws(class System.Type expectedExceptionType, class NUnit.Framework.TestDelegate code, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Throws(System.Type,NUnit.Framework.TestDelegate,System.String)" />
      <MemberSignature Language="F#" Value="static member Throws : Type * NUnit.Framework.TestDelegate * string -&gt; Exception" Usage="NUnit.Framework.Assert.Throws (expectedExceptionType, code, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedExceptionType" Type="System.Type" />
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expectedExceptionType">To be added.</param>
        <param name="code">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Throws">
      <MemberSignature Language="C#" Value="public static Exception Throws (NUnit.Framework.Constraints.IResolveConstraint expression, NUnit.Framework.TestDelegate code, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Throws(class NUnit.Framework.Constraints.IResolveConstraint expression, class NUnit.Framework.TestDelegate code, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Throws(NUnit.Framework.Constraints.IResolveConstraint,NUnit.Framework.TestDelegate,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member Throws : NUnit.Framework.Constraints.IResolveConstraint * NUnit.Framework.TestDelegate * string * obj[] -&gt; Exception" Usage="NUnit.Framework.Assert.Throws (expression, code, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="NUnit.Framework.Constraints.IResolveConstraint" />
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="code">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Throws">
      <MemberSignature Language="C#" Value="public static Exception Throws (Type expectedExceptionType, NUnit.Framework.TestDelegate code, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception Throws(class System.Type expectedExceptionType, class NUnit.Framework.TestDelegate code, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Throws(System.Type,NUnit.Framework.TestDelegate,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member Throws : Type * NUnit.Framework.TestDelegate * string * obj[] -&gt; Exception" Usage="NUnit.Framework.Assert.Throws (expectedExceptionType, code, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedExceptionType" Type="System.Type" />
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expectedExceptionType">To be added.</param>
        <param name="code">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Throws&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Throws&lt;T&gt; (NUnit.Framework.TestDelegate code) where T : Exception;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Throws&lt;(class System.Exception) T&gt;(class NUnit.Framework.TestDelegate code) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Throws``1(NUnit.Framework.TestDelegate)" />
      <MemberSignature Language="F#" Value="static member Throws : NUnit.Framework.TestDelegate -&gt; 'T (requires 'T :&gt; Exception)" Usage="NUnit.Framework.Assert.Throws code" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Exception</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="code">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Throws&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Throws&lt;T&gt; (NUnit.Framework.TestDelegate code, string message) where T : Exception;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Throws&lt;(class System.Exception) T&gt;(class NUnit.Framework.TestDelegate code, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Throws``1(NUnit.Framework.TestDelegate,System.String)" />
      <MemberSignature Language="F#" Value="static member Throws : NUnit.Framework.TestDelegate * string -&gt; 'T (requires 'T :&gt; Exception)" Usage="NUnit.Framework.Assert.Throws (code, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Exception</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="code">To be added.</param>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Throws&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Throws&lt;T&gt; (NUnit.Framework.TestDelegate code, string message, params object[] args) where T : Exception;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Throws&lt;(class System.Exception) T&gt;(class NUnit.Framework.TestDelegate code, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.Throws``1(NUnit.Framework.TestDelegate,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member Throws : NUnit.Framework.TestDelegate * string * obj[] -&gt; 'T (requires 'T :&gt; Exception)" Usage="NUnit.Framework.Assert.Throws (code, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Exception</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="code" Type="NUnit.Framework.TestDelegate" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="code">To be added.</param>
        <param name="message">To be added.</param>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="True">
      <MemberSignature Language="C#" Value="public static void True (bool condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void True(bool condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.True(System.Boolean)" />
      <MemberSignature Language="F#" Value="static member True : bool -&gt; unit" Usage="NUnit.Framework.Assert.True condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="True">
      <MemberSignature Language="C#" Value="public static void True (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void True(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.True(System.Boolean,System.String)" />
      <MemberSignature Language="F#" Value="static member True : bool * string -&gt; unit" Usage="NUnit.Framework.Assert.True (condition, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <param name="message">The message to display if the condition is false</param>
        <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="True">
      <MemberSignature Language="C#" Value="public static void True (bool condition, string message, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void True(bool condition, string message, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Assert.True(System.Boolean,System.String,System.Object[])" />
      <MemberSignature Language="F#" Value="static member True : bool * string * obj[] -&gt; unit" Usage="NUnit.Framework.Assert.True (condition, message, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="condition">The evaluated condition</param>
        <param name="message">The message to display if the condition is false</param>
        <param name="args">Arguments to be used in formatting the message</param>
        <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
