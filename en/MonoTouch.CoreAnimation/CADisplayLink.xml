<Type Name="CADisplayLink" FullName="MonoTouch.CoreAnimation.CADisplayLink">
  <TypeSignature Language="C#" Value="public class CADisplayLink : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CADisplayLink extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("CADisplayLink", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Synchronization object between your animations and the display refresh.</summary>
    <remarks>
      <para>

	The display link object is a timer that can be used to
	synchronize your drawing with the screen refresh rate.  Once
	you create your CADisplayLink, you need to add it to a runloop
	by using the <see cref="M:MonoTouch.CoreAnimation.CADisplayLink.AddToRunLoop" />
	method.

      </para>
      <para>
	Using the display link ensures that your application will not
	suffer from display glitches like screen tearing and micro-stuttering. 
      </para>
      <para>

	You can pause the display link by setting the <see cref="P:MonoTouch.CoreAnimation.CADisplayLink.Paused" />
	property.  And you can remove your display link from any
	registered run loops by calling the <see cref="M:MonoTouch.CoreAnimation.CADisplayLink.Invalidate" />
	method.

      </para>
      <para>

	By default the timer is triggered sixty times per second.  If
	your application does not need this level of precision, set
	the FrameInterval property to skip one or more updates.  For
	example, setting FrameInterval to two, would invoke your
	target method thirty times per second.

      </para>
      <example>
        <code lang="C#"><![CDATA[
GLKView myGlView;

void Setup ()
{
    CADisplayLink displayLink = CADisplayLink.Create (Display);
    displayLink.AddToRunLoop (NSRunLoop.Main, NSRunLoop.UITrackingRunLoopMode); 
}

void Display ()
{
    myGLView.Display ();
}

]]></code>
      </example>
    </remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/QuartzCore/Reference/CADisplayLink_ClassRef/index.html">Apple documentation for <c>CADisplayLink</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CADisplayLink ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public CADisplayLink (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CADisplayLink (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected CADisplayLink (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CADisplayLink (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected CADisplayLink (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToRunLoop">
      <MemberSignature Language="C#" Value="public void AddToRunLoop (MonoTouch.Foundation.NSRunLoop runloop, MonoTouch.Foundation.NSRunLoopMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddToRunLoop(class MonoTouch.Foundation.NSRunLoop runloop, valuetype MonoTouch.Foundation.NSRunLoopMode mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runloop" Type="MonoTouch.Foundation.NSRunLoop" />
        <Parameter Name="mode" Type="MonoTouch.Foundation.NSRunLoopMode" />
      </Parameters>
      <Docs>
        <param name="runloop">The runloop on which to run.</param>
        <param name="mode">Modes in which the timer will be invoked.</param>
        <summary>Trigger timer events on the specified runloop for the specified modes.</summary>
        <remarks>
          <para>The mode parameter will determine when the event is sent. The NSRunLoop.NSDefaultRunLoopMode is not delivered during UI tracking events (like scrolling in a UIScrollbar). For getting those kinds of events use NSRunLoop.UITrackingRunLoopMode. Or use NSRunLoop.NSRunLoopCommonModes which covers both cases.  	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToRunLoop">
      <MemberSignature Language="C#" Value="public virtual void AddToRunLoop (MonoTouch.Foundation.NSRunLoop runloop, MonoTouch.Foundation.NSString mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddToRunLoop(class MonoTouch.Foundation.NSRunLoop runloop, class MonoTouch.Foundation.NSString mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addToRunLoop:forMode:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runloop" Type="MonoTouch.Foundation.NSRunLoop" />
        <Parameter Name="mode" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="runloop">The runloop on which to run.</param>
        <param name="mode">Modes in which the timer will be invoked, one of the various NSString constants in <see cref="T:MonoTouch.Foundation.NSRunLoop" />.<para tool="nullallowed">This parameter can be <see langword="null" />.</para></param>
        <summary>Trigger timer events on the specified runloop for the specified modes (weakly typed parameters).</summary>
        <remarks>
          <para>You should use the strongly typed version if possible, as it prevents common errors.</para>
          <para>

	    The mode parameter will determine when the event is sent.
	    The NSRunLoop.NSDefaultRunLoopMode is not delivered during
	    UI tracking events (like scrolling in a UIScrollbar).  For
	    getting those kinds of events use
	    NSRunLoop.UITrackingRunLoopMode.  Or use
	    NSRunLoop.NSRunLoopCommonModes which covers both cases.

	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create" apistyle="classic">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreAnimation.CADisplayLink Create (MonoTouch.Foundation.NSAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreAnimation.CADisplayLink Create(class MonoTouch.Foundation.NSAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreAnimation.CADisplayLink</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="MonoTouch.Foundation.NSAction" />
      </Parameters>
      <Docs>
        <param name="action">Method to invoke on each screen refresh.</param>
        <summary>Registers the delegate to be invoked every time the display is about to be updated.</summary>
        <returns>The DisplayLink object that will invoke the specified method on each screen update.</returns>
        <remarks>
          <para>
	    Once you create the display link, you must add the handler to the runloop.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create" apistyle="unified">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreAnimation.CADisplayLink Create (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreAnimation.CADisplayLink Create(class System.Action action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreAnimation.CADisplayLink</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">Method to invoke on each screen refresh.</param>
        <summary>Registers the delegate to be invoked every time the display is about to be updated.</summary>
        <returns>The DisplayLink object that will invoke the specified method on each screen update.</returns>
        <remarks>Once you create the display link, you must add the handler to the runloop.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreAnimation.CADisplayLink Create (MonoTouch.Foundation.NSObject target, MonoTouch.ObjCRuntime.Selector sel);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreAnimation.CADisplayLink Create(class MonoTouch.Foundation.NSObject target, class MonoTouch.ObjCRuntime.Selector sel) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("displayLinkWithTarget:selector:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreAnimation.CADisplayLink</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="sel" Type="MonoTouch.ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="target">Target object to invoke the selector on.</param>
        <param name="sel">Selector to invoke.</param>
        <summary>Objective-C style registeration of the method to be invoked every time the display is about to be updated.</summary>
        <returns>The DisplayLink object that will invoke the specified method on each screen update.</returns>
        <remarks>
          <para>
	    With C# you can use the Create overload that takes a NSAction as it can be used with lambdas.
	  </para>
          <para>
	    Once you create the display link, you must add the handler to the runloop.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public virtual double Duration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Duration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("duration")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The time between screen refreshes.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FrameInterval">
      <MemberSignature Language="C#" Value="public virtual int FrameInterval { get; set; }" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FrameInterval" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nint FrameInterval { get; set; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint FrameInterval" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("frameInterval")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setFrameInterval:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Int32</ReturnType>
        <ReturnType apistyle="unified">System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of times that the display output should be updated before your code is invoked. </summary>
        <value>To be added.</value>
        <remarks>
          <para>
	    The default value is one, which means that your code is
	    invoked once each time that a screen refresh will take
	    place.  If you set this value to two, then your method will
	    only be invoked half the time (once every two frames) and so
	    on.
	  </para>
          <para>
	    In general, you should not skip frames.  If your software
	    can not keep up with the frame rate, it is better to
	    increase the frame interval and deliver a consistent set
	    of updates.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public virtual void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invalidate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("invalidate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Terminates the connection between CoreAnimation and your code.     This removes the CADisplayLink from all run loops.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Paused">
      <MemberSignature Language="C#" Value="public virtual bool Paused { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Paused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isPaused")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setPaused:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the notifications between the animation loop and your code are suspended.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromRunLoop">
      <MemberSignature Language="C#" Value="public virtual void RemoveFromRunLoop (MonoTouch.Foundation.NSRunLoop runloop, MonoTouch.Foundation.NSString mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveFromRunLoop(class MonoTouch.Foundation.NSRunLoop runloop, class MonoTouch.Foundation.NSString mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeFromRunLoop:forMode:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runloop" Type="MonoTouch.Foundation.NSRunLoop" />
        <Parameter Name="mode" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="runloop">To be added.</param>
        <param name="mode">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timestamp">
      <MemberSignature Language="C#" Value="public virtual double Timestamp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Timestamp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("timestamp")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Timestamp for the last frame displayed.</summary>
        <value>
        </value>
        <remarks>
	  Use this value to compute which date should be displayed next.
	</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
