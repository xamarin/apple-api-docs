<Type Name="CVOpenGLESTexture" FullName="CoreVideo.CVOpenGLESTexture">
  <TypeSignature Language="C#" Value="public class CVOpenGLESTexture : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CVOpenGLESTexture extends System.Object implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>OpenTK-1.0</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>This type exposes a CoreVideo buffer as an OpenGL texture.</summary>
    <remarks>
      <para>This type is defined in the <c>OpenTK.dll</c> assembly.</para>
      <para>You create these buffers using the <see cref="M:CoreVideo.CVOpenGLESTextureCache.TextureFromImage (CoreVideo.CVImageBuffer imageBuffer, bool isTexture2d, OpenTK.Graphics.ES20.All internalFormat, int width, int height, OpenTK.Graphics.ES20.All pixelFormat, OpenTK.Graphics.ES20.DataType pixelType, int planeIndex, out CoreVideo.CVReturn errorCode)" /> method.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the texture.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
        </param>
        <summary>Releases the texture, used by subclasses.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~CVOpenGLESTexture ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finalizer, in case the user does not call Dispose explicitly.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCleanTexCoords">
      <MemberSignature Language="C#" Value="public void GetCleanTexCoords (out float[] lowerLeft, out float[] lowerRight, out float[] upperRight, out float[] upperLeft);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetCleanTexCoords(float32[] lowerLeft, float32[] lowerRight, float32[] upperRight, float32[] upperLeft) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowerLeft" Type="System.Single[]&amp;" RefType="out" />
        <Parameter Name="lowerRight" Type="System.Single[]&amp;" RefType="out" />
        <Parameter Name="upperRight" Type="System.Single[]&amp;" RefType="out" />
        <Parameter Name="upperLeft" Type="System.Single[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="lowerLeft">To be added.</param>
        <param name="lowerRight">To be added.</param>
        <param name="upperRight">To be added.</param>
        <param name="upperLeft">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFlipped">
      <MemberSignature Language="C#" Value="public bool IsFlipped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFlipped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public int Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The OpenGL Target Name of the texture</summary>
        <value>
        </value>
        <remarks>
          <example>
            <code lang="C#"><![CDATA[
var lumaTexture = videoTextureCache.TextureFromImage (
	pixelBuffer, true, Type, textureSize.Width, textureSize.Height, Type,
	DataType.UnsignedByte, 0, out status);
GL.BindTexture ((All)lumaTexture.Target, lumaTexture.Name);
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public OpenTK.Graphics.ES20.TextureTarget Target { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype OpenTK.Graphics.ES20.TextureTarget Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>OpenTK.Graphics.ES20.TextureTarget</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The OpenGL target for the texture.</summary>
        <value>
        </value>
        <remarks>
          <example>
            <code lang="C#"><![CDATA[
var lumaTexture = videoTextureCache.TextureFromImage (
	pixelBuffer, true, Type, textureSize.Width, textureSize.Height, Type,
	DataType.UnsignedByte, 0, out status);
GL.BindTexture ((All)lumaTexture.Target, lumaTexture.Name);
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
