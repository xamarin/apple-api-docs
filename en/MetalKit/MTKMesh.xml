<Type Name="MTKMesh" FullName="MetalKit.MTKMesh">
  <TypeSignature Language="C#" Value="public class MTKMesh : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MTKMesh extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:MetalKit.MTKMesh" />
  <TypeSignature Language="F#" Value="type MTKMesh = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("MTKMesh", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Holds vertex data for rendering with Metal.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/MetalKit/Reference/MTKMesh_ClassReference/index.html">Apple documentation for <c>MTKMesh</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MTKMesh (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKMesh.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new MetalKit.MTKMesh : Foundation.NSObjectFlag -&gt; MetalKit.MTKMesh" Usage="new MetalKit.MTKMesh t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal MTKMesh (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKMesh.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new MetalKit.MTKMesh : nativeint -&gt; MetalKit.MTKMesh" Usage="new MetalKit.MTKMesh handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MTKMesh (ModelIO.MDLMesh mesh, Metal.IMTLDevice device, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class ModelIO.MDLMesh mesh, class Metal.IMTLDevice device, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKMesh.#ctor(ModelIO.MDLMesh,Metal.IMTLDevice,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="new MetalKit.MTKMesh : ModelIO.MDLMesh * Metal.IMTLDevice *  -&gt; MetalKit.MTKMesh" Usage="new MetalKit.MTKMesh (mesh, device, error)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithMesh:device:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="mesh" Type="ModelIO.MDLMesh" />
        <Parameter Name="device" Type="Metal.IMTLDevice" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="mesh">To be added.</param>
        <param name="device">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Creates a new Metal Kit mesh from the supplied Model IO mesh.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:MetalKit.MTKMesh.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="MetalKit.MTKMesh.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromAsset">
      <MemberSignature Language="C#" Value="public static MetalKit.MTKMesh[] FromAsset (ModelIO.MDLAsset asset, Metal.IMTLDevice device, out ModelIO.MDLMesh[] sourceMeshes, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MetalKit.MTKMesh[] FromAsset(class ModelIO.MDLAsset asset, class Metal.IMTLDevice device, [out] class ModelIO.MDLMesh[]&amp; sourceMeshes, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKMesh.FromAsset(ModelIO.MDLAsset,Metal.IMTLDevice,ModelIO.MDLMesh[]@,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="static member FromAsset : ModelIO.MDLAsset * Metal.IMTLDevice *  *  -&gt; MetalKit.MTKMesh[]" Usage="MetalKit.MTKMesh.FromAsset (asset, device, sourceMeshes, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MetalKit.MTKMesh[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asset" Type="ModelIO.MDLAsset" />
        <Parameter Name="device" Type="Metal.IMTLDevice" />
        <Parameter Name="sourceMeshes" Type="ModelIO.MDLMesh[]" RefType="out" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="asset">To be added.</param>
        <param name="device">To be added.</param>
        <param name="sourceMeshes">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Creates and returns a new Metal Kit mesh from the supplied Model IO asset.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:MetalKit.MTKMesh.Name" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="MetalKit.MTKMesh.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("name")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setName:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a descriptive name for the mesh.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Submeshes">
      <MemberSignature Language="C#" Value="public virtual MetalKit.MTKSubmesh[] Submeshes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MetalKit.MTKSubmesh[] Submeshes" />
      <MemberSignature Language="DocId" Value="P:MetalKit.MTKMesh.Submeshes" />
      <MemberSignature Language="F#" Value="member this.Submeshes : MetalKit.MTKSubmesh[]" Usage="MetalKit.MTKMesh.Submeshes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("submeshes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MetalKit.MTKSubmesh[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an array that contains the submeshes of the mesh.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VertexBuffers">
      <MemberSignature Language="C#" Value="public virtual MetalKit.MTKMeshBuffer[] VertexBuffers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MetalKit.MTKMeshBuffer[] VertexBuffers" />
      <MemberSignature Language="DocId" Value="P:MetalKit.MTKMesh.VertexBuffers" />
      <MemberSignature Language="F#" Value="member this.VertexBuffers : MetalKit.MTKMeshBuffer[]" Usage="MetalKit.MTKMesh.VertexBuffers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("vertexBuffers")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MetalKit.MTKMeshBuffer[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an array that contains the vertex buffers for the mesh.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VertexCount">
      <MemberSignature Language="C#" Value="public virtual nuint VertexCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint VertexCount" />
      <MemberSignature Language="DocId" Value="P:MetalKit.MTKMesh.VertexCount" />
      <MemberSignature Language="F#" Value="member this.VertexCount : nuint" Usage="MetalKit.MTKMesh.VertexCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("vertexCount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of vertices in the mesh.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VertexDescriptor">
      <MemberSignature Language="C#" Value="public virtual ModelIO.MDLVertexDescriptor VertexDescriptor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ModelIO.MDLVertexDescriptor VertexDescriptor" />
      <MemberSignature Language="DocId" Value="P:MetalKit.MTKMesh.VertexDescriptor" />
      <MemberSignature Language="F#" Value="member this.VertexDescriptor : ModelIO.MDLVertexDescriptor" Usage="MetalKit.MTKMesh.VertexDescriptor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("vertexDescriptor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLVertexDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Model IO vertex layout descriptor.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
