<Type Name="MTKTextureLoader" FullName="MetalKit.MTKTextureLoader">
  <TypeSignature Language="C#" Value="public class MTKTextureLoader : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MTKTextureLoader extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:MetalKit.MTKTextureLoader" />
  <TypeSignature Language="F#" Value="type MTKTextureLoader = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("MTKTextureLoader", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Creates <see cref="T:Metal.IMTLTexture" /> objects from common image formats.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/MetalKit/Reference/MTKTextureLoader_ClassReference/index.html">Apple documentation for <c>MTKTextureLoader</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MTKTextureLoader (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new MetalKit.MTKTextureLoader : Foundation.NSObjectFlag -&gt; MetalKit.MTKTextureLoader" Usage="new MetalKit.MTKTextureLoader t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MTKTextureLoader (Metal.IMTLDevice device);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Metal.IMTLDevice device) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.#ctor(Metal.IMTLDevice)" />
      <MemberSignature Language="F#" Value="new MetalKit.MTKTextureLoader : Metal.IMTLDevice -&gt; MetalKit.MTKTextureLoader" Usage="new MetalKit.MTKTextureLoader device" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithDevice:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="device" Type="Metal.IMTLDevice" />
      </Parameters>
      <Docs>
        <param name="device">To be added.</param>
        <summary>Creates a new texture loader for the specified <paramref name="device" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal MTKTextureLoader (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new MetalKit.MTKTextureLoader : nativeint -&gt; MetalKit.MTKTextureLoader" Usage="new MetalKit.MTKTextureLoader handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:MetalKit.MTKTextureLoader.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="MetalKit.MTKTextureLoader.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Device">
      <MemberSignature Language="C#" Value="public virtual Metal.IMTLDevice Device { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Metal.IMTLDevice Device" />
      <MemberSignature Language="DocId" Value="P:MetalKit.MTKTextureLoader.Device" />
      <MemberSignature Language="F#" Value="member this.Device : Metal.IMTLDevice" Usage="MetalKit.MTKTextureLoader.Device" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("device")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the device that is used to create textures.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromCGImage">
      <MemberSignature Language="C#" Value="public Metal.IMTLTexture FromCGImage (CoreGraphics.CGImage cgImage, MetalKit.MTKTextureLoaderOptions options, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Metal.IMTLTexture FromCGImage(class CoreGraphics.CGImage cgImage, class MetalKit.MTKTextureLoaderOptions options, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromCGImage(CoreGraphics.CGImage,MetalKit.MTKTextureLoaderOptions,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="member this.FromCGImage : CoreGraphics.CGImage * MetalKit.MTKTextureLoaderOptions *  -&gt; Metal.IMTLTexture" Usage="mTKTextureLoader.FromCGImage (cgImage, options, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLTexture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cgImage" Type="CoreGraphics.CGImage" />
        <Parameter Name="options" Type="MetalKit.MTKTextureLoaderOptions" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="cgImage">A Core Graphics image.</param>
        <param name="options">Options for loading the texture data.</param>
        <param name="error">Contains the error, if one occurred.</param>
        <summary>Creates and returns a Metal texture from the specified Core Graphics image and options.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromCGImage">
      <MemberSignature Language="C#" Value="public void FromCGImage (CoreGraphics.CGImage cgImage, MetalKit.MTKTextureLoaderOptions options, MetalKit.MTKTextureLoaderCallback completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FromCGImage(class CoreGraphics.CGImage cgImage, class MetalKit.MTKTextureLoaderOptions options, class MetalKit.MTKTextureLoaderCallback completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromCGImage(CoreGraphics.CGImage,MetalKit.MTKTextureLoaderOptions,MetalKit.MTKTextureLoaderCallback)" />
      <MemberSignature Language="F#" Value="member this.FromCGImage : CoreGraphics.CGImage * MetalKit.MTKTextureLoaderOptions * MetalKit.MTKTextureLoaderCallback -&gt; unit" Usage="mTKTextureLoader.FromCGImage (cgImage, options, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cgImage" Type="CoreGraphics.CGImage" />
        <Parameter Name="options" Type="MetalKit.MTKTextureLoaderOptions" />
        <Parameter Name="completionHandler" Type="MetalKit.MTKTextureLoaderCallback">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDMTKTextureLoaderCallback))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="cgImage">A Core Graphics image.</param>
        <param name="options">Options for loading the texture data.</param>
        <param name="completionHandler">A handler to run after the texture is loaded.</param>
        <summary>Creates and returns a Metal texture from the specified Core Graphics image and options, and runs a completion handler when it completes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromCGImageAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Metal.IMTLTexture&gt; FromCGImageAsync (CoreGraphics.CGImage cgImage, MetalKit.MTKTextureLoaderOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Metal.IMTLTexture&gt; FromCGImageAsync(class CoreGraphics.CGImage cgImage, class MetalKit.MTKTextureLoaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromCGImageAsync(CoreGraphics.CGImage,MetalKit.MTKTextureLoaderOptions)" />
      <MemberSignature Language="F#" Value="member this.FromCGImageAsync : CoreGraphics.CGImage * MetalKit.MTKTextureLoaderOptions -&gt; System.Threading.Tasks.Task&lt;Metal.IMTLTexture&gt;" Usage="mTKTextureLoader.FromCGImageAsync (cgImage, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Metal.IMTLTexture&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cgImage" Type="CoreGraphics.CGImage" />
        <Parameter Name="options" Type="MetalKit.MTKTextureLoaderOptions" />
      </Parameters>
      <Docs>
        <param name="cgImage">A Core Graphics image.</param>
        <param name="options">Options for loading the texture data.</param>
        <summary>Asynchronously creates a Metal texture from the specified Core Graphics image and options, and returns a task that provides the resulting image.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromData">
      <MemberSignature Language="C#" Value="public Metal.IMTLTexture FromData (Foundation.NSData data, MetalKit.MTKTextureLoaderOptions options, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Metal.IMTLTexture FromData(class Foundation.NSData data, class MetalKit.MTKTextureLoaderOptions options, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromData(Foundation.NSData,MetalKit.MTKTextureLoaderOptions,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="member this.FromData : Foundation.NSData * MetalKit.MTKTextureLoaderOptions *  -&gt; Metal.IMTLTexture" Usage="mTKTextureLoader.FromData (data, options, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLTexture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Foundation.NSData" />
        <Parameter Name="options" Type="MetalKit.MTKTextureLoaderOptions" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="data">The texture data.</param>
        <param name="options">Options for loading the texture data.</param>
        <param name="error">Contains the error, if one occurred.</param>
        <summary>Creates and returns a Metal texture from the specified image data and options.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromData">
      <MemberSignature Language="C#" Value="public void FromData (Foundation.NSData data, MetalKit.MTKTextureLoaderOptions options, MetalKit.MTKTextureLoaderCallback completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FromData(class Foundation.NSData data, class MetalKit.MTKTextureLoaderOptions options, class MetalKit.MTKTextureLoaderCallback completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromData(Foundation.NSData,MetalKit.MTKTextureLoaderOptions,MetalKit.MTKTextureLoaderCallback)" />
      <MemberSignature Language="F#" Value="member this.FromData : Foundation.NSData * MetalKit.MTKTextureLoaderOptions * MetalKit.MTKTextureLoaderCallback -&gt; unit" Usage="mTKTextureLoader.FromData (data, options, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Foundation.NSData" />
        <Parameter Name="options" Type="MetalKit.MTKTextureLoaderOptions" />
        <Parameter Name="completionHandler" Type="MetalKit.MTKTextureLoaderCallback">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDMTKTextureLoaderCallback))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data">The texture data.</param>
        <param name="options">Options for loading the texture data.</param>
        <param name="completionHandler">A handler to run after the texture is loaded.</param>
        <summary>Creates and returns a Metal texture from the specified image data and options, and runs a completion handler when it completes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromDataAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Metal.IMTLTexture&gt; FromDataAsync (Foundation.NSData data, MetalKit.MTKTextureLoaderOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Metal.IMTLTexture&gt; FromDataAsync(class Foundation.NSData data, class MetalKit.MTKTextureLoaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromDataAsync(Foundation.NSData,MetalKit.MTKTextureLoaderOptions)" />
      <MemberSignature Language="F#" Value="member this.FromDataAsync : Foundation.NSData * MetalKit.MTKTextureLoaderOptions -&gt; System.Threading.Tasks.Task&lt;Metal.IMTLTexture&gt;" Usage="mTKTextureLoader.FromDataAsync (data, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Metal.IMTLTexture&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Foundation.NSData" />
        <Parameter Name="options" Type="MetalKit.MTKTextureLoaderOptions" />
      </Parameters>
      <Docs>
        <param name="data">The texture data.</param>
        <param name="options">Options for loading the texture data.</param>
        <summary>Creates a Metal texture from the specified image data and options, returning a task that provides the resulting image.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromName">
      <MemberSignature Language="C#" Value="public virtual Metal.IMTLTexture FromName (string name, nfloat scaleFactor, Foundation.NSBundle bundle, Foundation.NSDictionary options, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Metal.IMTLTexture FromName(string name, valuetype System.nfloat scaleFactor, class Foundation.NSBundle bundle, class Foundation.NSDictionary options, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromName(System.String,System.nfloat,Foundation.NSBundle,Foundation.NSDictionary,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member FromName : string * nfloat * Foundation.NSBundle * Foundation.NSDictionary *  -&gt; Metal.IMTLTexture&#xA;override this.FromName : string * nfloat * Foundation.NSBundle * Foundation.NSDictionary *  -&gt; Metal.IMTLTexture" Usage="mTKTextureLoader.FromName (name, scaleFactor, bundle, options, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("newTextureWithName:scaleFactor:bundle:options:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLTexture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scaleFactor" Type="System.nfloat" />
        <Parameter Name="bundle" Type="Foundation.NSBundle" />
        <Parameter Name="options" Type="Foundation.NSDictionary" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="scaleFactor">To be added.</param>
        <param name="bundle">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="options">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromName">
      <MemberSignature Language="C#" Value="public virtual void FromName (string name, nfloat scaleFactor, Foundation.NSBundle bundle, Foundation.NSDictionary options, MetalKit.MTKTextureLoaderCallback completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromName(string name, valuetype System.nfloat scaleFactor, class Foundation.NSBundle bundle, class Foundation.NSDictionary options, class MetalKit.MTKTextureLoaderCallback completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromName(System.String,System.nfloat,Foundation.NSBundle,Foundation.NSDictionary,MetalKit.MTKTextureLoaderCallback)" />
      <MemberSignature Language="F#" Value="abstract member FromName : string * nfloat * Foundation.NSBundle * Foundation.NSDictionary * MetalKit.MTKTextureLoaderCallback -&gt; unit&#xA;override this.FromName : string * nfloat * Foundation.NSBundle * Foundation.NSDictionary * MetalKit.MTKTextureLoaderCallback -&gt; unit" Usage="mTKTextureLoader.FromName (name, scaleFactor, bundle, options, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("newTextureWithName:scaleFactor:bundle:options:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scaleFactor" Type="System.nfloat" />
        <Parameter Name="bundle" Type="Foundation.NSBundle" />
        <Parameter Name="options" Type="Foundation.NSDictionary" />
        <Parameter Name="completionHandler" Type="MetalKit.MTKTextureLoaderCallback">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDMTKTextureLoaderCallback))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="scaleFactor">To be added.</param>
        <param name="bundle">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="options">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="completionHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromName">
      <MemberSignature Language="C#" Value="public Metal.IMTLTexture FromName (string name, nfloat scaleFactor, Foundation.NSBundle bundle, MetalKit.MTKTextureLoaderOptions options, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Metal.IMTLTexture FromName(string name, valuetype System.nfloat scaleFactor, class Foundation.NSBundle bundle, class MetalKit.MTKTextureLoaderOptions options, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromName(System.String,System.nfloat,Foundation.NSBundle,MetalKit.MTKTextureLoaderOptions,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="member this.FromName : string * nfloat * Foundation.NSBundle * MetalKit.MTKTextureLoaderOptions *  -&gt; Metal.IMTLTexture" Usage="mTKTextureLoader.FromName (name, scaleFactor, bundle, options, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLTexture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scaleFactor" Type="System.nfloat" />
        <Parameter Name="bundle" Type="Foundation.NSBundle" />
        <Parameter Name="options" Type="MetalKit.MTKTextureLoaderOptions" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="scaleFactor">To be added.</param>
        <param name="bundle">To be added.</param>
        <param name="options">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromName">
      <MemberSignature Language="C#" Value="public void FromName (string name, nfloat scaleFactor, Foundation.NSBundle bundle, MetalKit.MTKTextureLoaderOptions options, MetalKit.MTKTextureLoaderCallback completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FromName(string name, valuetype System.nfloat scaleFactor, class Foundation.NSBundle bundle, class MetalKit.MTKTextureLoaderOptions options, class MetalKit.MTKTextureLoaderCallback completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromName(System.String,System.nfloat,Foundation.NSBundle,MetalKit.MTKTextureLoaderOptions,MetalKit.MTKTextureLoaderCallback)" />
      <MemberSignature Language="F#" Value="member this.FromName : string * nfloat * Foundation.NSBundle * MetalKit.MTKTextureLoaderOptions * MetalKit.MTKTextureLoaderCallback -&gt; unit" Usage="mTKTextureLoader.FromName (name, scaleFactor, bundle, options, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scaleFactor" Type="System.nfloat" />
        <Parameter Name="bundle" Type="Foundation.NSBundle" />
        <Parameter Name="options" Type="MetalKit.MTKTextureLoaderOptions" />
        <Parameter Name="completionHandler" Type="MetalKit.MTKTextureLoaderCallback">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDMTKTextureLoaderCallback))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="scaleFactor">To be added.</param>
        <param name="bundle">To be added.</param>
        <param name="options">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Metal.IMTLTexture&gt; FromNameAsync (string name, nfloat scaleFactor, Foundation.NSBundle bundle, Foundation.NSDictionary options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Metal.IMTLTexture&gt; FromNameAsync(string name, valuetype System.nfloat scaleFactor, class Foundation.NSBundle bundle, class Foundation.NSDictionary options) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromNameAsync(System.String,System.nfloat,Foundation.NSBundle,Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="abstract member FromNameAsync : string * nfloat * Foundation.NSBundle * Foundation.NSDictionary -&gt; System.Threading.Tasks.Task&lt;Metal.IMTLTexture&gt;&#xA;override this.FromNameAsync : string * nfloat * Foundation.NSBundle * Foundation.NSDictionary -&gt; System.Threading.Tasks.Task&lt;Metal.IMTLTexture&gt;" Usage="mTKTextureLoader.FromNameAsync (name, scaleFactor, bundle, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Metal.IMTLTexture&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scaleFactor" Type="System.nfloat" />
        <Parameter Name="bundle" Type="Foundation.NSBundle" />
        <Parameter Name="options" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="scaleFactor">To be added.</param>
        <param name="bundle">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>
          <para>A task that represents the asynchronous FromName operation.   The value of the TResult parameter is a System.nfloat.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromNameAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Metal.IMTLTexture&gt; FromNameAsync (string name, nfloat scaleFactor, Foundation.NSBundle bundle, MetalKit.MTKTextureLoaderOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Metal.IMTLTexture&gt; FromNameAsync(string name, valuetype System.nfloat scaleFactor, class Foundation.NSBundle bundle, class MetalKit.MTKTextureLoaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromNameAsync(System.String,System.nfloat,Foundation.NSBundle,MetalKit.MTKTextureLoaderOptions)" />
      <MemberSignature Language="F#" Value="member this.FromNameAsync : string * nfloat * Foundation.NSBundle * MetalKit.MTKTextureLoaderOptions -&gt; System.Threading.Tasks.Task&lt;Metal.IMTLTexture&gt;" Usage="mTKTextureLoader.FromNameAsync (name, scaleFactor, bundle, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Metal.IMTLTexture&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scaleFactor" Type="System.nfloat" />
        <Parameter Name="bundle" Type="Foundation.NSBundle" />
        <Parameter Name="options" Type="MetalKit.MTKTextureLoaderOptions" />
      </Parameters>
      <Docs>
        <param name="name">The asset catalog name of the image.</param>
        <param name="scaleFactor">The scale factor to use.</param>
        <param name="bundle">The bundle that contains the image data.</param>
        <param name="options">Options for loading the texture data.</param>
        <summary>Creates a new Metal texture with the specified name and options, returning a task that provides the resulting image.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromNames">
      <MemberSignature Language="C#" Value="public virtual void FromNames (string[] names, nfloat scaleFactor, Foundation.NSBundle bundle, Foundation.NSDictionary options, MetalKit.MTKTextureLoaderArrayCallback completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromNames(string[] names, valuetype System.nfloat scaleFactor, class Foundation.NSBundle bundle, class Foundation.NSDictionary options, class MetalKit.MTKTextureLoaderArrayCallback completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromNames(System.String[],System.nfloat,Foundation.NSBundle,Foundation.NSDictionary,MetalKit.MTKTextureLoaderArrayCallback)" />
      <MemberSignature Language="F#" Value="abstract member FromNames : string[] * nfloat * Foundation.NSBundle * Foundation.NSDictionary * MetalKit.MTKTextureLoaderArrayCallback -&gt; unit&#xA;override this.FromNames : string[] * nfloat * Foundation.NSBundle * Foundation.NSDictionary * MetalKit.MTKTextureLoaderArrayCallback -&gt; unit" Usage="mTKTextureLoader.FromNames (names, scaleFactor, bundle, options, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("newTexturesWithNames:scaleFactor:bundle:options:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.String[]" />
        <Parameter Name="scaleFactor" Type="System.nfloat" />
        <Parameter Name="bundle" Type="Foundation.NSBundle" />
        <Parameter Name="options" Type="Foundation.NSDictionary" />
        <Parameter Name="completionHandler" Type="MetalKit.MTKTextureLoaderArrayCallback">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDMTKTextureLoaderArrayCallback))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="names">To be added.</param>
        <param name="scaleFactor">To be added.</param>
        <param name="bundle">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="options">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="completionHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromNames">
      <MemberSignature Language="C#" Value="public void FromNames (string[] names, nfloat scaleFactor, Foundation.NSBundle bundle, MetalKit.MTKTextureLoaderOptions options, MetalKit.MTKTextureLoaderArrayCallback completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FromNames(string[] names, valuetype System.nfloat scaleFactor, class Foundation.NSBundle bundle, class MetalKit.MTKTextureLoaderOptions options, class MetalKit.MTKTextureLoaderArrayCallback completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromNames(System.String[],System.nfloat,Foundation.NSBundle,MetalKit.MTKTextureLoaderOptions,MetalKit.MTKTextureLoaderArrayCallback)" />
      <MemberSignature Language="F#" Value="member this.FromNames : string[] * nfloat * Foundation.NSBundle * MetalKit.MTKTextureLoaderOptions * MetalKit.MTKTextureLoaderArrayCallback -&gt; unit" Usage="mTKTextureLoader.FromNames (names, scaleFactor, bundle, options, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.String[]" />
        <Parameter Name="scaleFactor" Type="System.nfloat" />
        <Parameter Name="bundle" Type="Foundation.NSBundle" />
        <Parameter Name="options" Type="MetalKit.MTKTextureLoaderOptions" />
        <Parameter Name="completionHandler" Type="MetalKit.MTKTextureLoaderArrayCallback">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDMTKTextureLoaderArrayCallback))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="names">To be added.</param>
        <param name="scaleFactor">To be added.</param>
        <param name="bundle">To be added.</param>
        <param name="options">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromNamesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Metal.IMTLTexture[]&gt; FromNamesAsync (string[] names, nfloat scaleFactor, Foundation.NSBundle bundle, Foundation.NSDictionary options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Metal.IMTLTexture[]&gt; FromNamesAsync(string[] names, valuetype System.nfloat scaleFactor, class Foundation.NSBundle bundle, class Foundation.NSDictionary options) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromNamesAsync(System.String[],System.nfloat,Foundation.NSBundle,Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="abstract member FromNamesAsync : string[] * nfloat * Foundation.NSBundle * Foundation.NSDictionary -&gt; System.Threading.Tasks.Task&lt;Metal.IMTLTexture[]&gt;&#xA;override this.FromNamesAsync : string[] * nfloat * Foundation.NSBundle * Foundation.NSDictionary -&gt; System.Threading.Tasks.Task&lt;Metal.IMTLTexture[]&gt;" Usage="mTKTextureLoader.FromNamesAsync (names, scaleFactor, bundle, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Metal.IMTLTexture[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.String[]" />
        <Parameter Name="scaleFactor" Type="System.nfloat" />
        <Parameter Name="bundle" Type="Foundation.NSBundle" />
        <Parameter Name="options" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="names">To be added.</param>
        <param name="scaleFactor">To be added.</param>
        <param name="bundle">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>
          <para>A task that represents the asynchronous FromNames operation.   The value of the TResult parameter is a System.nfloat.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromNamesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Metal.IMTLTexture[]&gt; FromNamesAsync (string[] names, nfloat scaleFactor, Foundation.NSBundle bundle, MetalKit.MTKTextureLoaderOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Metal.IMTLTexture[]&gt; FromNamesAsync(string[] names, valuetype System.nfloat scaleFactor, class Foundation.NSBundle bundle, class MetalKit.MTKTextureLoaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromNamesAsync(System.String[],System.nfloat,Foundation.NSBundle,MetalKit.MTKTextureLoaderOptions)" />
      <MemberSignature Language="F#" Value="member this.FromNamesAsync : string[] * nfloat * Foundation.NSBundle * MetalKit.MTKTextureLoaderOptions -&gt; System.Threading.Tasks.Task&lt;Metal.IMTLTexture[]&gt;" Usage="mTKTextureLoader.FromNamesAsync (names, scaleFactor, bundle, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Metal.IMTLTexture[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.String[]" />
        <Parameter Name="scaleFactor" Type="System.nfloat" />
        <Parameter Name="bundle" Type="Foundation.NSBundle" />
        <Parameter Name="options" Type="MetalKit.MTKTextureLoaderOptions" />
      </Parameters>
      <Docs>
        <param name="names">An array of asset catalog names for images to load.</param>
        <param name="scaleFactor">The scale factor to use.</param>
        <param name="bundle">The bundle that contains the image data.</param>
        <param name="options">Options for loading the texture data.</param>
        <summary>Creates an array of new Metal texture with the specified  and options, returning a task that provides the resulting array.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromTexture">
      <MemberSignature Language="C#" Value="public virtual Metal.IMTLTexture FromTexture (ModelIO.MDLTexture texture, Foundation.NSDictionary options, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Metal.IMTLTexture FromTexture(class ModelIO.MDLTexture texture, class Foundation.NSDictionary options, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromTexture(ModelIO.MDLTexture,Foundation.NSDictionary,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member FromTexture : ModelIO.MDLTexture * Foundation.NSDictionary *  -&gt; Metal.IMTLTexture&#xA;override this.FromTexture : ModelIO.MDLTexture * Foundation.NSDictionary *  -&gt; Metal.IMTLTexture" Usage="mTKTextureLoader.FromTexture (texture, options, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("newTextureWithMDLTexture:options:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLTexture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="texture" Type="ModelIO.MDLTexture" />
        <Parameter Name="options" Type="Foundation.NSDictionary" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="texture">The texture to load.</param>
        <param name="options">
          <para>Options for loading the texture data</para>.
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para></param>
        <param name="error">Contains the error, if one occurred.</param>
        <summary>Creates a new Metal texture from the specified <paramref name="texture" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromTexture">
      <MemberSignature Language="C#" Value="public virtual void FromTexture (ModelIO.MDLTexture texture, Foundation.NSDictionary options, MetalKit.MTKTextureLoaderCallback completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromTexture(class ModelIO.MDLTexture texture, class Foundation.NSDictionary options, class MetalKit.MTKTextureLoaderCallback completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromTexture(ModelIO.MDLTexture,Foundation.NSDictionary,MetalKit.MTKTextureLoaderCallback)" />
      <MemberSignature Language="F#" Value="abstract member FromTexture : ModelIO.MDLTexture * Foundation.NSDictionary * MetalKit.MTKTextureLoaderCallback -&gt; unit&#xA;override this.FromTexture : ModelIO.MDLTexture * Foundation.NSDictionary * MetalKit.MTKTextureLoaderCallback -&gt; unit" Usage="mTKTextureLoader.FromTexture (texture, options, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("newTextureWithMDLTexture:options:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="texture" Type="ModelIO.MDLTexture" />
        <Parameter Name="options" Type="Foundation.NSDictionary" />
        <Parameter Name="completionHandler" Type="MetalKit.MTKTextureLoaderCallback">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDMTKTextureLoaderCallback))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="texture">The texture to load.</param>
        <param name="options">
          <para>Options for loading the texture data</para>.
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para></param>
        <param name="completionHandler">A handler to run after the texture is loaded.</param>
        <summary>Creates a new Metal texture from the specified <paramref name="texture" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromTexture">
      <MemberSignature Language="C#" Value="public Metal.IMTLTexture FromTexture (ModelIO.MDLTexture texture, MetalKit.MTKTextureLoaderOptions options, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Metal.IMTLTexture FromTexture(class ModelIO.MDLTexture texture, class MetalKit.MTKTextureLoaderOptions options, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromTexture(ModelIO.MDLTexture,MetalKit.MTKTextureLoaderOptions,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="member this.FromTexture : ModelIO.MDLTexture * MetalKit.MTKTextureLoaderOptions *  -&gt; Metal.IMTLTexture" Usage="mTKTextureLoader.FromTexture (texture, options, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLTexture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="texture" Type="ModelIO.MDLTexture" />
        <Parameter Name="options" Type="MetalKit.MTKTextureLoaderOptions" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="texture">The texture to load.</param>
        <param name="options">Options for loading the texture data.</param>
        <param name="error">Contains the error, if one occurred.</param>
        <summary>Creates a new Metal texture from the specified <paramref name="texture" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromTexture">
      <MemberSignature Language="C#" Value="public void FromTexture (ModelIO.MDLTexture texture, MetalKit.MTKTextureLoaderOptions options, MetalKit.MTKTextureLoaderCallback completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FromTexture(class ModelIO.MDLTexture texture, class MetalKit.MTKTextureLoaderOptions options, class MetalKit.MTKTextureLoaderCallback completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromTexture(ModelIO.MDLTexture,MetalKit.MTKTextureLoaderOptions,MetalKit.MTKTextureLoaderCallback)" />
      <MemberSignature Language="F#" Value="member this.FromTexture : ModelIO.MDLTexture * MetalKit.MTKTextureLoaderOptions * MetalKit.MTKTextureLoaderCallback -&gt; unit" Usage="mTKTextureLoader.FromTexture (texture, options, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="texture" Type="ModelIO.MDLTexture" />
        <Parameter Name="options" Type="MetalKit.MTKTextureLoaderOptions" />
        <Parameter Name="completionHandler" Type="MetalKit.MTKTextureLoaderCallback">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDMTKTextureLoaderCallback))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="texture">The texture to load.</param>
        <param name="options">Options for loading the texture data.</param>
        <param name="completionHandler">A handler to run after the texture is loaded.</param>
        <summary>Creates a new Metal texture from the specified <paramref name="texture" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromTextureAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Metal.IMTLTexture&gt; FromTextureAsync (ModelIO.MDLTexture texture, Foundation.NSDictionary options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Metal.IMTLTexture&gt; FromTextureAsync(class ModelIO.MDLTexture texture, class Foundation.NSDictionary options) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromTextureAsync(ModelIO.MDLTexture,Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="abstract member FromTextureAsync : ModelIO.MDLTexture * Foundation.NSDictionary -&gt; System.Threading.Tasks.Task&lt;Metal.IMTLTexture&gt;&#xA;override this.FromTextureAsync : ModelIO.MDLTexture * Foundation.NSDictionary -&gt; System.Threading.Tasks.Task&lt;Metal.IMTLTexture&gt;" Usage="mTKTextureLoader.FromTextureAsync (texture, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Metal.IMTLTexture&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="texture" Type="ModelIO.MDLTexture" />
        <Parameter Name="options" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="texture">The texture to load.</param>
        <param name="options">Options for loading the texture data.
          This parameter can be .</param>
        <summary>Creates a new Metal texture from the specified <paramref name="texture" />.</summary>
        <returns>
          <para>A task that represents the asynchronous FromTexture operation.   The value of the TResult parameter is a <see cref="MetalKit.MTKTextureLoaderCallback" />.</para>
        </returns>
        <remarks>
          <para copied="true">The FromTextureAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromTextureAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Metal.IMTLTexture&gt; FromTextureAsync (ModelIO.MDLTexture texture, MetalKit.MTKTextureLoaderOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Metal.IMTLTexture&gt; FromTextureAsync(class ModelIO.MDLTexture texture, class MetalKit.MTKTextureLoaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromTextureAsync(ModelIO.MDLTexture,MetalKit.MTKTextureLoaderOptions)" />
      <MemberSignature Language="F#" Value="member this.FromTextureAsync : ModelIO.MDLTexture * MetalKit.MTKTextureLoaderOptions -&gt; System.Threading.Tasks.Task&lt;Metal.IMTLTexture&gt;" Usage="mTKTextureLoader.FromTextureAsync (texture, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Metal.IMTLTexture&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="texture" Type="ModelIO.MDLTexture" />
        <Parameter Name="options" Type="MetalKit.MTKTextureLoaderOptions" />
      </Parameters>
      <Docs>
        <param name="texture">The texture to load.</param>
        <param name="options">Options for loading the texture data.</param>
        <summary>Creates a new Metal texture from the specified <paramref name="options" />, returning a task that provides the resulting texture.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUrl">
      <MemberSignature Language="C#" Value="public Metal.IMTLTexture FromUrl (Foundation.NSUrl url, MetalKit.MTKTextureLoaderOptions options, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Metal.IMTLTexture FromUrl(class Foundation.NSUrl url, class MetalKit.MTKTextureLoaderOptions options, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromUrl(Foundation.NSUrl,MetalKit.MTKTextureLoaderOptions,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="member this.FromUrl : Foundation.NSUrl * MetalKit.MTKTextureLoaderOptions *  -&gt; Metal.IMTLTexture" Usage="mTKTextureLoader.FromUrl (url, options, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLTexture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
        <Parameter Name="options" Type="MetalKit.MTKTextureLoaderOptions" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="url">The location of the image data to load.</param>
        <param name="options">Options for loading the texture data.</param>
        <param name="error">Contains the error, if one occurred.</param>
        <summary>Creates a new Metal texture from the resource at the specified <paramref name="url" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUrl">
      <MemberSignature Language="C#" Value="public void FromUrl (Foundation.NSUrl url, MetalKit.MTKTextureLoaderOptions options, MetalKit.MTKTextureLoaderCallback completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FromUrl(class Foundation.NSUrl url, class MetalKit.MTKTextureLoaderOptions options, class MetalKit.MTKTextureLoaderCallback completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromUrl(Foundation.NSUrl,MetalKit.MTKTextureLoaderOptions,MetalKit.MTKTextureLoaderCallback)" />
      <MemberSignature Language="F#" Value="member this.FromUrl : Foundation.NSUrl * MetalKit.MTKTextureLoaderOptions * MetalKit.MTKTextureLoaderCallback -&gt; unit" Usage="mTKTextureLoader.FromUrl (url, options, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
        <Parameter Name="options" Type="MetalKit.MTKTextureLoaderOptions" />
        <Parameter Name="completionHandler" Type="MetalKit.MTKTextureLoaderCallback">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDMTKTextureLoaderCallback))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="url">The location of the image data to load.</param>
        <param name="options">Options for loading the texture data.</param>
        <param name="completionHandler">A handler to run after the texture is loaded.</param>
        <summary>Creates a new Metal texture from the resource at the specified <paramref name="url" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUrlAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Metal.IMTLTexture&gt; FromUrlAsync (Foundation.NSUrl url, MetalKit.MTKTextureLoaderOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Metal.IMTLTexture&gt; FromUrlAsync(class Foundation.NSUrl url, class MetalKit.MTKTextureLoaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromUrlAsync(Foundation.NSUrl,MetalKit.MTKTextureLoaderOptions)" />
      <MemberSignature Language="F#" Value="member this.FromUrlAsync : Foundation.NSUrl * MetalKit.MTKTextureLoaderOptions -&gt; System.Threading.Tasks.Task&lt;Metal.IMTLTexture&gt;" Usage="mTKTextureLoader.FromUrlAsync (url, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Metal.IMTLTexture&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
        <Parameter Name="options" Type="MetalKit.MTKTextureLoaderOptions" />
      </Parameters>
      <Docs>
        <param name="url">The location of the image data to load.</param>
        <param name="options">Options for loading the texture data.</param>
        <summary>Creates a new Metal texture from the resource at the specified <paramref name="url" />, returning a task that provides the resulting texture.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUrls">
      <MemberSignature Language="C#" Value="public virtual Metal.IMTLTexture[] FromUrls (Foundation.NSUrl[] urls, Foundation.NSDictionary options, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Metal.IMTLTexture[] FromUrls(class Foundation.NSUrl[] urls, class Foundation.NSDictionary options, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromUrls(Foundation.NSUrl[],Foundation.NSDictionary,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member FromUrls : Foundation.NSUrl[] * Foundation.NSDictionary *  -&gt; Metal.IMTLTexture[]&#xA;override this.FromUrls : Foundation.NSUrl[] * Foundation.NSDictionary *  -&gt; Metal.IMTLTexture[]" Usage="mTKTextureLoader.FromUrls (urls, options, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("newTexturesWithContentsOfURLs:options:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLTexture[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urls" Type="Foundation.NSUrl[]" />
        <Parameter Name="options" Type="Foundation.NSDictionary" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="urls">The locations of the image data to load.</param>
        <param name="options">
          <para>Options for loading the texture data</para>.
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para></param>
        <param name="error">Contains the error, if one occurred.</param>
        <summary>Creates an array of new Metal textures from the resources at the specified <paramref name="urls" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUrls">
      <MemberSignature Language="C#" Value="public virtual void FromUrls (Foundation.NSUrl[] urls, Foundation.NSDictionary options, MetalKit.MTKTextureLoaderArrayCallback completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromUrls(class Foundation.NSUrl[] urls, class Foundation.NSDictionary options, class MetalKit.MTKTextureLoaderArrayCallback completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromUrls(Foundation.NSUrl[],Foundation.NSDictionary,MetalKit.MTKTextureLoaderArrayCallback)" />
      <MemberSignature Language="F#" Value="abstract member FromUrls : Foundation.NSUrl[] * Foundation.NSDictionary * MetalKit.MTKTextureLoaderArrayCallback -&gt; unit&#xA;override this.FromUrls : Foundation.NSUrl[] * Foundation.NSDictionary * MetalKit.MTKTextureLoaderArrayCallback -&gt; unit" Usage="mTKTextureLoader.FromUrls (urls, options, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("newTexturesWithContentsOfURLs:options:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urls" Type="Foundation.NSUrl[]" />
        <Parameter Name="options" Type="Foundation.NSDictionary" />
        <Parameter Name="completionHandler" Type="MetalKit.MTKTextureLoaderArrayCallback">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDMTKTextureLoaderArrayCallback))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="urls">The locations of the image data to load.</param>
        <param name="options">
          <para>Options for loading the texture data</para>.
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para></param>
        <param name="completionHandler">A handler to run after the texture is loaded.</param>
        <summary>Creates an array of new Metal textures from the resources at the specified <paramref name="urls" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUrls">
      <MemberSignature Language="C#" Value="public Metal.IMTLTexture[] FromUrls (Foundation.NSUrl[] urls, MetalKit.MTKTextureLoaderOptions options, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Metal.IMTLTexture[] FromUrls(class Foundation.NSUrl[] urls, class MetalKit.MTKTextureLoaderOptions options, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromUrls(Foundation.NSUrl[],MetalKit.MTKTextureLoaderOptions,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="member this.FromUrls : Foundation.NSUrl[] * MetalKit.MTKTextureLoaderOptions *  -&gt; Metal.IMTLTexture[]" Usage="mTKTextureLoader.FromUrls (urls, options, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLTexture[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urls" Type="Foundation.NSUrl[]" />
        <Parameter Name="options" Type="MetalKit.MTKTextureLoaderOptions" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="urls">The locations of the image data to load.</param>
        <param name="options">Options for loading the texture data.</param>
        <param name="error">Contains the error, if one occurred.</param>
        <summary>Creates an array of new Metal textures from the resources at the specified <paramref name="urls" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUrls">
      <MemberSignature Language="C#" Value="public void FromUrls (Foundation.NSUrl[] urls, MetalKit.MTKTextureLoaderOptions options, MetalKit.MTKTextureLoaderArrayCallback completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FromUrls(class Foundation.NSUrl[] urls, class MetalKit.MTKTextureLoaderOptions options, class MetalKit.MTKTextureLoaderArrayCallback completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromUrls(Foundation.NSUrl[],MetalKit.MTKTextureLoaderOptions,MetalKit.MTKTextureLoaderArrayCallback)" />
      <MemberSignature Language="F#" Value="member this.FromUrls : Foundation.NSUrl[] * MetalKit.MTKTextureLoaderOptions * MetalKit.MTKTextureLoaderArrayCallback -&gt; unit" Usage="mTKTextureLoader.FromUrls (urls, options, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urls" Type="Foundation.NSUrl[]" />
        <Parameter Name="options" Type="MetalKit.MTKTextureLoaderOptions" />
        <Parameter Name="completionHandler" Type="MetalKit.MTKTextureLoaderArrayCallback">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDMTKTextureLoaderArrayCallback))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="urls">The locations of the image data to load.</param>
        <param name="options">Options for loading the texture data.</param>
        <param name="completionHandler">A handler to run after the texture is loaded.</param>
        <summary>Creates an array of new Metal textures from the resources at the specified <paramref name="urls" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUrlsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Metal.IMTLTexture[]&gt; FromUrlsAsync (Foundation.NSUrl[] urls, Foundation.NSDictionary options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Metal.IMTLTexture[]&gt; FromUrlsAsync(class Foundation.NSUrl[] urls, class Foundation.NSDictionary options) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromUrlsAsync(Foundation.NSUrl[],Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="abstract member FromUrlsAsync : Foundation.NSUrl[] * Foundation.NSDictionary -&gt; System.Threading.Tasks.Task&lt;Metal.IMTLTexture[]&gt;&#xA;override this.FromUrlsAsync : Foundation.NSUrl[] * Foundation.NSDictionary -&gt; System.Threading.Tasks.Task&lt;Metal.IMTLTexture[]&gt;" Usage="mTKTextureLoader.FromUrlsAsync (urls, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Metal.IMTLTexture[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urls" Type="Foundation.NSUrl[]" />
        <Parameter Name="options" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="urls">The locations of the image data to load.</param>
        <param name="options">Options for loading the texture data.
          This parameter can be .</param>
        <summary>Creates an array of new Metal textures from the resources at the specified <paramref name="urls" />.</summary>
        <returns>
          <para>A task that represents the asynchronous FromUrls operation.   The value of the TResult parameter is a <see cref="MetalKit.MTKTextureLoaderArrayCallback" />.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUrlsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Metal.IMTLTexture[]&gt; FromUrlsAsync (Foundation.NSUrl[] urls, MetalKit.MTKTextureLoaderOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Metal.IMTLTexture[]&gt; FromUrlsAsync(class Foundation.NSUrl[] urls, class MetalKit.MTKTextureLoaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalKit.MTKTextureLoader.FromUrlsAsync(Foundation.NSUrl[],MetalKit.MTKTextureLoaderOptions)" />
      <MemberSignature Language="F#" Value="member this.FromUrlsAsync : Foundation.NSUrl[] * MetalKit.MTKTextureLoaderOptions -&gt; System.Threading.Tasks.Task&lt;Metal.IMTLTexture[]&gt;" Usage="mTKTextureLoader.FromUrlsAsync (urls, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Metal.IMTLTexture[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urls" Type="Foundation.NSUrl[]" />
        <Parameter Name="options" Type="MetalKit.MTKTextureLoaderOptions" />
      </Parameters>
      <Docs>
        <param name="urls">The locations of the image data to load.</param>
        <param name="options">Options for loading the texture data.</param>
        <summary>Creates an array of new Metal textures from the resource sat the specified <paramref name="urls" />, returning a task that provides the resulting texture array.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
