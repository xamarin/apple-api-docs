<Type Name="CategoryAttribute" FullName="ObjCRuntime.CategoryAttribute">
  <TypeSignature Language="C#" Value="public class CategoryAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CategoryAttribute extends System.Attribute" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Attribute used to flag a class as a category that extends the API of another type.</summary>
    <remarks>
      <para>
	This attribute is applied to static user code classes and will
	surface all of the exported methods and properties (those that
	have the <see cref="T:Foundation.ExportAttribute" />)
	to the provided system type.
      </para>
      <para>
      </para>
      <para>
	This allows new methods to be introduced or implemented for
	all types in the class.  For example, this can be used to
	provide a global implementation of some method across all of
	your types surfaced to Objective-C.
      </para>
      <para>
	All managed extension methods must be static, but it's
	possible to create Objective-C instance methods using the
	standard syntax for extension methods in C#:
      </para>
      <example>
        <code lang="C#"><![CDATA[
// Make "shouldAutoRotate" return true for all UIViewControllers in the application

[Category (typeof (UIViewController))]
static class MyViewControllerMethods {
    [Export ("shouldAutorotate")]
    static bool ShouldAutoRotate (this UIViewController self)
    { 
        return true; 
    }

    [Export ("supportedInterfaceOrientations")]
    static UIInterfaceOrientationMask SupportedRotations (this UIViewController self) 
    {
        return UIInterfaceOrientationMask.All;
    }
}
	]]></code>
      </example>
      <example>
        <code lang="C#"><![CDATA[
// This example will add a native toUpper instance method to the NSString class, 
// which can be invoked from Objective-C.

[Category (typeof (NSString))]
public static class MyStringCategory  
{
    [Export ("toUpper")]
    static string ToUpper (this NSString self)
    {
        return self.ToString ().ToUpper ();
    }
}
	]]></code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CategoryAttribute (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The Objective-C type to extend.   This must be a subclass of NSObject.</param>
        <summary>The type that this category extends.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name of the category.</summary>
        <value>
        </value>
        <remarks>This must be a valid Objective-C type name, but is otherwise unused.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The type that this category extends.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
