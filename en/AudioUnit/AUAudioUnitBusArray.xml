<Type Name="AUAudioUnitBusArray" FullName="AudioUnit.AUAudioUnitBusArray">
  <TypeSignature Language="C#" Value="public class AUAudioUnitBusArray : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AUAudioUnitBusArray extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:AudioUnit.AUAudioUnitBusArray" />
  <TypeSignature Language="F#" Value="type AUAudioUnitBusArray = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("AUAudioUnitBusArray", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A container that holds <see cref="T:AudioUnit.AUAudioUnitBus" /> objects for an audio unit.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/AudioUnit/Reference/AUAudioUnitBusArray_ClassReference/index.html">Apple documentation for <c>AUAudioUnitBusArray</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AUAudioUnitBusArray (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:AudioUnit.AUAudioUnitBusArray.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new AudioUnit.AUAudioUnitBusArray : Foundation.NSObjectFlag -&gt; AudioUnit.AUAudioUnitBusArray" Usage="new AudioUnit.AUAudioUnitBusArray t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal AUAudioUnitBusArray (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:AudioUnit.AUAudioUnitBusArray.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new AudioUnit.AUAudioUnitBusArray : nativeint -&gt; AudioUnit.AUAudioUnitBusArray" Usage="new AudioUnit.AUAudioUnitBusArray handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AUAudioUnitBusArray (AudioUnit.AUAudioUnit owner, AudioUnit.AUAudioUnitBusType busType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class AudioUnit.AUAudioUnit owner, valuetype AudioUnit.AUAudioUnitBusType busType) cil managed" />
      <MemberSignature Language="DocId" Value="M:AudioUnit.AUAudioUnitBusArray.#ctor(AudioUnit.AUAudioUnit,AudioUnit.AUAudioUnitBusType)" />
      <MemberSignature Language="F#" Value="new AudioUnit.AUAudioUnitBusArray : AudioUnit.AUAudioUnit * AudioUnit.AUAudioUnitBusType -&gt; AudioUnit.AUAudioUnitBusArray" Usage="new AudioUnit.AUAudioUnitBusArray (owner, busType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithAudioUnit:busType:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="owner" Type="AudioUnit.AUAudioUnit" />
        <Parameter Name="busType" Type="AudioUnit.AUAudioUnitBusType" />
      </Parameters>
      <Docs>
        <param name="owner">The owner of the bus array.</param>
        <param name="busType">Whether the bus array will be for input or output.</param>
        <summary>Creates a new <see cref="T:AudioUnit.AUAudioUnitBusArray" /> with the specified owner ant type.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AUAudioUnitBusArray (AudioUnit.AUAudioUnit owner, AudioUnit.AUAudioUnitBusType busType, AudioUnit.AUAudioUnitBus[] busArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class AudioUnit.AUAudioUnit owner, valuetype AudioUnit.AUAudioUnitBusType busType, class AudioUnit.AUAudioUnitBus[] busArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:AudioUnit.AUAudioUnitBusArray.#ctor(AudioUnit.AUAudioUnit,AudioUnit.AUAudioUnitBusType,AudioUnit.AUAudioUnitBus[])" />
      <MemberSignature Language="F#" Value="new AudioUnit.AUAudioUnitBusArray : AudioUnit.AUAudioUnit * AudioUnit.AUAudioUnitBusType * AudioUnit.AUAudioUnitBus[] -&gt; AudioUnit.AUAudioUnitBusArray" Usage="new AudioUnit.AUAudioUnitBusArray (owner, busType, busArray)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithAudioUnit:busType:busses:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="owner" Type="AudioUnit.AUAudioUnit" />
        <Parameter Name="busType" Type="AudioUnit.AUAudioUnitBusType" />
        <Parameter Name="busArray" Type="AudioUnit.AUAudioUnitBus[]" />
      </Parameters>
      <Docs>
        <param name="owner">The owner of the bus array.</param>
        <param name="busType">Whether the bus array will be for input or output.</param>
        <param name="busArray">The bus array whose members to copy.</param>
        <summary>Creates a new <see cref="T:AudioUnit.AUAudioUnitBusArray" />, with the specified owner ant type, by copying the buses in <paramref name="busArray" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddObserver">
      <MemberSignature Language="C#" Value="public virtual void AddObserver (Foundation.NSObject observer, string keyPath, Foundation.NSKeyValueObservingOptions options, IntPtr context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddObserver(class Foundation.NSObject observer, string keyPath, valuetype Foundation.NSKeyValueObservingOptions options, native int context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AudioUnit.AUAudioUnitBusArray.AddObserver(Foundation.NSObject,System.String,Foundation.NSKeyValueObservingOptions,System.IntPtr)" />
      <MemberSignature Language="F#" Value="override this.AddObserver : Foundation.NSObject * string * Foundation.NSKeyValueObservingOptions * nativeint -&gt; unit" Usage="aUAudioUnitBusArray.AddObserver (observer, keyPath, options, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("addObserverToAllBusses:forKeyPath:options:context:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="Foundation.NSObject" />
        <Parameter Name="keyPath" Type="System.String" />
        <Parameter Name="options" Type="Foundation.NSKeyValueObservingOptions" />
        <Parameter Name="context" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="observer">The KVO observer to add to all buses in the array.</param>
        <param name="keyPath">The object-relative keypath that identifies the property to observe.</param>
        <param name="options">The observing options for the observer.</param>
        <param name="context">An object or value that is used to disambiguate observer calls.</param>
        <summary>Adds a key-value observer to every bus in the array.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BusType">
      <MemberSignature Language="C#" Value="public virtual AudioUnit.AUAudioUnitBusType BusType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype AudioUnit.AUAudioUnitBusType BusType" />
      <MemberSignature Language="DocId" Value="P:AudioUnit.AUAudioUnitBusArray.BusType" />
      <MemberSignature Language="F#" Value="member this.BusType : AudioUnit.AUAudioUnitBusType" Usage="AudioUnit.AUAudioUnitBusArray.BusType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("busType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AudioUnit.AUAudioUnitBusType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that tells whether this is an input or output bus array.</summary>
        <value>A value that tells whether this is an input or output bus array.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:AudioUnit.AUAudioUnitBusArray.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="AudioUnit.AUAudioUnitBusArray.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual nuint Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint Count" />
      <MemberSignature Language="DocId" Value="P:AudioUnit.AUAudioUnitBusArray.Count" />
      <MemberSignature Language="F#" Value="member this.Count : nuint" Usage="AudioUnit.AUAudioUnitBusArray.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("count")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of buses in the array.</summary>
        <value>The number of buses in the array.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CountChangeable">
      <MemberSignature Language="C#" Value="public virtual bool CountChangeable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CountChangeable" />
      <MemberSignature Language="DocId" Value="P:AudioUnit.AUAudioUnitBusArray.CountChangeable" />
      <MemberSignature Language="F#" Value="member this.CountChangeable : bool" Usage="AudioUnit.AUAudioUnitBusArray.CountChangeable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isCountChangeable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether buses can be added and removed from the array.</summary>
        <value>A Boolean value that tells whether buses can be added and removed from the array.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:AudioUnit.AUAudioUnitBusArray.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="aUAudioUnitBusArray.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the AUAudioUnitBusArray object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the AUAudioUnitBusArray class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the AUAudioUnitBusArray ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual AudioUnit.AUAudioUnitBus GetObject (nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class AudioUnit.AUAudioUnitBus GetObject(valuetype System.nuint index) cil managed" />
      <MemberSignature Language="DocId" Value="M:AudioUnit.AUAudioUnitBusArray.GetObject(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member GetObject : nuint -&gt; AudioUnit.AUAudioUnitBus&#xA;override this.GetObject : nuint -&gt; AudioUnit.AUAudioUnitBus" Usage="aUAudioUnitBusArray.GetObject index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("objectAtIndexedSubscript:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AudioUnit.AUAudioUnitBus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index into the bus array of the desired bus.</param>
        <summary>Returns the bus at the spcified location in the array.</summary>
        <returns>The bus at the spcified location in the array.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerAudioUnit">
      <MemberSignature Language="C#" Value="public virtual AudioUnit.AUAudioUnit OwnerAudioUnit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AudioUnit.AUAudioUnit OwnerAudioUnit" />
      <MemberSignature Language="DocId" Value="P:AudioUnit.AUAudioUnitBusArray.OwnerAudioUnit" />
      <MemberSignature Language="F#" Value="member this.OwnerAudioUnit : AudioUnit.AUAudioUnit" Usage="AudioUnit.AUAudioUnitBusArray.OwnerAudioUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("ownerAudioUnit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("ownerAudioUnit", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AudioUnit.AUAudioUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the audio unit that owns this array.</summary>
        <value>The audio unit that owns this array.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveObserver">
      <MemberSignature Language="C#" Value="public virtual void RemoveObserver (Foundation.NSObject observer, string keyPath, IntPtr context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveObserver(class Foundation.NSObject observer, string keyPath, native int context) cil managed" />
      <MemberSignature Language="DocId" Value="M:AudioUnit.AUAudioUnitBusArray.RemoveObserver(Foundation.NSObject,System.String,System.IntPtr)" />
      <MemberSignature Language="F#" Value="override this.RemoveObserver : Foundation.NSObject * string * nativeint -&gt; unit" Usage="aUAudioUnitBusArray.RemoveObserver (observer, keyPath, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeObserverFromAllBusses:forKeyPath:context:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="Foundation.NSObject" />
        <Parameter Name="keyPath" Type="System.String" />
        <Parameter Name="context" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="observer">The KVO observer to remove from all buses in the array.</param>
        <param name="keyPath">The object-relative keypath that identifies the observer to remove.</param>
        <param name="context">The object or value that was used to disambiguate observer calls.</param>
        <summary>Removes the specified key-value observer from every bus in the array.</summary>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceBusses">
      <MemberSignature Language="C#" Value="public virtual void ReplaceBusses (AudioUnit.AUAudioUnitBus[] busArray);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReplaceBusses(class AudioUnit.AUAudioUnitBus[] busArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:AudioUnit.AUAudioUnitBusArray.ReplaceBusses(AudioUnit.AUAudioUnitBus[])" />
      <MemberSignature Language="F#" Value="abstract member ReplaceBusses : AudioUnit.AUAudioUnitBus[] -&gt; unit&#xA;override this.ReplaceBusses : AudioUnit.AUAudioUnitBus[] -&gt; unit" Usage="aUAudioUnitBusArray.ReplaceBusses busArray" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("replaceBusses:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="busArray" Type="AudioUnit.AUAudioUnitBus[]" />
      </Parameters>
      <Docs>
        <param name="busArray">An array of buses to copy into this bus array.</param>
        <summary>Copies <paramref name="busArray" /> into this bus array, replacing the current buses in this array.</summary>
        <remarks>This method is applicable only to subclasses of <see cref="T:AudioUnit.AUAudioUnit" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBusCount">
      <MemberSignature Language="C#" Value="public virtual bool SetBusCount (nuint count, out Foundation.NSError outError);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetBusCount(valuetype System.nuint count, [out] class Foundation.NSError&amp; outError) cil managed" />
      <MemberSignature Language="DocId" Value="M:AudioUnit.AUAudioUnitBusArray.SetBusCount(System.nuint,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member SetBusCount : nuint *  -&gt; bool&#xA;override this.SetBusCount : nuint *  -&gt; bool" Usage="aUAudioUnitBusArray.SetBusCount (count, outError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setBusCount:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.nuint" />
        <Parameter Name="outError" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="count">To be added.</param>
        <param name="outError">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
