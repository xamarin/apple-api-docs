<Type Name="EAGLContext" FullName="OpenGLES.EAGLContext">
  <TypeSignature Language="C#" Value="public class EAGLContext : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EAGLContext extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:OpenGLES.EAGLContext" />
  <TypeSignature Language="F#" Value="type EAGLContext = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("EAGLContext", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'Metal' instead.")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.TvOS, 12, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'Metal' instead.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Holds the state necessary to render using OpenGL ES.</summary>
    <remarks>To be added.</remarks>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/LowLevelGLPaint/">LowLevelGLPaint</related>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/OpenGLESSample/">OpenGLESSample</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/OpenGLES/Reference/EAGLContext_ClassRef/index.html">Apple documentation for <c>EAGLContext</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EAGLContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:OpenGLES.EAGLContext.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.Obsolete("iOS9 does not allow creating an empty instance")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EAGLContext (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:OpenGLES.EAGLContext.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new OpenGLES.EAGLContext : Foundation.NSObjectFlag -&gt; OpenGLES.EAGLContext" Usage="new OpenGLES.EAGLContext t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EAGLContext (OpenGLES.EAGLRenderingAPI api);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype OpenGLES.EAGLRenderingAPI api) cil managed" />
      <MemberSignature Language="DocId" Value="M:OpenGLES.EAGLContext.#ctor(OpenGLES.EAGLRenderingAPI)" />
      <MemberSignature Language="F#" Value="new OpenGLES.EAGLContext : OpenGLES.EAGLRenderingAPI -&gt; OpenGLES.EAGLContext" Usage="new OpenGLES.EAGLContext api" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithAPI:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="api" Type="OpenGLES.EAGLRenderingAPI" />
      </Parameters>
      <Docs>
        <param name="api">To be added.</param>
        <summary>Creates a new EAGL context that supports the specified rendering API.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal EAGLContext (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:OpenGLES.EAGLContext.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new OpenGLES.EAGLContext : nativeint -&gt; OpenGLES.EAGLContext" Usage="new OpenGLES.EAGLContext handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EAGLContext (OpenGLES.EAGLRenderingAPI api, OpenGLES.EAGLSharegroup sharegroup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype OpenGLES.EAGLRenderingAPI api, class OpenGLES.EAGLSharegroup sharegroup) cil managed" />
      <MemberSignature Language="DocId" Value="M:OpenGLES.EAGLContext.#ctor(OpenGLES.EAGLRenderingAPI,OpenGLES.EAGLSharegroup)" />
      <MemberSignature Language="F#" Value="new OpenGLES.EAGLContext : OpenGLES.EAGLRenderingAPI * OpenGLES.EAGLSharegroup -&gt; OpenGLES.EAGLContext" Usage="new OpenGLES.EAGLContext (api, sharegroup)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithAPI:sharegroup:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="api" Type="OpenGLES.EAGLRenderingAPI" />
        <Parameter Name="sharegroup" Type="OpenGLES.EAGLSharegroup" />
      </Parameters>
      <Docs>
        <param name="api">To be added.</param>
        <param name="sharegroup">To be added.</param>
        <summary>Creates a new EAGL context in the specified share group and that supports the specified rendering API.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="API">
      <MemberSignature Language="C#" Value="public virtual OpenGLES.EAGLRenderingAPI API { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype OpenGLES.EAGLRenderingAPI API" />
      <MemberSignature Language="DocId" Value="P:OpenGLES.EAGLContext.API" />
      <MemberSignature Language="F#" Value="member this.API : OpenGLES.EAGLRenderingAPI" Usage="OpenGLES.EAGLContext.API" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("API")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>OpenGLES.EAGLRenderingAPI</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the OpenGL ES rendering API version with which the EAGL context was created.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:OpenGLES.EAGLContext.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="OpenGLES.EAGLContext.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentContext">
      <MemberSignature Language="C#" Value="public static OpenGLES.EAGLContext CurrentContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class OpenGLES.EAGLContext CurrentContext" />
      <MemberSignature Language="DocId" Value="P:OpenGLES.EAGLContext.CurrentContext" />
      <MemberSignature Language="F#" Value="member this.CurrentContext : OpenGLES.EAGLContext" Usage="OpenGLES.EAGLContext.CurrentContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("currentContext")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>OpenGLES.EAGLContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current EAGL context.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DebugLabel">
      <MemberSignature Language="C#" Value="public virtual string DebugLabel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DebugLabel" />
      <MemberSignature Language="DocId" Value="P:OpenGLES.EAGLContext.DebugLabel" />
      <MemberSignature Language="F#" Value="member this.DebugLabel : string with get, set" Usage="OpenGLES.EAGLContext.DebugLabel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("debugLabel")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDebugLabel:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a label that is used to identify the context for debugging.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EAGLGetVersion">
      <MemberSignature Language="C#" Value="public static void EAGLGetVersion (out nuint major, out nuint minor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;/System/Library/Frameworks/OpenGLES.framework/OpenGLES&quot; as &quot;EAGLGetVersion&quot; winapi)void EAGLGetVersion([out] valuetype System.nuint&amp; major, [out] valuetype System.nuint&amp; minor) cil managed" />
      <MemberSignature Language="DocId" Value="M:OpenGLES.EAGLContext.EAGLGetVersion(System.nuint@,System.nuint@)" />
      <MemberSignature Language="F#" Value="static member EAGLGetVersion :  *  -&gt; unit" Usage="OpenGLES.EAGLContext.EAGLGetVersion (major, minor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="major" Type="System.nuint" RefType="out" />
        <Parameter Name="minor" Type="System.nuint" RefType="out" />
      </Parameters>
      <Docs>
        <param name="major">To be added.</param>
        <param name="minor">To be added.</param>
        <summary>Writes the major and minor version numbers in the provided <see langword="out" /> parameters.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMultiThreaded">
      <MemberSignature Language="C#" Value="public virtual bool IsMultiThreaded { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMultiThreaded" />
      <MemberSignature Language="DocId" Value="P:OpenGLES.EAGLContext.IsMultiThreaded" />
      <MemberSignature Language="F#" Value="member this.IsMultiThreaded : bool with get, set" Usage="OpenGLES.EAGLContext.IsMultiThreaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 1, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isMultiThreaded")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 1, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setMultiThreaded:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 1, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a Boolean value that controls whether OpenGL ES uses other threads to perform work.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentRenderBuffer">
      <MemberSignature Language="C#" Value="public virtual bool PresentRenderBuffer (nuint target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PresentRenderBuffer(valuetype System.nuint target) cil managed" />
      <MemberSignature Language="DocId" Value="M:OpenGLES.EAGLContext.PresentRenderBuffer(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member PresentRenderBuffer : nuint -&gt; bool&#xA;override this.PresentRenderBuffer : nuint -&gt; bool" Usage="eAGLContext.PresentRenderBuffer target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("presentRenderbuffer:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <summary>Displays the contents of a render buffer.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentRenderBuffer">
      <MemberSignature Language="C#" Value="public virtual bool PresentRenderBuffer (nuint target, double presentationTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PresentRenderBuffer(valuetype System.nuint target, float64 presentationTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:OpenGLES.EAGLContext.PresentRenderBuffer(System.nuint,System.Double)" />
      <MemberSignature Language="F#" Value="abstract member PresentRenderBuffer : nuint * double -&gt; bool&#xA;override this.PresentRenderBuffer : nuint * double -&gt; bool" Usage="eAGLContext.PresentRenderBuffer (target, presentationTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.TV(10, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.nuint" />
        <Parameter Name="presentationTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="presentationTime">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentRenderBuffer">
      <MemberSignature Language="C#" Value="public virtual bool PresentRenderBuffer (nuint target, double presentationTime, OpenGLES.EAGLContext.PresentationMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PresentRenderBuffer(valuetype System.nuint target, float64 presentationTime, valuetype OpenGLES.EAGLContext/PresentationMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:OpenGLES.EAGLContext.PresentRenderBuffer(System.nuint,System.Double,OpenGLES.EAGLContext.PresentationMode)" />
      <MemberSignature Language="F#" Value="abstract member PresentRenderBuffer : nuint * double * OpenGLES.EAGLContext.PresentationMode -&gt; bool&#xA;override this.PresentRenderBuffer : nuint * double * OpenGLES.EAGLContext.PresentationMode -&gt; bool" Usage="eAGLContext.PresentRenderBuffer (target, presentationTime, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.TV(10, 2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.nuint" />
        <Parameter Name="presentationTime" Type="System.Double" />
        <Parameter Name="mode" Type="OpenGLES.EAGLContext+PresentationMode" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="presentationTime">To be added.</param>
        <param name="mode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderBufferStorage">
      <MemberSignature Language="C#" Value="public virtual bool RenderBufferStorage (nuint target, CoreAnimation.CAEAGLLayer drawable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RenderBufferStorage(valuetype System.nuint target, class CoreAnimation.CAEAGLLayer drawable) cil managed" />
      <MemberSignature Language="DocId" Value="M:OpenGLES.EAGLContext.RenderBufferStorage(System.nuint,CoreAnimation.CAEAGLLayer)" />
      <MemberSignature Language="F#" Value="abstract member RenderBufferStorage : nuint * CoreAnimation.CAEAGLLayer -&gt; bool&#xA;override this.RenderBufferStorage : nuint * CoreAnimation.CAEAGLLayer -&gt; bool" Usage="eAGLContext.RenderBufferStorage (target, drawable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("renderbufferStorage:fromDrawable:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.nuint" />
        <Parameter Name="drawable" Type="CoreAnimation.CAEAGLLayer" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="drawable">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCurrentContext">
      <MemberSignature Language="C#" Value="public static bool SetCurrentContext (OpenGLES.EAGLContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetCurrentContext(class OpenGLES.EAGLContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:OpenGLES.EAGLContext.SetCurrentContext(OpenGLES.EAGLContext)" />
      <MemberSignature Language="F#" Value="static member SetCurrentContext : OpenGLES.EAGLContext -&gt; bool" Usage="OpenGLES.EAGLContext.SetCurrentContext context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setCurrentContext:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="OpenGLES.EAGLContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Makes the supplied <paramref name="context" /> the context that contains the OpenGL ES state.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShareGroup">
      <MemberSignature Language="C#" Value="public virtual OpenGLES.EAGLSharegroup ShareGroup { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class OpenGLES.EAGLSharegroup ShareGroup" />
      <MemberSignature Language="DocId" Value="P:OpenGLES.EAGLContext.ShareGroup" />
      <MemberSignature Language="F#" Value="member this.ShareGroup : OpenGLES.EAGLSharegroup" Usage="OpenGLES.EAGLContext.ShareGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("sharegroup")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>OpenGLES.EAGLSharegroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the share group to which the EAGL context belongs.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TexImage">
      <MemberSignature Language="C#" Value="public virtual bool TexImage (IOSurface.IOSurface ioSurface, nuint target, nuint internalFormat, uint width, uint height, nuint format, nuint type, uint plane);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TexImage(class IOSurface.IOSurface ioSurface, valuetype System.nuint target, valuetype System.nuint internalFormat, unsigned int32 width, unsigned int32 height, valuetype System.nuint format, valuetype System.nuint type, unsigned int32 plane) cil managed" />
      <MemberSignature Language="DocId" Value="M:OpenGLES.EAGLContext.TexImage(IOSurface.IOSurface,System.nuint,System.nuint,System.UInt32,System.UInt32,System.nuint,System.nuint,System.UInt32)" />
      <MemberSignature Language="F#" Value="abstract member TexImage : IOSurface.IOSurface * nuint * nuint * uint32 * uint32 * nuint * nuint * uint32 -&gt; bool&#xA;override this.TexImage : IOSurface.IOSurface * nuint * nuint * uint32 * uint32 * nuint * nuint * uint32 -&gt; bool" Usage="eAGLContext.TexImage (ioSurface, target, internalFormat, width, height, format, type, plane)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("texImageIOSurface:target:internalFormat:width:height:format:type:plane:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ioSurface" Type="IOSurface.IOSurface" />
        <Parameter Name="target" Type="System.nuint" />
        <Parameter Name="internalFormat" Type="System.nuint" />
        <Parameter Name="width" Type="System.UInt32" />
        <Parameter Name="height" Type="System.UInt32" />
        <Parameter Name="format" Type="System.nuint" />
        <Parameter Name="type" Type="System.nuint" />
        <Parameter Name="plane" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="ioSurface">To be added.</param>
        <param name="target">To be added.</param>
        <param name="internalFormat">To be added.</param>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <param name="format">To be added.</param>
        <param name="type">To be added.</param>
        <param name="plane">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
