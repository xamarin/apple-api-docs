<Type Name="WKNavigationDelegate" FullName="WebKit.WKNavigationDelegate">
  <TypeSignature Language="C#" Value="public class WKNavigationDelegate : Foundation.NSObject, IDisposable, WebKit.IWKNavigationDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WKNavigationDelegate extends Foundation.NSObject implements class ObjCRuntime.INativeObject, class System.IDisposable, class WebKit.IWKNavigationDelegate" />
  <TypeSignature Language="DocId" Value="T:WebKit.WKNavigationDelegate" />
  <TypeSignature Language="F#" Value="type WKNavigationDelegate = class&#xA;    inherit NSObject&#xA;    interface IWKNavigationDelegate&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>WebKit.IWKNavigationDelegate</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("WKNavigationDelegate", false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Delegate object for <see cref="T:WebKit.WKNavigation" /> objects, provides methods relating to navigation and load policies.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/WebKit/Reference/WKNavigationDelegate_Ref/index.html">Apple documentation for <c>WKNavigationDelegate</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WKNavigationDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKNavigationDelegate.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WKNavigationDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKNavigationDelegate.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new WebKit.WKNavigationDelegate : Foundation.NSObjectFlag -&gt; WebKit.WKNavigationDelegate" Usage="new WebKit.WKNavigationDelegate t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WKNavigationDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKNavigationDelegate.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new WebKit.WKNavigationDelegate : nativeint -&gt; WebKit.WKNavigationDelegate" Usage="new WebKit.WKNavigationDelegate handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentProcessDidTerminate">
      <MemberSignature Language="C#" Value="public virtual void ContentProcessDidTerminate (WebKit.WKWebView webView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ContentProcessDidTerminate(class WebKit.WKWebView webView) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKNavigationDelegate.ContentProcessDidTerminate(WebKit.WKWebView)" />
      <MemberSignature Language="F#" Value="abstract member ContentProcessDidTerminate : WebKit.WKWebView -&gt; unit&#xA;override this.ContentProcessDidTerminate : WebKit.WKWebView -&gt; unit" Usage="wKNavigationDelegate.ContentProcessDidTerminate webView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("webViewWebContentProcessDidTerminate:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webView" Type="WebKit.WKWebView" />
      </Parameters>
      <Docs>
        <param name="webView">To be added.</param>
        <summary>Method that is called when a web view's content is terminated.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecidePolicy">
      <MemberSignature Language="C#" Value="public virtual void DecidePolicy (WebKit.WKWebView webView, WebKit.WKNavigationAction navigationAction, Action&lt;WebKit.WKNavigationActionPolicy&gt; decisionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DecidePolicy(class WebKit.WKWebView webView, class WebKit.WKNavigationAction navigationAction, class System.Action`1&lt;valuetype WebKit.WKNavigationActionPolicy&gt; decisionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKNavigationDelegate.DecidePolicy(WebKit.WKWebView,WebKit.WKNavigationAction,System.Action{WebKit.WKNavigationActionPolicy})" />
      <MemberSignature Language="F#" Value="abstract member DecidePolicy : WebKit.WKWebView * WebKit.WKNavigationAction * Action&lt;WebKit.WKNavigationActionPolicy&gt; -&gt; unit&#xA;override this.DecidePolicy : WebKit.WKWebView * WebKit.WKNavigationAction * Action&lt;WebKit.WKNavigationActionPolicy&gt; -&gt; unit" Usage="wKNavigationDelegate.DecidePolicy (webView, navigationAction, decisionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("webView:decidePolicyForNavigationAction:decisionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webView" Type="WebKit.WKWebView" />
        <Parameter Name="navigationAction" Type="WebKit.WKNavigationAction" />
        <Parameter Name="decisionHandler" Type="System.Action&lt;WebKit.WKNavigationActionPolicy&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V31))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="webView">To be added.</param>
        <param name="navigationAction">To be added.</param>
        <param name="decisionHandler">To be added.</param>
        <summary>Assigns an action to be taken after the specified <paramref name="navigationAction" /> has been either canceled or allowed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecidePolicy">
      <MemberSignature Language="C#" Value="public virtual void DecidePolicy (WebKit.WKWebView webView, WebKit.WKNavigationResponse navigationResponse, Action&lt;WebKit.WKNavigationResponsePolicy&gt; decisionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DecidePolicy(class WebKit.WKWebView webView, class WebKit.WKNavigationResponse navigationResponse, class System.Action`1&lt;valuetype WebKit.WKNavigationResponsePolicy&gt; decisionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKNavigationDelegate.DecidePolicy(WebKit.WKWebView,WebKit.WKNavigationResponse,System.Action{WebKit.WKNavigationResponsePolicy})" />
      <MemberSignature Language="F#" Value="abstract member DecidePolicy : WebKit.WKWebView * WebKit.WKNavigationResponse * Action&lt;WebKit.WKNavigationResponsePolicy&gt; -&gt; unit&#xA;override this.DecidePolicy : WebKit.WKWebView * WebKit.WKNavigationResponse * Action&lt;WebKit.WKNavigationResponsePolicy&gt; -&gt; unit" Usage="wKNavigationDelegate.DecidePolicy (webView, navigationResponse, decisionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("webView:decidePolicyForNavigationResponse:decisionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webView" Type="WebKit.WKWebView" />
        <Parameter Name="navigationResponse" Type="WebKit.WKNavigationResponse" />
        <Parameter Name="decisionHandler" Type="System.Action&lt;WebKit.WKNavigationResponsePolicy&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V32))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="webView">To be added.</param>
        <param name="navigationResponse">To be added.</param>
        <param name="decisionHandler">To be added.</param>
        <summary>Assigns an action to be taken after the specified <paramref name="navigationResponse" /> has been either canceled or allowed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidCommitNavigation">
      <MemberSignature Language="C#" Value="public virtual void DidCommitNavigation (WebKit.WKWebView webView, WebKit.WKNavigation navigation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidCommitNavigation(class WebKit.WKWebView webView, class WebKit.WKNavigation navigation) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKNavigationDelegate.DidCommitNavigation(WebKit.WKWebView,WebKit.WKNavigation)" />
      <MemberSignature Language="F#" Value="abstract member DidCommitNavigation : WebKit.WKWebView * WebKit.WKNavigation -&gt; unit&#xA;override this.DidCommitNavigation : WebKit.WKWebView * WebKit.WKNavigation -&gt; unit" Usage="wKNavigationDelegate.DidCommitNavigation (webView, navigation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("webView:didCommitNavigation:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webView" Type="WebKit.WKWebView" />
        <Parameter Name="navigation" Type="WebKit.WKNavigation" />
      </Parameters>
      <Docs>
        <param name="webView">To be added.</param>
        <param name="navigation">To be added.</param>
        <summary>Method that is called when content begins to load.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidFailNavigation">
      <MemberSignature Language="C#" Value="public virtual void DidFailNavigation (WebKit.WKWebView webView, WebKit.WKNavigation navigation, Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidFailNavigation(class WebKit.WKWebView webView, class WebKit.WKNavigation navigation, class Foundation.NSError error) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKNavigationDelegate.DidFailNavigation(WebKit.WKWebView,WebKit.WKNavigation,Foundation.NSError)" />
      <MemberSignature Language="F#" Value="abstract member DidFailNavigation : WebKit.WKWebView * WebKit.WKNavigation * Foundation.NSError -&gt; unit&#xA;override this.DidFailNavigation : WebKit.WKWebView * WebKit.WKNavigation * Foundation.NSError -&gt; unit" Usage="wKNavigationDelegate.DidFailNavigation (webView, navigation, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("webView:didFailNavigation:withError:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webView" Type="WebKit.WKWebView" />
        <Parameter Name="navigation" Type="WebKit.WKNavigation" />
        <Parameter Name="error" Type="Foundation.NSError" />
      </Parameters>
      <Docs>
        <param name="webView">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Method that is called when a committed navigation fails.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidFailProvisionalNavigation">
      <MemberSignature Language="C#" Value="public virtual void DidFailProvisionalNavigation (WebKit.WKWebView webView, WebKit.WKNavigation navigation, Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidFailProvisionalNavigation(class WebKit.WKWebView webView, class WebKit.WKNavigation navigation, class Foundation.NSError error) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKNavigationDelegate.DidFailProvisionalNavigation(WebKit.WKWebView,WebKit.WKNavigation,Foundation.NSError)" />
      <MemberSignature Language="F#" Value="abstract member DidFailProvisionalNavigation : WebKit.WKWebView * WebKit.WKNavigation * Foundation.NSError -&gt; unit&#xA;override this.DidFailProvisionalNavigation : WebKit.WKWebView * WebKit.WKNavigation * Foundation.NSError -&gt; unit" Usage="wKNavigationDelegate.DidFailProvisionalNavigation (webView, navigation, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("webView:didFailProvisionalNavigation:withError:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webView" Type="WebKit.WKWebView" />
        <Parameter Name="navigation" Type="WebKit.WKNavigation" />
        <Parameter Name="error" Type="Foundation.NSError" />
      </Parameters>
      <Docs>
        <param name="webView">To be added.</param>
        <param name="navigation">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Method that is called when a committed navigation fails after data has begun to load.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidFinishNavigation">
      <MemberSignature Language="C#" Value="public virtual void DidFinishNavigation (WebKit.WKWebView webView, WebKit.WKNavigation navigation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidFinishNavigation(class WebKit.WKWebView webView, class WebKit.WKNavigation navigation) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKNavigationDelegate.DidFinishNavigation(WebKit.WKWebView,WebKit.WKNavigation)" />
      <MemberSignature Language="F#" Value="abstract member DidFinishNavigation : WebKit.WKWebView * WebKit.WKNavigation -&gt; unit&#xA;override this.DidFinishNavigation : WebKit.WKWebView * WebKit.WKNavigation -&gt; unit" Usage="wKNavigationDelegate.DidFinishNavigation (webView, navigation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("webView:didFinishNavigation:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webView" Type="WebKit.WKWebView" />
        <Parameter Name="navigation" Type="WebKit.WKNavigation" />
      </Parameters>
      <Docs>
        <param name="webView">To be added.</param>
        <param name="navigation">To be added.</param>
        <summary>Method that is called when all the data is loaded.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidReceiveAuthenticationChallenge">
      <MemberSignature Language="C#" Value="public virtual void DidReceiveAuthenticationChallenge (WebKit.WKWebView webView, Foundation.NSUrlAuthenticationChallenge challenge, Action&lt;Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidReceiveAuthenticationChallenge(class WebKit.WKWebView webView, class Foundation.NSUrlAuthenticationChallenge challenge, class System.Action`2&lt;valuetype Foundation.NSUrlSessionAuthChallengeDisposition, class Foundation.NSUrlCredential&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKNavigationDelegate.DidReceiveAuthenticationChallenge(WebKit.WKWebView,Foundation.NSUrlAuthenticationChallenge,System.Action{Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential})" />
      <MemberSignature Language="F#" Value="abstract member DidReceiveAuthenticationChallenge : WebKit.WKWebView * Foundation.NSUrlAuthenticationChallenge * Action&lt;Foundation.NSUrlSessionAuthChallengeDisposition, Foundation.NSUrlCredential&gt; -&gt; unit&#xA;override this.DidReceiveAuthenticationChallenge : WebKit.WKWebView * Foundation.NSUrlAuthenticationChallenge * Action&lt;Foundation.NSUrlSessionAuthChallengeDisposition, Foundation.NSUrlCredential&gt; -&gt; unit" Usage="wKNavigationDelegate.DidReceiveAuthenticationChallenge (webView, challenge, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("webView:didReceiveAuthenticationChallenge:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webView" Type="WebKit.WKWebView" />
        <Parameter Name="challenge" Type="Foundation.NSUrlAuthenticationChallenge" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V33))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="webView">To be added.</param>
        <param name="challenge">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>Method that is called when an authentication challenge is issued.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidReceiveServerRedirectForProvisionalNavigation">
      <MemberSignature Language="C#" Value="public virtual void DidReceiveServerRedirectForProvisionalNavigation (WebKit.WKWebView webView, WebKit.WKNavigation navigation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidReceiveServerRedirectForProvisionalNavigation(class WebKit.WKWebView webView, class WebKit.WKNavigation navigation) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKNavigationDelegate.DidReceiveServerRedirectForProvisionalNavigation(WebKit.WKWebView,WebKit.WKNavigation)" />
      <MemberSignature Language="F#" Value="abstract member DidReceiveServerRedirectForProvisionalNavigation : WebKit.WKWebView * WebKit.WKNavigation -&gt; unit&#xA;override this.DidReceiveServerRedirectForProvisionalNavigation : WebKit.WKWebView * WebKit.WKNavigation -&gt; unit" Usage="wKNavigationDelegate.DidReceiveServerRedirectForProvisionalNavigation (webView, navigation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("webView:didReceiveServerRedirectForProvisionalNavigation:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webView" Type="WebKit.WKWebView" />
        <Parameter Name="navigation" Type="WebKit.WKNavigation" />
      </Parameters>
      <Docs>
        <param name="webView">To be added.</param>
        <param name="navigation">To be added.</param>
        <summary>Method that is called when a server redirect is received.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidStartProvisionalNavigation">
      <MemberSignature Language="C#" Value="public virtual void DidStartProvisionalNavigation (WebKit.WKWebView webView, WebKit.WKNavigation navigation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidStartProvisionalNavigation(class WebKit.WKWebView webView, class WebKit.WKNavigation navigation) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKNavigationDelegate.DidStartProvisionalNavigation(WebKit.WKWebView,WebKit.WKNavigation)" />
      <MemberSignature Language="F#" Value="abstract member DidStartProvisionalNavigation : WebKit.WKWebView * WebKit.WKNavigation -&gt; unit&#xA;override this.DidStartProvisionalNavigation : WebKit.WKWebView * WebKit.WKNavigation -&gt; unit" Usage="wKNavigationDelegate.DidStartProvisionalNavigation (webView, navigation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("webView:didStartProvisionalNavigation:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="webView" Type="WebKit.WKWebView" />
        <Parameter Name="navigation" Type="WebKit.WKNavigation" />
      </Parameters>
      <Docs>
        <param name="webView">To be added.</param>
        <param name="navigation">To be added.</param>
        <summary>Method that is called when data begins to load.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
