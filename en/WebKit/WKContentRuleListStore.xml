<Type Name="WKContentRuleListStore" FullName="WebKit.WKContentRuleListStore">
  <TypeSignature Language="C#" Value="public class WKContentRuleListStore : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WKContentRuleListStore extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:WebKit.WKContentRuleListStore" />
  <TypeSignature Language="F#" Value="type WKContentRuleListStore = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("WKContentRuleListStore", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A store that contents rules for web content.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WKContentRuleListStore ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKContentRuleListStore.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WKContentRuleListStore (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKContentRuleListStore.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new WebKit.WKContentRuleListStore : Foundation.NSObjectFlag -&gt; WebKit.WKContentRuleListStore" Usage="new WebKit.WKContentRuleListStore t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WKContentRuleListStore (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKContentRuleListStore.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new WebKit.WKContentRuleListStore : nativeint -&gt; WebKit.WKContentRuleListStore" Usage="new WebKit.WKContentRuleListStore handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:WebKit.WKContentRuleListStore.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="WebKit.WKContentRuleListStore.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileContentRuleList">
      <MemberSignature Language="C#" Value="public virtual void CompileContentRuleList (string identifier, string encodedContentRuleList, Action&lt;WebKit.WKContentRuleList,Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CompileContentRuleList(string identifier, string encodedContentRuleList, class System.Action`2&lt;class WebKit.WKContentRuleList, class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKContentRuleListStore.CompileContentRuleList(System.String,System.String,System.Action{WebKit.WKContentRuleList,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member CompileContentRuleList : string * string * Action&lt;WebKit.WKContentRuleList, Foundation.NSError&gt; -&gt; unit&#xA;override this.CompileContentRuleList : string * string * Action&lt;WebKit.WKContentRuleList, Foundation.NSError&gt; -&gt; unit" Usage="wKContentRuleListStore.CompileContentRuleList (identifier, encodedContentRuleList, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("compileContentRuleListForIdentifier:encodedContentRuleList:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="encodedContentRuleList" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;WebKit.WKContentRuleList,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V87))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="identifier">The identifier for the newly compiled list.</param>
        <param name="encodedContentRuleList">JSON source to compile.</param>
        <param name="completionHandler">A handler to run after compilation completes or stops with an error.</param>
        <summary>Compiles the provided list of rules, adds the list to the store with the specified <paramref name="identifier" />, and runs a handler that receives the content list and any error that is encountered.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileContentRuleListAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;WebKit.WKContentRuleList&gt; CompileContentRuleListAsync (string identifier, string encodedContentRuleList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class WebKit.WKContentRuleList&gt; CompileContentRuleListAsync(string identifier, string encodedContentRuleList) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKContentRuleListStore.CompileContentRuleListAsync(System.String,System.String)" />
      <MemberSignature Language="F#" Value="abstract member CompileContentRuleListAsync : string * string -&gt; System.Threading.Tasks.Task&lt;WebKit.WKContentRuleList&gt;&#xA;override this.CompileContentRuleListAsync : string * string -&gt; System.Threading.Tasks.Task&lt;WebKit.WKContentRuleList&gt;" Usage="wKContentRuleListStore.CompileContentRuleListAsync (identifier, encodedContentRuleList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;WebKit.WKContentRuleList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="encodedContentRuleList" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">The identifier for the newly compiled list.</param>
        <param name="encodedContentRuleList">JSON source to compile.</param>
        <summary>Compiles the provided list of rules, adds the list to the store with the specified <paramref name="identifier" />, and runs a handler that receives the content list and any error that is encountered.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous CompileContentRuleList operation.  The value of the TResult parameter is of type System.Action&lt;WebKit.WKContentRuleList,Foundation.NSError&gt;.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultStore">
      <MemberSignature Language="C#" Value="public static WebKit.WKContentRuleListStore DefaultStore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class WebKit.WKContentRuleListStore DefaultStore" />
      <MemberSignature Language="DocId" Value="P:WebKit.WKContentRuleListStore.DefaultStore" />
      <MemberSignature Language="F#" Value="member this.DefaultStore : WebKit.WKContentRuleListStore" Usage="WebKit.WKContentRuleListStore.DefaultStore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("defaultStore")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebKit.WKContentRuleListStore</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the default store.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUrl">
      <MemberSignature Language="C#" Value="public static WebKit.WKContentRuleListStore FromUrl (Foundation.NSUrl url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class WebKit.WKContentRuleListStore FromUrl(class Foundation.NSUrl url) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKContentRuleListStore.FromUrl(Foundation.NSUrl)" />
      <MemberSignature Language="F#" Value="static member FromUrl : Foundation.NSUrl -&gt; WebKit.WKContentRuleListStore" Usage="WebKit.WKContentRuleListStore.FromUrl url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("storeWithURL:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WebKit.WKContentRuleListStore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="url">The location of a directory that contains compiled rule lists from which to create the new store.</param>
        <summary>Creates and returns a rule list store object from the provided <paramref name="url" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAvailableContentRuleListIdentifiers">
      <MemberSignature Language="C#" Value="public virtual void GetAvailableContentRuleListIdentifiers (Action&lt;string[]&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetAvailableContentRuleListIdentifiers(class System.Action`1&lt;string[]&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKContentRuleListStore.GetAvailableContentRuleListIdentifiers(System.Action{System.String[]})" />
      <MemberSignature Language="F#" Value="abstract member GetAvailableContentRuleListIdentifiers : Action&lt;string[]&gt; -&gt; unit&#xA;override this.GetAvailableContentRuleListIdentifiers : Action&lt;string[]&gt; -&gt; unit" Usage="wKContentRuleListStore.GetAvailableContentRuleListIdentifiers callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("getAvailableContentRuleListIdentifiers:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;System.String[]&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V3))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="callback">A handler to run with the available identifiers.</param>
        <summary>Retrieves the list of identifiers for available content rule lists and passes them to the provided <paramref name="callback" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAvailableContentRuleListIdentifiersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string[]&gt; GetAvailableContentRuleListIdentifiersAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string[]&gt; GetAvailableContentRuleListIdentifiersAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKContentRuleListStore.GetAvailableContentRuleListIdentifiersAsync" />
      <MemberSignature Language="F#" Value="abstract member GetAvailableContentRuleListIdentifiersAsync : unit -&gt; System.Threading.Tasks.Task&lt;string[]&gt;&#xA;override this.GetAvailableContentRuleListIdentifiersAsync : unit -&gt; System.Threading.Tasks.Task&lt;string[]&gt;" Usage="wKContentRuleListStore.GetAvailableContentRuleListIdentifiersAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves the list of identifiers for available content rule lists and passes them to the provided <paramref name="callback" />.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous GetAvailableContentRuleListIdentifiers operation.  The value of the TResult parameter is of type System.Action&lt;System.String[]&gt;.</para>
        </returns>
        <remarks>
          <para copied="true">The GetAvailableContentRuleListIdentifiersAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookUpContentRuleList">
      <MemberSignature Language="C#" Value="public virtual void LookUpContentRuleList (string identifier, Action&lt;WebKit.WKContentRuleList,Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LookUpContentRuleList(string identifier, class System.Action`2&lt;class WebKit.WKContentRuleList, class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKContentRuleListStore.LookUpContentRuleList(System.String,System.Action{WebKit.WKContentRuleList,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member LookUpContentRuleList : string * Action&lt;WebKit.WKContentRuleList, Foundation.NSError&gt; -&gt; unit&#xA;override this.LookUpContentRuleList : string * Action&lt;WebKit.WKContentRuleList, Foundation.NSError&gt; -&gt; unit" Usage="wKContentRuleListStore.LookUpContentRuleList (identifier, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("lookUpContentRuleListForIdentifier:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;WebKit.WKContentRuleList,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V87))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="identifier">The identifer for the rule list to look up.</param>
        <param name="completionHandler">A handler to run on the retrieved list.</param>
        <summary>Passes the content rule list that is specified by the provided <paramref name="identifier" /> to the specified <paramref name="completionHandler" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LookUpContentRuleListAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;WebKit.WKContentRuleList&gt; LookUpContentRuleListAsync (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class WebKit.WKContentRuleList&gt; LookUpContentRuleListAsync(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKContentRuleListStore.LookUpContentRuleListAsync(System.String)" />
      <MemberSignature Language="F#" Value="abstract member LookUpContentRuleListAsync : string -&gt; System.Threading.Tasks.Task&lt;WebKit.WKContentRuleList&gt;&#xA;override this.LookUpContentRuleListAsync : string -&gt; System.Threading.Tasks.Task&lt;WebKit.WKContentRuleList&gt;" Usage="wKContentRuleListStore.LookUpContentRuleListAsync identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;WebKit.WKContentRuleList&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">The identifer for the rule list to look up.</param>
        <summary>Passes the content rule list that is specified by the provided <paramref name="identifier" /> to the specified <paramref name="completionHandler" />.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous LookUpContentRuleList operation.  The value of the TResult parameter is of type System.Action&lt;WebKit.WKContentRuleList,Foundation.NSError&gt;.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveContentRuleList">
      <MemberSignature Language="C#" Value="public virtual void RemoveContentRuleList (string identifier, Action&lt;Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveContentRuleList(string identifier, class System.Action`1&lt;class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKContentRuleListStore.RemoveContentRuleList(System.String,System.Action{Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member RemoveContentRuleList : string * Action&lt;Foundation.NSError&gt; -&gt; unit&#xA;override this.RemoveContentRuleList : string * Action&lt;Foundation.NSError&gt; -&gt; unit" Usage="wKContentRuleListStore.RemoveContentRuleList (identifier, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeContentRuleListForIdentifier:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V8))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="identifier">The identifier for the list to remove.</param>
        <param name="completionHandler">An error handler to run after the operation completes.</param>
        <summary>Removes the content rule list that is specified by the provided <paramref name="identifier" /> and passes it to the specified <paramref name="completionHandler" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveContentRuleListAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task RemoveContentRuleListAsync (string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RemoveContentRuleListAsync(string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebKit.WKContentRuleListStore.RemoveContentRuleListAsync(System.String)" />
      <MemberSignature Language="F#" Value="abstract member RemoveContentRuleListAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.RemoveContentRuleListAsync : string -&gt; System.Threading.Tasks.Task" Usage="wKContentRuleListStore.RemoveContentRuleListAsync identifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="identifier">The identifier for the list to remove.</param>
        <summary>Removes the content rule list that is specified by the provided <paramref name="identifier" /> and passes it to the specified <paramref name="completionHandler" />.</summary>
        <returns>A task that represents the asynchronous RemoveContentRuleList operation</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
