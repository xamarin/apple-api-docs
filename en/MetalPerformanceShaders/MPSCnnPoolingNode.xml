<Type Name="MPSCnnPoolingNode" FullName="MetalPerformanceShaders.MPSCnnPoolingNode">
  <TypeSignature Language="C#" Value="public class MPSCnnPoolingNode : MetalPerformanceShaders.MPSNNFilterNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MPSCnnPoolingNode extends MetalPerformanceShaders.MPSNNFilterNode" />
  <TypeSignature Language="DocId" Value="T:MetalPerformanceShaders.MPSCnnPoolingNode" />
  <TypeSignature Language="F#" Value="type MPSCnnPoolingNode = class&#xA;    inherit MPSNNFilterNode" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MetalPerformanceShaders.MPSNNFilterNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("MPSCNNPoolingNode", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <see cref="T:MetalPerformanceShaders.MPSNNFilterNode" /> that represents a pooling kernel in a convolutional neural net.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MPSCnnPoolingNode (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSCnnPoolingNode.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new MetalPerformanceShaders.MPSCnnPoolingNode : Foundation.NSObjectFlag -&gt; MetalPerformanceShaders.MPSCnnPoolingNode" Usage="new MetalPerformanceShaders.MPSCnnPoolingNode t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal MPSCnnPoolingNode (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSCnnPoolingNode.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new MetalPerformanceShaders.MPSCnnPoolingNode : nativeint -&gt; MetalPerformanceShaders.MPSCnnPoolingNode" Usage="new MetalPerformanceShaders.MPSCnnPoolingNode handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MPSCnnPoolingNode (MetalPerformanceShaders.MPSNNImageNode sourceNode, nuint size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MetalPerformanceShaders.MPSNNImageNode sourceNode, valuetype System.nuint size) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSCnnPoolingNode.#ctor(MetalPerformanceShaders.MPSNNImageNode,System.nuint)" />
      <MemberSignature Language="F#" Value="new MetalPerformanceShaders.MPSCnnPoolingNode : MetalPerformanceShaders.MPSNNImageNode * nuint -&gt; MetalPerformanceShaders.MPSCnnPoolingNode" Usage="new MetalPerformanceShaders.MPSCnnPoolingNode (sourceNode, size)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithSource:filterSize:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sourceNode" Type="MetalPerformanceShaders.MPSNNImageNode" />
        <Parameter Name="size" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="sourceNode">To be added.</param>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MPSCnnPoolingNode (MetalPerformanceShaders.MPSNNImageNode sourceNode, nuint size, nuint stride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MetalPerformanceShaders.MPSNNImageNode sourceNode, valuetype System.nuint size, valuetype System.nuint stride) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSCnnPoolingNode.#ctor(MetalPerformanceShaders.MPSNNImageNode,System.nuint,System.nuint)" />
      <MemberSignature Language="F#" Value="new MetalPerformanceShaders.MPSCnnPoolingNode : MetalPerformanceShaders.MPSNNImageNode * nuint * nuint -&gt; MetalPerformanceShaders.MPSCnnPoolingNode" Usage="new MetalPerformanceShaders.MPSCnnPoolingNode (sourceNode, size, stride)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithSource:filterSize:stride:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sourceNode" Type="MetalPerformanceShaders.MPSNNImageNode" />
        <Parameter Name="size" Type="System.nuint" />
        <Parameter Name="stride" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="sourceNode">To be added.</param>
        <param name="size">To be added.</param>
        <param name="stride">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MPSCnnPoolingNode (MetalPerformanceShaders.MPSNNImageNode sourceNode, nuint kernelWidth, nuint kernelHeight, nuint strideInPixelsX, nuint strideInPixelsY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MetalPerformanceShaders.MPSNNImageNode sourceNode, valuetype System.nuint kernelWidth, valuetype System.nuint kernelHeight, valuetype System.nuint strideInPixelsX, valuetype System.nuint strideInPixelsY) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSCnnPoolingNode.#ctor(MetalPerformanceShaders.MPSNNImageNode,System.nuint,System.nuint,System.nuint,System.nuint)" />
      <MemberSignature Language="F#" Value="new MetalPerformanceShaders.MPSCnnPoolingNode : MetalPerformanceShaders.MPSNNImageNode * nuint * nuint * nuint * nuint -&gt; MetalPerformanceShaders.MPSCnnPoolingNode" Usage="new MetalPerformanceShaders.MPSCnnPoolingNode (sourceNode, kernelWidth, kernelHeight, strideInPixelsX, strideInPixelsY)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithSource:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="sourceNode" Type="MetalPerformanceShaders.MPSNNImageNode" />
        <Parameter Name="kernelWidth" Type="System.nuint" />
        <Parameter Name="kernelHeight" Type="System.nuint" />
        <Parameter Name="strideInPixelsX" Type="System.nuint" />
        <Parameter Name="strideInPixelsY" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="sourceNode">To be added.</param>
        <param name="kernelWidth">To be added.</param>
        <param name="kernelHeight">To be added.</param>
        <param name="strideInPixelsX">To be added.</param>
        <param name="strideInPixelsY">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:MetalPerformanceShaders.MPSCnnPoolingNode.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="MetalPerformanceShaders.MPSCnnPoolingNode.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static MetalPerformanceShaders.MPSCnnPoolingNode Create (MetalPerformanceShaders.MPSNNImageNode sourceNode, nuint size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MetalPerformanceShaders.MPSCnnPoolingNode Create(class MetalPerformanceShaders.MPSNNImageNode sourceNode, valuetype System.nuint size) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSCnnPoolingNode.Create(MetalPerformanceShaders.MPSNNImageNode,System.nuint)" />
      <MemberSignature Language="F#" Value="static member Create : MetalPerformanceShaders.MPSNNImageNode * nuint -&gt; MetalPerformanceShaders.MPSCnnPoolingNode" Usage="MetalPerformanceShaders.MPSCnnPoolingNode.Create (sourceNode, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("nodeWithSource:filterSize:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MetalPerformanceShaders.MPSCnnPoolingNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceNode" Type="MetalPerformanceShaders.MPSNNImageNode" />
        <Parameter Name="size" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="sourceNode">To be added.</param>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static MetalPerformanceShaders.MPSCnnPoolingNode Create (MetalPerformanceShaders.MPSNNImageNode sourceNode, nuint size, nuint stride);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MetalPerformanceShaders.MPSCnnPoolingNode Create(class MetalPerformanceShaders.MPSNNImageNode sourceNode, valuetype System.nuint size, valuetype System.nuint stride) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSCnnPoolingNode.Create(MetalPerformanceShaders.MPSNNImageNode,System.nuint,System.nuint)" />
      <MemberSignature Language="F#" Value="static member Create : MetalPerformanceShaders.MPSNNImageNode * nuint * nuint -&gt; MetalPerformanceShaders.MPSCnnPoolingNode" Usage="MetalPerformanceShaders.MPSCnnPoolingNode.Create (sourceNode, size, stride)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("nodeWithSource:filterSize:stride:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MetalPerformanceShaders.MPSCnnPoolingNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceNode" Type="MetalPerformanceShaders.MPSNNImageNode" />
        <Parameter Name="size" Type="System.nuint" />
        <Parameter Name="stride" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="sourceNode">To be added.</param>
        <param name="size">To be added.</param>
        <param name="stride">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
