<Type Name="MPSUnaryImageKernel" FullName="MetalPerformanceShaders.MPSUnaryImageKernel">
  <TypeSignature Language="C#" Value="public class MPSUnaryImageKernel : MetalPerformanceShaders.MPSKernel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MPSUnaryImageKernel extends MetalPerformanceShaders.MPSKernel" />
  <TypeSignature Language="DocId" Value="T:MetalPerformanceShaders.MPSUnaryImageKernel" />
  <TypeSignature Language="F#" Value="type MPSUnaryImageKernel = class&#xA;    inherit MPSKernel" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MetalPerformanceShaders.MPSKernel</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("MPSUnaryImageKernel", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a shader transformation produces one texture from another.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/MetalPerformanceShaders/Reference/MPSUnaryImageKernel_ClassReference/index.html">Apple documentation for <c>MPSUnaryImageKernel</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MPSUnaryImageKernel (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSUnaryImageKernel.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new MetalPerformanceShaders.MPSUnaryImageKernel : Foundation.NSCoder -&gt; MetalPerformanceShaders.MPSUnaryImageKernel" Usage="new MetalPerformanceShaders.MPSUnaryImageKernel coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MPSUnaryImageKernel (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSUnaryImageKernel.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new MetalPerformanceShaders.MPSUnaryImageKernel : Foundation.NSObjectFlag -&gt; MetalPerformanceShaders.MPSUnaryImageKernel" Usage="new MetalPerformanceShaders.MPSUnaryImageKernel t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MPSUnaryImageKernel (Metal.IMTLDevice device);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Metal.IMTLDevice device) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSUnaryImageKernel.#ctor(Metal.IMTLDevice)" />
      <MemberSignature Language="F#" Value="new MetalPerformanceShaders.MPSUnaryImageKernel : Metal.IMTLDevice -&gt; MetalPerformanceShaders.MPSUnaryImageKernel" Usage="new MetalPerformanceShaders.MPSUnaryImageKernel device" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithDevice:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="device" Type="Metal.IMTLDevice" />
      </Parameters>
      <Docs>
        <param name="device">To be added.</param>
        <summary>Creates a new <see cref="T:MetalPerformanceShaders.MPSUnaryImageKernel" /> for the specified <paramref name="device" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal MPSUnaryImageKernel (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSUnaryImageKernel.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new MetalPerformanceShaders.MPSUnaryImageKernel : nativeint -&gt; MetalPerformanceShaders.MPSUnaryImageKernel" Usage="new MetalPerformanceShaders.MPSUnaryImageKernel handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MPSUnaryImageKernel (Foundation.NSCoder aDecoder, Metal.IMTLDevice device);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder aDecoder, class Metal.IMTLDevice device) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSUnaryImageKernel.#ctor(Foundation.NSCoder,Metal.IMTLDevice)" />
      <MemberSignature Language="F#" Value="new MetalPerformanceShaders.MPSUnaryImageKernel : Foundation.NSCoder * Metal.IMTLDevice -&gt; MetalPerformanceShaders.MPSUnaryImageKernel" Usage="new MetalPerformanceShaders.MPSUnaryImageKernel (aDecoder, device)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:device:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="aDecoder" Type="Foundation.NSCoder" />
        <Parameter Name="device" Type="Metal.IMTLDevice" />
      </Parameters>
      <Docs>
        <param name="aDecoder">The unarchiver object.</param>
        <param name="device">To be added.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:MetalPerformanceShaders.MPSUnaryImageKernel.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="MetalPerformanceShaders.MPSUnaryImageKernel.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipRect">
      <MemberSignature Language="C#" Value="public virtual Metal.MTLRegion ClipRect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Metal.MTLRegion ClipRect" />
      <MemberSignature Language="DocId" Value="P:MetalPerformanceShaders.MPSUnaryImageKernel.ClipRect" />
      <MemberSignature Language="F#" Value="member this.ClipRect : Metal.MTLRegion with get, set" Usage="MetalPerformanceShaders.MPSUnaryImageKernel.ClipRect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("clipRect")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setClipRect:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("clipRect", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setClipRect:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.MTLRegion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the clipping rectangle in which to write data. The default value writes to the entire image.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <!--MPSRectNoClip info should go below when available. -->
      </Docs>
    </Member>
    <Member MemberName="EdgeMode">
      <MemberSignature Language="C#" Value="public virtual MetalPerformanceShaders.MPSImageEdgeMode EdgeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MetalPerformanceShaders.MPSImageEdgeMode EdgeMode" />
      <MemberSignature Language="DocId" Value="P:MetalPerformanceShaders.MPSUnaryImageKernel.EdgeMode" />
      <MemberSignature Language="F#" Value="member this.EdgeMode : MetalPerformanceShaders.MPSImageEdgeMode with get, set" Usage="MetalPerformanceShaders.MPSUnaryImageKernel.EdgeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("edgeMode")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setEdgeMode:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("edgeMode", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setEdgeMode:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MetalPerformanceShaders.MPSImageEdgeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the behavior to use when the shader encounters the edge of the image.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToCommandBuffer">
      <MemberSignature Language="C#" Value="public virtual bool EncodeToCommandBuffer (Metal.IMTLCommandBuffer commandBuffer, out Foundation.NSObject texture, MetalPerformanceShaders.MPSCopyAllocator copyAllocator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EncodeToCommandBuffer(class Metal.IMTLCommandBuffer commandBuffer, [out] class Foundation.NSObject&amp; texture, class MetalPerformanceShaders.MPSCopyAllocator copyAllocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSUnaryImageKernel.EncodeToCommandBuffer(Metal.IMTLCommandBuffer,Foundation.NSObject@,MetalPerformanceShaders.MPSCopyAllocator)" />
      <MemberSignature Language="F#" Value="abstract member EncodeToCommandBuffer : Metal.IMTLCommandBuffer *  * MetalPerformanceShaders.MPSCopyAllocator -&gt; bool&#xA;override this.EncodeToCommandBuffer : Metal.IMTLCommandBuffer *  * MetalPerformanceShaders.MPSCopyAllocator -&gt; bool" Usage="mPSUnaryImageKernel.EncodeToCommandBuffer (commandBuffer, texture, copyAllocator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("encodeToCommandBuffer:inPlaceTexture:fallbackCopyAllocator:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandBuffer" Type="Metal.IMTLCommandBuffer" />
        <Parameter Name="texture" Type="Foundation.NSObject" RefType="out" />
        <Parameter Name="copyAllocator" Type="MetalPerformanceShaders.MPSCopyAllocator">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDMPSCopyAllocator))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="commandBuffer">To be added.</param>
        <param name="texture">To be added.</param>
        <param name="copyAllocator">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Attempts to apply the kernel to <paramref name="texture" />, using <paramref name="copyAllocator" /> to allocate and write to a new texture if in-place application fails.</summary>
        <returns>
          <see langword="true" /> if in-place application succeeds. Otherwise, returns <see langword="false" />.</returns>
        <remarks>If <see langword="true" /> is returned and a non-null copy allocator was supplied, <paramref name="texture" /> will point to the newly allocated texture, whether in-place or out-of-place. If no copy allocator is supplied, the reference <paramref name="texture" /> remains unchanged on failure.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToCommandBuffer">
      <MemberSignature Language="C#" Value="public virtual void EncodeToCommandBuffer (Metal.IMTLCommandBuffer commandBuffer, Metal.IMTLTexture sourceTexture, Metal.IMTLTexture destinationTexture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeToCommandBuffer(class Metal.IMTLCommandBuffer commandBuffer, class Metal.IMTLTexture sourceTexture, class Metal.IMTLTexture destinationTexture) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSUnaryImageKernel.EncodeToCommandBuffer(Metal.IMTLCommandBuffer,Metal.IMTLTexture,Metal.IMTLTexture)" />
      <MemberSignature Language="F#" Value="abstract member EncodeToCommandBuffer : Metal.IMTLCommandBuffer * Metal.IMTLTexture * Metal.IMTLTexture -&gt; unit&#xA;override this.EncodeToCommandBuffer : Metal.IMTLCommandBuffer * Metal.IMTLTexture * Metal.IMTLTexture -&gt; unit" Usage="mPSUnaryImageKernel.EncodeToCommandBuffer (commandBuffer, sourceTexture, destinationTexture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("encodeToCommandBuffer:sourceTexture:destinationTexture:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandBuffer" Type="Metal.IMTLCommandBuffer" />
        <Parameter Name="sourceTexture" Type="Metal.IMTLTexture" />
        <Parameter Name="destinationTexture" Type="Metal.IMTLTexture" />
      </Parameters>
      <Docs>
        <param name="commandBuffer">To be added.</param>
        <param name="sourceTexture">To be added.</param>
        <param name="destinationTexture">To be added.</param>
        <summary>Encodes the kernel to <paramref name="commandBuffer" />, which will overwrite <paramref name="destinationTexture" /> with the result of applying the kernel to <paramref name="sourceTexture" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeToCommandBuffer">
      <MemberSignature Language="C#" Value="public virtual void EncodeToCommandBuffer (Metal.IMTLCommandBuffer commandBuffer, MetalPerformanceShaders.MPSImage sourceImage, MetalPerformanceShaders.MPSImage destinationImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeToCommandBuffer(class Metal.IMTLCommandBuffer commandBuffer, class MetalPerformanceShaders.MPSImage sourceImage, class MetalPerformanceShaders.MPSImage destinationImage) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSUnaryImageKernel.EncodeToCommandBuffer(Metal.IMTLCommandBuffer,MetalPerformanceShaders.MPSImage,MetalPerformanceShaders.MPSImage)" />
      <MemberSignature Language="F#" Value="abstract member EncodeToCommandBuffer : Metal.IMTLCommandBuffer * MetalPerformanceShaders.MPSImage * MetalPerformanceShaders.MPSImage -&gt; unit&#xA;override this.EncodeToCommandBuffer : Metal.IMTLCommandBuffer * MetalPerformanceShaders.MPSImage * MetalPerformanceShaders.MPSImage -&gt; unit" Usage="mPSUnaryImageKernel.EncodeToCommandBuffer (commandBuffer, sourceImage, destinationImage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("encodeToCommandBuffer:sourceImage:destinationImage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandBuffer" Type="Metal.IMTLCommandBuffer" />
        <Parameter Name="sourceImage" Type="MetalPerformanceShaders.MPSImage" />
        <Parameter Name="destinationImage" Type="MetalPerformanceShaders.MPSImage" />
      </Parameters>
      <Docs>
        <param name="commandBuffer">To be added.</param>
        <param name="sourceImage">To be added.</param>
        <param name="destinationImage">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public virtual MetalPerformanceShaders.MPSOffset Offset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MetalPerformanceShaders.MPSOffset Offset" />
      <MemberSignature Language="DocId" Value="P:MetalPerformanceShaders.MPSUnaryImageKernel.Offset" />
      <MemberSignature Language="F#" Value="member this.Offset : MetalPerformanceShaders.MPSOffset with get, set" Usage="MetalPerformanceShaders.MPSUnaryImageKernel.Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("offset")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setOffset:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("offset", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setOffset:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MetalPerformanceShaders.MPSOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the location of the destination clipping rectangle in the source texture.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceRegionForDestinationSize">
      <MemberSignature Language="C#" Value="public virtual MetalPerformanceShaders.MPSRegion SourceRegionForDestinationSize (Metal.MTLSize destinationSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MetalPerformanceShaders.MPSRegion SourceRegionForDestinationSize(valuetype Metal.MTLSize destinationSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:MetalPerformanceShaders.MPSUnaryImageKernel.SourceRegionForDestinationSize(Metal.MTLSize)" />
      <MemberSignature Language="F#" Value="abstract member SourceRegionForDestinationSize : Metal.MTLSize -&gt; MetalPerformanceShaders.MPSRegion&#xA;override this.SourceRegionForDestinationSize : Metal.MTLSize -&gt; MetalPerformanceShaders.MPSRegion" Usage="mPSUnaryImageKernel.SourceRegionForDestinationSize destinationSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("sourceRegionForDestinationSize:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MetalPerformanceShaders.MPSRegion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destinationSize" Type="Metal.MTLSize" />
      </Parameters>
      <Docs>
        <param name="destinationSize">To be added.</param>
        <summary>Calculates and returns the area of the source texture that will be read for the specified <paramref name="destinationSize" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
