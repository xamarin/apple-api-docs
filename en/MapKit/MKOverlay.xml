<Type Name="MKOverlay" FullName="MapKit.MKOverlay">
  <TypeSignature Language="C#" Value="public abstract class MKOverlay : MapKit.MKAnnotation, IDisposable, MapKit.IMKOverlay" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MKOverlay extends MapKit.MKAnnotation implements class MapKit.IMKAnnotation, class MapKit.IMKOverlay, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:MapKit.MKOverlay" />
  <TypeSignature Language="F#" Value="type MKOverlay = class&#xA;    inherit MKAnnotation&#xA;    interface IMKOverlay&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface IMKAnnotation" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MapKit.MKAnnotation</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MapKit.IMKAnnotation</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>MapKit.IMKOverlay</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("MKOverlay", false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Describes a map annotation that combines a location and a geometric shape.</summary>
    <remarks>
      <para>
        <see cref="T:MapKit.MKOverlay" />s allow the application developer to layer graphics above an <see cref="T:MapKit.MKMapView" />. The <see cref="T:MapKit.MKOverlay" /> will automatically position, zoom, and orient itself to the underlying <see cref="T:MapKit.MKMapView" />.</para>
      <para>iOS provides several standard overlays:</para>
      <list type="table">
        <listheader>
          <term>Class</term>
          <description>Description</description>
        </listheader>
        <item>
          <term>
            <see cref="T:MapKit.MKCircle" />
          </term>
          <description>A circular region</description>
        </item>
        <item>
          <term>
            <see cref="T:MapKit.MKPolygon" />
          </term>
          <description>A closed polygonal area.</description>
        </item>
        <item>
          <term>
            <see cref="T:MapKit.MKPolyline" />
          </term>
          <description>An area defined by points in which the first and final points are not automatically joined.</description>
        </item>
      </list>
    </remarks>
    <related type="article" href="http://docs.xamarin.com/guides/ios/platform_features/ios_maps">iOS Maps</related>
    <related type="recipe" href="http://docs.xamarin.com/recipes/ios/content_controls/map_view/add_an_overlay_to_a_map">Add an Overlay to a Map</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/MapKit/Reference/MKOverlay_protocol/index.html">Apple documentation for <c>MKOverlay</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MKOverlay ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKOverlay.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MKOverlay (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKOverlay.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new MapKit.MKOverlay : Foundation.NSObjectFlag -&gt; MapKit.MKOverlay" Usage="new MapKit.MKOverlay t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal MKOverlay (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKOverlay.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new MapKit.MKOverlay : nativeint -&gt; MapKit.MKOverlay" Usage="new MapKit.MKOverlay handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundingMapRect">
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MapKit.MKMapRect BoundingMapRect" />
      <MemberSignature Language="C#" Value="public abstract MapKit.MKMapRect BoundingMapRect { get; }" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKOverlay.BoundingMapRect" />
      <MemberSignature Language="F#" Value="member this.BoundingMapRect : MapKit.MKMapRect" Usage="MapKit.MKOverlay.BoundingMapRect" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:MapKit.IMKOverlay.BoundingMapRect</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("boundingMapRect")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.MKMapRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A <see cref="T:MapKit.MKMapRect" /> rectangle that contains the overlay.</summary>
        <value>The smallest rectangle that bounds the overlay.</value>
        <remarks>
          <para>The rectangle is defined using a projection of the globe onto a 2D surface.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReplaceMapContent">
      <MemberSignature Language="C#" Value="public virtual bool CanReplaceMapContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReplaceMapContent" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKOverlay.CanReplaceMapContent" />
      <MemberSignature Language="F#" Value="member this.CanReplaceMapContent : bool" Usage="MapKit.MKOverlay.CanReplaceMapContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("canReplaceMapContent")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersects">
      <MemberSignature Language="C#" Value="public virtual bool Intersects (MapKit.MKMapRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Intersects(valuetype MapKit.MKMapRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKOverlay.Intersects(MapKit.MKMapRect)" />
      <MemberSignature Language="F#" Value="abstract member Intersects : MapKit.MKMapRect -&gt; bool&#xA;override this.Intersects : MapKit.MKMapRect -&gt; bool" Usage="mKOverlay.Intersects rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("intersectsMapRect:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="MapKit.MKMapRect" />
      </Parameters>
      <Docs>
        <param name="rect">The area being checked for intersection with this <see cref="T:MapKit.MKOverlay" />.</param>
        <summary>Calculates whether the <paramref name="rect" /> intersects this <see cref="T:MapKit.MKOverlay" />.</summary>
        <returns>
          <see langword="true" /> if the rectangle overlaps the overlay.</returns>
        <remarks>
          <para>The default implementation uses the <see cref="P:MapKit.MKOverlay.BoundingMapRect" /> to calculate intersection. Application developers who need more precision should override this method.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
