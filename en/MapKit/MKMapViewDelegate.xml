<Type Name="MKMapViewDelegate" FullName="MapKit.MKMapViewDelegate">
  <TypeSignature Language="C#" Value="public class MKMapViewDelegate : Foundation.NSObject, IDisposable, MapKit.IMKMapViewDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MKMapViewDelegate extends Foundation.NSObject implements class MapKit.IMKMapViewDelegate, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:MapKit.MKMapViewDelegate" />
  <TypeSignature Language="F#" Value="type MKMapViewDelegate = class&#xA;    inherit NSObject&#xA;    interface IMKMapViewDelegate&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MapKit.IMKMapViewDelegate</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("MKMapViewDelegate", false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Used to receive notifications from an MKMapView.</summary>
    <remarks>To be added.</remarks>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/MapDemo">Example_ContentControls</related>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/Protocols_Delegates_Events/">Protocols_Delegates_Events</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/MapKit/Reference/MKMapViewDelegate_Protocol/index.html">Apple documentation for <c>MKMapViewDelegate</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MKMapViewDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MKMapViewDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new MapKit.MKMapViewDelegate : Foundation.NSObjectFlag -&gt; MapKit.MKMapViewDelegate" Usage="new MapKit.MKMapViewDelegate t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal MKMapViewDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new MapKit.MKMapViewDelegate : nativeint -&gt; MapKit.MKMapViewDelegate" Usage="new MapKit.MKMapViewDelegate handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalloutAccessoryControlTapped">
      <MemberSignature Language="C#" Value="public virtual void CalloutAccessoryControlTapped (MapKit.MKMapView mapView, MapKit.MKAnnotationView view, UIKit.UIControl control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CalloutAccessoryControlTapped(class MapKit.MKMapView mapView, class MapKit.MKAnnotationView view, class UIKit.UIControl control) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.CalloutAccessoryControlTapped(MapKit.MKMapView,MapKit.MKAnnotationView,UIKit.UIControl)" />
      <MemberSignature Language="F#" Value="abstract member CalloutAccessoryControlTapped : MapKit.MKMapView * MapKit.MKAnnotationView * UIKit.UIControl -&gt; unit&#xA;override this.CalloutAccessoryControlTapped : MapKit.MKMapView * MapKit.MKAnnotationView * UIKit.UIControl -&gt; unit" Usage="mKMapViewDelegate.CalloutAccessoryControlTapped (mapView, view, control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapView:annotationView:calloutAccessoryControlTapped:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
        <Parameter Name="view" Type="MapKit.MKAnnotationView" />
        <Parameter Name="control" Type="UIKit.UIControl" />
      </Parameters>
      <Docs>
        <param name="mapView">To be added.</param>
        <param name="view">To be added.</param>
        <param name="control">To be added.</param>
        <summary>Called when the callout accessory <paramref name="control" /> has been tapped.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangedDragState">
      <MemberSignature Language="C#" Value="public virtual void ChangedDragState (MapKit.MKMapView mapView, MapKit.MKAnnotationView annotationView, MapKit.MKAnnotationViewDragState newState, MapKit.MKAnnotationViewDragState oldState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ChangedDragState(class MapKit.MKMapView mapView, class MapKit.MKAnnotationView annotationView, valuetype MapKit.MKAnnotationViewDragState newState, valuetype MapKit.MKAnnotationViewDragState oldState) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.ChangedDragState(MapKit.MKMapView,MapKit.MKAnnotationView,MapKit.MKAnnotationViewDragState,MapKit.MKAnnotationViewDragState)" />
      <MemberSignature Language="F#" Value="abstract member ChangedDragState : MapKit.MKMapView * MapKit.MKAnnotationView * MapKit.MKAnnotationViewDragState * MapKit.MKAnnotationViewDragState -&gt; unit&#xA;override this.ChangedDragState : MapKit.MKMapView * MapKit.MKAnnotationView * MapKit.MKAnnotationViewDragState * MapKit.MKAnnotationViewDragState -&gt; unit" Usage="mKMapViewDelegate.ChangedDragState (mapView, annotationView, newState, oldState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapView:annotationView:didChangeDragState:fromOldState:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
        <Parameter Name="annotationView" Type="MapKit.MKAnnotationView" />
        <Parameter Name="newState" Type="MapKit.MKAnnotationViewDragState" />
        <Parameter Name="oldState" Type="MapKit.MKAnnotationViewDragState" />
      </Parameters>
      <Docs>
        <param name="mapView">To be added.</param>
        <param name="annotationView">To be added.</param>
        <param name="newState">To be added.</param>
        <param name="oldState">To be added.</param>
        <summary>Called when the drag state has changed from <paramref name="oldState" /> to <paramref name="newState" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateClusterAnnotation">
      <MemberSignature Language="C#" Value="public virtual MapKit.MKClusterAnnotation CreateClusterAnnotation (MapKit.MKMapView mapView, MapKit.IMKAnnotation[] memberAnnotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MapKit.MKClusterAnnotation CreateClusterAnnotation(class MapKit.MKMapView mapView, class MapKit.IMKAnnotation[] memberAnnotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.CreateClusterAnnotation(MapKit.MKMapView,MapKit.IMKAnnotation[])" />
      <MemberSignature Language="F#" Value="abstract member CreateClusterAnnotation : MapKit.MKMapView * MapKit.IMKAnnotation[] -&gt; MapKit.MKClusterAnnotation&#xA;override this.CreateClusterAnnotation : MapKit.MKMapView * MapKit.IMKAnnotation[] -&gt; MapKit.MKClusterAnnotation" Usage="mKMapViewDelegate.CreateClusterAnnotation (mapView, memberAnnotations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapView:clusterAnnotationForMemberAnnotations:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.MKClusterAnnotation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
        <Parameter Name="memberAnnotations" Type="MapKit.IMKAnnotation[]" />
      </Parameters>
      <Docs>
        <param name="mapView">To be added.</param>
        <param name="memberAnnotations">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidAddAnnotationViews">
      <MemberSignature Language="C#" Value="public virtual void DidAddAnnotationViews (MapKit.MKMapView mapView, MapKit.MKAnnotationView[] views);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidAddAnnotationViews(class MapKit.MKMapView mapView, class MapKit.MKAnnotationView[] views) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.DidAddAnnotationViews(MapKit.MKMapView,MapKit.MKAnnotationView[])" />
      <MemberSignature Language="F#" Value="abstract member DidAddAnnotationViews : MapKit.MKMapView * MapKit.MKAnnotationView[] -&gt; unit&#xA;override this.DidAddAnnotationViews : MapKit.MKMapView * MapKit.MKAnnotationView[] -&gt; unit" Usage="mKMapViewDelegate.DidAddAnnotationViews (mapView, views)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapView:didAddAnnotationViews:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
        <Parameter Name="views" Type="MapKit.MKAnnotationView[]" />
      </Parameters>
      <Docs>
        <param name="mapView">To be added.</param>
        <param name="views">To be added.</param>
        <summary>Called when an annotation view (or views) have been added to <paramref name="mapView" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidAddOverlayRenderers">
      <MemberSignature Language="C#" Value="public virtual void DidAddOverlayRenderers (MapKit.MKMapView mapView, MapKit.MKOverlayRenderer[] renderers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidAddOverlayRenderers(class MapKit.MKMapView mapView, class MapKit.MKOverlayRenderer[] renderers) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.DidAddOverlayRenderers(MapKit.MKMapView,MapKit.MKOverlayRenderer[])" />
      <MemberSignature Language="F#" Value="abstract member DidAddOverlayRenderers : MapKit.MKMapView * MapKit.MKOverlayRenderer[] -&gt; unit&#xA;override this.DidAddOverlayRenderers : MapKit.MKMapView * MapKit.MKOverlayRenderer[] -&gt; unit" Usage="mKMapViewDelegate.DidAddOverlayRenderers (mapView, renderers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapView:didAddOverlayRenderers:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
        <Parameter Name="renderers" Type="MapKit.MKOverlayRenderer[]" />
      </Parameters>
      <Docs>
        <param name="mapView">To be added.</param>
        <param name="renderers">To be added.</param>
        <summary>Called when an overlay renderer (or renderers) have been added to <paramref name="mapView" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidAddOverlayViews">
      <MemberSignature Language="C#" Value="public virtual void DidAddOverlayViews (MapKit.MKMapView mapView, MapKit.MKOverlayView overlayViews);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidAddOverlayViews(class MapKit.MKMapView mapView, class MapKit.MKOverlayView overlayViews) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.DidAddOverlayViews(MapKit.MKMapView,MapKit.MKOverlayView)" />
      <MemberSignature Language="F#" Value="abstract member DidAddOverlayViews : MapKit.MKMapView * MapKit.MKOverlayView -&gt; unit&#xA;override this.DidAddOverlayViews : MapKit.MKMapView * MapKit.MKOverlayView -&gt; unit" Usage="mKMapViewDelegate.DidAddOverlayViews (mapView, overlayViews)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapView:didAddOverlayViews:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, "Use 'DidAddOverlayRenderers' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
        <Parameter Name="overlayViews" Type="MapKit.MKOverlayView" />
      </Parameters>
      <Docs>
        <param name="mapView">To be added.</param>
        <param name="overlayViews">To be added.</param>
        <summary>Developers should not use this deprecated method. Developers should use 'DidAddOverlayRenderers' instead.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidChangeUserTrackingMode">
      <MemberSignature Language="C#" Value="public virtual void DidChangeUserTrackingMode (MapKit.MKMapView mapView, MapKit.MKUserTrackingMode mode, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidChangeUserTrackingMode(class MapKit.MKMapView mapView, valuetype MapKit.MKUserTrackingMode mode, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.DidChangeUserTrackingMode(MapKit.MKMapView,MapKit.MKUserTrackingMode,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DidChangeUserTrackingMode : MapKit.MKMapView * MapKit.MKUserTrackingMode * bool -&gt; unit&#xA;override this.DidChangeUserTrackingMode : MapKit.MKMapView * MapKit.MKUserTrackingMode * bool -&gt; unit" Usage="mKMapViewDelegate.DidChangeUserTrackingMode (mapView, mode, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapView:didChangeUserTrackingMode:animated:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
        <Parameter Name="mode" Type="MapKit.MKUserTrackingMode" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mapView">To be added.</param>
        <param name="mode">To be added.</param>
        <param name="animated">To be added.</param>
        <summary>Indicates a change in the active <see cref="T:MapKit.MKUserTrackingMode" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidChangeVisibleRegion">
      <MemberSignature Language="C#" Value="public virtual void DidChangeVisibleRegion (MapKit.MKMapView mapView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidChangeVisibleRegion(class MapKit.MKMapView mapView) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.DidChangeVisibleRegion(MapKit.MKMapView)" />
      <MemberSignature Language="F#" Value="abstract member DidChangeVisibleRegion : MapKit.MKMapView -&gt; unit&#xA;override this.DidChangeVisibleRegion : MapKit.MKMapView -&gt; unit" Usage="mKMapViewDelegate.DidChangeVisibleRegion mapView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapViewDidChangeVisibleRegion:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
      </Parameters>
      <Docs>
        <param name="mapView">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidDeselectAnnotationView">
      <MemberSignature Language="C#" Value="public virtual void DidDeselectAnnotationView (MapKit.MKMapView mapView, MapKit.MKAnnotationView view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidDeselectAnnotationView(class MapKit.MKMapView mapView, class MapKit.MKAnnotationView view) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.DidDeselectAnnotationView(MapKit.MKMapView,MapKit.MKAnnotationView)" />
      <MemberSignature Language="F#" Value="abstract member DidDeselectAnnotationView : MapKit.MKMapView * MapKit.MKAnnotationView -&gt; unit&#xA;override this.DidDeselectAnnotationView : MapKit.MKMapView * MapKit.MKAnnotationView -&gt; unit" Usage="mKMapViewDelegate.DidDeselectAnnotationView (mapView, view)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapView:didDeselectAnnotationView:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
        <Parameter Name="view" Type="MapKit.MKAnnotationView" />
      </Parameters>
      <Docs>
        <param name="mapView">To be added.</param>
        <param name="view">To be added.</param>
        <summary>Indicates that <paramref name="view" /> has been deselected.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidFailToLocateUser">
      <MemberSignature Language="C#" Value="public virtual void DidFailToLocateUser (MapKit.MKMapView mapView, Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidFailToLocateUser(class MapKit.MKMapView mapView, class Foundation.NSError error) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.DidFailToLocateUser(MapKit.MKMapView,Foundation.NSError)" />
      <MemberSignature Language="F#" Value="abstract member DidFailToLocateUser : MapKit.MKMapView * Foundation.NSError -&gt; unit&#xA;override this.DidFailToLocateUser : MapKit.MKMapView * Foundation.NSError -&gt; unit" Usage="mKMapViewDelegate.DidFailToLocateUser (mapView, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapView:didFailToLocateUserWithError:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
        <Parameter Name="error" Type="Foundation.NSError" />
      </Parameters>
      <Docs>
        <param name="mapView">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Indicates that the attempt to locate the current user has failed due to <paramref name="error" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidFinishRenderingMap">
      <MemberSignature Language="C#" Value="public virtual void DidFinishRenderingMap (MapKit.MKMapView mapView, bool fullyRendered);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidFinishRenderingMap(class MapKit.MKMapView mapView, bool fullyRendered) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.DidFinishRenderingMap(MapKit.MKMapView,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DidFinishRenderingMap : MapKit.MKMapView * bool -&gt; unit&#xA;override this.DidFinishRenderingMap : MapKit.MKMapView * bool -&gt; unit" Usage="mKMapViewDelegate.DidFinishRenderingMap (mapView, fullyRendered)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapViewDidFinishRenderingMap:fullyRendered:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
        <Parameter Name="fullyRendered" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mapView">To be added.</param>
        <param name="fullyRendered">To be added.</param>
        <summary>Indicates that rendering of <paramref name="mapView" /> has completed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidSelectAnnotationView">
      <MemberSignature Language="C#" Value="public virtual void DidSelectAnnotationView (MapKit.MKMapView mapView, MapKit.MKAnnotationView view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidSelectAnnotationView(class MapKit.MKMapView mapView, class MapKit.MKAnnotationView view) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.DidSelectAnnotationView(MapKit.MKMapView,MapKit.MKAnnotationView)" />
      <MemberSignature Language="F#" Value="abstract member DidSelectAnnotationView : MapKit.MKMapView * MapKit.MKAnnotationView -&gt; unit&#xA;override this.DidSelectAnnotationView : MapKit.MKMapView * MapKit.MKAnnotationView -&gt; unit" Usage="mKMapViewDelegate.DidSelectAnnotationView (mapView, view)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapView:didSelectAnnotationView:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
        <Parameter Name="view" Type="MapKit.MKAnnotationView" />
      </Parameters>
      <Docs>
        <param name="mapView">To be added.</param>
        <param name="view">To be added.</param>
        <summary>Indicates that the specified <see cref="T:MapKit.MKAnnotationView" /> has been selected.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidStopLocatingUser">
      <MemberSignature Language="C#" Value="public virtual void DidStopLocatingUser (MapKit.MKMapView mapView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidStopLocatingUser(class MapKit.MKMapView mapView) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.DidStopLocatingUser(MapKit.MKMapView)" />
      <MemberSignature Language="F#" Value="abstract member DidStopLocatingUser : MapKit.MKMapView -&gt; unit&#xA;override this.DidStopLocatingUser : MapKit.MKMapView -&gt; unit" Usage="mKMapViewDelegate.DidStopLocatingUser mapView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapViewDidStopLocatingUser:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
      </Parameters>
      <Docs>
        <param name="mapView">To be added.</param>
        <summary>Indicates the system has stopped attemptig to locate the user.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidUpdateUserLocation">
      <MemberSignature Language="C#" Value="public virtual void DidUpdateUserLocation (MapKit.MKMapView mapView, MapKit.MKUserLocation userLocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidUpdateUserLocation(class MapKit.MKMapView mapView, class MapKit.MKUserLocation userLocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.DidUpdateUserLocation(MapKit.MKMapView,MapKit.MKUserLocation)" />
      <MemberSignature Language="F#" Value="abstract member DidUpdateUserLocation : MapKit.MKMapView * MapKit.MKUserLocation -&gt; unit&#xA;override this.DidUpdateUserLocation : MapKit.MKMapView * MapKit.MKUserLocation -&gt; unit" Usage="mKMapViewDelegate.DidUpdateUserLocation (mapView, userLocation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapView:didUpdateUserLocation:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
        <Parameter Name="userLocation" Type="MapKit.MKUserLocation" />
      </Parameters>
      <Docs>
        <param name="mapView">To be added.</param>
        <param name="userLocation">To be added.</param>
        <summary>Indicates the system has provided an update to the user's location.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewForAnnotation">
      <MemberSignature Language="C#" Value="public virtual MapKit.MKAnnotationView GetViewForAnnotation (MapKit.MKMapView mapView, MapKit.IMKAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MapKit.MKAnnotationView GetViewForAnnotation(class MapKit.MKMapView mapView, class MapKit.IMKAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.GetViewForAnnotation(MapKit.MKMapView,MapKit.IMKAnnotation)" />
      <MemberSignature Language="F#" Value="abstract member GetViewForAnnotation : MapKit.MKMapView * MapKit.IMKAnnotation -&gt; MapKit.MKAnnotationView&#xA;override this.GetViewForAnnotation : MapKit.MKMapView * MapKit.IMKAnnotation -&gt; MapKit.MKAnnotationView" Usage="mKMapViewDelegate.GetViewForAnnotation (mapView, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapView:viewForAnnotation:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.MKAnnotationView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
        <Parameter Name="annotation" Type="MapKit.IMKAnnotation" />
      </Parameters>
      <Docs>
        <param name="mapView">To be added.</param>
        <param name="annotation">To be added.</param>
        <summary>Returns the <see cref="T:MapKit.MKAnnotationView" /> associated with the <paramref name="annotation" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewForOverlay">
      <MemberSignature Language="C#" Value="public virtual MapKit.MKOverlayView GetViewForOverlay (MapKit.MKMapView mapView, MapKit.IMKOverlay overlay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MapKit.MKOverlayView GetViewForOverlay(class MapKit.MKMapView mapView, class MapKit.IMKOverlay overlay) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.GetViewForOverlay(MapKit.MKMapView,MapKit.IMKOverlay)" />
      <MemberSignature Language="F#" Value="abstract member GetViewForOverlay : MapKit.MKMapView * MapKit.IMKOverlay -&gt; MapKit.MKOverlayView&#xA;override this.GetViewForOverlay : MapKit.MKMapView * MapKit.IMKOverlay -&gt; MapKit.MKOverlayView" Usage="mKMapViewDelegate.GetViewForOverlay (mapView, overlay)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapView:viewForOverlay:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, "Use 'MKOverlayRenderer.RendererForOverlay' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.MKOverlayView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
        <Parameter Name="overlay" Type="MapKit.IMKOverlay" />
      </Parameters>
      <Docs>
        <param name="mapView">To be added.</param>
        <param name="overlay">To be added.</param>
        <summary>Use MKOverlayRenderer.RendererForOverlay instead</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadingMapFailed">
      <MemberSignature Language="C#" Value="public virtual void LoadingMapFailed (MapKit.MKMapView mapView, Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadingMapFailed(class MapKit.MKMapView mapView, class Foundation.NSError error) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.LoadingMapFailed(MapKit.MKMapView,Foundation.NSError)" />
      <MemberSignature Language="F#" Value="abstract member LoadingMapFailed : MapKit.MKMapView * Foundation.NSError -&gt; unit&#xA;override this.LoadingMapFailed : MapKit.MKMapView * Foundation.NSError -&gt; unit" Usage="mKMapViewDelegate.LoadingMapFailed (mapView, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapViewDidFailLoadingMap:withError:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
        <Parameter Name="error" Type="Foundation.NSError" />
      </Parameters>
      <Docs>
        <param name="mapView">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Indicates an <paramref name="error" /> caused loading to fail.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapLoaded">
      <MemberSignature Language="C#" Value="public virtual void MapLoaded (MapKit.MKMapView mapView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MapLoaded(class MapKit.MKMapView mapView) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.MapLoaded(MapKit.MKMapView)" />
      <MemberSignature Language="F#" Value="abstract member MapLoaded : MapKit.MKMapView -&gt; unit&#xA;override this.MapLoaded : MapKit.MKMapView -&gt; unit" Usage="mKMapViewDelegate.MapLoaded mapView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapViewDidFinishLoadingMap:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
      </Parameters>
      <Docs>
        <param name="mapView">To be added.</param>
        <summary>Indicates that loading of map data has completed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OverlayRenderer">
      <MemberSignature Language="C#" Value="public virtual MapKit.MKOverlayRenderer OverlayRenderer (MapKit.MKMapView mapView, MapKit.IMKOverlay overlay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MapKit.MKOverlayRenderer OverlayRenderer(class MapKit.MKMapView mapView, class MapKit.IMKOverlay overlay) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.OverlayRenderer(MapKit.MKMapView,MapKit.IMKOverlay)" />
      <MemberSignature Language="F#" Value="abstract member OverlayRenderer : MapKit.MKMapView * MapKit.IMKOverlay -&gt; MapKit.MKOverlayRenderer&#xA;override this.OverlayRenderer : MapKit.MKMapView * MapKit.IMKOverlay -&gt; MapKit.MKOverlayRenderer" Usage="mKMapViewDelegate.OverlayRenderer (mapView, overlay)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapView:rendererForOverlay:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.MKOverlayRenderer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
        <Parameter Name="overlay" Type="MapKit.IMKOverlay" />
      </Parameters>
      <Docs>
        <param name="mapView">The <see cref="T:MapKit.MKMapView" /> being rendered.</param>
        <param name="overlay">The overlay requiring a renderer.</param>
        <summary>Calculates he <see cref="T:MapKit.MKOverlayRenderer" /> appropriate to the <paramref name="overlay" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>iOS distinguishes between the <see cref="T:MapKit.MKOverlay" />, which represents the geometry of an overlay, and it's visual presentation. Prior to iOS 7, overlays were rendered using <see cref="T:MapKit.MKOverlayView" />s. In iOS 7, these classes have been deprecated, and overlays now use the more efficient subclasses of <see cref="T:MapKit.MKOverlayRenderer" />. </para>
          <para>To create an overlay and its renderer, application developers must add the overlay to the <see cref="T:MapKit.MKMapView" /> and return the renderer either using the <see cref="P:MapKit.MKMapView.OverlayRenderer" /> property or by overriding the <see cref="M:MapKit.MKMapViewDelegate.OverlayRenderer(MapKit.MKMapView,MapKit.IMKOverlay)" /> method.</para>
          <para>This method dynamically calculates the renderer, allowing the application developer to reuse renderers with identical properties or to change properties dynamically.</para>
        </remarks>
        <altmember cref="P:MapKit.MKMapView.OverlayRenderer" />
      </Docs>
    </Member>
    <Member MemberName="RegionChanged">
      <MemberSignature Language="C#" Value="public virtual void RegionChanged (MapKit.MKMapView mapView, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegionChanged(class MapKit.MKMapView mapView, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.RegionChanged(MapKit.MKMapView,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member RegionChanged : MapKit.MKMapView * bool -&gt; unit&#xA;override this.RegionChanged : MapKit.MKMapView * bool -&gt; unit" Usage="mKMapViewDelegate.RegionChanged (mapView, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapView:regionDidChangeAnimated:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mapView">To be added.</param>
        <param name="animated">To be added.</param>
        <summary>Indicates the region displayed by <paramref name="mapView" /> has changed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegionWillChange">
      <MemberSignature Language="C#" Value="public virtual void RegionWillChange (MapKit.MKMapView mapView, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegionWillChange(class MapKit.MKMapView mapView, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.RegionWillChange(MapKit.MKMapView,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member RegionWillChange : MapKit.MKMapView * bool -&gt; unit&#xA;override this.RegionWillChange : MapKit.MKMapView * bool -&gt; unit" Usage="mKMapViewDelegate.RegionWillChange (mapView, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapView:regionWillChangeAnimated:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mapView">To be added.</param>
        <param name="animated">To be added.</param>
        <summary>Indicates the region displayed by <paramref name="mapView" /> is about to change.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillStartLoadingMap">
      <MemberSignature Language="C#" Value="public virtual void WillStartLoadingMap (MapKit.MKMapView mapView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillStartLoadingMap(class MapKit.MKMapView mapView) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.WillStartLoadingMap(MapKit.MKMapView)" />
      <MemberSignature Language="F#" Value="abstract member WillStartLoadingMap : MapKit.MKMapView -&gt; unit&#xA;override this.WillStartLoadingMap : MapKit.MKMapView -&gt; unit" Usage="mKMapViewDelegate.WillStartLoadingMap mapView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapViewWillStartLoadingMap:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
      </Parameters>
      <Docs>
        <param name="mapView">To be added.</param>
        <summary>Indicates that loading of map data is about to begin.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillStartLocatingUser">
      <MemberSignature Language="C#" Value="public virtual void WillStartLocatingUser (MapKit.MKMapView mapView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillStartLocatingUser(class MapKit.MKMapView mapView) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.WillStartLocatingUser(MapKit.MKMapView)" />
      <MemberSignature Language="F#" Value="abstract member WillStartLocatingUser : MapKit.MKMapView -&gt; unit&#xA;override this.WillStartLocatingUser : MapKit.MKMapView -&gt; unit" Usage="mKMapViewDelegate.WillStartLocatingUser mapView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapViewWillStartLocatingUser:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
      </Parameters>
      <Docs>
        <param name="mapView">To be added.</param>
        <summary>Indicates that the system will start attempting to locate the user.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillStartRenderingMap">
      <MemberSignature Language="C#" Value="public virtual void WillStartRenderingMap (MapKit.MKMapView mapView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillStartRenderingMap(class MapKit.MKMapView mapView) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapViewDelegate.WillStartRenderingMap(MapKit.MKMapView)" />
      <MemberSignature Language="F#" Value="abstract member WillStartRenderingMap : MapKit.MKMapView -&gt; unit&#xA;override this.WillStartRenderingMap : MapKit.MKMapView -&gt; unit" Usage="mKMapViewDelegate.WillStartRenderingMap mapView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mapViewWillStartRenderingMap:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapView" Type="MapKit.MKMapView" />
      </Parameters>
      <Docs>
        <param name="mapView">To be added.</param>
        <summary>Indicates that rendering of <paramref name="mapView" /> is about to begin.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
