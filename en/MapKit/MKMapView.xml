<Type Name="MKMapView" FullName="MapKit.MKMapView">
  <TypeSignature Language="C#" Value="public class MKMapView : UIKit.UIView" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MKMapView extends UIKit.UIView" />
  <TypeSignature Language="DocId" Value="T:MapKit.MKMapView" />
  <TypeSignature Language="F#" Value="type MKMapView = class&#xA;    inherit UIView" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.UIView</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("MKMapView", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 9, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Embeddable Map View.</summary>
    <remarks>
      <para>The <see cref="T:MapKit.MKMapView" /> provides a zoomable map interface upon which the application developer can add information-bearing <see cref="T:MapKit.MKAnnotation" />s and area-based <see cref="T:MapKit.MKOverlay" />s. </para>
      <para>In iOS 7 and later, maps support 3D imagery when the <see cref="P:MapKit.MKMapView.MapType" /> property is <see cref="F:MapKit.MKMapType.Standard" />. To view 3D imagery, the <see cref="P:MapKit.MKMapView.ShowsBuildings" /> property must be <see langword="true" /> and the <see cref="P:MapKit.MKMapView.Camera" /> and and <see cref="P:MapKit.MKMapView.PitchEnabled" /> properties must be set to create a non-vertical perspective. The iOS simulator does not render 3D buildings. The following example shows how a camera can be set to provide 3D imagery:</para>
      <example>
        <code lang="C#"><![CDATA[
var target = new CLLocationCoordinate2D(37.7952, -122.4028);
var viewPoint = new CLLocationCoordinate2D(37.8009, -122.4100);
//Enable 3D buildings
mapView.ShowsBuildings = true;
mapView.PitchEnabled = true;

var camera = MKMapCamera.CameraLookingAtCenterCoordinate(target, viewPoint, 500);
mapView.Camera = camera;
          ]]></code>
      </example>
      <para>
        <img href="~/MapKit/_images/MKMapCamera.png" />
      </para>
      <format type="text/html">
        <h3>Overlays</h3>
      </format>
      <para>iOS distinguishes between the <see cref="T:MapKit.MKOverlay" />, which represents the geometry of an overlay, and it's visual presentation. Prior to iOS 7, overlays were rendered using <see cref="T:MapKit.MKOverlayView" />s. In iOS 7, these classes have been deprecated, and overlays now use the more efficient subclasses of <see cref="T:MapKit.MKOverlayRenderer" />. </para>
      <para>To create an overlay and its renderer, application developers must add the overlay to the <see cref="T:MapKit.MKMapView" /> and return the renderer either using the <see cref="P:MapKit.MKMapView.OverlayRenderer" /> property or by overriding the <see cref="M:MapKit.MKMapViewDelegate.OverlayRenderer(MapKit.MKMapView,MapKit.IMKOverlay)" /> method.</para>
      <example>
        <code lang="C#"><![CDATA[
MKPolygon hotelOverlay = MKPolygon.FromCoordinates(coordinates);
mkMap.AddOverlay (hotelOverlay);
var polygon = MKPolygon.FromCoordinates(coordinates);
var renderer = new MKPolygonRenderer(polygon) { FillColor = UIColor.Red, Alpha = 0.5f };
mkMap.OverlayRenderer = (view, overlay) => renderer;
          ]]></code>
      </example>
      <para>
        <img href="~/MapKit/_images/MKOverlayRenderer.png" />
      </para>
    </remarks>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/MapDemo">Example_ContentControls</related>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/MapCallouts/">MapCallouts</related>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Content_Controls/Map_View/Add_an_Annotation_to_a_Map">Add an Annotation to a Map</related>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Content_Controls/Map_View/Add_an_Overlay_to_a_Map">Add an Overlay to a Map</related>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Content_Controls/Map_View/Change_Map_Modes">Change Map Modes</related>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Content_Controls/Map_View/Display_Device_Location">Display Device Location</related>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Content_Controls/Map_View/Handle_Annotation_Click">Handle Annotation Click</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/MapKit/Reference/MKMapView_Class/index.html">Apple documentation for <c>MKMapView</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MKMapView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MKMapView (CoreGraphics.CGRect frame);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype CoreGraphics.CGRect frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.#ctor(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="new MapKit.MKMapView : CoreGraphics.CGRect -&gt; MapKit.MKMapView" Usage="new MapKit.MKMapView frame" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithFrame:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="frame" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="frame">Frame used by the view, expressed in iOS points.</param>
        <summary>Initializes the MKMapView with the specified frame.</summary>
        <remarks>
          <para>This constructor is used to programmatically create a new instance of MKMapView with the specified dimension in the frame.   The object will only be displayed once it has been added to a view hierarchy by calling AddSubview in a containing view.</para>
          <para>This constructor is not invoked when deserializing objects from storyboards or XIB filesinstead the constructor that takes an NSCoder parameter is invoked.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MKMapView (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new MapKit.MKMapView : Foundation.NSCoder -&gt; MapKit.MKMapView" Usage="new MapKit.MKMapView coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MKMapView (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new MapKit.MKMapView : Foundation.NSObjectFlag -&gt; MapKit.MKMapView" Usage="new MapKit.MKMapView t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal MKMapView (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new MapKit.MKMapView : nativeint -&gt; MapKit.MKMapView" Usage="new MapKit.MKMapView handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAnnotation">
      <MemberSignature Language="C#" Value="public virtual void AddAnnotation (MapKit.IMKAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAnnotation(class MapKit.IMKAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.AddAnnotation(MapKit.IMKAnnotation)" />
      <MemberSignature Language="F#" Value="abstract member AddAnnotation : MapKit.IMKAnnotation -&gt; unit&#xA;override this.AddAnnotation : MapKit.IMKAnnotation -&gt; unit" Usage="mKMapView.AddAnnotation annotation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addAnnotation:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="MapKit.IMKAnnotation" />
      </Parameters>
      <Docs>
        <param name="annotation">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAnnotations">
      <MemberSignature Language="C#" Value="public virtual void AddAnnotations (params MapKit.IMKAnnotation[] annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAnnotations(class MapKit.IMKAnnotation[] annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.AddAnnotations(MapKit.IMKAnnotation[])" />
      <MemberSignature Language="F#" Value="abstract member AddAnnotations : MapKit.IMKAnnotation[] -&gt; unit&#xA;override this.AddAnnotations : MapKit.IMKAnnotation[] -&gt; unit" Usage="mKMapView.AddAnnotations annotations" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addAnnotations:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotations" Type="MapKit.IMKAnnotation[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOverlay">
      <MemberSignature Language="C#" Value="public virtual void AddOverlay (MapKit.IMKOverlay overlay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddOverlay(class MapKit.IMKOverlay overlay) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.AddOverlay(MapKit.IMKOverlay)" />
      <MemberSignature Language="F#" Value="abstract member AddOverlay : MapKit.IMKOverlay -&gt; unit&#xA;override this.AddOverlay : MapKit.IMKOverlay -&gt; unit" Usage="mKMapView.AddOverlay overlay" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addOverlay:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlay" Type="MapKit.IMKOverlay" />
      </Parameters>
      <Docs>
        <param name="overlay">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOverlay">
      <MemberSignature Language="C#" Value="public virtual void AddOverlay (MapKit.IMKOverlay overlay, MapKit.MKOverlayLevel level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddOverlay(class MapKit.IMKOverlay overlay, valuetype MapKit.MKOverlayLevel level) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.AddOverlay(MapKit.IMKOverlay,MapKit.MKOverlayLevel)" />
      <MemberSignature Language="F#" Value="abstract member AddOverlay : MapKit.IMKOverlay * MapKit.MKOverlayLevel -&gt; unit&#xA;override this.AddOverlay : MapKit.IMKOverlay * MapKit.MKOverlayLevel -&gt; unit" Usage="mKMapView.AddOverlay (overlay, level)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addOverlay:level:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlay" Type="MapKit.IMKOverlay" />
        <Parameter Name="level" Type="MapKit.MKOverlayLevel" />
      </Parameters>
      <Docs>
        <param name="overlay">The overlay to add to the map.</param>
        <param name="level">Specifies the Z-order of the overlay.</param>
        <summary>Adds an overlay to the map.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOverlays">
      <MemberSignature Language="C#" Value="public virtual void AddOverlays (MapKit.IMKOverlay[] overlays);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddOverlays(class MapKit.IMKOverlay[] overlays) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.AddOverlays(MapKit.IMKOverlay[])" />
      <MemberSignature Language="F#" Value="abstract member AddOverlays : MapKit.IMKOverlay[] -&gt; unit&#xA;override this.AddOverlays : MapKit.IMKOverlay[] -&gt; unit" Usage="mKMapView.AddOverlays overlays" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addOverlays:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlays" Type="MapKit.IMKOverlay[]" />
      </Parameters>
      <Docs>
        <param name="overlays">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOverlays">
      <MemberSignature Language="C#" Value="public virtual void AddOverlays (MapKit.IMKOverlay[] overlays, MapKit.MKOverlayLevel level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddOverlays(class MapKit.IMKOverlay[] overlays, valuetype MapKit.MKOverlayLevel level) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.AddOverlays(MapKit.IMKOverlay[],MapKit.MKOverlayLevel)" />
      <MemberSignature Language="F#" Value="abstract member AddOverlays : MapKit.IMKOverlay[] * MapKit.MKOverlayLevel -&gt; unit&#xA;override this.AddOverlays : MapKit.IMKOverlay[] * MapKit.MKOverlayLevel -&gt; unit" Usage="mKMapView.AddOverlays (overlays, level)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addOverlays:level:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlays" Type="MapKit.IMKOverlay[]" />
        <Parameter Name="level" Type="MapKit.MKOverlayLevel" />
      </Parameters>
      <Docs>
        <param name="overlays">The overlays to add to the map.</param>
        <param name="level">The Z-order of the overlays.</param>
        <summary>Adds multiple overlays to the map.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Annotations">
      <MemberSignature Language="C#" Value="public virtual MapKit.IMKAnnotation[] Annotations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MapKit.IMKAnnotation[] Annotations" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.Annotations" />
      <MemberSignature Language="F#" Value="member this.Annotations : MapKit.IMKAnnotation[]" Usage="MapKit.MKMapView.Annotations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("annotations")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.IMKAnnotation[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns all the annotations associated with a map.</summary>
        <value>
        </value>
        <remarks>
          
          The returned NSObjects are either instances of <see cref="T:MapKit.MKShape" />, <see cref="T:MapKit.MKUserLocation" />, <see cref="T:MapKit.MKPlacemark" />.  You can use the C#
          "is" or "as" operators to turn the individual objects into
          one of the above.
          
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnnotationVisibleRect">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect AnnotationVisibleRect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGRect AnnotationVisibleRect" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.AnnotationVisibleRect" />
      <MemberSignature Language="F#" Value="member this.AnnotationVisibleRect : CoreGraphics.CGRect" Usage="MapKit.MKMapView.AnnotationVisibleRect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("annotationVisibleRect")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the rectangle where annotations are displayed.</summary>
        <value>
        </value>
        <remarks>The rectangle returned will be the rectangle for currently visible annotations only.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Appearance">
      <MemberSignature Language="C#" Value="public static MapKit.MKMapView.MKMapViewAppearance Appearance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MapKit.MKMapView/MKMapViewAppearance Appearance" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.Appearance" />
      <MemberSignature Language="F#" Value="member this.Appearance : MapKit.MKMapView.MKMapViewAppearance" Usage="MapKit.MKMapView.Appearance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MapKit.MKMapView+MKMapViewAppearance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Strongly-typed property that returns the UIAppearance class for this class.</summary>
        <value>
        </value>
        <remarks>
          <para>Setting any appearance properties on this instance will affect the appearance of all instances of MKMapView.</para>
          <para>If developers want to control the appearance of subclasses of MKMapView, they should use the <see cref="M:MapKit.MKMapView.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppearanceWhenContainedIn">
      <MemberSignature Language="C#" Value="public static MapKit.MKMapView.MKMapViewAppearance AppearanceWhenContainedIn (params Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MapKit.MKMapView/MKMapViewAppearance AppearanceWhenContainedIn(class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.AppearanceWhenContainedIn(System.Type[])" />
      <MemberSignature Language="F#" Value="static member AppearanceWhenContainedIn : Type[] -&gt; MapKit.MKMapView.MKMapViewAppearance" Usage="MapKit.MKMapView.AppearanceWhenContainedIn containers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MapKit.MKMapView+MKMapViewAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="containers">List of types that developers want to have as the containers to apply this particular appearance</param>
        <summary>Returns a strongly typed UIAppearance for instances of this class when the view is hosted in the specified hierarchy.</summary>
        <returns>The appearance proxy object that developers can use to set properties when the given container hierarchy is active</returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of MKMapView when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>If developers want to control the appearance of subclasses of MKMapView, they should use the <see cref="M:MapKit.MKMapView.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" /> method.</para>
          <para>The following example shows how the AppearanceWhenContainedIn method works</para>
          <example>
            <code lang="C#"><![CDATA[
var mySliders = UISlider.AppearanceWhenContainedIn (typeof (UINavigationBar), typeof (UIPopoverController));
mySliders.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalloutAccessoryControlTapped">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MapKit.MKMapViewAccessoryTappedEventArgs&gt; CalloutAccessoryControlTapped;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MapKit.MKMapViewAccessoryTappedEventArgs&gt; CalloutAccessoryControlTapped" />
      <MemberSignature Language="DocId" Value="E:MapKit.MKMapView.CalloutAccessoryControlTapped" />
      <MemberSignature Language="F#" Value="member this.CalloutAccessoryControlTapped : EventHandler&lt;MapKit.MKMapViewAccessoryTappedEventArgs&gt; " Usage="member this.CalloutAccessoryControlTapped : System.EventHandler&lt;MapKit.MKMapViewAccessoryTappedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MapKit.MKMapViewAccessoryTappedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Camera">
      <MemberSignature Language="C#" Value="public virtual MapKit.MKMapCamera Camera { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MapKit.MKMapCamera Camera" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.Camera" />
      <MemberSignature Language="F#" Value="member this.Camera : MapKit.MKMapCamera with get, set" Usage="MapKit.MKMapView.Camera" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("camera", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setCamera:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.MKMapCamera</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Defines the perspective of the map.</summary>
        <value>The default value is <see langword="null" />.</value>
        <remarks>
          <para>
            The following example shows how this property can be set to provide 3D imagery:</para>
          <example>
            <code lang="C#"><![CDATA[
var target = new CLLocationCoordinate2D(37.7952, -122.4028);
var viewPoint = new CLLocationCoordinate2D(37.8009, -122.4100);
//Enable 3D buildings
mapView.ShowsBuildings = true;
mapView.PitchEnabled = true;

var camera = MKMapCamera.CameraLookingAtCenterCoordinate(target, viewPoint, 500);
mapView.Camera = camera;
          ]]></code>
          </example>
          <para>
            <img href="~/MapKit/_images/MKMapCamera.png" />
          </para>
        </remarks>
        <altmember cref="M:MapKit.MKMapView.SetCamera" />
        <altmember cref="P:MapKit.MKMapView.PitchEnabled" />
      </Docs>
    </Member>
    <Member MemberName="CenterCoordinate">
      <MemberSignature Language="C#" Value="public virtual CoreLocation.CLLocationCoordinate2D CenterCoordinate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreLocation.CLLocationCoordinate2D CenterCoordinate" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.CenterCoordinate" />
      <MemberSignature Language="F#" Value="member this.CenterCoordinate : CoreLocation.CLLocationCoordinate2D with get, set" Usage="MapKit.MKMapView.CenterCoordinate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("centerCoordinate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setCenterCoordinate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreLocation.CLLocationCoordinate2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The center of the map.</summary>
        <value>
        </value>
        <remarks>The map center is expressed as a <see cref="T:CoreLocation.CLLocationCoordinate2D" /> value that contains a latitude and longitude.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangedDragState">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MapKit.MKMapViewDragStateEventArgs&gt; ChangedDragState;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MapKit.MKMapViewDragStateEventArgs&gt; ChangedDragState" />
      <MemberSignature Language="DocId" Value="E:MapKit.MKMapView.ChangedDragState" />
      <MemberSignature Language="F#" Value="member this.ChangedDragState : EventHandler&lt;MapKit.MKMapViewDragStateEventArgs&gt; " Usage="member this.ChangedDragState : System.EventHandler&lt;MapKit.MKMapViewDragStateEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MapKit.MKMapViewDragStateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="MapKit.MKMapView.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertCoordinate">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint ConvertCoordinate (CoreLocation.CLLocationCoordinate2D coordinate, UIKit.UIView toPointToView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGPoint ConvertCoordinate(valuetype CoreLocation.CLLocationCoordinate2D coordinate, class UIKit.UIView toPointToView) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.ConvertCoordinate(CoreLocation.CLLocationCoordinate2D,UIKit.UIView)" />
      <MemberSignature Language="F#" Value="abstract member ConvertCoordinate : CoreLocation.CLLocationCoordinate2D * UIKit.UIView -&gt; CoreGraphics.CGPoint&#xA;override this.ConvertCoordinate : CoreLocation.CLLocationCoordinate2D * UIKit.UIView -&gt; CoreGraphics.CGPoint" Usage="mKMapView.ConvertCoordinate (coordinate, toPointToView)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("convertCoordinate:toPointToView:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="coordinate" Type="CoreLocation.CLLocationCoordinate2D" />
        <Parameter Name="toPointToView" Type="UIKit.UIView" />
      </Parameters>
      <Docs>
        <param name="coordinate">The coordinate to convert.</param>
        <param name="toPointToView">
          <para>The view whose coordinate system should be used to convert the map coordinate.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Converts a map coordinate to a point.</summary>
        <returns>The converted point in the coordinate system of the specified view.</returns>
        <remarks>If a view is not specified, the point will be relative to the window.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertPoint">
      <MemberSignature Language="C#" Value="public virtual CoreLocation.CLLocationCoordinate2D ConvertPoint (CoreGraphics.CGPoint point, UIKit.UIView toCoordinateFromView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreLocation.CLLocationCoordinate2D ConvertPoint(valuetype CoreGraphics.CGPoint point, class UIKit.UIView toCoordinateFromView) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.ConvertPoint(CoreGraphics.CGPoint,UIKit.UIView)" />
      <MemberSignature Language="F#" Value="abstract member ConvertPoint : CoreGraphics.CGPoint * UIKit.UIView -&gt; CoreLocation.CLLocationCoordinate2D&#xA;override this.ConvertPoint : CoreGraphics.CGPoint * UIKit.UIView -&gt; CoreLocation.CLLocationCoordinate2D" Usage="mKMapView.ConvertPoint (point, toCoordinateFromView)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("convertPoint:toCoordinateFromView:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreLocation.CLLocationCoordinate2D</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
        <Parameter Name="toCoordinateFromView" Type="UIKit.UIView" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <param name="toCoordinateFromView">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertRect">
      <MemberSignature Language="C#" Value="public virtual MapKit.MKCoordinateRegion ConvertRect (CoreGraphics.CGRect rect, UIKit.UIView toRegionFromView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MapKit.MKCoordinateRegion ConvertRect(valuetype CoreGraphics.CGRect rect, class UIKit.UIView toRegionFromView) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.ConvertRect(CoreGraphics.CGRect,UIKit.UIView)" />
      <MemberSignature Language="F#" Value="abstract member ConvertRect : CoreGraphics.CGRect * UIKit.UIView -&gt; MapKit.MKCoordinateRegion&#xA;override this.ConvertRect : CoreGraphics.CGRect * UIKit.UIView -&gt; MapKit.MKCoordinateRegion" Usage="mKMapView.ConvertRect (rect, toRegionFromView)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("convertRect:toRegionFromView:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.MKCoordinateRegion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
        <Parameter Name="toRegionFromView" Type="UIKit.UIView" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <param name="toRegionFromView">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertRegion">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect ConvertRegion (MapKit.MKCoordinateRegion region, UIKit.UIView toRectToView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect ConvertRegion(valuetype MapKit.MKCoordinateRegion region, class UIKit.UIView toRectToView) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.ConvertRegion(MapKit.MKCoordinateRegion,UIKit.UIView)" />
      <MemberSignature Language="F#" Value="abstract member ConvertRegion : MapKit.MKCoordinateRegion * UIKit.UIView -&gt; CoreGraphics.CGRect&#xA;override this.ConvertRegion : MapKit.MKCoordinateRegion * UIKit.UIView -&gt; CoreGraphics.CGRect" Usage="mKMapView.ConvertRegion (region, toRectToView)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("convertRegion:toRectToView:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="MapKit.MKCoordinateRegion" />
        <Parameter Name="toRectToView" Type="UIKit.UIView" />
      </Parameters>
      <Docs>
        <param name="region">The map region to convert.</param>
        <param name="toRectToView">
          <para>The view whose coordinate system is used for the conversion.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Converts a map region to a rectangle.</summary>
        <returns>The converted rectangle.</returns>
        <remarks>If the view is null, the conversion will use a rectangle relative to the window.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateClusterAnnotation">
      <MemberSignature Language="C#" Value="public MapKit.MKCreateClusterAnnotation CreateClusterAnnotation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MapKit.MKCreateClusterAnnotation CreateClusterAnnotation" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.CreateClusterAnnotation" />
      <MemberSignature Language="F#" Value="member this.CreateClusterAnnotation : MapKit.MKCreateClusterAnnotation with get, set" Usage="MapKit.MKMapView.CreateClusterAnnotation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MapKit.MKCreateClusterAnnotation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>To be added.</value>
        <remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public MapKit.IMKMapViewDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MapKit.IMKMapViewDelegate Delegate" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.Delegate" />
      <MemberSignature Language="F#" Value="member this.Delegate : MapKit.IMKMapViewDelegate with get, set" Usage="MapKit.MKMapView.Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.IMKMapViewDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the MapKit.IMKMapViewDelegate model class which acts as the class delegate.</summary>
        <value>The instance of the MapKit.IMKMapViewDelegate model class</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DequeueReusableAnnotation">
      <MemberSignature Language="C#" Value="public virtual MapKit.MKAnnotationView DequeueReusableAnnotation (string withViewIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MapKit.MKAnnotationView DequeueReusableAnnotation(string withViewIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.DequeueReusableAnnotation(System.String)" />
      <MemberSignature Language="F#" Value="abstract member DequeueReusableAnnotation : string -&gt; MapKit.MKAnnotationView&#xA;override this.DequeueReusableAnnotation : string -&gt; MapKit.MKAnnotationView" Usage="mKMapView.DequeueReusableAnnotation withViewIdentifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("dequeueReusableAnnotationViewWithIdentifier:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.MKAnnotationView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="withViewIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="withViewIdentifier">The identifier that is used to identify the annotation view for reuse.</param>
        <summary>Returns a reusable annnotation view.</summary>
        <returns>A reusable annotation view.</returns>
        <remarks>Allows annotation view that are not longer on the screen to be reused for annotations that are on the screen. This is a performance optimization that reduces the number of annotation views that need to be created.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DequeueReusableAnnotation">
      <MemberSignature Language="C#" Value="public virtual MapKit.MKAnnotationView DequeueReusableAnnotation (string identifier, MapKit.IMKAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MapKit.MKAnnotationView DequeueReusableAnnotation(string identifier, class MapKit.IMKAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.DequeueReusableAnnotation(System.String,MapKit.IMKAnnotation)" />
      <MemberSignature Language="F#" Value="abstract member DequeueReusableAnnotation : string * MapKit.IMKAnnotation -&gt; MapKit.MKAnnotationView&#xA;override this.DequeueReusableAnnotation : string * MapKit.IMKAnnotation -&gt; MapKit.MKAnnotationView" Usage="mKMapView.DequeueReusableAnnotation (identifier, annotation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("dequeueReusableAnnotationViewWithIdentifier:forAnnotation:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.MKAnnotationView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="annotation" Type="MapKit.IMKAnnotation" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="annotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeselectAnnotation">
      <MemberSignature Language="C#" Value="public virtual void DeselectAnnotation (MapKit.IMKAnnotation annotation, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeselectAnnotation(class MapKit.IMKAnnotation annotation, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.DeselectAnnotation(MapKit.IMKAnnotation,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DeselectAnnotation : MapKit.IMKAnnotation * bool -&gt; unit&#xA;override this.DeselectAnnotation : MapKit.IMKAnnotation * bool -&gt; unit" Usage="mKMapView.DeselectAnnotation (annotation, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("deselectAnnotation:animated:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="MapKit.IMKAnnotation" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="annotation">To be added.</param>
        <param name="animated">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidAddAnnotationViews">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MapKit.MKMapViewAnnotationEventArgs&gt; DidAddAnnotationViews;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MapKit.MKMapViewAnnotationEventArgs&gt; DidAddAnnotationViews" />
      <MemberSignature Language="DocId" Value="E:MapKit.MKMapView.DidAddAnnotationViews" />
      <MemberSignature Language="F#" Value="member this.DidAddAnnotationViews : EventHandler&lt;MapKit.MKMapViewAnnotationEventArgs&gt; " Usage="member this.DidAddAnnotationViews : System.EventHandler&lt;MapKit.MKMapViewAnnotationEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MapKit.MKMapViewAnnotationEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidAddOverlayRenderers">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MapKit.MKDidAddOverlayRenderersEventArgs&gt; DidAddOverlayRenderers;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MapKit.MKDidAddOverlayRenderersEventArgs&gt; DidAddOverlayRenderers" />
      <MemberSignature Language="DocId" Value="E:MapKit.MKMapView.DidAddOverlayRenderers" />
      <MemberSignature Language="F#" Value="member this.DidAddOverlayRenderers : EventHandler&lt;MapKit.MKDidAddOverlayRenderersEventArgs&gt; " Usage="member this.DidAddOverlayRenderers : System.EventHandler&lt;MapKit.MKDidAddOverlayRenderersEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MapKit.MKDidAddOverlayRenderersEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidAddOverlayViews">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MapKit.MKOverlayViewsEventArgs&gt; DidAddOverlayViews;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MapKit.MKOverlayViewsEventArgs&gt; DidAddOverlayViews" />
      <MemberSignature Language="DocId" Value="E:MapKit.MKMapView.DidAddOverlayViews" />
      <MemberSignature Language="F#" Value="member this.DidAddOverlayViews : EventHandler&lt;MapKit.MKOverlayViewsEventArgs&gt; " Usage="member this.DidAddOverlayViews : System.EventHandler&lt;MapKit.MKOverlayViewsEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MapKit.MKOverlayViewsEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidChangeUserTrackingMode">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MapKit.MMapViewUserTrackingEventArgs&gt; DidChangeUserTrackingMode;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MapKit.MMapViewUserTrackingEventArgs&gt; DidChangeUserTrackingMode" />
      <MemberSignature Language="DocId" Value="E:MapKit.MKMapView.DidChangeUserTrackingMode" />
      <MemberSignature Language="F#" Value="member this.DidChangeUserTrackingMode : EventHandler&lt;MapKit.MMapViewUserTrackingEventArgs&gt; " Usage="member this.DidChangeUserTrackingMode : System.EventHandler&lt;MapKit.MMapViewUserTrackingEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MapKit.MMapViewUserTrackingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidChangeVisibleRegion">
      <MemberSignature Language="C#" Value="public event EventHandler DidChangeVisibleRegion;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DidChangeVisibleRegion" />
      <MemberSignature Language="DocId" Value="E:MapKit.MKMapView.DidChangeVisibleRegion" />
      <MemberSignature Language="F#" Value="member this.DidChangeVisibleRegion : EventHandler " Usage="member this.DidChangeVisibleRegion : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidDeselectAnnotationView">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MapKit.MKAnnotationViewEventArgs&gt; DidDeselectAnnotationView;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MapKit.MKAnnotationViewEventArgs&gt; DidDeselectAnnotationView" />
      <MemberSignature Language="DocId" Value="E:MapKit.MKMapView.DidDeselectAnnotationView" />
      <MemberSignature Language="F#" Value="member this.DidDeselectAnnotationView : EventHandler&lt;MapKit.MKAnnotationViewEventArgs&gt; " Usage="member this.DidDeselectAnnotationView : System.EventHandler&lt;MapKit.MKAnnotationViewEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MapKit.MKAnnotationViewEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidFailToLocateUser">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Foundation.NSErrorEventArgs&gt; DidFailToLocateUser;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Foundation.NSErrorEventArgs&gt; DidFailToLocateUser" />
      <MemberSignature Language="DocId" Value="E:MapKit.MKMapView.DidFailToLocateUser" />
      <MemberSignature Language="F#" Value="member this.DidFailToLocateUser : EventHandler&lt;Foundation.NSErrorEventArgs&gt; " Usage="member this.DidFailToLocateUser : System.EventHandler&lt;Foundation.NSErrorEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Foundation.NSErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidFinishRenderingMap">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MapKit.MKDidFinishRenderingMapEventArgs&gt; DidFinishRenderingMap;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MapKit.MKDidFinishRenderingMapEventArgs&gt; DidFinishRenderingMap" />
      <MemberSignature Language="DocId" Value="E:MapKit.MKMapView.DidFinishRenderingMap" />
      <MemberSignature Language="F#" Value="member this.DidFinishRenderingMap : EventHandler&lt;MapKit.MKDidFinishRenderingMapEventArgs&gt; " Usage="member this.DidFinishRenderingMap : System.EventHandler&lt;MapKit.MKDidFinishRenderingMapEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MapKit.MKDidFinishRenderingMapEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidSelectAnnotationView">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MapKit.MKAnnotationViewEventArgs&gt; DidSelectAnnotationView;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MapKit.MKAnnotationViewEventArgs&gt; DidSelectAnnotationView" />
      <MemberSignature Language="DocId" Value="E:MapKit.MKMapView.DidSelectAnnotationView" />
      <MemberSignature Language="F#" Value="member this.DidSelectAnnotationView : EventHandler&lt;MapKit.MKAnnotationViewEventArgs&gt; " Usage="member this.DidSelectAnnotationView : System.EventHandler&lt;MapKit.MKAnnotationViewEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MapKit.MKAnnotationViewEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidStopLocatingUser">
      <MemberSignature Language="C#" Value="public event EventHandler DidStopLocatingUser;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DidStopLocatingUser" />
      <MemberSignature Language="DocId" Value="E:MapKit.MKMapView.DidStopLocatingUser" />
      <MemberSignature Language="F#" Value="member this.DidStopLocatingUser : EventHandler " Usage="member this.DidStopLocatingUser : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidUpdateUserLocation">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MapKit.MKUserLocationEventArgs&gt; DidUpdateUserLocation;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MapKit.MKUserLocationEventArgs&gt; DidUpdateUserLocation" />
      <MemberSignature Language="DocId" Value="E:MapKit.MKMapView.DidUpdateUserLocation" />
      <MemberSignature Language="F#" Value="member this.DidUpdateUserLocation : EventHandler&lt;MapKit.MKUserLocationEventArgs&gt; " Usage="member this.DidUpdateUserLocation : System.EventHandler&lt;MapKit.MKUserLocationEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MapKit.MKUserLocationEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="mKMapView.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the MKMapView object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the MKMapView class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the MKMapView ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at https://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExchangeOverlay">
      <MemberSignature Language="C#" Value="public virtual void ExchangeOverlay (MapKit.IMKOverlay overlay1, MapKit.IMKOverlay overlay2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExchangeOverlay(class MapKit.IMKOverlay overlay1, class MapKit.IMKOverlay overlay2) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.ExchangeOverlay(MapKit.IMKOverlay,MapKit.IMKOverlay)" />
      <MemberSignature Language="F#" Value="abstract member ExchangeOverlay : MapKit.IMKOverlay * MapKit.IMKOverlay -&gt; unit&#xA;override this.ExchangeOverlay : MapKit.IMKOverlay * MapKit.IMKOverlay -&gt; unit" Usage="mKMapView.ExchangeOverlay (overlay1, overlay2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("exchangeOverlay:withOverlay:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlay1" Type="MapKit.IMKOverlay" />
        <Parameter Name="overlay2" Type="MapKit.IMKOverlay" />
      </Parameters>
      <Docs>
        <param name="overlay1">The first overlay.</param>
        <param name="overlay2">The second overlay.</param>
        <summary>Swaps the index position of two overlays, changing their z-order.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExchangeOverlays">
      <MemberSignature Language="C#" Value="public virtual void ExchangeOverlays (nint index1, nint index2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExchangeOverlays(valuetype System.nint index1, valuetype System.nint index2) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.ExchangeOverlays(System.nint,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member ExchangeOverlays : nint * nint -&gt; unit&#xA;override this.ExchangeOverlays : nint * nint -&gt; unit" Usage="mKMapView.ExchangeOverlays (index1, index2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("exchangeOverlayAtIndex:withOverlayAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index1" Type="System.nint" />
        <Parameter Name="index2" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="index1">The index of the first overlay.</param>
        <param name="index2">The index of the second overlay.</param>
        <summary>Swaps the index positions of two overlays.</summary>
        <remarks>Changing the index positions of the overlays will swap their z-order on the map.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnnotations">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSSet GetAnnotations (MapKit.MKMapRect mapRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSSet GetAnnotations(valuetype MapKit.MKMapRect mapRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.GetAnnotations(MapKit.MKMapRect)" />
      <MemberSignature Language="F#" Value="abstract member GetAnnotations : MapKit.MKMapRect -&gt; Foundation.NSSet&#xA;override this.GetAnnotations : MapKit.MKMapRect -&gt; Foundation.NSSet" Usage="mKMapView.GetAnnotations mapRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("annotationsInMapRect:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapRect" Type="MapKit.MKMapRect" />
      </Parameters>
      <Docs>
        <param name="mapRect">The map rectangle to return annotations for.</param>
        <summary>Returns the annotations located in a specified map rectangle.</summary>
        <returns>The set of annotations.</returns>
        <remarks>Provides fast access to a set of annotations located in some area of the map.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static MapKit.MKMapView.MKMapViewAppearance GetAppearance (UIKit.UITraitCollection traits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MapKit.MKMapView/MKMapViewAppearance GetAppearance(class UIKit.UITraitCollection traits) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.GetAppearance(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection -&gt; MapKit.MKMapView.MKMapViewAppearance" Usage="MapKit.MKMapView.GetAppearance traits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MapKit.MKMapView+MKMapViewAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static MapKit.MKMapView.MKMapViewAppearance GetAppearance (UIKit.UITraitCollection traits, params Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MapKit.MKMapView/MKMapViewAppearance GetAppearance(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.GetAppearance(UIKit.UITraitCollection,System.Type[])" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection * Type[] -&gt; MapKit.MKMapView.MKMapViewAppearance" Usage="MapKit.MKMapView.GetAppearance (traits, containers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MapKit.MKMapView+MKMapViewAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <param name="containers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static MapKit.MKMapView.MKMapViewAppearance GetAppearance&lt;T&gt; () where T : MapKit.MKMapView;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MapKit.MKMapView/MKMapViewAppearance GetAppearance&lt;(class MapKit.MKMapView) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.GetAppearance``1" />
      <MemberSignature Language="F#" Value="static member GetAppearance : unit -&gt; MapKit.MKMapView.MKMapViewAppearance (requires 'T :&gt; MapKit.MKMapView)" Usage="MapKit.MKMapView.GetAppearance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MapKit.MKMapView+MKMapViewAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of MKMapView.</typeparam>
        <summary>Obtains the appearance proxy <see cref="T:MapKit.MKMapView.MKMapViewAppearance" /> for the subclass of MKMapView.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>Setting any appearance properties on the returned object will affect the appearance of all classes and subclasses of the type parameter.</para>
          <para>Unlike the <see cref="P:MapKit.MKMapView.Appearance" /> property, or the <see cref="M:MapKit.MKMapView.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = MKMapView.GetAppearance<MyMKMapViewSubclass> ();
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static MapKit.MKMapView.MKMapViewAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits) where T : MapKit.MKMapView;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MapKit.MKMapView/MKMapViewAppearance GetAppearance&lt;(class MapKit.MKMapView) T&gt;(class UIKit.UITraitCollection traits) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.GetAppearance``1(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection -&gt; MapKit.MKMapView.MKMapViewAppearance (requires 'T :&gt; MapKit.MKMapView)" Usage="MapKit.MKMapView.GetAppearance traits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MapKit.MKMapView+MKMapViewAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of MKMapView.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <summary>Obtains the appearance proxy <see cref="T:MapKit.MKMapView.MKMapViewAppearance" /> for the subclass of MKMapView.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of MKMapView.</para>
          <para>Unlike the <see cref="P:MapKit.MKMapView.Appearance" /> property, or the <see cref="M:MapKit.MKMapView.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = MKMapView.GetAppearance<MyMKMapViewSubclass> (myTraits, );
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static MapKit.MKMapView.MKMapViewAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits, params Type[] containers) where T : MapKit.MKMapView;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MapKit.MKMapView/MKMapViewAppearance GetAppearance&lt;(class MapKit.MKMapView) T&gt;(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection * Type[] -&gt; MapKit.MKMapView.MKMapViewAppearance (requires 'T :&gt; MapKit.MKMapView)" Usage="MapKit.MKMapView.GetAppearance (traits, containers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MapKit.MKMapView+MKMapViewAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>MapKit.MKMapView</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of MKMapView.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <param name="containers">List of types that the developer wishes to have as the containers to apply this particular appearance.</param>
        <summary>Obtains the appearance proxy <see cref="T:MapKit.MKMapView.MKMapViewAppearance" /> for the subclass of MKMapView that has the specified trait collection when the view is hosted in the specified hierarchy.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of MKMapView that has the specified trait collection when the view is hosted in the specified hierarchy when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>Unlike the <see cref="P:MapKit.MKMapView.Appearance" /> property, or the <see cref="M:MapKit.MKMapView.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = MKMapView.GetAppearance<MyMKMapViewSubclass> (myTraits, typeof (UINavigationBar), typeof (UIPopoverController));
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewForAnnotation">
      <MemberSignature Language="C#" Value="public MapKit.MKMapViewAnnotation GetViewForAnnotation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MapKit.MKMapViewAnnotation GetViewForAnnotation" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.GetViewForAnnotation" />
      <MemberSignature Language="F#" Value="member this.GetViewForAnnotation : MapKit.MKMapViewAnnotation with get, set" Usage="MapKit.MKMapView.GetViewForAnnotation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MapKit.MKMapViewAnnotation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>To be added.</value>
        <remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewForOverlay">
      <MemberSignature Language="C#" Value="public MapKit.MKMapViewOverlay GetViewForOverlay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MapKit.MKMapViewOverlay GetViewForOverlay" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.GetViewForOverlay" />
      <MemberSignature Language="F#" Value="member this.GetViewForOverlay : MapKit.MKMapViewOverlay with get, set" Usage="MapKit.MKMapView.GetViewForOverlay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MapKit.MKMapViewOverlay</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>To be added.</value>
        <remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOverlay">
      <MemberSignature Language="C#" Value="public virtual void InsertOverlay (MapKit.IMKOverlay overlay, nint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertOverlay(class MapKit.IMKOverlay overlay, valuetype System.nint index) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.InsertOverlay(MapKit.IMKOverlay,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member InsertOverlay : MapKit.IMKOverlay * nint -&gt; unit&#xA;override this.InsertOverlay : MapKit.IMKOverlay * nint -&gt; unit" Usage="mKMapView.InsertOverlay (overlay, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("insertOverlay:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlay" Type="MapKit.IMKOverlay" />
        <Parameter Name="index" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="overlay">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOverlay">
      <MemberSignature Language="C#" Value="public virtual void InsertOverlay (MapKit.IMKOverlay overlay, nuint index, MapKit.MKOverlayLevel level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertOverlay(class MapKit.IMKOverlay overlay, valuetype System.nuint index, valuetype MapKit.MKOverlayLevel level) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.InsertOverlay(MapKit.IMKOverlay,System.nuint,MapKit.MKOverlayLevel)" />
      <MemberSignature Language="F#" Value="abstract member InsertOverlay : MapKit.IMKOverlay * nuint * MapKit.MKOverlayLevel -&gt; unit&#xA;override this.InsertOverlay : MapKit.IMKOverlay * nuint * MapKit.MKOverlayLevel -&gt; unit" Usage="mKMapView.InsertOverlay (overlay, index, level)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("insertOverlay:atIndex:level:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlay" Type="MapKit.IMKOverlay" />
        <Parameter Name="index" Type="System.nuint" />
        <Parameter Name="level" Type="MapKit.MKOverlayLevel" />
      </Parameters>
      <Docs>
        <param name="overlay">To be added.</param>
        <param name="index">To be added.</param>
        <param name="level">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOverlayAbove">
      <MemberSignature Language="C#" Value="public virtual void InsertOverlayAbove (MapKit.IMKOverlay overlay, MapKit.IMKOverlay sibling);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertOverlayAbove(class MapKit.IMKOverlay overlay, class MapKit.IMKOverlay sibling) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.InsertOverlayAbove(MapKit.IMKOverlay,MapKit.IMKOverlay)" />
      <MemberSignature Language="F#" Value="abstract member InsertOverlayAbove : MapKit.IMKOverlay * MapKit.IMKOverlay -&gt; unit&#xA;override this.InsertOverlayAbove : MapKit.IMKOverlay * MapKit.IMKOverlay -&gt; unit" Usage="mKMapView.InsertOverlayAbove (overlay, sibling)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("insertOverlay:aboveOverlay:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlay" Type="MapKit.IMKOverlay" />
        <Parameter Name="sibling" Type="MapKit.IMKOverlay" />
      </Parameters>
      <Docs>
        <param name="overlay">To be added.</param>
        <param name="sibling">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOverlayBelow">
      <MemberSignature Language="C#" Value="public virtual void InsertOverlayBelow (MapKit.IMKOverlay overlay, MapKit.IMKOverlay sibling);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertOverlayBelow(class MapKit.IMKOverlay overlay, class MapKit.IMKOverlay sibling) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.InsertOverlayBelow(MapKit.IMKOverlay,MapKit.IMKOverlay)" />
      <MemberSignature Language="F#" Value="abstract member InsertOverlayBelow : MapKit.IMKOverlay * MapKit.IMKOverlay -&gt; unit&#xA;override this.InsertOverlayBelow : MapKit.IMKOverlay * MapKit.IMKOverlay -&gt; unit" Usage="mKMapView.InsertOverlayBelow (overlay, sibling)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("insertOverlay:belowOverlay:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlay" Type="MapKit.IMKOverlay" />
        <Parameter Name="sibling" Type="MapKit.IMKOverlay" />
      </Parameters>
      <Docs>
        <param name="overlay">To be added.</param>
        <param name="sibling">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadingMapFailed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Foundation.NSErrorEventArgs&gt; LoadingMapFailed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Foundation.NSErrorEventArgs&gt; LoadingMapFailed" />
      <MemberSignature Language="DocId" Value="E:MapKit.MKMapView.LoadingMapFailed" />
      <MemberSignature Language="F#" Value="member this.LoadingMapFailed : EventHandler&lt;Foundation.NSErrorEventArgs&gt; " Usage="member this.LoadingMapFailed : System.EventHandler&lt;Foundation.NSErrorEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Foundation.NSErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapLoaded">
      <MemberSignature Language="C#" Value="public event EventHandler MapLoaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MapLoaded" />
      <MemberSignature Language="DocId" Value="E:MapKit.MKMapView.MapLoaded" />
      <MemberSignature Language="F#" Value="member this.MapLoaded : EventHandler " Usage="member this.MapLoaded : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapRectThatFits">
      <MemberSignature Language="C#" Value="public virtual MapKit.MKMapRect MapRectThatFits (MapKit.MKMapRect mapRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MapKit.MKMapRect MapRectThatFits(valuetype MapKit.MKMapRect mapRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.MapRectThatFits(MapKit.MKMapRect)" />
      <MemberSignature Language="F#" Value="abstract member MapRectThatFits : MapKit.MKMapRect -&gt; MapKit.MKMapRect&#xA;override this.MapRectThatFits : MapKit.MKMapRect -&gt; MapKit.MKMapRect" Usage="mKMapView.MapRectThatFits mapRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("mapRectThatFits:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.MKMapRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapRect" Type="MapKit.MKMapRect" />
      </Parameters>
      <Docs>
        <param name="mapRect">The rectangle that needs to be adjusted to fit in the map view's frame.</param>
        <summary>Adjusts the width and height of a map rectangle so it fist in the map view's frame.</summary>
        <returns>The adjusted rectangle.</returns>
        <remarks>The center point of the map remains unchanged.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapRectThatFits">
      <MemberSignature Language="C#" Value="public virtual MapKit.MKMapRect MapRectThatFits (MapKit.MKMapRect mapRect, UIKit.UIEdgeInsets edgePadding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MapKit.MKMapRect MapRectThatFits(valuetype MapKit.MKMapRect mapRect, valuetype UIKit.UIEdgeInsets edgePadding) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.MapRectThatFits(MapKit.MKMapRect,UIKit.UIEdgeInsets)" />
      <MemberSignature Language="F#" Value="abstract member MapRectThatFits : MapKit.MKMapRect * UIKit.UIEdgeInsets -&gt; MapKit.MKMapRect&#xA;override this.MapRectThatFits : MapKit.MKMapRect * UIKit.UIEdgeInsets -&gt; MapKit.MKMapRect" Usage="mKMapView.MapRectThatFits (mapRect, edgePadding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("mapRectThatFits:edgePadding:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.MKMapRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapRect" Type="MapKit.MKMapRect" />
        <Parameter Name="edgePadding" Type="UIKit.UIEdgeInsets" />
      </Parameters>
      <Docs>
        <param name="mapRect">The rectangle that needs to be adjusted to fit in the map view's frame.</param>
        <param name="edgePadding">The insets values to pad the map rectangle with.</param>
        <summary>Adjusts the width and height of a map rectangle so it fits in the map view's frame, including accounting for padding between the frame and the map rectangle.</summary>
        <returns>The adjusted rectangle.</returns>
        <remarks>The center point of the map remains unchanged.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapType">
      <MemberSignature Language="C#" Value="public virtual MapKit.MKMapType MapType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MapKit.MKMapType MapType" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.MapType" />
      <MemberSignature Language="F#" Value="member this.MapType : MapKit.MKMapType with get, set" Usage="MapKit.MKMapView.MapType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("mapType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setMapType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.MKMapType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The type of map to display</summary>
        <value>
        </value>
        <remarks>Allows the map to be displayed with a standard map, satellite imagery or a hybrid.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OverlayRenderer">
      <MemberSignature Language="C#" Value="public MapKit.MKRendererForOverlayDelegate OverlayRenderer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MapKit.MKRendererForOverlayDelegate OverlayRenderer" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.OverlayRenderer" />
      <MemberSignature Language="F#" Value="member this.OverlayRenderer : MapKit.MKRendererForOverlayDelegate with get, set" Usage="MapKit.MKMapView.OverlayRenderer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MapKit.MKRendererForOverlayDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>To be added.</value>
        <remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Overlays">
      <MemberSignature Language="C#" Value="public virtual MapKit.IMKOverlay[] Overlays { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MapKit.IMKOverlay[] Overlays" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.Overlays" />
      <MemberSignature Language="F#" Value="member this.Overlays : MapKit.IMKOverlay[]" Usage="MapKit.MKMapView.Overlays" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("overlays")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.IMKOverlay[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the overlays for the map.</summary>
        <value>
        </value>
        <remarks>The array that is returned will contain all the overlay objects currently associated with the map.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OverlaysInLevel">
      <MemberSignature Language="C#" Value="public virtual MapKit.IMKOverlay[] OverlaysInLevel (MapKit.MKOverlayLevel level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MapKit.IMKOverlay[] OverlaysInLevel(valuetype MapKit.MKOverlayLevel level) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.OverlaysInLevel(MapKit.MKOverlayLevel)" />
      <MemberSignature Language="F#" Value="abstract member OverlaysInLevel : MapKit.MKOverlayLevel -&gt; MapKit.IMKOverlay[]&#xA;override this.OverlaysInLevel : MapKit.MKOverlayLevel -&gt; MapKit.IMKOverlay[]" Usage="mKMapView.OverlaysInLevel level" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("overlaysInLevel:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.IMKOverlay[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="MapKit.MKOverlayLevel" />
      </Parameters>
      <Docs>
        <param name="level">To be added.</param>
        <summary>The overlays in the specified <paramref name="level" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PitchEnabled">
      <MemberSignature Language="C#" Value="public virtual bool PitchEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PitchEnabled" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.PitchEnabled" />
      <MemberSignature Language="F#" Value="member this.PitchEnabled : bool with get, set" Usage="MapKit.MKMapView.PitchEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isPitchEnabled")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setPitchEnabled:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the view uses the angle defined by the <see cref="P:MapKit.MKMapView.Camera" />.</summary>
        <value>The default value is <see langword="true" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Region">
      <MemberSignature Language="C#" Value="public virtual MapKit.MKCoordinateRegion Region { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MapKit.MKCoordinateRegion Region" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.Region" />
      <MemberSignature Language="F#" Value="member this.Region : MapKit.MKCoordinateRegion with get, set" Usage="MapKit.MKMapView.Region" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("region")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setRegion:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.MKCoordinateRegion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The region displayed by the map view.</summary>
        <value>
        </value>
        <remarks>The larger the displayed region, the further the map will be zoomed out to fit the area.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegionChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MapKit.MKMapViewChangeEventArgs&gt; RegionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MapKit.MKMapViewChangeEventArgs&gt; RegionChanged" />
      <MemberSignature Language="DocId" Value="E:MapKit.MKMapView.RegionChanged" />
      <MemberSignature Language="F#" Value="member this.RegionChanged : EventHandler&lt;MapKit.MKMapViewChangeEventArgs&gt; " Usage="member this.RegionChanged : System.EventHandler&lt;MapKit.MKMapViewChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MapKit.MKMapViewChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegionThatFits">
      <MemberSignature Language="C#" Value="public virtual MapKit.MKCoordinateRegion RegionThatFits (MapKit.MKCoordinateRegion region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MapKit.MKCoordinateRegion RegionThatFits(valuetype MapKit.MKCoordinateRegion region) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.RegionThatFits(MapKit.MKCoordinateRegion)" />
      <MemberSignature Language="F#" Value="abstract member RegionThatFits : MapKit.MKCoordinateRegion -&gt; MapKit.MKCoordinateRegion&#xA;override this.RegionThatFits : MapKit.MKCoordinateRegion -&gt; MapKit.MKCoordinateRegion" Usage="mKMapView.RegionThatFits region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("regionThatFits:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.MKCoordinateRegion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="MapKit.MKCoordinateRegion" />
      </Parameters>
      <Docs>
        <param name="region">The region of the map to fit in the map view's frame.</param>
        <summary>Adjusts the size of the region to fit within the map view's frame</summary>
        <returns>The adjusted region.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegionWillChange">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MapKit.MKMapViewChangeEventArgs&gt; RegionWillChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MapKit.MKMapViewChangeEventArgs&gt; RegionWillChange" />
      <MemberSignature Language="DocId" Value="E:MapKit.MKMapView.RegionWillChange" />
      <MemberSignature Language="F#" Value="member this.RegionWillChange : EventHandler&lt;MapKit.MKMapViewChangeEventArgs&gt; " Usage="member this.RegionWillChange : System.EventHandler&lt;MapKit.MKMapViewChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MapKit.MKMapViewChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public virtual void Register (ObjCRuntime.Class viewClass, string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Register(class ObjCRuntime.Class viewClass, string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.Register(ObjCRuntime.Class,System.String)" />
      <MemberSignature Language="F#" Value="abstract member Register : ObjCRuntime.Class * string -&gt; unit&#xA;override this.Register : ObjCRuntime.Class * string -&gt; unit" Usage="mKMapView.Register (viewClass, identifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("registerClass:forAnnotationViewWithReuseIdentifier:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewClass" Type="ObjCRuntime.Class" />
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewClass">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="identifier">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public void Register (Type viewType, string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Register(class System.Type viewType, string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.Register(System.Type,System.String)" />
      <MemberSignature Language="F#" Value="member this.Register : Type * string -&gt; unit" Usage="mKMapView.Register (viewType, identifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewType" Type="System.Type" />
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="viewType">To be added.</param>
        <param name="identifier">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotation">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotation (MapKit.IMKAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotation(class MapKit.IMKAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.RemoveAnnotation(MapKit.IMKAnnotation)" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotation : MapKit.IMKAnnotation -&gt; unit&#xA;override this.RemoveAnnotation : MapKit.IMKAnnotation -&gt; unit" Usage="mKMapView.RemoveAnnotation annotation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeAnnotation:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="MapKit.IMKAnnotation" />
      </Parameters>
      <Docs>
        <param name="annotation">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotations">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotations (params MapKit.IMKAnnotation[] annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotations(class MapKit.IMKAnnotation[] annotations) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.RemoveAnnotations(MapKit.IMKAnnotation[])" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnnotations : MapKit.IMKAnnotation[] -&gt; unit&#xA;override this.RemoveAnnotations : MapKit.IMKAnnotation[] -&gt; unit" Usage="mKMapView.RemoveAnnotations annotations" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeAnnotations:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotations" Type="MapKit.IMKAnnotation[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="annotations">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveOverlay">
      <MemberSignature Language="C#" Value="public virtual void RemoveOverlay (MapKit.IMKOverlay overlay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveOverlay(class MapKit.IMKOverlay overlay) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.RemoveOverlay(MapKit.IMKOverlay)" />
      <MemberSignature Language="F#" Value="abstract member RemoveOverlay : MapKit.IMKOverlay -&gt; unit&#xA;override this.RemoveOverlay : MapKit.IMKOverlay -&gt; unit" Usage="mKMapView.RemoveOverlay overlay" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeOverlay:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlay" Type="MapKit.IMKOverlay" />
      </Parameters>
      <Docs>
        <param name="overlay">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveOverlays">
      <MemberSignature Language="C#" Value="public virtual void RemoveOverlays (params MapKit.IMKOverlay[] overlays);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveOverlays(class MapKit.IMKOverlay[] overlays) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.RemoveOverlays(MapKit.IMKOverlay[])" />
      <MemberSignature Language="F#" Value="abstract member RemoveOverlays : MapKit.IMKOverlay[] -&gt; unit&#xA;override this.RemoveOverlays : MapKit.IMKOverlay[] -&gt; unit" Usage="mKMapView.RemoveOverlays overlays" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeOverlays:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlays" Type="MapKit.IMKOverlay[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="overlays">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RendererForOverlay">
      <MemberSignature Language="C#" Value="public virtual MapKit.MKOverlayRenderer RendererForOverlay (MapKit.IMKOverlay overlay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MapKit.MKOverlayRenderer RendererForOverlay(class MapKit.IMKOverlay overlay) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.RendererForOverlay(MapKit.IMKOverlay)" />
      <MemberSignature Language="F#" Value="abstract member RendererForOverlay : MapKit.IMKOverlay -&gt; MapKit.MKOverlayRenderer&#xA;override this.RendererForOverlay : MapKit.IMKOverlay -&gt; MapKit.MKOverlayRenderer" Usage="mKMapView.RendererForOverlay overlay" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("rendererForOverlay:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.MKOverlayRenderer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlay" Type="MapKit.IMKOverlay" />
      </Parameters>
      <Docs>
        <param name="overlay">To be added.</param>
        <summary>The <see cref="T:MapKit.MKOverlayRenderer" /> associated with the specified <paramref name="overlay" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateEnabled">
      <MemberSignature Language="C#" Value="public virtual bool RotateEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RotateEnabled" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.RotateEnabled" />
      <MemberSignature Language="F#" Value="member this.RotateEnabled : bool with get, set" Usage="MapKit.MKMapView.RotateEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isRotateEnabled")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setRotateEnabled:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the view uses the heading defined by the <see cref="P:MapKit.MKMapView.Camera" />.</summary>
        <value>The default value is <see langword="true" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollEnabled">
      <MemberSignature Language="C#" Value="public virtual bool ScrollEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScrollEnabled" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.ScrollEnabled" />
      <MemberSignature Language="F#" Value="member this.ScrollEnabled : bool with get, set" Usage="MapKit.MKMapView.ScrollEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isScrollEnabled")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setScrollEnabled:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Control if the map can be scrolled with a pan gesture.</summary>
        <value>
        </value>
        <remarks>Only controls interactive scrolling. The region can be changed in code regardless of this property.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectAnnotation">
      <MemberSignature Language="C#" Value="public virtual void SelectAnnotation (MapKit.IMKAnnotation annotation, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SelectAnnotation(class MapKit.IMKAnnotation annotation, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.SelectAnnotation(MapKit.IMKAnnotation,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SelectAnnotation : MapKit.IMKAnnotation * bool -&gt; unit&#xA;override this.SelectAnnotation : MapKit.IMKAnnotation * bool -&gt; unit" Usage="mKMapView.SelectAnnotation (annotation, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("selectAnnotation:animated:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="MapKit.IMKAnnotation" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="annotation">To be added.</param>
        <param name="animated">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedAnnotations">
      <MemberSignature Language="C#" Value="public virtual MapKit.IMKAnnotation[] SelectedAnnotations { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MapKit.IMKAnnotation[] SelectedAnnotations" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.SelectedAnnotations" />
      <MemberSignature Language="F#" Value="member this.SelectedAnnotations : MapKit.IMKAnnotation[] with get, set" Usage="MapKit.MKMapView.SelectedAnnotations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("selectedAnnotations", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSelectedAnnotations:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.IMKAnnotation[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array containing the curently selected annotations.</summary>
        <value>
          <para>
          </para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>When setting this property, only the first annotation in the array will be selected.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCamera">
      <MemberSignature Language="C#" Value="public virtual void SetCamera (MapKit.MKMapCamera camera, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCamera(class MapKit.MKMapCamera camera, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.SetCamera(MapKit.MKMapCamera,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetCamera : MapKit.MKMapCamera * bool -&gt; unit&#xA;override this.SetCamera : MapKit.MKMapCamera * bool -&gt; unit" Usage="mKMapView.SetCamera (camera, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setCamera:animated:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="camera" Type="MapKit.MKMapCamera" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="camera">To be added.</param>
        <param name="animated">If <see langword="true" />, animate the transition.</param>
        <summary>Sets the <see cref="P:MapKit.MKMapView.Camera" /> property, optionally animating.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:MapKit.MKMapView.Camera" />
      </Docs>
    </Member>
    <Member MemberName="SetCenterCoordinate">
      <MemberSignature Language="C#" Value="public virtual void SetCenterCoordinate (CoreLocation.CLLocationCoordinate2D coordinate, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCenterCoordinate(valuetype CoreLocation.CLLocationCoordinate2D coordinate, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.SetCenterCoordinate(CoreLocation.CLLocationCoordinate2D,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetCenterCoordinate : CoreLocation.CLLocationCoordinate2D * bool -&gt; unit&#xA;override this.SetCenterCoordinate : CoreLocation.CLLocationCoordinate2D * bool -&gt; unit" Usage="mKMapView.SetCenterCoordinate (coordinate, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setCenterCoordinate:animated:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="coordinate" Type="CoreLocation.CLLocationCoordinate2D" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="coordinate">The coordinate to center the map on.</param>
        <param name="animated">A boolean indicating if the transition to the new center location should be animated.</param>
        <summary>Sets the map center. This method is asynchronous.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRegion">
      <MemberSignature Language="C#" Value="public virtual void SetRegion (MapKit.MKCoordinateRegion region, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetRegion(valuetype MapKit.MKCoordinateRegion region, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.SetRegion(MapKit.MKCoordinateRegion,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetRegion : MapKit.MKCoordinateRegion * bool -&gt; unit&#xA;override this.SetRegion : MapKit.MKCoordinateRegion * bool -&gt; unit" Usage="mKMapView.SetRegion (region, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setRegion:animated:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="MapKit.MKCoordinateRegion" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="region">The region to display.</param>
        <param name="animated">A boolean indicating if the transition to the new region should be animated.</param>
        <summary>Changes the region dispalyed on the map.</summary>
        <remarks>If the region does not fit, the map view will adjust it so that it is visible.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUserTrackingMode">
      <MemberSignature Language="C#" Value="public virtual void SetUserTrackingMode (MapKit.MKUserTrackingMode trackingMode, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetUserTrackingMode(valuetype MapKit.MKUserTrackingMode trackingMode, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.SetUserTrackingMode(MapKit.MKUserTrackingMode,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetUserTrackingMode : MapKit.MKUserTrackingMode * bool -&gt; unit&#xA;override this.SetUserTrackingMode : MapKit.MKUserTrackingMode * bool -&gt; unit" Usage="mKMapView.SetUserTrackingMode (trackingMode, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setUserTrackingMode:animated:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trackingMode" Type="MapKit.MKUserTrackingMode" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="trackingMode">The <see cref="T:MapKit.MKUserTrackingMode" /> used to track the user's location.</param>
        <param name="animated">Controls if the change in tracking mode is animated.</param>
        <summary>Sets the user tracking mode to a value in <see cref="T:MapKit.MKUserTrackingMode" />.</summary>
        <remarks>Used to control if a user's location, heading or both are tracked.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVisibleMapRect">
      <MemberSignature Language="C#" Value="public virtual void SetVisibleMapRect (MapKit.MKMapRect mapRect, bool animate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVisibleMapRect(valuetype MapKit.MKMapRect mapRect, bool animate) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.SetVisibleMapRect(MapKit.MKMapRect,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetVisibleMapRect : MapKit.MKMapRect * bool -&gt; unit&#xA;override this.SetVisibleMapRect : MapKit.MKMapRect * bool -&gt; unit" Usage="mKMapView.SetVisibleMapRect (mapRect, animate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setVisibleMapRect:animated:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapRect" Type="MapKit.MKMapRect" />
        <Parameter Name="animate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mapRect">The rectangle used to define the visible portion of the map.</param>
        <param name="animate">Controls if the transition to the new map area is animated.</param>
        <summary>Sets the visible area of the map.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVisibleMapRect">
      <MemberSignature Language="C#" Value="public virtual void SetVisibleMapRect (MapKit.MKMapRect mapRect, UIKit.UIEdgeInsets edgePadding, bool animate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVisibleMapRect(valuetype MapKit.MKMapRect mapRect, valuetype UIKit.UIEdgeInsets edgePadding, bool animate) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.SetVisibleMapRect(MapKit.MKMapRect,UIKit.UIEdgeInsets,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetVisibleMapRect : MapKit.MKMapRect * UIKit.UIEdgeInsets * bool -&gt; unit&#xA;override this.SetVisibleMapRect : MapKit.MKMapRect * UIKit.UIEdgeInsets * bool -&gt; unit" Usage="mKMapView.SetVisibleMapRect (mapRect, edgePadding, animate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setVisibleMapRect:edgePadding:animated:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapRect" Type="MapKit.MKMapRect" />
        <Parameter Name="edgePadding" Type="UIKit.UIEdgeInsets" />
        <Parameter Name="animate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mapRect">The rectangle used to define the visible portion of the map.</param>
        <param name="edgePadding">The inset padding to include when fitting the map rectangle.</param>
        <param name="animate">Controls if the transition to the new rectangle is animated.</param>
        <summary>Sets the visible area of the map, including additional space for padding.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowAnnotations">
      <MemberSignature Language="C#" Value="public virtual void ShowAnnotations (MapKit.IMKAnnotation[] annotations, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowAnnotations(class MapKit.IMKAnnotation[] annotations, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.ShowAnnotations(MapKit.IMKAnnotation[],System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member ShowAnnotations : MapKit.IMKAnnotation[] * bool -&gt; unit&#xA;override this.ShowAnnotations : MapKit.IMKAnnotation[] * bool -&gt; unit" Usage="mKMapView.ShowAnnotations (annotations, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("showAnnotations:animated:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotations" Type="MapKit.IMKAnnotation[]" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="annotations">To be added.</param>
        <param name="animated">To be added.</param>
        <summary>Sets the visible region of the map such that the specified annotations can all be seen.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsBuildings">
      <MemberSignature Language="C#" Value="public virtual bool ShowsBuildings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsBuildings" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.ShowsBuildings" />
      <MemberSignature Language="F#" Value="member this.ShowsBuildings : bool with get, set" Usage="MapKit.MKMapView.ShowsBuildings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("showsBuildings")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setShowsBuildings:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether 3D geometry (if available) is rendered.</summary>
        <value>The default value is <see langword="true" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:MapKit.MKMapView.Camera" />
        <altmember cref="P:MapKit.MKMapView.PitchEnabled" />
        <altmember cref="T:MapKit.MKCamera" />
      </Docs>
    </Member>
    <Member MemberName="ShowsCompass">
      <MemberSignature Language="C#" Value="public virtual bool ShowsCompass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsCompass" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.ShowsCompass" />
      <MemberSignature Language="F#" Value="member this.ShowsCompass : bool with get, set" Usage="MapKit.MKMapView.ShowsCompass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("showsCompass")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setShowsCompass:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the map should display a compass rose.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsPointsOfInterest">
      <MemberSignature Language="C#" Value="public virtual bool ShowsPointsOfInterest { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsPointsOfInterest" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.ShowsPointsOfInterest" />
      <MemberSignature Language="F#" Value="member this.ShowsPointsOfInterest : bool with get, set" Usage="MapKit.MKMapView.ShowsPointsOfInterest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("showsPointsOfInterest")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setShowsPointsOfInterest:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the map should display features that are marked as points of interest.</summary>
        <value>The default value is <see langword="true" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsScale">
      <MemberSignature Language="C#" Value="public virtual bool ShowsScale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsScale" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.ShowsScale" />
      <MemberSignature Language="F#" Value="member this.ShowsScale : bool with get, set" Usage="MapKit.MKMapView.ShowsScale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("showsScale")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setShowsScale:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the map should show a scale graphic.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsTraffic">
      <MemberSignature Language="C#" Value="public virtual bool ShowsTraffic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsTraffic" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.ShowsTraffic" />
      <MemberSignature Language="F#" Value="member this.ShowsTraffic : bool with get, set" Usage="MapKit.MKMapView.ShowsTraffic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("showsTraffic")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setShowsTraffic:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the map should show traffic congestion graphics.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsUserLocation">
      <MemberSignature Language="C#" Value="public virtual bool ShowsUserLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsUserLocation" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.ShowsUserLocation" />
      <MemberSignature Language="F#" Value="member this.ShowsUserLocation : bool with get, set" Usage="MapKit.MKMapView.ShowsUserLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("showsUserLocation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setShowsUserLocation:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Shows the user's location.</summary>
        <value>
        </value>
        <remarks>Uses Core Location internally to locate the user. Therefore setting this property to true will result in the user being prompted to allow location.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserLocation">
      <MemberSignature Language="C#" Value="public virtual MapKit.MKUserLocation UserLocation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MapKit.MKUserLocation UserLocation" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.UserLocation" />
      <MemberSignature Language="F#" Value="member this.UserLocation : MapKit.MKUserLocation" Usage="MapKit.MKMapView.UserLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("userLocation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.MKUserLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the user's location.</summary>
        <value>
        </value>
        <remarks>The current location of the user.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserLocationVisible">
      <MemberSignature Language="C#" Value="public virtual bool UserLocationVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UserLocationVisible" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.UserLocationVisible" />
      <MemberSignature Language="F#" Value="member this.UserLocationVisible : bool" Usage="MapKit.MKMapView.UserLocationVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isUserLocationVisible")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns if the user's location is currently visible on the map.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserTrackingMode">
      <MemberSignature Language="C#" Value="public virtual MapKit.MKUserTrackingMode UserTrackingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MapKit.MKUserTrackingMode UserTrackingMode" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.UserTrackingMode" />
      <MemberSignature Language="F#" Value="member this.UserTrackingMode : MapKit.MKUserTrackingMode with get, set" Usage="MapKit.MKMapView.UserTrackingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("userTrackingMode")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setUserTrackingMode:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.MKUserTrackingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies if and how the map should track the application user's position.</summary>
        <value>The default value is <see cref="F:MapKit.MKUserTrackingMode.None" />.</value>
        <remarks>
          <para>Setting this property to either <see cref="F:MapKit.MKUserTrackingMode.Follow" /> or <see cref="F:MapKit.MKUserTrackingMode.FollowWithHeading" /> causes the <see cref="T:MapKit.MKMapView" /> to begin centering and zooming the map to the application user's location.</para>
        </remarks>
        <altmember cref="M:UIKit.MKMapView.SetUserTrackingMode" />
      </Docs>
    </Member>
    <Member MemberName="ViewForAnnotation">
      <MemberSignature Language="C#" Value="public virtual MapKit.MKAnnotationView ViewForAnnotation (MapKit.IMKAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MapKit.MKAnnotationView ViewForAnnotation(class MapKit.IMKAnnotation annotation) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.ViewForAnnotation(MapKit.IMKAnnotation)" />
      <MemberSignature Language="F#" Value="abstract member ViewForAnnotation : MapKit.IMKAnnotation -&gt; MapKit.MKAnnotationView&#xA;override this.ViewForAnnotation : MapKit.IMKAnnotation -&gt; MapKit.MKAnnotationView" Usage="mKMapView.ViewForAnnotation annotation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("viewForAnnotation:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.MKAnnotationView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="MapKit.IMKAnnotation" />
      </Parameters>
      <Docs>
        <param name="annotation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewForOverlay">
      <MemberSignature Language="C#" Value="public virtual MapKit.MKOverlayView ViewForOverlay (MapKit.IMKOverlay overlay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MapKit.MKOverlayView ViewForOverlay(class MapKit.IMKOverlay overlay) cil managed" />
      <MemberSignature Language="DocId" Value="M:MapKit.MKMapView.ViewForOverlay(MapKit.IMKOverlay)" />
      <MemberSignature Language="F#" Value="abstract member ViewForOverlay : MapKit.IMKOverlay -&gt; MapKit.MKOverlayView&#xA;override this.ViewForOverlay : MapKit.IMKOverlay -&gt; MapKit.MKOverlayView" Usage="mKMapView.ViewForOverlay overlay" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("viewForOverlay:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, "Use 'MKOverlayRenderer.RendererForOverlay' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.MKOverlayView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlay" Type="MapKit.IMKOverlay" />
      </Parameters>
      <Docs>
        <param name="overlay">To be added.</param>
        <summary>Developers should not use this deprecated method. Developers should use 'MKOverlayRenderer.RendererForOverlay' instead.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisibleMapRect">
      <MemberSignature Language="C#" Value="public virtual MapKit.MKMapRect VisibleMapRect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MapKit.MKMapRect VisibleMapRect" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.VisibleMapRect" />
      <MemberSignature Language="F#" Value="member this.VisibleMapRect : MapKit.MKMapRect with get, set" Usage="MapKit.MKMapView.VisibleMapRect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("visibleMapRect")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setVisibleMapRect:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.MKMapRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The map rectangle that is currently visible.</summary>
        <value>To be added.</value>
        <remarks>The visible portion of the map that is displayed can also be set using the <see cref="P:MapKit.MKMapView.Region" /> property.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakDelegate" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.WeakDelegate" />
      <MemberSignature Language="F#" Value="member this.WeakDelegate : Foundation.NSObject with get, set" Usage="MapKit.MKMapView.WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("delegate", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDelegate:", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for this type</summary>
        <value>The instance that will respond to events and data requests.</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>   Methods must be decorated with the [Export ("selectorName")] attribute to respond to each method from the protocol.   Alternatively use the Delegate method which is strongly typed and does not require the [Export] attributes on methods.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WillStartLoadingMap">
      <MemberSignature Language="C#" Value="public event EventHandler WillStartLoadingMap;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler WillStartLoadingMap" />
      <MemberSignature Language="DocId" Value="E:MapKit.MKMapView.WillStartLoadingMap" />
      <MemberSignature Language="F#" Value="member this.WillStartLoadingMap : EventHandler " Usage="member this.WillStartLoadingMap : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillStartLocatingUser">
      <MemberSignature Language="C#" Value="public event EventHandler WillStartLocatingUser;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler WillStartLocatingUser" />
      <MemberSignature Language="DocId" Value="E:MapKit.MKMapView.WillStartLocatingUser" />
      <MemberSignature Language="F#" Value="member this.WillStartLocatingUser : EventHandler " Usage="member this.WillStartLocatingUser : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillStartRenderingMap">
      <MemberSignature Language="C#" Value="public event EventHandler WillStartRenderingMap;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler WillStartRenderingMap" />
      <MemberSignature Language="DocId" Value="E:MapKit.MKMapView.WillStartRenderingMap" />
      <MemberSignature Language="F#" Value="member this.WillStartRenderingMap : EventHandler " Usage="member this.WillStartRenderingMap : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomEnabled">
      <MemberSignature Language="C#" Value="public virtual bool ZoomEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ZoomEnabled" />
      <MemberSignature Language="DocId" Value="P:MapKit.MKMapView.ZoomEnabled" />
      <MemberSignature Language="F#" Value="member this.ZoomEnabled : bool with get, set" Usage="MapKit.MKMapView.ZoomEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isZoomEnabled")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setZoomEnabled:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Controls if the user can zoom in and out of the map using a pinch gesture.</summary>
        <value>Default is <see langword="true" />.</value>
        <remarks>The default value of <see langword="true" /> allows zooming. This property only controls if the user can interactively zoom. It has no affect on zooming the map in code, which can be done by changing either the <see cref="P:MapKit.MKMapView.Region" /> or <see cref="P:MapKit.MKMapView.VisibleMapRect" /> properties.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
