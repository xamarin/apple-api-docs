<Type Name="IMKMapViewDelegate" FullName="MapKit.IMKMapViewDelegate">
  <TypeSignature Language="C#" Value="public interface IMKMapViewDelegate : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMKMapViewDelegate implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:MapKit.IMKMapViewDelegate" />
  <TypeSignature Language="F#" Value="type IMKMapViewDelegate = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="MKMapViewDelegate", WrapperType=typeof(MapKit.MKMapViewDelegateWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="RegionWillChange", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView), typeof(System.Boolean) }, Selector="mapView:regionWillChangeAnimated:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="RegionChanged", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView), typeof(System.Boolean) }, Selector="mapView:regionDidChangeAnimated:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="WillStartLoadingMap", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView) }, Selector="mapViewWillStartLoadingMap:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="MapLoaded", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView) }, Selector="mapViewDidFinishLoadingMap:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="LoadingMapFailed", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView), typeof(Foundation.NSError) }, Selector="mapViewDidFailLoadingMap:withError:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetViewForAnnotation", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView), typeof(MapKit.IMKAnnotation) }, ReturnType=typeof(MapKit.MKAnnotationView), Selector="mapView:viewForAnnotation:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidAddAnnotationViews", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView), typeof(MapKit.MKAnnotationView[]) }, Selector="mapView:didAddAnnotationViews:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="CalloutAccessoryControlTapped", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView), typeof(MapKit.MKAnnotationView), typeof(UIKit.UIControl) }, Selector="mapView:annotationView:calloutAccessoryControlTapped:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ChangedDragState", ParameterByRef=new System.Boolean[] { false, false, false, false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView), typeof(MapKit.MKAnnotationView), typeof(MapKit.MKAnnotationViewDragState), typeof(MapKit.MKAnnotationViewDragState) }, Selector="mapView:annotationView:didChangeDragState:fromOldState:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetViewForOverlay", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView), typeof(MapKit.IMKOverlay) }, ReturnType=typeof(MapKit.MKOverlayView), Selector="mapView:viewForOverlay:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidAddOverlayViews", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView), typeof(MapKit.MKOverlayView) }, Selector="mapView:didAddOverlayViews:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidSelectAnnotationView", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView), typeof(MapKit.MKAnnotationView) }, Selector="mapView:didSelectAnnotationView:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidFailToLocateUser", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView), typeof(Foundation.NSError) }, Selector="mapView:didFailToLocateUserWithError:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidDeselectAnnotationView", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView), typeof(MapKit.MKAnnotationView) }, Selector="mapView:didDeselectAnnotationView:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="WillStartLocatingUser", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView) }, Selector="mapViewWillStartLocatingUser:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidStopLocatingUser", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView) }, Selector="mapViewDidStopLocatingUser:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidUpdateUserLocation", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView), typeof(MapKit.MKUserLocation) }, Selector="mapView:didUpdateUserLocation:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidChangeUserTrackingMode", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView), typeof(MapKit.MKUserTrackingMode), typeof(System.Boolean) }, Selector="mapView:didChangeUserTrackingMode:animated:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="OverlayRenderer", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView), typeof(MapKit.IMKOverlay) }, ReturnType=typeof(MapKit.MKOverlayRenderer), Selector="mapView:rendererForOverlay:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidAddOverlayRenderers", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView), typeof(MapKit.MKOverlayRenderer[]) }, Selector="mapView:didAddOverlayRenderers:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="WillStartRenderingMap", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView) }, Selector="mapViewWillStartRenderingMap:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidFinishRenderingMap", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView), typeof(System.Boolean) }, Selector="mapViewDidFinishRenderingMap:fullyRendered:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="CreateClusterAnnotation", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView), typeof(MapKit.IMKAnnotation[]) }, ReturnType=typeof(MapKit.MKClusterAnnotation), Selector="mapView:clusterAnnotationForMemberAnnotations:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidChangeVisibleRegion", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(MapKit.MKMapView) }, Selector="mapViewDidChangeVisibleRegion:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface representing the required methods (if any) of the protocol <see cref="T:MapKit.MKMapViewDelegate" />.</summary>
    <remarks>
      <para>This interface contains the required methods (if any) from the protocol defined by <see cref="T:MapKit.MKMapViewDelegate" />.</para>
      <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="T:MapKit.MKMapViewDelegate" /> protocol.</para>
      <para>Optional methods (if any) are provided by the <see cref="T:MapKit.MKMapViewDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
    </remarks>
  </Docs>
  <Members />
</Type>
