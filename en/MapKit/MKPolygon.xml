<Type Name="MKPolygon" FullName="MapKit.MKPolygon">
  <TypeSignature Language="C#" Value="public class MKPolygon : MapKit.MKMultiPoint, IDisposable, MapKit.IMKOverlay" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MKPolygon extends MapKit.MKMultiPoint implements class MapKit.IMKAnnotation, class MapKit.IMKOverlay, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MapKit.MKMultiPoint</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MapKit.IMKOverlay</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("MKPolygon", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 9, 2, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 4, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A map annotation that represents a closed polygon overlaid on a specific location.</summary>
    <remarks>
      <para>The polygon shape is determined by connecting the points in the order they are passed to the <see cref="M:MapKit.MKPolygon.FromPoints" /> or <see cref="M:MapKit.MKPolygon.FromCoordinates" /> factory methods. The first and final points are automatically connected to close the polygon.</para>
      <para>Application developers can exclude interior areas with the <see cref="P:MapKit.MKPolygon.InteriorPolygons" /> property. </para>
      <para>Subclassing <see cref="T:MapKit.MKPolygon" /> is not possible (see <format type="text/html"><a href="http://stackoverflow.com/questions/5286961/objective-c-sub-classing-basics-how-to-add-custom-property" /></format>).</para>
      <para tool="threads">The members of this class can be used from a background thread.</para>
    </remarks>
    <altmember cref="T:MapKit.MKPolyLine" />
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/MapKit/Reference/MKPolygon_class/index.html">Apple documentation for <c>MKPolygon</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MKPolygon ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MKPolygon (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MKPolygon (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundingMapRect">
      <MemberSignature Language="C#" Value="public virtual MapKit.MKMapRect BoundingMapRect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MapKit.MKMapRect BoundingMapRect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("boundingMapRect")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.MKMapRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The minimal bounding rectangle of the <see cref="T:MapKit.MKPolygon" />.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanReplaceMapContent">
      <MemberSignature Language="C#" Value="public virtual bool CanReplaceMapContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReplaceMapContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("canReplaceMapContent")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>
          <para>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Coordinate">
      <MemberSignature Language="C#" Value="public virtual CoreLocation.CLLocationCoordinate2D Coordinate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreLocation.CLLocationCoordinate2D Coordinate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("coordinate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreLocation.CLLocationCoordinate2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The location in the center of the <see cref="P:MapKit.MKPolygon.BoundingMapRect" />.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Application developers must override this property in order to provide a more accurate location (for instance, if the <see cref="T:MapKit.MKPolygon" /> is asymetric.)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromCoordinates">
      <MemberSignature Language="C#" Value="public static MapKit.MKPolygon FromCoordinates (CoreLocation.CLLocationCoordinate2D[] coords);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MapKit.MKPolygon FromCoordinates(valuetype CoreLocation.CLLocationCoordinate2D[] coords) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MapKit.MKPolygon</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="coords" Type="CoreLocation.CLLocationCoordinate2D[]" />
      </Parameters>
      <Docs>
        <param name="coords">An array of <see cref="T:CoreLocation.CLLocationCoordinate2D" />s that define the desired polygon.</param>
        <summary>Creates an <see cref="T:MapKit.MKPolygon" /> from the specified <paramref name="coords" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromCoordinates">
      <MemberSignature Language="C#" Value="public static MapKit.MKPolygon FromCoordinates (CoreLocation.CLLocationCoordinate2D[] coords, MapKit.MKPolygon[] interiorPolygons);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MapKit.MKPolygon FromCoordinates(valuetype CoreLocation.CLLocationCoordinate2D[] coords, class MapKit.MKPolygon[] interiorPolygons) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MapKit.MKPolygon</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="coords" Type="CoreLocation.CLLocationCoordinate2D[]" />
        <Parameter Name="interiorPolygons" Type="MapKit.MKPolygon[]" />
      </Parameters>
      <Docs>
        <param name="coords">An array of <see cref="T:CoreLocation.CLLocationCoordinate2D" />s that define the desired polygon.</param>
        <param name="interiorPolygons">An array of <see cref="T:MapKit.MKPolygon" />s that should be excluded from the polygon's interior.</param>
        <summary>Creates an <see cref="T:MapKit.MKPolygon" /> from the specified <paramref name="coords" />, excluding the specified <paramref name="interiorPolygons" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromPoints">
      <MemberSignature Language="C#" Value="public static MapKit.MKPolygon FromPoints (MapKit.MKMapPoint[] points);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MapKit.MKPolygon FromPoints(valuetype MapKit.MKMapPoint[] points) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MapKit.MKPolygon</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="MapKit.MKMapPoint[]" />
      </Parameters>
      <Docs>
        <param name="points">An array of <see cref="T:MapKit.MKMapPoint" />s that define the polygon.</param>
        <summary>Creates an <see cref="T:MapKit.MKPolygon" /> from the specified <paramref name="points" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromPoints">
      <MemberSignature Language="C#" Value="public static MapKit.MKPolygon FromPoints (MapKit.MKMapPoint[] points, MapKit.MKPolygon[] interiorPolygons);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MapKit.MKPolygon FromPoints(valuetype MapKit.MKMapPoint[] points, class MapKit.MKPolygon[] interiorPolygons) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MapKit.MKPolygon</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="MapKit.MKMapPoint[]" />
        <Parameter Name="interiorPolygons" Type="MapKit.MKPolygon[]" />
      </Parameters>
      <Docs>
        <param name="points">An array of <see cref="T:MapKit.MKMapPoint" />s that define the polygon.</param>
        <param name="interiorPolygons">An array of <see cref="T:MapKit.MKPolygon" />s that should be excluded from the polygon's interior.</param>
        <summary>Creates an <see cref="T:MapKit.MKPolygon" /> from the specified <paramref name="points" />, excluding the specified <paramref name="interiorPolygons" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InteriorPolygons">
      <MemberSignature Language="C#" Value="public virtual MapKit.MKPolygon[] InteriorPolygons { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MapKit.MKPolygon[] InteriorPolygons" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("interiorPolygons")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MapKit.MKPolygon[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of <see cref="T:MapKit.MKPolygon" />s that are excluded from the <see cref="T:MapKit.MKPolygon" />.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersects">
      <MemberSignature Language="C#" Value="public virtual bool Intersects (MapKit.MKMapRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Intersects(valuetype MapKit.MKMapRect rect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("intersectsMapRect:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="MapKit.MKMapRect" />
      </Parameters>
      <Docs>
        <param name="rect">The <see cref="T:MapKit.MKMapRect" /> being queried for intersection.</param>
        <summary>Calculates if the specified <paramref name="rect" /> intersects this polygon.</summary>
        <returns>Returns <see langword="true" /> if the specified rect intersects the <see cref="T:MapKit.MKPolygon" />'s <see cref="P:MapKit.MKPolygon.BoundingMapRect" />'.</returns>
        <remarks>
          <para>Application developers must override this method if they require a more accurate, geometry-based calculation.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
