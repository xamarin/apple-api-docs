<Type Name="NWParameters" FullName="Network.NWParameters">
  <TypeSignature Language="C#" Value="public class NWParameters : CoreFoundation.NativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NWParameters extends CoreFoundation.NativeObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>CoreFoundation.NativeObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>ObjCRuntime.TV(12, 0)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Manages the parameters for a connection.   Use one of the Create factory methods to create a configured instance of <see cref="T:Network.NWParameters" />.</summary>
    <remarks>
      <para>You should create the parameters using one of the factory methods.   </para>
      <para>You can pick between creating connections using the TCP protocol for sendings reliable, ordered streams of data or UDP for sending datagrams that do not need any ordering guarantees.  Additionally, you can create raw connections, or secured connections with Transport Layer Security (TLS).  </para>
      <para>To create raw, unsecured connections use one of:</para>
      <para>
      </para>
      <list type="bullet">
        <item>
          <term>
            <see cref="M:Network.NWParameters.CreateTcp" /> - for TCP based connections</term>
        </item>
        <item>
          <term>
            <see cref="M:Network.NWParameters.CreateUdp" /> - for UDP based connections</term>
        </item>
      </list>
      <para>The specific parameters of the TCP or UDP connection can be further configured by providing a callback to the methods that will configure the protocol <see cref="T:Network.NWProtocolOptions." /></para>
      <para>
      </para>
      <para>To create TLS secured connections, use one of:</para>
      <para>
      </para>
      <list type="bullet">
        <item>
          <term>
            <see cref="M:Network.NWParameters.CreateSecureTcp" /> - for TCP based connections</term>
        </item>
        <item>
          <term>
            <see cref="M:Network.NWParameters.CreateSecureUdp" /> - for UDP based connections</term>
        </item>
      </list>
      <para>Both methods allow for the TLS settings to be customized by passing a callback to the methods that will configure the TLS <see cref="T:Network.NWProtocolOptions" />.</para>
      <para>Once you have created a set of <see cref="T:Network.NWParameters" />, you can further customize the parameters of the connection by setting various properties on it and then using the result in an <see cref="T:Network.NWConnection" /> or an <see cref="T:Network.NWListener" />.</para>
      <para>
      </para>
      <para>
      </para>
      <para>
      </para>
      <para>
      </para>
      <para>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NWParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates an empty set of parameters, it is not suitable to use without additional configuration.   You might want to consider to start with a factory method</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NWParameters (IntPtr handle, bool owns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle, bool owns) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="owns" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <param name="owns">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearProhibitedInterfaces">
      <MemberSignature Language="C#" Value="public void ClearProhibitedInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearProhibitedInterfaces() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears the list of prohibited interfaces that were added with <see cref="M:Network.NWParameters.ProhibitedInterface" />.</summary>
        <remarks>
          <para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearProhibitedInterfaceTypes">
      <MemberSignature Language="C#" Value="public void ClearProhibitedInterfaceTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearProhibitedInterfaceTypes() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears the list of prohibited interfaces that were added with <see cref="M:Network.NWParameters.ProhibitedInterfaceTypes" />.</summary>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public Network.NWParameters Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Network.NWParameters Clone() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Network.NWParameters</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSecureTcp">
      <MemberSignature Language="C#" Value="public static Network.NWParameters CreateSecureTcp (Action&lt;Network.NWProtocolOptions&gt; configureTls = null, Action&lt;Network.NWProtocolOptions&gt; configureTcp = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Network.NWParameters CreateSecureTcp(class System.Action`1&lt;class Network.NWProtocolOptions&gt; configureTls, class System.Action`1&lt;class Network.NWProtocolOptions&gt; configureTcp) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Network.NWParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configureTls" Type="System.Action&lt;Network.NWProtocolOptions&gt;" />
        <Parameter Name="configureTcp" Type="System.Action&lt;Network.NWProtocolOptions&gt;" />
      </Parameters>
      <Docs>
        <param name="configureTls">
          <see langword="null" /> if you want to use the default TLS configuration options.   Otherwise a callback that can customize the <see cref="T:Network.NWProtocolOptions" />.</param>
        <param name="configureTcp">null if you want to use the default TCP configuration options.   Otherwise a callback that can customize the <see cref="T:Network.NWProtocolOptions" />.</param>
        <summary>Creates a <see cref="T:Network.NWParameters" /> suitable for secured TCP (stream) communications using TLS.  You can optionally configure the TLS and TCP options by specifying the <paramref name="configureTls" /> or <paramref name="configureTcp" /> parameters.</summary>
        <returns>
          <para />
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSecureUdp">
      <MemberSignature Language="C#" Value="public static Network.NWParameters CreateSecureUdp (Action&lt;Network.NWProtocolOptions&gt; configureTls = null, Action&lt;Network.NWProtocolOptions&gt; configureUdp = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Network.NWParameters CreateSecureUdp(class System.Action`1&lt;class Network.NWProtocolOptions&gt; configureTls, class System.Action`1&lt;class Network.NWProtocolOptions&gt; configureUdp) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Network.NWParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configureTls" Type="System.Action&lt;Network.NWProtocolOptions&gt;" />
        <Parameter Name="configureUdp" Type="System.Action&lt;Network.NWProtocolOptions&gt;" />
      </Parameters>
      <Docs>
        <param name="configureTls">
          <see langword="null" /> if you want to use the default TLS configuration options.   Otherwise a callback that can customize the <see cref="T:Network.NWProtocolOptions" />.</param>
        <param name="configureUdp">null if you want to use the default UDP configuration options.   Otherwise a callback that can customize the <see cref="T:Network.NWProtocolOptions" />.</param>
        <summary>Creates a <see cref="T:Network.NWParameters" /> suitable for secured UCP (datagram) communications using TLS.  You can optionally configure the TLS and UDP options by specifying the <paramref name="configureTls" /> or <paramref name="configureUdp" /> parameters.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTcp">
      <MemberSignature Language="C#" Value="public static Network.NWParameters CreateTcp (Action&lt;Network.NWProtocolOptions&gt; configureTcp = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Network.NWParameters CreateTcp(class System.Action`1&lt;class Network.NWProtocolOptions&gt; configureTcp) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Network.NWParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configureTcp" Type="System.Action&lt;Network.NWProtocolOptions&gt;" />
      </Parameters>
      <Docs>
        <param name="configureTcp">null if you want to use the default TCP configuration options.   Otherwise a callback that can customize the <see cref="T:Network.NWProtocolOptions" />.</param>
        <summary>Creates a <see cref="T:Network.NWParameters" /> suitable for TCP (stream) communications using TLS.  You can optionally configure the TCP options by specifying the <paramref name="configureTcp" /> parameter.</summary>
        <returns>
          <para />
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUdp">
      <MemberSignature Language="C#" Value="public static Network.NWParameters CreateUdp (Action&lt;Network.NWProtocolOptions&gt; configureUdp = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Network.NWParameters CreateUdp(class System.Action`1&lt;class Network.NWProtocolOptions&gt; configureUdp) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Network.NWParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configureUdp" Type="System.Action&lt;Network.NWProtocolOptions&gt;" />
      </Parameters>
      <Docs>
        <param name="configureUdp">null if you want to use the default UDP configuration options.   Otherwise a callback that can customize the <see cref="T:Network.NWProtocolOptions" />.</param>
        <summary>Creates a <see cref="T:Network.NWParameters" /> suitable for UDP (datagram) communications, you can optionally configure UDP options by specifying the <paramref name="configureUdp" /> parameter.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpiredDnsBehavior">
      <MemberSignature Language="C#" Value="public Network.NWParametersExpiredDnsBehavior ExpiredDnsBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Network.NWParametersExpiredDnsBehavior ExpiredDnsBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Network.NWParametersExpiredDnsBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FastOpenEnabled">
      <MemberSignature Language="C#" Value="public bool FastOpenEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FastOpenEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Controls Fast-Open behavior on the connection, can happen with any protocol.   Defaults to false.</summary>
        <value>The current setting for fast-open, it defaults to <see langword="false" />.</value>
        <remarks>If this setting is set to true, the sender must send the first block of data using the <see cref="T:Network.NWConnection.SendIdempotent" /> method - this is necessary as the same content might be send repeatedly over different channels.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludePeerToPeer">
      <MemberSignature Language="C#" Value="public bool IncludePeerToPeer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludePeerToPeer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IterateProhibitedInterfaces">
      <MemberSignature Language="C#" Value="public void IterateProhibitedInterfaces (Func&lt;Network.NWInterface,bool&gt; iterationCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IterateProhibitedInterfaces(class System.Func`2&lt;class Network.NWInterface, bool&gt; iterationCallback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iterationCallback" Type="System.Func&lt;Network.NWInterface,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="iterationCallback">Callback that is invoked with each prohibited interface.   Return <see langword="true" /> to keep the enumeration going, or <see langword="false" /> to stop the enumeration process.</param>
        <summary>Used to enumerate over all the prohibited interfaces</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IterateProhibitedInterfaces">
      <MemberSignature Language="C#" Value="public void IterateProhibitedInterfaces (Func&lt;Network.NWInterfaceType,bool&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IterateProhibitedInterfaces(class System.Func`2&lt;valuetype Network.NWInterfaceType, bool&gt; callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;Network.NWInterfaceType,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="callback">Callback that is invoked with each prohibited interface.   Return <see langword="true" /> to keep the enumeration going, or <see langword="false" /> to stop the enumeration process.</param>
        <summary>Used to enumerate over all the prohibited interface types.</summary>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalEndpoint">
      <MemberSignature Language="C#" Value="public Network.NWEndpoint LocalEndpoint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Network.NWEndpoint LocalEndpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Network.NWEndpoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The local endpoint for the connection.   When setting, the value in <see cref="T:Network.NWConnection" /> will be used as the outgoing port, for <see cref="T:Network.NWListener" /> it will be used as the listening endpont.</summary>
        <value>The local end point currently set on the connection, or <see langword="null" /> if not set.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalOnly">
      <MemberSignature Language="C#" Value="public bool LocalOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LocalOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether the connection is local only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultipathService">
      <MemberSignature Language="C#" Value="public Network.NWMultiPathService MultipathService { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Network.NWMultiPathService MultipathService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Network.NWMultiPathService</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Controls how the connection should handle multiple paths.   It defaults to disabled.</summary>
        <value>The current setting for how mulit-path services are handled.</value>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferNoProxy">
      <MemberSignature Language="C#" Value="public bool PreferNoProxy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PreferNoProxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether the connection may user a proxy.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProhibitExpensive">
      <MemberSignature Language="C#" Value="public bool ProhibitExpensive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProhibitExpensive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether the connection can be expensive.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProhibitInterface">
      <MemberSignature Language="C#" Value="public void ProhibitInterface (Network.NWInterface iface);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ProhibitInterface(class Network.NWInterface iface) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iface" Type="Network.NWInterface" />
      </Parameters>
      <Docs>
        <param name="iface">Network interface to prohibit.</param>
        <summary>Prohibits the specified interface from being used for this connection.</summary>
        <remarks>The connection will not use the specific network interface.   To undo the change, you need to clear all the prohibited interfaced by calling <see cref="M:Network.NWParameters.ClearProhibitedInterfaces" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProhibitInterfaceType">
      <MemberSignature Language="C#" Value="public void ProhibitInterfaceType (Network.NWInterfaceType ifaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ProhibitInterfaceType(valuetype Network.NWInterfaceType ifaceType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifaceType" Type="Network.NWInterfaceType" />
      </Parameters>
      <Docs>
        <param name="ifaceType">Network interface type to prohibit.</param>
        <summary>Prohibits the specified interface type from being used for this connection.</summary>
        <remarks>The connection will not use the specific network interface type. To undo the change, you need to clear all the prohibited interfaced by calling <see cref="M:Network.NWParameters.ClearProhibitedInterfaceTypes" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtocolStack">
      <MemberSignature Language="C#" Value="public Network.NWProtocolStack ProtocolStack { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Network.NWProtocolStack ProtocolStack" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Network.NWProtocolStack</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:Network.NWProtocolStack" /> of the connection.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiredInterface">
      <MemberSignature Language="C#" Value="public Network.NWInterface RequiredInterface { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Network.NWInterface RequiredInterface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Network.NWInterface</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiredInterfaceType">
      <MemberSignature Language="C#" Value="public Network.NWInterfaceType RequiredInterfaceType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Network.NWInterfaceType RequiredInterfaceType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Network.NWInterfaceType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the required <see cref="T:Network.NWInterfaceType" /> of the connection.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReuseLocalAddress">
      <MemberSignature Language="C#" Value="public bool ReuseLocalAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReuseLocalAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceClass">
      <MemberSignature Language="C#" Value="public Network.NWServiceClass ServiceClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Network.NWServiceClass ServiceClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Network.NWServiceClass</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:Network.NWServiceClass" /> of the connection.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
