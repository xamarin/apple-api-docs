<Type Name="NWPath" FullName="Network.NWPath">
  <TypeSignature Language="C#" Value="public class NWPath : CoreFoundation.NativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NWPath extends CoreFoundation.NativeObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>CoreFoundation.NativeObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>ObjCRuntime.TV(12, 0)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Describes the networking path in use.</summary>
    <remarks>A path describes the interface being used to send data.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NWPath (IntPtr handle, bool owns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle, bool owns) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="owns" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <param name="owns">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EffectiveLocalEndpoint">
      <MemberSignature Language="C#" Value="public Network.NWEndpoint EffectiveLocalEndpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Network.NWEndpoint EffectiveLocalEndpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Network.NWEndpoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EffectiveRemoteEndpoint">
      <MemberSignature Language="C#" Value="public Network.NWEndpoint EffectiveRemoteEndpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Network.NWEndpoint EffectiveRemoteEndpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Network.NWEndpoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateInterfaces">
      <MemberSignature Language="C#" Value="public void EnumerateInterfaces (Action&lt;Network.NWInterface&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnumerateInterfaces(class System.Action`1&lt;class Network.NWInterface&gt; callback) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action&lt;Network.NWInterface&gt;" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <summary>Enumerates the <see cref="T:Network.NWInterface" /> objects, calling <param name="callback" /> on each in turn.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualsTo">
      <MemberSignature Language="C#" Value="public bool EqualsTo (Network.NWPath other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EqualsTo(class Network.NWPath other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Network.NWPath" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasDns">
      <MemberSignature Language="C#" Value="public bool HasDns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasDns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determines whether there the path has a configured DNS server.</summary>
        <value>
          <see langword="true" /> if the path has a DNS configured <see langword="false" /> otherwise.</value>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIPV4">
      <MemberSignature Language="C#" Value="public bool HasIPV4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasIPV4" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determines if the path supports IPV4 traffic.</summary>
        <value>
          <see langword="true" /> if it supports IPV4 traffic, <see langword="false" /> otherwise.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIPV6">
      <MemberSignature Language="C#" Value="public bool HasIPV6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasIPV6" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determines if the path supports IPV6 traffic.</summary>
        <value>
          <see langword="true" /> if it supports IPV6 traffic, <see langword="false" /> otherwise.</value>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExpensive">
      <MemberSignature Language="C#" Value="public bool IsExpensive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExpensive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this network path is expensive.</summary>
        <value>
          <para>
          </para>
        </value>
        <remarks>Expernsive networks are those that the user might have a cap, or must pay for their use.   </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public Network.NWPathStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Network.NWPathStatus Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Network.NWPathStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The status of the network path that determines whether it is possible to currently send date, whether an attempt can be made to activate the network link, or whether it is not possible.</summary>
        <value>The state of the network path.</value>
        <remarks>
          <para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UsesInterfaceType">
      <MemberSignature Language="C#" Value="public bool UsesInterfaceType (Network.NWInterfaceType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool UsesInterfaceType(valuetype Network.NWInterfaceType type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="Network.NWInterfaceType" />
      </Parameters>
      <Docs>
        <param name="type">The type of interface to check.</param>
        <summary>Used to probe if the path uses the specified network interface type.</summary>
        <returns>Returns <see langword="true" /> if the path is of the specified <paramref name="type" />.   <see langword="false" /> otherwise.</returns>
        <remarks>
          <para>
          </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
