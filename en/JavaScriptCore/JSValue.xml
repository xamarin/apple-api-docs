<Type Name="JSValue" FullName="JavaScriptCore.JSValue">
  <TypeSignature Language="C#" Value="public class JSValue : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit JSValue extends Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("JSValue", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Holds a JavaScript value and provides type-testing and conversion functions.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/reference/JavaScriptCore/JSValue">Apple documentation for <c>JSValue</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected JSValue (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected JSValue (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public virtual JavaScriptCore.JSValue Call (JavaScriptCore.JSValue[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class JavaScriptCore.JSValue Call(class JavaScriptCore.JSValue[] arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("callWithArguments:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="JavaScriptCore.JSValue[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="arguments">To be added.</param>
        <summary>Calls a list of values as a javascript function.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Construct">
      <MemberSignature Language="C#" Value="public virtual JavaScriptCore.JSValue Construct (JavaScriptCore.JSValue[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class JavaScriptCore.JSValue Construct(class JavaScriptCore.JSValue[] arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("constructWithArguments:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arguments" Type="JavaScriptCore.JSValue[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="arguments">To be added.</param>
        <summary>Calls a list of values as a javascript constructor.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public virtual JavaScriptCore.JSContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class JavaScriptCore.JSContext Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("context")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the host JS context.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateArray">
      <MemberSignature Language="C#" Value="public static JavaScriptCore.JSValue CreateArray (JavaScriptCore.JSContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class JavaScriptCore.JSValue CreateArray(class JavaScriptCore.JSContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("valueWithNewArrayInContext:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="JavaScriptCore.JSContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>Creates an empty array in the provided context.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateError">
      <MemberSignature Language="C#" Value="public static JavaScriptCore.JSValue CreateError (string message, JavaScriptCore.JSContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class JavaScriptCore.JSValue CreateError(string message, class JavaScriptCore.JSContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("valueWithNewErrorFromMessage:inContext:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="context" Type="JavaScriptCore.JSContext" />
      </Parameters>
      <Docs>
        <param name="message">To be added.</param>
        <param name="context">To be added.</param>
        <summary>Creates an error with the provided message, in the provided context.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public static JavaScriptCore.JSValue CreateObject (JavaScriptCore.JSContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class JavaScriptCore.JSValue CreateObject(class JavaScriptCore.JSContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("valueWithNewObjectInContext:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="JavaScriptCore.JSContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>Creates an empty object in the provided context.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRegularExpression">
      <MemberSignature Language="C#" Value="public static JavaScriptCore.JSValue CreateRegularExpression (string pattern, string flags, JavaScriptCore.JSContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class JavaScriptCore.JSValue CreateRegularExpression(string pattern, string flags, class JavaScriptCore.JSContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("valueWithNewRegularExpressionFromPattern:flags:inContext:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="flags" Type="System.String" />
        <Parameter Name="context" Type="JavaScriptCore.JSContext" />
      </Parameters>
      <Docs>
        <param name="pattern">To be added.</param>
        <param name="flags">To be added.</param>
        <param name="context">To be added.</param>
        <summary>Creates a regular expression in the provided context, with the specified values.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineProperty">
      <MemberSignature Language="C#" Value="public virtual void DefineProperty (string property, Foundation.NSObject descriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DefineProperty(string property, class Foundation.NSObject descriptor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("defineProperty:descriptor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.String" />
        <Parameter Name="descriptor" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <param name="descriptor">To be added.</param>
        <summary>Defines <paramref name="property" />, or modifies its definition if it already exists.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteProperty">
      <MemberSignature Language="C#" Value="public virtual bool DeleteProperty (string property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeleteProperty(string property) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("deleteProperty:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <summary>Deletes the specifed property.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public static JavaScriptCore.JSValue From (CoreGraphics.CGPoint point, JavaScriptCore.JSContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class JavaScriptCore.JSValue From(valuetype CoreGraphics.CGPoint point, class JavaScriptCore.JSContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("valueWithPoint:inContext:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
        <Parameter Name="context" Type="JavaScriptCore.JSContext" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public static JavaScriptCore.JSValue From (CoreGraphics.CGRect rect, JavaScriptCore.JSContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class JavaScriptCore.JSValue From(valuetype CoreGraphics.CGRect rect, class JavaScriptCore.JSContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("valueWithRect:inContext:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
        <Parameter Name="context" Type="JavaScriptCore.JSContext" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public static JavaScriptCore.JSValue From (CoreGraphics.CGSize size, JavaScriptCore.JSContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class JavaScriptCore.JSValue From(valuetype CoreGraphics.CGSize size, class JavaScriptCore.JSContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("valueWithSize:inContext:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="CoreGraphics.CGSize" />
        <Parameter Name="context" Type="JavaScriptCore.JSContext" />
      </Parameters>
      <Docs>
        <param name="size">To be added.</param>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public static JavaScriptCore.JSValue From (Foundation.NSObject value, JavaScriptCore.JSContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class JavaScriptCore.JSValue From(class Foundation.NSObject value, class JavaScriptCore.JSContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("valueWithObject:inContext:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Foundation.NSObject" />
        <Parameter Name="context" Type="JavaScriptCore.JSContext" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="context">To be added.</param>
        <summary>Converts <paramref name="value" /> into a JavaScript object in the specified context.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public static JavaScriptCore.JSValue From (Foundation.NSRange range, JavaScriptCore.JSContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class JavaScriptCore.JSValue From(valuetype Foundation.NSRange range, class JavaScriptCore.JSContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("valueWithRange:inContext:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="Foundation.NSRange" />
        <Parameter Name="context" Type="JavaScriptCore.JSContext" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <param name="context">To be added.</param>
        <summary>Creates a JavaScript object with <c>length</c> and <c>range</c> properties that are derived from the provided <paramref name="range" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public static JavaScriptCore.JSValue From (bool value, JavaScriptCore.JSContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class JavaScriptCore.JSValue From(bool value, class JavaScriptCore.JSContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("valueWithBool:inContext:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="context" Type="JavaScriptCore.JSContext" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="context">To be added.</param>
        <summary>Creates a JavaScript Boolean value from the provide Boolean value.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public static JavaScriptCore.JSValue From (double value, JavaScriptCore.JSContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class JavaScriptCore.JSValue From(float64 value, class JavaScriptCore.JSContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("valueWithDouble:inContext:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="context" Type="JavaScriptCore.JSContext" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="context">To be added.</param>
        <summary>Creates a JavaScript double from the provided double <paramref name="value" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public static JavaScriptCore.JSValue From (int ivalue, JavaScriptCore.JSContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class JavaScriptCore.JSValue From(int32 ivalue, class JavaScriptCore.JSContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("valueWithInt32:inContext:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="context" Type="JavaScriptCore.JSContext" />
      </Parameters>
      <Docs>
        <param name="ivalue">To be added.</param>
        <param name="context">To be added.</param>
        <summary>Creates a JavaScript integer for the provided <paramref name="ivalue" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public static JavaScriptCore.JSValue From (string value, JavaScriptCore.JSContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class JavaScriptCore.JSValue From(string value, class JavaScriptCore.JSContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="context" Type="JavaScriptCore.JSContext" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="context">To be added.</param>
        <summary>Creates a JavaScript string from the provided string.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public static JavaScriptCore.JSValue From (uint value, JavaScriptCore.JSContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class JavaScriptCore.JSValue From(unsigned int32 value, class JavaScriptCore.JSContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("valueWithUInt32:inContext:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="context" Type="JavaScriptCore.JSContext" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="context">To be added.</param>
        <summary>Creates a JavaScript number that represents the provided 32-bit <paramref name="value" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromJSJSValueRef">
      <MemberSignature Language="C#" Value="public static JavaScriptCore.JSValue FromJSJSValueRef (IntPtr nativeJsValueRefvalue, JavaScriptCore.JSContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class JavaScriptCore.JSValue FromJSJSValueRef(native int nativeJsValueRefvalue, class JavaScriptCore.JSContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("valueWithJSValueRef:inContext:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nativeJsValueRefvalue" Type="System.IntPtr" />
        <Parameter Name="context" Type="JavaScriptCore.JSContext" />
      </Parameters>
      <Docs>
        <param name="nativeJsValueRefvalue">To be added.</param>
        <param name="context">To be added.</param>
        <summary>Creates a C representation of the provided JavaScript reference value.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public virtual JavaScriptCore.JSValue GetProperty (string property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class JavaScriptCore.JSValue GetProperty(string property) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("valueForProperty:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <summary>Returns the value of the specified JavaScript property in this JSValue.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValueAt">
      <MemberSignature Language="C#" Value="public virtual JavaScriptCore.JSValue GetValueAt (nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class JavaScriptCore.JSValue GetValueAt(valuetype System.nuint index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("valueAtIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>Returns the value at the specified <paramref name="index" />, or <c>undefined</c> if none exists.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasProperty">
      <MemberSignature Language="C#" Value="public virtual bool HasProperty (string property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasProperty(string property) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("hasProperty:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <summary>Returns <see langword="true" /> if this JSValue has the specified <paramref name="property" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public virtual JavaScriptCore.JSValue Invoke (string method, JavaScriptCore.JSValue[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class JavaScriptCore.JSValue Invoke(string method, class JavaScriptCore.JSValue[] arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("invokeMethod:withArguments:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="arguments" Type="JavaScriptCore.JSValue[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <param name="arguments">To be added.</param>
        <summary>Calls the specified <paramref name="method" /> on the JSValue, with the specified <paramref name="arguments" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public virtual bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isArray")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether the JSValue represents a JavaScript array.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBoolean">
      <MemberSignature Language="C#" Value="public virtual bool IsBoolean { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBoolean" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("isBoolean")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether the JSValue represents a JavaScript Boolean.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public virtual bool IsDate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isDate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether the JSValue represents a JavaScript Date.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEqualTo">
      <MemberSignature Language="C#" Value="public virtual bool IsEqualTo (Foundation.NSObject value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEqualTo(class Foundation.NSObject value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("isEqualToObject:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Returns a Boolean value that tells whether the JSValue is equal to the specified <paramref name="value" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEqualWithTypeCoercionTo">
      <MemberSignature Language="C#" Value="public virtual bool IsEqualWithTypeCoercionTo (Foundation.NSObject value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEqualWithTypeCoercionTo(class Foundation.NSObject value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("isEqualWithTypeCoercionToObject:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Returns a Boolean value that tells whether the JSValue is equal to the specified <paramref name="value" /> after coercion.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInstanceOf">
      <MemberSignature Language="C#" Value="public virtual bool IsInstanceOf (Foundation.NSObject value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsInstanceOf(class Foundation.NSObject value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("isInstanceOf:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>Returns a Boolean value that tells whether the JSValue is an instance of the specified type.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public virtual bool IsNull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("isNull")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether the JSValue represents a JavaScript null.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public virtual bool IsNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("isNumber")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether the JSValue represents a JavaScript number.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsObject">
      <MemberSignature Language="C#" Value="public virtual bool IsObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("isObject")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether the JSValue represents a JavaScript object.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsString">
      <MemberSignature Language="C#" Value="public virtual bool IsString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("isString")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether the JSValue represents a JavaScript string.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUndefined">
      <MemberSignature Language="C#" Value="public virtual bool IsUndefined { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUndefined" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("isUndefined")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether the JSValue represents a JavaScript undefined value.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public JavaScriptCore.JSValue this[Foundation.NSObject key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class JavaScriptCore.JSValue Item(class Foundation.NSObject)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <summary>Gets or sets the item that is indexed by the provided <paramref name="key" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public JavaScriptCore.JSValue this[nuint index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class JavaScriptCore.JSValue Item(valuetype System.nuint)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>Gets or sets the item that is indexed by the provided <paramref name="index" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JSValueRefPtr">
      <MemberSignature Language="C#" Value="public virtual IntPtr JSValueRefPtr { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int JSValueRefPtr" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("JSValueRef")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the C equivalent of the JSValue.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static JavaScriptCore.JSValue Null (JavaScriptCore.JSContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class JavaScriptCore.JSValue Null(class JavaScriptCore.JSContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("valueWithNullInContext:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="JavaScriptCore.JSContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>Creates and returns a null value.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProperty">
      <MemberSignature Language="C#" Value="public virtual void SetProperty (Foundation.NSObject value, string property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetProperty(class Foundation.NSObject value, string property) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setValue:forProperty:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Foundation.NSObject" />
        <Parameter Name="property" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="property">To be added.</param>
        <summary>Sets the specified property to the specified value.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public virtual void SetValue (JavaScriptCore.JSValue value, nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(class JavaScriptCore.JSValue value, valuetype System.nuint index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setValue:atIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="JavaScriptCore.JSValue" />
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="index">To be added.</param>
        <summary>Sets the item at the specified index to the specified value.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public virtual JavaScriptCore.JSValue[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class JavaScriptCore.JSValue[] ToArray() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("toArray")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array of values for the JSValue.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToBool">
      <MemberSignature Language="C#" Value="public virtual bool ToBool ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ToBool() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("toBool")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a <see langword="bool" /> for the JSValue.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDate ToDate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSDate ToDate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("toDate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDate</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a date for the JSValue.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary ToDictionary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSDictionary ToDictionary() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("toDictionary")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a dictionary for the JSValue.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public virtual double ToDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ToDouble() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("toDouble")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a double for the JSValue.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public virtual int ToInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ToInt32() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("toInt32")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a System.Int32 for the JSValue.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToNumber">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSNumber ToNumber ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSNumber ToNumber() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("toNumber")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSNumber</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an NSNumber for the JSValue.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject ToObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject ToObject() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("toObject")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an NSObject for the JSValue.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToObject">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject ToObject (ObjCRuntime.Class ofExpectedClass);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject ToObject(class ObjCRuntime.Class ofExpectedClass) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("toObjectOfClass:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ofExpectedClass" Type="ObjCRuntime.Class" />
      </Parameters>
      <Docs>
        <param name="ofExpectedClass">To be added.</param>
        <summary>Returns an NSObject, of the specified class, for the JSValue.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToPoint">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint ToPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGPoint ToPoint() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("toPoint")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a point for the JSValue.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToRange">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSRange ToRange ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Foundation.NSRange ToRange() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("toRange")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an NSRange for the JSValue.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToRect">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect ToRect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect ToRect() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("toRect")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a rectangle for the JSValue.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSize">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGSize ToSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGSize ToSize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("toSize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a size for the JSValue.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string representation of the value of the current instance.</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public virtual uint ToUInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int32 ToUInt32() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("toUInt32")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a System.UInt32 for the JSValue.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Undefined">
      <MemberSignature Language="C#" Value="public static JavaScriptCore.JSValue Undefined (JavaScriptCore.JSContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class JavaScriptCore.JSValue Undefined(class JavaScriptCore.JSContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("valueWithUndefinedInContext:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>JavaScriptCore.JSValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="JavaScriptCore.JSContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>Returns a JavaScrip undefined value in the specified context.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
