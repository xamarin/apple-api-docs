<Type Name="GKChallengeEventHandlerDelegate" FullName="GameKit.GKChallengeEventHandlerDelegate">
  <TypeSignature Language="C#" Value="public class GKChallengeEventHandlerDelegate : Foundation.NSObject, GameKit.IGKChallengeEventHandlerDelegate, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GKChallengeEventHandlerDelegate extends Foundation.NSObject implements class GameKit.IGKChallengeEventHandlerDelegate, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:GameKit.GKChallengeEventHandlerDelegate" />
  <TypeSignature Language="F#" Value="type GKChallengeEventHandlerDelegate = class&#xA;    inherit NSObject&#xA;    interface IGKChallengeEventHandlerDelegate&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>GameKit.IGKChallengeEventHandlerDelegate</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("GKChallengeEventHandlerDelegate", false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, "Implement the 'IGKChallengeListener' interface and register a listener with 'GKLocalPlayer'.")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.None, "Implement the 'IGKChallengeListener' interface and register a listener with 'GKLocalPlayer'.")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A delegate object that allows the application developer fine-grained response to life-cycle events relating to <see cref="T:GameKit.GKChallenge" />s, such as receiving or completing a challenge.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/GLkit/Reference/GKChallengeEventHandlerDelegate_Ref/index.html">Apple documentation for <c>GKChallengeEventHandlerDelegate</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GKChallengeEventHandlerDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKChallengeEventHandlerDelegate.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected GKChallengeEventHandlerDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKChallengeEventHandlerDelegate.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new GameKit.GKChallengeEventHandlerDelegate : Foundation.NSObjectFlag -&gt; GameKit.GKChallengeEventHandlerDelegate" Usage="new GameKit.GKChallengeEventHandlerDelegate t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal GKChallengeEventHandlerDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKChallengeEventHandlerDelegate.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new GameKit.GKChallengeEventHandlerDelegate : nativeint -&gt; GameKit.GKChallengeEventHandlerDelegate" Usage="new GameKit.GKChallengeEventHandlerDelegate handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalPlayerCompletedChallenge">
      <MemberSignature Language="C#" Value="public virtual void LocalPlayerCompletedChallenge (GameKit.GKChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LocalPlayerCompletedChallenge(class GameKit.GKChallenge challenge) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKChallengeEventHandlerDelegate.LocalPlayerCompletedChallenge(GameKit.GKChallenge)" />
      <MemberSignature Language="F#" Value="abstract member LocalPlayerCompletedChallenge : GameKit.GKChallenge -&gt; unit&#xA;override this.LocalPlayerCompletedChallenge : GameKit.GKChallenge -&gt; unit" Usage="gKChallengeEventHandlerDelegate.LocalPlayerCompletedChallenge challenge" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("localPlayerDidCompleteChallenge:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challenge" Type="GameKit.GKChallenge" />
      </Parameters>
      <Docs>
        <param name="challenge">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalPlayerReceivedChallenge">
      <MemberSignature Language="C#" Value="public virtual void LocalPlayerReceivedChallenge (GameKit.GKChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LocalPlayerReceivedChallenge(class GameKit.GKChallenge challenge) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKChallengeEventHandlerDelegate.LocalPlayerReceivedChallenge(GameKit.GKChallenge)" />
      <MemberSignature Language="F#" Value="abstract member LocalPlayerReceivedChallenge : GameKit.GKChallenge -&gt; unit&#xA;override this.LocalPlayerReceivedChallenge : GameKit.GKChallenge -&gt; unit" Usage="gKChallengeEventHandlerDelegate.LocalPlayerReceivedChallenge challenge" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("localPlayerDidReceiveChallenge:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challenge" Type="GameKit.GKChallenge" />
      </Parameters>
      <Docs>
        <param name="challenge">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalPlayerSelectedChallenge">
      <MemberSignature Language="C#" Value="public virtual void LocalPlayerSelectedChallenge (GameKit.GKChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LocalPlayerSelectedChallenge(class GameKit.GKChallenge challenge) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKChallengeEventHandlerDelegate.LocalPlayerSelectedChallenge(GameKit.GKChallenge)" />
      <MemberSignature Language="F#" Value="abstract member LocalPlayerSelectedChallenge : GameKit.GKChallenge -&gt; unit&#xA;override this.LocalPlayerSelectedChallenge : GameKit.GKChallenge -&gt; unit" Usage="gKChallengeEventHandlerDelegate.LocalPlayerSelectedChallenge challenge" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("localPlayerDidSelectChallenge:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challenge" Type="GameKit.GKChallenge" />
      </Parameters>
      <Docs>
        <param name="challenge">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemotePlayerCompletedChallenge">
      <MemberSignature Language="C#" Value="public virtual void RemotePlayerCompletedChallenge (GameKit.GKChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemotePlayerCompletedChallenge(class GameKit.GKChallenge challenge) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKChallengeEventHandlerDelegate.RemotePlayerCompletedChallenge(GameKit.GKChallenge)" />
      <MemberSignature Language="F#" Value="abstract member RemotePlayerCompletedChallenge : GameKit.GKChallenge -&gt; unit&#xA;override this.RemotePlayerCompletedChallenge : GameKit.GKChallenge -&gt; unit" Usage="gKChallengeEventHandlerDelegate.RemotePlayerCompletedChallenge challenge" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("remotePlayerDidCompleteChallenge:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challenge" Type="GameKit.GKChallenge" />
      </Parameters>
      <Docs>
        <param name="challenge">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldShowBannerForLocallyCompletedChallenge">
      <MemberSignature Language="C#" Value="public virtual bool ShouldShowBannerForLocallyCompletedChallenge (GameKit.GKChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldShowBannerForLocallyCompletedChallenge(class GameKit.GKChallenge challenge) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKChallengeEventHandlerDelegate.ShouldShowBannerForLocallyCompletedChallenge(GameKit.GKChallenge)" />
      <MemberSignature Language="F#" Value="abstract member ShouldShowBannerForLocallyCompletedChallenge : GameKit.GKChallenge -&gt; bool&#xA;override this.ShouldShowBannerForLocallyCompletedChallenge : GameKit.GKChallenge -&gt; bool" Usage="gKChallengeEventHandlerDelegate.ShouldShowBannerForLocallyCompletedChallenge challenge" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("shouldShowBannerForLocallyCompletedChallenge:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challenge" Type="GameKit.GKChallenge" />
      </Parameters>
      <Docs>
        <param name="challenge">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldShowBannerForLocallyReceivedChallenge">
      <MemberSignature Language="C#" Value="public virtual bool ShouldShowBannerForLocallyReceivedChallenge (GameKit.GKChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldShowBannerForLocallyReceivedChallenge(class GameKit.GKChallenge challenge) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKChallengeEventHandlerDelegate.ShouldShowBannerForLocallyReceivedChallenge(GameKit.GKChallenge)" />
      <MemberSignature Language="F#" Value="abstract member ShouldShowBannerForLocallyReceivedChallenge : GameKit.GKChallenge -&gt; bool&#xA;override this.ShouldShowBannerForLocallyReceivedChallenge : GameKit.GKChallenge -&gt; bool" Usage="gKChallengeEventHandlerDelegate.ShouldShowBannerForLocallyReceivedChallenge challenge" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("shouldShowBannerForLocallyReceivedChallenge:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challenge" Type="GameKit.GKChallenge" />
      </Parameters>
      <Docs>
        <param name="challenge">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldShowBannerForRemotelyCompletedChallenge">
      <MemberSignature Language="C#" Value="public virtual bool ShouldShowBannerForRemotelyCompletedChallenge (GameKit.GKChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldShowBannerForRemotelyCompletedChallenge(class GameKit.GKChallenge challenge) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKChallengeEventHandlerDelegate.ShouldShowBannerForRemotelyCompletedChallenge(GameKit.GKChallenge)" />
      <MemberSignature Language="F#" Value="abstract member ShouldShowBannerForRemotelyCompletedChallenge : GameKit.GKChallenge -&gt; bool&#xA;override this.ShouldShowBannerForRemotelyCompletedChallenge : GameKit.GKChallenge -&gt; bool" Usage="gKChallengeEventHandlerDelegate.ShouldShowBannerForRemotelyCompletedChallenge challenge" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("shouldShowBannerForRemotelyCompletedChallenge:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challenge" Type="GameKit.GKChallenge" />
      </Parameters>
      <Docs>
        <param name="challenge">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
