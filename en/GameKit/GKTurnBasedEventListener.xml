<Type Name="GKTurnBasedEventListener" FullName="GameKit.GKTurnBasedEventListener">
  <TypeSignature Language="C#" Value="public class GKTurnBasedEventListener : Foundation.NSObject, GameKit.IGKTurnBasedEventListener, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GKTurnBasedEventListener extends Foundation.NSObject implements class GameKit.IGKTurnBasedEventListener, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:GameKit.GKTurnBasedEventListener" />
  <TypeSignature Language="F#" Value="type GKTurnBasedEventListener = class&#xA;    inherit NSObject&#xA;    interface IGKTurnBasedEventListener&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>GameKit.IGKTurnBasedEventListener</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("GKTurnBasedEventListener", false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Listens for events in turn-based games.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/GameKit/Reference/GKTurnBasedEventListener_Ref/index.html">Apple documentation for <c>GKTurnBasedEventListener</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GKTurnBasedEventListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKTurnBasedEventListener.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected GKTurnBasedEventListener (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKTurnBasedEventListener.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new GameKit.GKTurnBasedEventListener : Foundation.NSObjectFlag -&gt; GameKit.GKTurnBasedEventListener" Usage="new GameKit.GKTurnBasedEventListener t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal GKTurnBasedEventListener (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKTurnBasedEventListener.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new GameKit.GKTurnBasedEventListener : nativeint -&gt; GameKit.GKTurnBasedEventListener" Usage="new GameKit.GKTurnBasedEventListener handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidRequestMatchWithOtherPlayers">
      <MemberSignature Language="C#" Value="public virtual void DidRequestMatchWithOtherPlayers (GameKit.GKPlayer player, GameKit.GKPlayer[] playersToInvite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidRequestMatchWithOtherPlayers(class GameKit.GKPlayer player, class GameKit.GKPlayer[] playersToInvite) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKTurnBasedEventListener.DidRequestMatchWithOtherPlayers(GameKit.GKPlayer,GameKit.GKPlayer[])" />
      <MemberSignature Language="F#" Value="abstract member DidRequestMatchWithOtherPlayers : GameKit.GKPlayer * GameKit.GKPlayer[] -&gt; unit&#xA;override this.DidRequestMatchWithOtherPlayers : GameKit.GKPlayer * GameKit.GKPlayer[] -&gt; unit" Usage="gKTurnBasedEventListener.DidRequestMatchWithOtherPlayers (player, playersToInvite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("player:didRequestMatchWithOtherPlayers:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="player" Type="GameKit.GKPlayer" />
        <Parameter Name="playersToInvite" Type="GameKit.GKPlayer[]" />
      </Parameters>
      <Docs>
        <param name="player">To be added.</param>
        <param name="playersToInvite">To be added.</param>
        <summary>Method that is called when <paramref name="player" /> requests a match with <paramref name="playersToInvite" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidRequestMatchWithPlayers">
      <MemberSignature Language="C#" Value="public virtual void DidRequestMatchWithPlayers (GameKit.GKPlayer player, string[] playerIDsToInvite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidRequestMatchWithPlayers(class GameKit.GKPlayer player, string[] playerIDsToInvite) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKTurnBasedEventListener.DidRequestMatchWithPlayers(GameKit.GKPlayer,System.String[])" />
      <MemberSignature Language="F#" Value="abstract member DidRequestMatchWithPlayers : GameKit.GKPlayer * string[] -&gt; unit&#xA;override this.DidRequestMatchWithPlayers : GameKit.GKPlayer * string[] -&gt; unit" Usage="gKTurnBasedEventListener.DidRequestMatchWithPlayers (player, playerIDsToInvite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("player:didRequestMatchWithPlayers:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, "Use 'DidRequestMatchWithOtherPlayers' instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="player" Type="GameKit.GKPlayer" />
        <Parameter Name="playerIDsToInvite" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="player">To be added.</param>
        <param name="playerIDsToInvite">To be added.</param>
        <summary>Developers should not use this deprecated method. Developers should use 'DidRequestMatchWithOtherPlayers' instead.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchEnded">
      <MemberSignature Language="C#" Value="public virtual void MatchEnded (GameKit.GKPlayer player, GameKit.GKTurnBasedMatch match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MatchEnded(class GameKit.GKPlayer player, class GameKit.GKTurnBasedMatch match) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKTurnBasedEventListener.MatchEnded(GameKit.GKPlayer,GameKit.GKTurnBasedMatch)" />
      <MemberSignature Language="F#" Value="abstract member MatchEnded : GameKit.GKPlayer * GameKit.GKTurnBasedMatch -&gt; unit&#xA;override this.MatchEnded : GameKit.GKPlayer * GameKit.GKTurnBasedMatch -&gt; unit" Usage="gKTurnBasedEventListener.MatchEnded (player, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("player:matchEnded:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="player" Type="GameKit.GKPlayer" />
        <Parameter Name="match" Type="GameKit.GKTurnBasedMatch" />
      </Parameters>
      <Docs>
        <param name="player">To be added.</param>
        <param name="match">To be added.</param>
        <summary>Method that is called after the <paramref name="match" /> is ended.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceivedExchangeCancellation">
      <MemberSignature Language="C#" Value="public virtual void ReceivedExchangeCancellation (GameKit.GKPlayer player, GameKit.GKTurnBasedExchange exchange, GameKit.GKTurnBasedMatch match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReceivedExchangeCancellation(class GameKit.GKPlayer player, class GameKit.GKTurnBasedExchange exchange, class GameKit.GKTurnBasedMatch match) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKTurnBasedEventListener.ReceivedExchangeCancellation(GameKit.GKPlayer,GameKit.GKTurnBasedExchange,GameKit.GKTurnBasedMatch)" />
      <MemberSignature Language="F#" Value="abstract member ReceivedExchangeCancellation : GameKit.GKPlayer * GameKit.GKTurnBasedExchange * GameKit.GKTurnBasedMatch -&gt; unit&#xA;override this.ReceivedExchangeCancellation : GameKit.GKPlayer * GameKit.GKTurnBasedExchange * GameKit.GKTurnBasedMatch -&gt; unit" Usage="gKTurnBasedEventListener.ReceivedExchangeCancellation (player, exchange, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("player:receivedExchangeCancellation:forMatch:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="player" Type="GameKit.GKPlayer" />
        <Parameter Name="exchange" Type="GameKit.GKTurnBasedExchange" />
        <Parameter Name="match" Type="GameKit.GKTurnBasedMatch" />
      </Parameters>
      <Docs>
        <param name="player">To be added.</param>
        <param name="exchange">To be added.</param>
        <param name="match">To be added.</param>
        <summary>Method that is called after <paramref name="player" /> cancels the <paramref name="exchange" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceivedExchangeReplies">
      <MemberSignature Language="C#" Value="public virtual void ReceivedExchangeReplies (GameKit.GKPlayer player, GameKit.GKTurnBasedExchangeReply[] replies, GameKit.GKTurnBasedExchange exchange, GameKit.GKTurnBasedMatch match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReceivedExchangeReplies(class GameKit.GKPlayer player, class GameKit.GKTurnBasedExchangeReply[] replies, class GameKit.GKTurnBasedExchange exchange, class GameKit.GKTurnBasedMatch match) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKTurnBasedEventListener.ReceivedExchangeReplies(GameKit.GKPlayer,GameKit.GKTurnBasedExchangeReply[],GameKit.GKTurnBasedExchange,GameKit.GKTurnBasedMatch)" />
      <MemberSignature Language="F#" Value="abstract member ReceivedExchangeReplies : GameKit.GKPlayer * GameKit.GKTurnBasedExchangeReply[] * GameKit.GKTurnBasedExchange * GameKit.GKTurnBasedMatch -&gt; unit&#xA;override this.ReceivedExchangeReplies : GameKit.GKPlayer * GameKit.GKTurnBasedExchangeReply[] * GameKit.GKTurnBasedExchange * GameKit.GKTurnBasedMatch -&gt; unit" Usage="gKTurnBasedEventListener.ReceivedExchangeReplies (player, replies, exchange, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("player:receivedExchangeReplies:forCompletedExchange:forMatch:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="player" Type="GameKit.GKPlayer" />
        <Parameter Name="replies" Type="GameKit.GKTurnBasedExchangeReply[]" />
        <Parameter Name="exchange" Type="GameKit.GKTurnBasedExchange" />
        <Parameter Name="match" Type="GameKit.GKTurnBasedMatch" />
      </Parameters>
      <Docs>
        <param name="player">To be added.</param>
        <param name="replies">To be added.</param>
        <param name="exchange">To be added.</param>
        <param name="match">To be added.</param>
        <summary>Method that is called after the <paramref name="exchange" /> with <paramref name="player" /> completes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceivedExchangeRequest">
      <MemberSignature Language="C#" Value="public virtual void ReceivedExchangeRequest (GameKit.GKPlayer player, GameKit.GKTurnBasedExchange exchange, GameKit.GKTurnBasedMatch match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReceivedExchangeRequest(class GameKit.GKPlayer player, class GameKit.GKTurnBasedExchange exchange, class GameKit.GKTurnBasedMatch match) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKTurnBasedEventListener.ReceivedExchangeRequest(GameKit.GKPlayer,GameKit.GKTurnBasedExchange,GameKit.GKTurnBasedMatch)" />
      <MemberSignature Language="F#" Value="abstract member ReceivedExchangeRequest : GameKit.GKPlayer * GameKit.GKTurnBasedExchange * GameKit.GKTurnBasedMatch -&gt; unit&#xA;override this.ReceivedExchangeRequest : GameKit.GKPlayer * GameKit.GKTurnBasedExchange * GameKit.GKTurnBasedMatch -&gt; unit" Usage="gKTurnBasedEventListener.ReceivedExchangeRequest (player, exchange, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("player:receivedExchangeRequest:forMatch:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="player" Type="GameKit.GKPlayer" />
        <Parameter Name="exchange" Type="GameKit.GKTurnBasedExchange" />
        <Parameter Name="match" Type="GameKit.GKTurnBasedMatch" />
      </Parameters>
      <Docs>
        <param name="player">To be added.</param>
        <param name="exchange">To be added.</param>
        <param name="match">To be added.</param>
        <summary>Method that is called when <paramref name="player" /> receives a request for an <paramref name="exchange" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceivedTurnEvent">
      <MemberSignature Language="C#" Value="public virtual void ReceivedTurnEvent (GameKit.GKPlayer player, GameKit.GKTurnBasedMatch match, bool becameActive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReceivedTurnEvent(class GameKit.GKPlayer player, class GameKit.GKTurnBasedMatch match, bool becameActive) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKTurnBasedEventListener.ReceivedTurnEvent(GameKit.GKPlayer,GameKit.GKTurnBasedMatch,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member ReceivedTurnEvent : GameKit.GKPlayer * GameKit.GKTurnBasedMatch * bool -&gt; unit&#xA;override this.ReceivedTurnEvent : GameKit.GKPlayer * GameKit.GKTurnBasedMatch * bool -&gt; unit" Usage="gKTurnBasedEventListener.ReceivedTurnEvent (player, match, becameActive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("player:receivedTurnEventForMatch:didBecomeActive:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="player" Type="GameKit.GKPlayer" />
        <Parameter Name="match" Type="GameKit.GKTurnBasedMatch" />
        <Parameter Name="becameActive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="player">To be added.</param>
        <param name="match">To be added.</param>
        <param name="becameActive">To be added.</param>
        <summary>Method that is called to activate a turn for <paramref name="player" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WantsToQuitMatch">
      <MemberSignature Language="C#" Value="public virtual void WantsToQuitMatch (GameKit.GKPlayer player, GameKit.GKTurnBasedMatch match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WantsToQuitMatch(class GameKit.GKPlayer player, class GameKit.GKTurnBasedMatch match) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKTurnBasedEventListener.WantsToQuitMatch(GameKit.GKPlayer,GameKit.GKTurnBasedMatch)" />
      <MemberSignature Language="F#" Value="abstract member WantsToQuitMatch : GameKit.GKPlayer * GameKit.GKTurnBasedMatch -&gt; unit&#xA;override this.WantsToQuitMatch : GameKit.GKPlayer * GameKit.GKTurnBasedMatch -&gt; unit" Usage="gKTurnBasedEventListener.WantsToQuitMatch (player, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("player:wantsToQuitMatch:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="player" Type="GameKit.GKPlayer" />
        <Parameter Name="match" Type="GameKit.GKTurnBasedMatch" />
      </Parameters>
      <Docs>
        <param name="player">To be added.</param>
        <param name="match">To be added.</param>
        <summary>Method that is called after <paramref name="player" /> indicates that they desire to quit the match.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
