<Type Name="GKMatchDelegate" FullName="GameKit.GKMatchDelegate">
  <TypeSignature Language="C#" Value="public class GKMatchDelegate : Foundation.NSObject, GameKit.IGKMatchDelegate, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GKMatchDelegate extends Foundation.NSObject implements class GameKit.IGKMatchDelegate, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:GameKit.GKMatchDelegate" />
  <TypeSignature Language="F#" Value="type GKMatchDelegate = class&#xA;    inherit NSObject&#xA;    interface IGKMatchDelegate&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>GameKit.IGKMatchDelegate</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Register("GKMatchDelegate", false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A delegate object that allows fine-grained control over <see cref="T:GameKit.GKMatch" /> events.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/GameKit/Reference/GKMatchDelegate_Ref/index.html">Apple documentation for <c>GKMatchDelegate</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GKMatchDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKMatchDelegate.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected GKMatchDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKMatchDelegate.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new GameKit.GKMatchDelegate : Foundation.NSObjectFlag -&gt; GameKit.GKMatchDelegate" Usage="new GameKit.GKMatchDelegate t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal GKMatchDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKMatchDelegate.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new GameKit.GKMatchDelegate : nativeint -&gt; GameKit.GKMatchDelegate" Usage="new GameKit.GKMatchDelegate handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataReceived">
      <MemberSignature Language="C#" Value="public virtual void DataReceived (GameKit.GKMatch match, Foundation.NSData data, string playerId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DataReceived(class GameKit.GKMatch match, class Foundation.NSData data, string playerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKMatchDelegate.DataReceived(GameKit.GKMatch,Foundation.NSData,System.String)" />
      <MemberSignature Language="F#" Value="abstract member DataReceived : GameKit.GKMatch * Foundation.NSData * string -&gt; unit&#xA;override this.DataReceived : GameKit.GKMatch * Foundation.NSData * string -&gt; unit" Usage="gKMatchDelegate.DataReceived (match, data, playerId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("match:didReceiveData:fromPlayer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'DataReceivedFromPlayer (GKMatch,NSData,GKPlayer)' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.None, "Use 'DataReceivedFromPlayer (GKMatch,NSData,GKPlayer)' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="GameKit.GKMatch" />
        <Parameter Name="data" Type="Foundation.NSData" />
        <Parameter Name="playerId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="match">To be added.</param>
        <param name="data">To be added.</param>
        <param name="playerId">To be added.</param>
        <summary>Developers should not use this deprecated method. Developers should use 'DataReceivedFromPlayer (GKMatch,NSData,GKPlayer)' instead.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataReceivedForRecipient">
      <MemberSignature Language="C#" Value="public virtual void DataReceivedForRecipient (GameKit.GKMatch match, Foundation.NSData data, GameKit.GKPlayer recipient, GameKit.GKPlayer player);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DataReceivedForRecipient(class GameKit.GKMatch match, class Foundation.NSData data, class GameKit.GKPlayer recipient, class GameKit.GKPlayer player) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKMatchDelegate.DataReceivedForRecipient(GameKit.GKMatch,Foundation.NSData,GameKit.GKPlayer,GameKit.GKPlayer)" />
      <MemberSignature Language="F#" Value="abstract member DataReceivedForRecipient : GameKit.GKMatch * Foundation.NSData * GameKit.GKPlayer * GameKit.GKPlayer -&gt; unit&#xA;override this.DataReceivedForRecipient : GameKit.GKMatch * Foundation.NSData * GameKit.GKPlayer * GameKit.GKPlayer -&gt; unit" Usage="gKMatchDelegate.DataReceivedForRecipient (match, data, recipient, player)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("match:didReceiveData:forRecipient:fromRemotePlayer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="GameKit.GKMatch" />
        <Parameter Name="data" Type="Foundation.NSData" />
        <Parameter Name="recipient" Type="GameKit.GKPlayer" />
        <Parameter Name="player" Type="GameKit.GKPlayer" />
      </Parameters>
      <Docs>
        <param name="match">To be added.</param>
        <param name="data">To be added.</param>
        <param name="recipient">To be added.</param>
        <param name="player">To be added.</param>
        <summary>Method that is called when the <paramref name="recipient" /> recieves data from another <paramref name="player" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataReceivedFromPlayer">
      <MemberSignature Language="C#" Value="public virtual void DataReceivedFromPlayer (GameKit.GKMatch match, Foundation.NSData data, GameKit.GKPlayer player);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DataReceivedFromPlayer(class GameKit.GKMatch match, class Foundation.NSData data, class GameKit.GKPlayer player) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKMatchDelegate.DataReceivedFromPlayer(GameKit.GKMatch,Foundation.NSData,GameKit.GKPlayer)" />
      <MemberSignature Language="F#" Value="abstract member DataReceivedFromPlayer : GameKit.GKMatch * Foundation.NSData * GameKit.GKPlayer -&gt; unit&#xA;override this.DataReceivedFromPlayer : GameKit.GKMatch * Foundation.NSData * GameKit.GKPlayer -&gt; unit" Usage="gKMatchDelegate.DataReceivedFromPlayer (match, data, player)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("match:didReceiveData:fromRemotePlayer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="GameKit.GKMatch" />
        <Parameter Name="data" Type="Foundation.NSData" />
        <Parameter Name="player" Type="GameKit.GKPlayer" />
      </Parameters>
      <Docs>
        <param name="match">To be added.</param>
        <param name="data">To be added.</param>
        <param name="player">To be added.</param>
        <summary>Method that is called when data is received from a player.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Failed">
      <MemberSignature Language="C#" Value="public virtual void Failed (GameKit.GKMatch match, Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Failed(class GameKit.GKMatch match, class Foundation.NSError error) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKMatchDelegate.Failed(GameKit.GKMatch,Foundation.NSError)" />
      <MemberSignature Language="F#" Value="abstract member Failed : GameKit.GKMatch * Foundation.NSError -&gt; unit&#xA;override this.Failed : GameKit.GKMatch * Foundation.NSError -&gt; unit" Usage="gKMatchDelegate.Failed (match, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("match:didFailWithError:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="GameKit.GKMatch" />
        <Parameter Name="error" Type="Foundation.NSError" />
      </Parameters>
      <Docs>
        <param name="match">To be added.</param>
        <param name="error">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Method that is called when a match cannot connect to any of the players.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldReinviteDisconnectedPlayer">
      <MemberSignature Language="C#" Value="public virtual bool ShouldReinviteDisconnectedPlayer (GameKit.GKMatch match, GameKit.GKPlayer player);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldReinviteDisconnectedPlayer(class GameKit.GKMatch match, class GameKit.GKPlayer player) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKMatchDelegate.ShouldReinviteDisconnectedPlayer(GameKit.GKMatch,GameKit.GKPlayer)" />
      <MemberSignature Language="F#" Value="abstract member ShouldReinviteDisconnectedPlayer : GameKit.GKMatch * GameKit.GKPlayer -&gt; bool&#xA;override this.ShouldReinviteDisconnectedPlayer : GameKit.GKMatch * GameKit.GKPlayer -&gt; bool" Usage="gKMatchDelegate.ShouldReinviteDisconnectedPlayer (match, player)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("match:shouldReinviteDisconnectedPlayer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="GameKit.GKMatch" />
        <Parameter Name="player" Type="GameKit.GKPlayer" />
      </Parameters>
      <Docs>
        <param name="match">To be added.</param>
        <param name="player">To be added.</param>
        <summary>Method that is called when a player is disconnected from a two-player match.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldReinvitePlayer">
      <MemberSignature Language="C#" Value="public virtual bool ShouldReinvitePlayer (GameKit.GKMatch match, string playerId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldReinvitePlayer(class GameKit.GKMatch match, string playerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKMatchDelegate.ShouldReinvitePlayer(GameKit.GKMatch,System.String)" />
      <MemberSignature Language="F#" Value="abstract member ShouldReinvitePlayer : GameKit.GKMatch * string -&gt; bool&#xA;override this.ShouldReinvitePlayer : GameKit.GKMatch * string -&gt; bool" Usage="gKMatchDelegate.ShouldReinvitePlayer (match, playerId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("match:shouldReinvitePlayer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'ShouldReinviteDisconnectedPlayer' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.None, "Use 'ShouldReinviteDisconnectedPlayer' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="GameKit.GKMatch" />
        <Parameter Name="playerId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="match">To be added.</param>
        <param name="playerId">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public virtual void StateChanged (GameKit.GKMatch match, string playerId, GameKit.GKPlayerConnectionState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StateChanged(class GameKit.GKMatch match, string playerId, valuetype GameKit.GKPlayerConnectionState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKMatchDelegate.StateChanged(GameKit.GKMatch,System.String,GameKit.GKPlayerConnectionState)" />
      <MemberSignature Language="F#" Value="abstract member StateChanged : GameKit.GKMatch * string * GameKit.GKPlayerConnectionState -&gt; unit&#xA;override this.StateChanged : GameKit.GKMatch * string * GameKit.GKPlayerConnectionState -&gt; unit" Usage="gKMatchDelegate.StateChanged (match, playerId, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("match:player:didChangeState:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'StateChangedForPlayer (GKMatch,GKPlayer,GKPlayerConnectionState)' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.None, "Use 'StateChangedForPlayer (GKMatch,GKPlayer,GKPlayerConnectionState)' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="GameKit.GKMatch" />
        <Parameter Name="playerId" Type="System.String" />
        <Parameter Name="state" Type="GameKit.GKPlayerConnectionState" />
      </Parameters>
      <Docs>
        <param name="match">To be added.</param>
        <param name="playerId">To be added.</param>
        <param name="state">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChangedForPlayer">
      <MemberSignature Language="C#" Value="public virtual void StateChangedForPlayer (GameKit.GKMatch match, GameKit.GKPlayer player, GameKit.GKPlayerConnectionState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StateChangedForPlayer(class GameKit.GKMatch match, class GameKit.GKPlayer player, valuetype GameKit.GKPlayerConnectionState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameKit.GKMatchDelegate.StateChangedForPlayer(GameKit.GKMatch,GameKit.GKPlayer,GameKit.GKPlayerConnectionState)" />
      <MemberSignature Language="F#" Value="abstract member StateChangedForPlayer : GameKit.GKMatch * GameKit.GKPlayer * GameKit.GKPlayerConnectionState -&gt; unit&#xA;override this.StateChangedForPlayer : GameKit.GKMatch * GameKit.GKPlayer * GameKit.GKPlayerConnectionState -&gt; unit" Usage="gKMatchDelegate.StateChangedForPlayer (match, player, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("match:player:didChangeConnectionState:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="GameKit.GKMatch" />
        <Parameter Name="player" Type="GameKit.GKPlayer" />
        <Parameter Name="state" Type="GameKit.GKPlayerConnectionState" />
      </Parameters>
      <Docs>
        <param name="match">To be added.</param>
        <param name="player">To be added.</param>
        <param name="state">To be added.</param>
        <summary>Method that is called when a player's connection state changes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
