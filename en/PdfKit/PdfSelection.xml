<Type Name="PdfSelection" FullName="PdfKit.PdfSelection">
  <TypeSignature Language="C#" Value="public class PdfSelection : Foundation.NSObject, Foundation.INSCopying, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PdfSelection extends Foundation.NSObject implements class Foundation.INSCopying, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:PdfKit.PdfSelection" />
  <TypeSignature Language="F#" Value="type PdfSelection = class&#xA;    inherit NSObject&#xA;    interface INSCopying&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("PDFSelection", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A text selection in a PDF document.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PdfSelection (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfSelection.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new PdfKit.PdfSelection : Foundation.NSObjectFlag -&gt; PdfKit.PdfSelection" Usage="new PdfKit.PdfSelection t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PdfSelection (PdfKit.PdfDocument document);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class PdfKit.PdfDocument document) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfSelection.#ctor(PdfKit.PdfDocument)" />
      <MemberSignature Language="F#" Value="new PdfKit.PdfSelection : PdfKit.PdfDocument -&gt; PdfKit.PdfSelection" Usage="new PdfKit.PdfSelection document" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithDocument:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="document" Type="PdfKit.PdfDocument" />
      </Parameters>
      <Docs>
        <param name="document">To be added.</param>
        <summary>Creates a new, empty, PDF selection object.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal PdfSelection (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfSelection.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new PdfKit.PdfSelection : nativeint -&gt; PdfKit.PdfSelection" Usage="new PdfKit.PdfSelection handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSelection">
      <MemberSignature Language="C#" Value="public virtual void AddSelection (PdfKit.PdfSelection selection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddSelection(class PdfKit.PdfSelection selection) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfSelection.AddSelection(PdfKit.PdfSelection)" />
      <MemberSignature Language="F#" Value="abstract member AddSelection : PdfKit.PdfSelection -&gt; unit&#xA;override this.AddSelection : PdfKit.PdfSelection -&gt; unit" Usage="pdfSelection.AddSelection selection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addSelection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selection" Type="PdfKit.PdfSelection" />
      </Parameters>
      <Docs>
        <param name="selection">To be added.</param>
        <summary>Adds the provided <paramref name="selection" /> to this selection.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSelections">
      <MemberSignature Language="C#" Value="public virtual void AddSelections (PdfKit.PdfSelection[] selections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddSelections(class PdfKit.PdfSelection[] selections) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfSelection.AddSelections(PdfKit.PdfSelection[])" />
      <MemberSignature Language="F#" Value="abstract member AddSelections : PdfKit.PdfSelection[] -&gt; unit&#xA;override this.AddSelections : PdfKit.PdfSelection[] -&gt; unit" Usage="pdfSelection.AddSelections selections" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addSelections:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selections" Type="PdfKit.PdfSelection[]" />
      </Parameters>
      <Docs>
        <param name="selections">To be added.</param>
        <summary>Adds the provided <paramref name="selections" /> to this selection.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributedString">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSAttributedString AttributedString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSAttributedString AttributedString" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfSelection.AttributedString" />
      <MemberSignature Language="F#" Value="member this.AttributedString : Foundation.NSAttributedString" Usage="PdfKit.PdfSelection.AttributedString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("attributedString")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSAttributedString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an attributed string for this selection.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfSelection.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="PdfKit.PdfSelection.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIColor Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIColor Color" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfSelection.Color" />
      <MemberSignature Language="F#" Value="member this.Color : UIKit.UIColor with get, set" Usage="PdfKit.PdfSelection.Color" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("color", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setColor:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the color with which to draw the selection.</summary>
        <value>
          <para>This overrides both the active and inactive selection drawing colors.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject Copy (Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject Copy(class Foundation.NSZone zone) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfSelection.Copy(Foundation.NSZone)" />
      <MemberSignature Language="F#" Value="override this.Copy : Foundation.NSZone -&gt; Foundation.NSObject" Usage="pdfSelection.Copy zone" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCopying.Copy(Foundation.NSZone)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Foundation.NSZone" />
      </Parameters>
      <Docs tool="CopiedFromAncestor">
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public virtual void Draw (PdfKit.PdfPage page, bool active);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Draw(class PdfKit.PdfPage page, bool active) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfSelection.Draw(PdfKit.PdfPage,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Draw : PdfKit.PdfPage * bool -&gt; unit&#xA;override this.Draw : PdfKit.PdfPage * bool -&gt; unit" Usage="pdfSelection.Draw (page, active)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("drawForPage:active:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="PdfKit.PdfPage" />
        <Parameter Name="active" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="page">To be added.</param>
        <param name="active">To be added.</param>
        <summary>Draws the default highlight rectangle in the current highlight color.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public virtual void Draw (PdfKit.PdfPage page, PdfKit.PdfDisplayBox box, bool active);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Draw(class PdfKit.PdfPage page, valuetype PdfKit.PdfDisplayBox box, bool active) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfSelection.Draw(PdfKit.PdfPage,PdfKit.PdfDisplayBox,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Draw : PdfKit.PdfPage * PdfKit.PdfDisplayBox * bool -&gt; unit&#xA;override this.Draw : PdfKit.PdfPage * PdfKit.PdfDisplayBox * bool -&gt; unit" Usage="pdfSelection.Draw (page, box, active)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("drawForPage:withBox:active:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="PdfKit.PdfPage" />
        <Parameter Name="box" Type="PdfKit.PdfDisplayBox" />
        <Parameter Name="active" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="page">To be added.</param>
        <param name="box">To be added.</param>
        <param name="active">To be added.</param>
        <summary>Draws the specified highlight rectangle (<paramref name="box" />) in the current highlight color.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtendSelectionAtEnd">
      <MemberSignature Language="C#" Value="public virtual void ExtendSelectionAtEnd (nint succeed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExtendSelectionAtEnd(valuetype System.nint succeed) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfSelection.ExtendSelectionAtEnd(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member ExtendSelectionAtEnd : nint -&gt; unit&#xA;override this.ExtendSelectionAtEnd : nint -&gt; unit" Usage="pdfSelection.ExtendSelectionAtEnd succeed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("extendSelectionAtEnd:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="succeed" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="succeed">To be added.</param>
        <summary>Extends the end of the selection to the position that is indicated by <paramref name="succeed" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtendSelectionAtStart">
      <MemberSignature Language="C#" Value="public virtual void ExtendSelectionAtStart (nint precede);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExtendSelectionAtStart(valuetype System.nint precede) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfSelection.ExtendSelectionAtStart(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member ExtendSelectionAtStart : nint -&gt; unit&#xA;override this.ExtendSelectionAtStart : nint -&gt; unit" Usage="pdfSelection.ExtendSelectionAtStart precede" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("extendSelectionAtStart:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="precede" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="precede">To be added.</param>
        <summary>Extends the beginning of the selection to the position that is indicated by <paramref name="precede" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtendSelectionForLineBoundaries">
      <MemberSignature Language="C#" Value="public virtual void ExtendSelectionForLineBoundaries ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExtendSelectionForLineBoundaries() cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfSelection.ExtendSelectionForLineBoundaries" />
      <MemberSignature Language="F#" Value="abstract member ExtendSelectionForLineBoundaries : unit -&gt; unit&#xA;override this.ExtendSelectionForLineBoundaries : unit -&gt; unit" Usage="pdfSelection.ExtendSelectionForLineBoundaries " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("extendSelectionForLineBoundaries")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBoundsForPage">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect GetBoundsForPage (PdfKit.PdfPage page);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect GetBoundsForPage(class PdfKit.PdfPage page) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfSelection.GetBoundsForPage(PdfKit.PdfPage)" />
      <MemberSignature Language="F#" Value="abstract member GetBoundsForPage : PdfKit.PdfPage -&gt; CoreGraphics.CGRect&#xA;override this.GetBoundsForPage : PdfKit.PdfPage -&gt; CoreGraphics.CGRect" Usage="pdfSelection.GetBoundsForPage page" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("boundsForPage:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="PdfKit.PdfPage" />
      </Parameters>
      <Docs>
        <param name="page">To be added.</param>
        <summary>Returns the selection bounds for the portion of the selection that is on the specified <paramref name="page" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumberOfTextRanges">
      <MemberSignature Language="C#" Value="public virtual nuint GetNumberOfTextRanges (PdfKit.PdfPage page);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nuint GetNumberOfTextRanges(class PdfKit.PdfPage page) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfSelection.GetNumberOfTextRanges(PdfKit.PdfPage)" />
      <MemberSignature Language="F#" Value="abstract member GetNumberOfTextRanges : PdfKit.PdfPage -&gt; nuint&#xA;override this.GetNumberOfTextRanges : PdfKit.PdfPage -&gt; nuint" Usage="pdfSelection.GetNumberOfTextRanges page" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("numberOfTextRangesOnPage:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 7, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="PdfKit.PdfPage" />
      </Parameters>
      <Docs>
        <param name="page">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRange">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSRange GetRange (nuint index, PdfKit.PdfPage page);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Foundation.NSRange GetRange(valuetype System.nuint index, class PdfKit.PdfPage page) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfSelection.GetRange(System.nuint,PdfKit.PdfPage)" />
      <MemberSignature Language="F#" Value="abstract member GetRange : nuint * PdfKit.PdfPage -&gt; Foundation.NSRange&#xA;override this.GetRange : nuint * PdfKit.PdfPage -&gt; Foundation.NSRange" Usage="pdfSelection.GetRange (index, page)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("rangeAtIndex:onPage:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 7, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.nuint" />
        <Parameter Name="page" Type="PdfKit.PdfPage" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="page">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pages">
      <MemberSignature Language="C#" Value="public virtual PdfKit.PdfPage[] Pages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class PdfKit.PdfPage[] Pages" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfSelection.Pages" />
      <MemberSignature Language="F#" Value="member this.Pages : PdfKit.PdfPage[]" Usage="PdfKit.PdfSelection.Pages" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("pages")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>PdfKit.PdfPage[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the pages that are in the selection.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionsByLine">
      <MemberSignature Language="C#" Value="public virtual PdfKit.PdfSelection[] SelectionsByLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class PdfKit.PdfSelection[] SelectionsByLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfSelection.SelectionsByLine" />
      <MemberSignature Language="F#" Value="abstract member SelectionsByLine : unit -&gt; PdfKit.PdfSelection[]&#xA;override this.SelectionsByLine : unit -&gt; PdfKit.PdfSelection[]" Usage="pdfSelection.SelectionsByLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("selectionsByLine")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>PdfKit.PdfSelection[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array that contains the selected lines.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public virtual string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfSelection.Text" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="PdfKit.PdfSelection.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("string")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the text of the selection.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
