<Type Name="PdfView+Notifications" FullName="PdfKit.PdfView+Notifications">
  <TypeSignature Language="C#" Value="public static class PdfView.Notifications" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi abstract sealed beforefieldinit PdfView/Notifications extends System.Object" />
  <TypeSignature Language="DocId" Value="T:PdfKit.PdfView.Notifications" />
  <TypeSignature Language="F#" Value="type PdfView.Notifications = class" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Notification posted by the <see cref="T:PdfKit.PdfView" /> class.</summary>
    <remarks>
      <para>This is a static class which contains various helper methods that allow developers to observe events posted in the iOS notification hub (<see cref="T:Foundation.NSNotificationCenter" />).</para>
      <para>The methods defined in this class post events invoke the provided method or lambda with a <see cref="T:Foundation.NSNotificationEventArgs" /> parameter which contains strongly typed properties for the notification arguments.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ObserveAnnotationHit">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveAnnotationHit (EventHandler&lt;PdfKit.PdfViewAnnotationHitEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveAnnotationHit(class System.EventHandler`1&lt;class PdfKit.PdfViewAnnotationHitEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObserveAnnotationHit(System.EventHandler{PdfKit.PdfViewAnnotationHitEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveAnnotationHit : EventHandler&lt;PdfKit.PdfViewAnnotationHitEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObserveAnnotationHit handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;PdfKit.PdfViewAnnotationHitEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.AnnotationHitNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para>The following example shows how developers can use this method in their code:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = PdfView.Notifications.ObserveAnnotationHit ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("AnnotationHit", args.AnnotationHit);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, PdfKit.PdfViewAnnotationHitEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("AnnotationHit", args.AnnotationHit);
}

void Setup ()
{
    notification = PdfView.Notifications.ObserveAnnotationHit (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveAnnotationHit">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveAnnotationHit (Foundation.NSObject objectToObserve, EventHandler&lt;PdfKit.PdfViewAnnotationHitEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveAnnotationHit(class Foundation.NSObject objectToObserve, class System.EventHandler`1&lt;class PdfKit.PdfViewAnnotationHitEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObserveAnnotationHit(Foundation.NSObject,System.EventHandler{PdfKit.PdfViewAnnotationHitEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveAnnotationHit : Foundation.NSObject * EventHandler&lt;PdfKit.PdfViewAnnotationHitEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObserveAnnotationHit (objectToObserve, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectToObserve" Type="Foundation.NSObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;PdfKit.PdfViewAnnotationHitEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="objectToObserve">The object to observe.</param>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.AnnotationHitNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PdfKit.PdfView.AnnotationHitNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PdfView.Notifications.ObserveAnnotationHit ((notification) => {
	Console.WriteLine ("Observed AnnotationHitNotification!");
};

// Listen to all notifications posted for a single object
var token = PdfView.Notifications.ObserveAnnotationHit (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed AnnotationHitNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveAnnotationWillHit">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveAnnotationWillHit (EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveAnnotationWillHit(class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObserveAnnotationWillHit(System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveAnnotationWillHit : EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObserveAnnotationWillHit handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.AnnotationWillHitNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PdfKit.PdfView.AnnotationWillHitNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PdfView.Notifications.ObserveAnnotationWillHit ((notification) => {
	Console.WriteLine ("Observed AnnotationWillHitNotification!");
};

// Listen to all notifications posted for a single object
var token = PdfView.Notifications.ObserveAnnotationWillHit (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed AnnotationWillHitNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveAnnotationWillHit">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveAnnotationWillHit (Foundation.NSObject objectToObserve, EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveAnnotationWillHit(class Foundation.NSObject objectToObserve, class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObserveAnnotationWillHit(Foundation.NSObject,System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveAnnotationWillHit : Foundation.NSObject * EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObserveAnnotationWillHit (objectToObserve, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectToObserve" Type="Foundation.NSObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="objectToObserve">The object to observe.</param>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.AnnotationWillHitNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PdfKit.PdfView.AnnotationWillHitNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PdfView.Notifications.ObserveAnnotationWillHit ((notification) => {
	Console.WriteLine ("Observed AnnotationWillHitNotification!");
};

// Listen to all notifications posted for a single object
var token = PdfView.Notifications.ObserveAnnotationWillHit (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed AnnotationWillHitNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveChangedHistory">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveChangedHistory (EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveChangedHistory(class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObserveChangedHistory(System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveChangedHistory : EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObserveChangedHistory handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.ChangedHistoryNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PdfKit.PdfView.ChangedHistoryNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PdfView.Notifications.ObserveChangedHistory ((notification) => {
	Console.WriteLine ("Observed ChangedHistoryNotification!");
};

// Listen to all notifications posted for a single object
var token = PdfView.Notifications.ObserveChangedHistory (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed ChangedHistoryNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveChangedHistory">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveChangedHistory (Foundation.NSObject objectToObserve, EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveChangedHistory(class Foundation.NSObject objectToObserve, class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObserveChangedHistory(Foundation.NSObject,System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveChangedHistory : Foundation.NSObject * EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObserveChangedHistory (objectToObserve, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectToObserve" Type="Foundation.NSObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="objectToObserve">The object to observe.</param>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.ChangedHistoryNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PdfKit.PdfView.ChangedHistoryNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PdfView.Notifications.ObserveChangedHistory ((notification) => {
	Console.WriteLine ("Observed ChangedHistoryNotification!");
};

// Listen to all notifications posted for a single object
var token = PdfView.Notifications.ObserveChangedHistory (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed ChangedHistoryNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveCopyPermission">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveCopyPermission (EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveCopyPermission(class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObserveCopyPermission(System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveCopyPermission : EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObserveCopyPermission handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.CopyPermissionNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PdfKit.PdfView.CopyPermissionNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PdfView.Notifications.ObserveCopyPermission ((notification) => {
	Console.WriteLine ("Observed CopyPermissionNotification!");
};

// Listen to all notifications posted for a single object
var token = PdfView.Notifications.ObserveCopyPermission (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed CopyPermissionNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveCopyPermission">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveCopyPermission (Foundation.NSObject objectToObserve, EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveCopyPermission(class Foundation.NSObject objectToObserve, class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObserveCopyPermission(Foundation.NSObject,System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveCopyPermission : Foundation.NSObject * EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObserveCopyPermission (objectToObserve, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectToObserve" Type="Foundation.NSObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="objectToObserve">The object to observe.</param>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.CopyPermissionNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PdfKit.PdfView.CopyPermissionNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PdfView.Notifications.ObserveCopyPermission ((notification) => {
	Console.WriteLine ("Observed CopyPermissionNotification!");
};

// Listen to all notifications posted for a single object
var token = PdfView.Notifications.ObserveCopyPermission (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed CopyPermissionNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveDisplayBoxChanged">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveDisplayBoxChanged (EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveDisplayBoxChanged(class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObserveDisplayBoxChanged(System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveDisplayBoxChanged : EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObserveDisplayBoxChanged handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.DisplayBoxChangedNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PdfKit.PdfView.DisplayBoxChangedNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PdfView.Notifications.ObserveDisplayBoxChanged ((notification) => {
	Console.WriteLine ("Observed DisplayBoxChangedNotification!");
};

// Listen to all notifications posted for a single object
var token = PdfView.Notifications.ObserveDisplayBoxChanged (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed DisplayBoxChangedNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveDisplayBoxChanged">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveDisplayBoxChanged (Foundation.NSObject objectToObserve, EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveDisplayBoxChanged(class Foundation.NSObject objectToObserve, class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObserveDisplayBoxChanged(Foundation.NSObject,System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveDisplayBoxChanged : Foundation.NSObject * EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObserveDisplayBoxChanged (objectToObserve, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectToObserve" Type="Foundation.NSObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="objectToObserve">The object to observe.</param>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.DisplayBoxChangedNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PdfKit.PdfView.DisplayBoxChangedNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PdfView.Notifications.ObserveDisplayBoxChanged ((notification) => {
	Console.WriteLine ("Observed DisplayBoxChangedNotification!");
};

// Listen to all notifications posted for a single object
var token = PdfView.Notifications.ObserveDisplayBoxChanged (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed DisplayBoxChangedNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveDisplayModeChanged">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveDisplayModeChanged (EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveDisplayModeChanged(class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObserveDisplayModeChanged(System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveDisplayModeChanged : EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObserveDisplayModeChanged handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.DisplayModeChangedNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PdfKit.PdfView.DisplayModeChangedNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PdfView.Notifications.ObserveDisplayModeChanged ((notification) => {
	Console.WriteLine ("Observed DisplayModeChangedNotification!");
};

// Listen to all notifications posted for a single object
var token = PdfView.Notifications.ObserveDisplayModeChanged (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed DisplayModeChangedNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveDisplayModeChanged">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveDisplayModeChanged (Foundation.NSObject objectToObserve, EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveDisplayModeChanged(class Foundation.NSObject objectToObserve, class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObserveDisplayModeChanged(Foundation.NSObject,System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveDisplayModeChanged : Foundation.NSObject * EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObserveDisplayModeChanged (objectToObserve, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectToObserve" Type="Foundation.NSObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="objectToObserve">The object to observe.</param>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.DisplayModeChangedNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PdfKit.PdfView.DisplayModeChangedNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PdfView.Notifications.ObserveDisplayModeChanged ((notification) => {
	Console.WriteLine ("Observed DisplayModeChangedNotification!");
};

// Listen to all notifications posted for a single object
var token = PdfView.Notifications.ObserveDisplayModeChanged (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed DisplayModeChangedNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveDocumentChanged">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveDocumentChanged (EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveDocumentChanged(class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObserveDocumentChanged(System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveDocumentChanged : EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObserveDocumentChanged handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.DocumentChangedNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PdfKit.PdfView.DocumentChangedNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PdfView.Notifications.ObserveDocumentChanged ((notification) => {
	Console.WriteLine ("Observed DocumentChangedNotification!");
};

// Listen to all notifications posted for a single object
var token = PdfView.Notifications.ObserveDocumentChanged (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed DocumentChangedNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveDocumentChanged">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveDocumentChanged (Foundation.NSObject objectToObserve, EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveDocumentChanged(class Foundation.NSObject objectToObserve, class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObserveDocumentChanged(Foundation.NSObject,System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveDocumentChanged : Foundation.NSObject * EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObserveDocumentChanged (objectToObserve, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectToObserve" Type="Foundation.NSObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="objectToObserve">The object to observe.</param>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.DocumentChangedNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PdfKit.PdfView.DocumentChangedNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PdfView.Notifications.ObserveDocumentChanged ((notification) => {
	Console.WriteLine ("Observed DocumentChangedNotification!");
};

// Listen to all notifications posted for a single object
var token = PdfView.Notifications.ObserveDocumentChanged (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed DocumentChangedNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObservePageChanged">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObservePageChanged (EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObservePageChanged(class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObservePageChanged(System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObservePageChanged : EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObservePageChanged handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.PageChangedNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PdfKit.PdfView.PageChangedNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PdfView.Notifications.ObservePageChanged ((notification) => {
	Console.WriteLine ("Observed PageChangedNotification!");
};

// Listen to all notifications posted for a single object
var token = PdfView.Notifications.ObservePageChanged (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed PageChangedNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObservePageChanged">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObservePageChanged (Foundation.NSObject objectToObserve, EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObservePageChanged(class Foundation.NSObject objectToObserve, class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObservePageChanged(Foundation.NSObject,System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObservePageChanged : Foundation.NSObject * EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObservePageChanged (objectToObserve, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectToObserve" Type="Foundation.NSObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="objectToObserve">The object to observe.</param>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.PageChangedNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PdfKit.PdfView.PageChangedNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PdfView.Notifications.ObservePageChanged ((notification) => {
	Console.WriteLine ("Observed PageChangedNotification!");
};

// Listen to all notifications posted for a single object
var token = PdfView.Notifications.ObservePageChanged (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed PageChangedNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObservePrintPermission">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObservePrintPermission (EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObservePrintPermission(class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObservePrintPermission(System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObservePrintPermission : EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObservePrintPermission handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.PrintPermissionNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PdfKit.PdfView.PrintPermissionNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PdfView.Notifications.ObservePrintPermission ((notification) => {
	Console.WriteLine ("Observed PrintPermissionNotification!");
};

// Listen to all notifications posted for a single object
var token = PdfView.Notifications.ObservePrintPermission (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed PrintPermissionNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObservePrintPermission">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObservePrintPermission (Foundation.NSObject objectToObserve, EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObservePrintPermission(class Foundation.NSObject objectToObserve, class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObservePrintPermission(Foundation.NSObject,System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObservePrintPermission : Foundation.NSObject * EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObservePrintPermission (objectToObserve, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectToObserve" Type="Foundation.NSObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="objectToObserve">The object to observe.</param>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.PrintPermissionNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PdfKit.PdfView.PrintPermissionNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PdfView.Notifications.ObservePrintPermission ((notification) => {
	Console.WriteLine ("Observed PrintPermissionNotification!");
};

// Listen to all notifications posted for a single object
var token = PdfView.Notifications.ObservePrintPermission (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed PrintPermissionNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveScaleChanged">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveScaleChanged (EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveScaleChanged(class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObserveScaleChanged(System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveScaleChanged : EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObserveScaleChanged handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.ScaleChangedNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PdfKit.PdfView.ScaleChangedNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PdfView.Notifications.ObserveScaleChanged ((notification) => {
	Console.WriteLine ("Observed ScaleChangedNotification!");
};

// Listen to all notifications posted for a single object
var token = PdfView.Notifications.ObserveScaleChanged (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed ScaleChangedNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveScaleChanged">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveScaleChanged (Foundation.NSObject objectToObserve, EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveScaleChanged(class Foundation.NSObject objectToObserve, class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObserveScaleChanged(Foundation.NSObject,System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveScaleChanged : Foundation.NSObject * EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObserveScaleChanged (objectToObserve, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectToObserve" Type="Foundation.NSObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="objectToObserve">The object to observe.</param>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.ScaleChangedNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PdfKit.PdfView.ScaleChangedNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PdfView.Notifications.ObserveScaleChanged ((notification) => {
	Console.WriteLine ("Observed ScaleChangedNotification!");
};

// Listen to all notifications posted for a single object
var token = PdfView.Notifications.ObserveScaleChanged (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed ScaleChangedNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveSelectionChanged">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveSelectionChanged (EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveSelectionChanged(class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObserveSelectionChanged(System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveSelectionChanged : EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObserveSelectionChanged handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.SelectionChangedNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PdfKit.PdfView.SelectionChangedNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PdfView.Notifications.ObserveSelectionChanged ((notification) => {
	Console.WriteLine ("Observed SelectionChangedNotification!");
};

// Listen to all notifications posted for a single object
var token = PdfView.Notifications.ObserveSelectionChanged (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed SelectionChangedNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveSelectionChanged">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveSelectionChanged (Foundation.NSObject objectToObserve, EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveSelectionChanged(class Foundation.NSObject objectToObserve, class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObserveSelectionChanged(Foundation.NSObject,System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveSelectionChanged : Foundation.NSObject * EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObserveSelectionChanged (objectToObserve, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectToObserve" Type="Foundation.NSObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="objectToObserve">The object to observe.</param>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.SelectionChangedNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PdfKit.PdfView.SelectionChangedNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PdfView.Notifications.ObserveSelectionChanged ((notification) => {
	Console.WriteLine ("Observed SelectionChangedNotification!");
};

// Listen to all notifications posted for a single object
var token = PdfView.Notifications.ObserveSelectionChanged (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed SelectionChangedNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveVisiblePagesChanged">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveVisiblePagesChanged (EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveVisiblePagesChanged(class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObserveVisiblePagesChanged(System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveVisiblePagesChanged : EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObserveVisiblePagesChanged handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.VisiblePagesChangedNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PdfKit.PdfView.VisiblePagesChangedNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PdfView.Notifications.ObserveVisiblePagesChanged ((notification) => {
	Console.WriteLine ("Observed VisiblePagesChangedNotification!");
};

// Listen to all notifications posted for a single object
var token = PdfView.Notifications.ObserveVisiblePagesChanged (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed VisiblePagesChangedNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveVisiblePagesChanged">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveVisiblePagesChanged (Foundation.NSObject objectToObserve, EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveVisiblePagesChanged(class Foundation.NSObject objectToObserve, class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Notifications.ObserveVisiblePagesChanged(Foundation.NSObject,System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveVisiblePagesChanged : Foundation.NSObject * EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PdfKit.PdfView.Notifications.ObserveVisiblePagesChanged (objectToObserve, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectToObserve" Type="Foundation.NSObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="objectToObserve">The object to observe.</param>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PdfKit.PdfView.VisiblePagesChangedNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PdfKit.PdfView.VisiblePagesChangedNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PdfView.Notifications.ObserveVisiblePagesChanged ((notification) => {
	Console.WriteLine ("Observed VisiblePagesChangedNotification!");
};

// Listen to all notifications posted for a single object
var token = PdfView.Notifications.ObserveVisiblePagesChanged (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed VisiblePagesChangedNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
