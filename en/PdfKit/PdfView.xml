<Type Name="PdfView" FullName="PdfKit.PdfView">
  <TypeSignature Language="C#" Value="public class PdfView : UIKit.UIView, IDisposable, UIKit.IUIGestureRecognizerDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PdfView extends UIKit.UIView implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIGestureRecognizerDelegate" />
  <TypeSignature Language="DocId" Value="T:PdfKit.PdfView" />
  <TypeSignature Language="F#" Value="type PdfView = class&#xA;    inherit UIView&#xA;    interface IUIGestureRecognizerDelegate&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.UIView</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIGestureRecognizerDelegate</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("PDFView", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A viewer for PDF files.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PdfView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Creates a new, empty PDF view.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PdfView (CoreGraphics.CGRect frame);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype CoreGraphics.CGRect frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.#ctor(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="new PdfKit.PdfView : CoreGraphics.CGRect -&gt; PdfKit.PdfView" Usage="new PdfKit.PdfView frame" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithFrame:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="frame" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="frame">Frame used by the view, expressed in iOS points.</param>
        <summary>Initializes the PdfView with the specified frame.</summary>
        <remarks>
          <para>This constructor is used to programmatically create a new instance of PdfView with the specified dimension in the frame.   The object will only be displayed once it has been added to a view hierarchy by calling AddSubview in a containing view.</para>
          <para>This constructor is not invoked when deserializing objects from storyboards or XIB filesinstead the constructor that takes an NSCoder parameter is invoked.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PdfView (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new PdfKit.PdfView : Foundation.NSCoder -&gt; PdfKit.PdfView" Usage="new PdfKit.PdfView coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PdfView (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new PdfKit.PdfView : Foundation.NSObjectFlag -&gt; PdfKit.PdfView" Usage="new PdfKit.PdfView t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal PdfView (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new PdfKit.PdfView : nativeint -&gt; PdfKit.PdfView" Usage="new PdfKit.PdfView handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnnotationHitNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString AnnotationHitNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString AnnotationHitNotification" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.AnnotationHitNotification" />
      <MemberSignature Language="F#" Value="member this.AnnotationHitNotification : Foundation.NSString" Usage="PdfKit.PdfView.AnnotationHitNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use PdfView.Notifications.ObserveAnnotationHit helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("PDFViewAnnotationHitNotification", "PDFKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for AnnotationHit</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">To subscribe to this notification, developers can use the convenience <see cref="T:PdfKit.PdfView.Notifications" />.<see cref="M:PdfKit.PdfView.Notifications.ObserveAnnotationHit*" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = PdfView.Notifications.ObserveAnnotationHit ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("AnnotationHit", args.AnnotationHit);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, PdfKit.PdfViewAnnotationHitEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("AnnotationHit", args.AnnotationHit);
}

void Setup ()
{
    notification = PdfView.Notifications.ObserveAnnotationHit (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        PdfView.AnnotationHitNotification, (notification) => {Console.WriteLine ("Received the notification PdfView", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification PdfView", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (PdfView.AnnotationHitNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnnotationsChanged">
      <MemberSignature Language="C#" Value="public virtual void AnnotationsChanged (PdfKit.PdfPage page);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AnnotationsChanged(class PdfKit.PdfPage page) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.AnnotationsChanged(PdfKit.PdfPage)" />
      <MemberSignature Language="F#" Value="abstract member AnnotationsChanged : PdfKit.PdfPage -&gt; unit&#xA;override this.AnnotationsChanged : PdfKit.PdfPage -&gt; unit" Usage="pdfView.AnnotationsChanged page" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("annotationsChangedOnPage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="PdfKit.PdfPage" />
      </Parameters>
      <Docs>
        <param name="page">The page for which the annotations changed.</param>
        <summary>Method that is called when an annotation on the specified <paramref name="page" /> changes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnnotationWillHitNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString AnnotationWillHitNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString AnnotationWillHitNotification" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.AnnotationWillHitNotification" />
      <MemberSignature Language="F#" Value="member this.AnnotationWillHitNotification : Foundation.NSString" Usage="PdfKit.PdfView.AnnotationWillHitNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use PdfView.Notifications.ObserveAnnotationWillHit helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("PDFViewAnnotationWillHitNotification", "PDFKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for AnnotationWillHit</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification, also developers can use the strongly typed notification <see cref="M:PdfKit.PdfView.Notifications.ObserveAnnotationWillHit*" /> instead.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        PdfView.AnnotationWillHitNotification, (notification) => {Console.WriteLine ("Received the notification PdfView", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification PdfView", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (PdfView.AnnotationWillHitNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Appearance">
      <MemberSignature Language="C#" Value="public static PdfKit.PdfView.PdfViewAppearance Appearance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class PdfKit.PdfView/PdfViewAppearance Appearance" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.Appearance" />
      <MemberSignature Language="F#" Value="member this.Appearance : PdfKit.PdfView.PdfViewAppearance" Usage="PdfKit.PdfView.Appearance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PdfKit.PdfView+PdfViewAppearance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Strongly-typed property that returns the UIAppearance class for this class.</summary>
        <value>
        </value>
        <remarks>
          <para>Setting any appearance properties on this instance will affect the appearance of all instances of PdfView.</para>
          <para>If developers want to control the appearance of subclasses of PdfView, they should use the <see cref="M:PdfKit.PdfView.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppearanceWhenContainedIn">
      <MemberSignature Language="C#" Value="public static PdfKit.PdfView.PdfViewAppearance AppearanceWhenContainedIn (params Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class PdfKit.PdfView/PdfViewAppearance AppearanceWhenContainedIn(class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.AppearanceWhenContainedIn(System.Type[])" />
      <MemberSignature Language="F#" Value="static member AppearanceWhenContainedIn : Type[] -&gt; PdfKit.PdfView.PdfViewAppearance" Usage="PdfKit.PdfView.AppearanceWhenContainedIn containers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PdfKit.PdfView+PdfViewAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="containers">List of types that developers want to have as the containers to apply this particular appearance</param>
        <summary>Returns a strongly typed UIAppearance for instances of this class when the view is hosted in the specified hierarchy.</summary>
        <returns>The appearance proxy object that developers can use to set properties when the given container hierarchy is active</returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of PdfView when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>If developers want to control the appearance of subclasses of PdfView, they should use the <see cref="M:PdfKit.PdfView.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" /> method.</para>
          <para>The following example shows how the AppearanceWhenContainedIn method works</para>
          <example>
            <code lang="C#"><![CDATA[
var mySliders = UISlider.AppearanceWhenContainedIn (typeof (UINavigationBar), typeof (UIPopoverController));
mySliders.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoScales">
      <MemberSignature Language="C#" Value="public virtual bool AutoScales { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoScales" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.AutoScales" />
      <MemberSignature Language="F#" Value="member this.AutoScales : bool with get, set" Usage="PdfKit.PdfView.AutoScales" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("autoScales")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAutoScales:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a Boolean value that controls whether the pages of the PDF autoscale to fit the view.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundColor">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIColor BackgroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIColor BackgroundColor" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.BackgroundColor" />
      <MemberSignature Language="F#" Value="member this.BackgroundColor : UIKit.UIColor with get, set" Usage="PdfKit.PdfView.BackgroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("backgroundColor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setBackgroundColor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the background color for the view.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanGoBack">
      <MemberSignature Language="C#" Value="public virtual bool CanGoBack { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanGoBack" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.CanGoBack" />
      <MemberSignature Language="F#" Value="member this.CanGoBack : bool" Usage="PdfKit.PdfView.CanGoBack" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("canGoBack")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether the view can navigate back one page.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanGoForward">
      <MemberSignature Language="C#" Value="public virtual bool CanGoForward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanGoForward" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.CanGoForward" />
      <MemberSignature Language="F#" Value="member this.CanGoForward : bool" Usage="PdfKit.PdfView.CanGoForward" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("canGoForward")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether the view can navigate forward one page.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanGoToFirstPage">
      <MemberSignature Language="C#" Value="public virtual bool CanGoToFirstPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanGoToFirstPage" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.CanGoToFirstPage" />
      <MemberSignature Language="F#" Value="member this.CanGoToFirstPage : bool" Usage="PdfKit.PdfView.CanGoToFirstPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("canGoToFirstPage")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether the view can navigate to the first page.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanGoToLastPage">
      <MemberSignature Language="C#" Value="public virtual bool CanGoToLastPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanGoToLastPage" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.CanGoToLastPage" />
      <MemberSignature Language="F#" Value="member this.CanGoToLastPage : bool" Usage="PdfKit.PdfView.CanGoToLastPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("canGoToLastPage")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether the view can navigate to the last page.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanGoToNextPage">
      <MemberSignature Language="C#" Value="public virtual bool CanGoToNextPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanGoToNextPage" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.CanGoToNextPage" />
      <MemberSignature Language="F#" Value="member this.CanGoToNextPage : bool" Usage="PdfKit.PdfView.CanGoToNextPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("canGoToNextPage")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether the view can navigate to the next page.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanGoToPreviousPage">
      <MemberSignature Language="C#" Value="public virtual bool CanGoToPreviousPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanGoToPreviousPage" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.CanGoToPreviousPage" />
      <MemberSignature Language="F#" Value="member this.CanGoToPreviousPage : bool" Usage="PdfKit.PdfView.CanGoToPreviousPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("canGoToPreviousPage")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether the view can navigate to the previous page.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanZoomIn">
      <MemberSignature Language="C#" Value="public virtual bool CanZoomIn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanZoomIn" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.CanZoomIn" />
      <MemberSignature Language="F#" Value="member this.CanZoomIn : bool" Usage="PdfKit.PdfView.CanZoomIn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("canZoomIn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether the view can zoom in.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanZoomOut">
      <MemberSignature Language="C#" Value="public virtual bool CanZoomOut { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanZoomOut" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.CanZoomOut" />
      <MemberSignature Language="F#" Value="member this.CanZoomOut : bool" Usage="PdfKit.PdfView.CanZoomOut" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("canZoomOut")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether the view can zoom out.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangedHistoryNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ChangedHistoryNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ChangedHistoryNotification" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.ChangedHistoryNotification" />
      <MemberSignature Language="F#" Value="member this.ChangedHistoryNotification : Foundation.NSString" Usage="PdfKit.PdfView.ChangedHistoryNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use PdfView.Notifications.ObserveChangedHistory helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("PDFViewChangedHistoryNotification", "PDFKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for ChangedHistory</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification, also developers can use the strongly typed notification <see cref="M:PdfKit.PdfView.Notifications.ObserveChangedHistory*" /> instead.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        PdfView.ChangedHistoryNotification, (notification) => {Console.WriteLine ("Received the notification PdfView", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification PdfView", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (PdfView.ChangedHistoryNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="PdfKit.PdfView.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearSelection">
      <MemberSignature Language="C#" Value="public virtual void ClearSelection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearSelection() cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.ClearSelection" />
      <MemberSignature Language="F#" Value="abstract member ClearSelection : unit -&gt; unit&#xA;override this.ClearSelection : unit -&gt; unit" Usage="pdfView.ClearSelection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("clearSelection")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears all selections in the PDF.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertPointFromPage">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint ConvertPointFromPage (CoreGraphics.CGPoint point, PdfKit.PdfPage page);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGPoint ConvertPointFromPage(valuetype CoreGraphics.CGPoint point, class PdfKit.PdfPage page) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.ConvertPointFromPage(CoreGraphics.CGPoint,PdfKit.PdfPage)" />
      <MemberSignature Language="F#" Value="abstract member ConvertPointFromPage : CoreGraphics.CGPoint * PdfKit.PdfPage -&gt; CoreGraphics.CGPoint&#xA;override this.ConvertPointFromPage : CoreGraphics.CGPoint * PdfKit.PdfPage -&gt; CoreGraphics.CGPoint" Usage="pdfView.ConvertPointFromPage (point, page)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("convertPoint:fromPage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
        <Parameter Name="page" Type="PdfKit.PdfPage" />
      </Parameters>
      <Docs>
        <param name="point">The point to convert.</param>
        <param name="page">The page that contains the point.</param>
        <summary>Converts the provided <paramref name="point" /> from page space to view space.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertPointToPage">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint ConvertPointToPage (CoreGraphics.CGPoint point, PdfKit.PdfPage page);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGPoint ConvertPointToPage(valuetype CoreGraphics.CGPoint point, class PdfKit.PdfPage page) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.ConvertPointToPage(CoreGraphics.CGPoint,PdfKit.PdfPage)" />
      <MemberSignature Language="F#" Value="abstract member ConvertPointToPage : CoreGraphics.CGPoint * PdfKit.PdfPage -&gt; CoreGraphics.CGPoint&#xA;override this.ConvertPointToPage : CoreGraphics.CGPoint * PdfKit.PdfPage -&gt; CoreGraphics.CGPoint" Usage="pdfView.ConvertPointToPage (point, page)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("convertPoint:toPage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
        <Parameter Name="page" Type="PdfKit.PdfPage" />
      </Parameters>
      <Docs>
        <param name="point">The point to convert.</param>
        <param name="page">The page that contains the point.</param>
        <summary>Converts the provided <paramref name="point" /> from view space to page space.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertRectangleFromPage">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect ConvertRectangleFromPage (CoreGraphics.CGRect rect, PdfKit.PdfPage page);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect ConvertRectangleFromPage(valuetype CoreGraphics.CGRect rect, class PdfKit.PdfPage page) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.ConvertRectangleFromPage(CoreGraphics.CGRect,PdfKit.PdfPage)" />
      <MemberSignature Language="F#" Value="abstract member ConvertRectangleFromPage : CoreGraphics.CGRect * PdfKit.PdfPage -&gt; CoreGraphics.CGRect&#xA;override this.ConvertRectangleFromPage : CoreGraphics.CGRect * PdfKit.PdfPage -&gt; CoreGraphics.CGRect" Usage="pdfView.ConvertRectangleFromPage (rect, page)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("convertRect:fromPage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
        <Parameter Name="page" Type="PdfKit.PdfPage" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to convert.</param>
        <param name="page">The page that contains the rectangle.</param>
        <summary>Converts the provided rectangle from page space to view space.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertRectangleToPage">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect ConvertRectangleToPage (CoreGraphics.CGRect rect, PdfKit.PdfPage page);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect ConvertRectangleToPage(valuetype CoreGraphics.CGRect rect, class PdfKit.PdfPage page) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.ConvertRectangleToPage(CoreGraphics.CGRect,PdfKit.PdfPage)" />
      <MemberSignature Language="F#" Value="abstract member ConvertRectangleToPage : CoreGraphics.CGRect * PdfKit.PdfPage -&gt; CoreGraphics.CGRect&#xA;override this.ConvertRectangleToPage : CoreGraphics.CGRect * PdfKit.PdfPage -&gt; CoreGraphics.CGRect" Usage="pdfView.ConvertRectangleToPage (rect, page)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("convertRect:toPage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
        <Parameter Name="page" Type="PdfKit.PdfPage" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to convert.</param>
        <param name="page">The page that contains the rectangle.</param>
        <summary>Converts the provided rectangle from view space to page space.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual void Copy (Foundation.NSObject sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Copy(class Foundation.NSObject sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Copy(Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="override this.Copy : Foundation.NSObject -&gt; unit" Usage="pdfView.Copy sender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("copy:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="sender">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyPermissionNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString CopyPermissionNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString CopyPermissionNotification" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.CopyPermissionNotification" />
      <MemberSignature Language="F#" Value="member this.CopyPermissionNotification : Foundation.NSString" Usage="PdfKit.PdfView.CopyPermissionNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use PdfView.Notifications.ObserveCopyPermission helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("PDFViewCopyPermissionNotification", "PDFKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for CopyPermission</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification, also developers can use the strongly typed notification <see cref="M:PdfKit.PdfView.Notifications.ObserveCopyPermission*" /> instead.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        PdfView.CopyPermissionNotification, (notification) => {Console.WriteLine ("Received the notification PdfView", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification PdfView", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (PdfView.CopyPermissionNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDestination">
      <MemberSignature Language="C#" Value="public virtual PdfKit.PdfDestination CurrentDestination { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class PdfKit.PdfDestination CurrentDestination" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.CurrentDestination" />
      <MemberSignature Language="F#" Value="member this.CurrentDestination : PdfKit.PdfDestination" Usage="PdfKit.PdfView.CurrentDestination" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("currentDestination")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>PdfKit.PdfDestination</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the currently displayed location.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentPage">
      <MemberSignature Language="C#" Value="public virtual PdfKit.PdfPage CurrentPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class PdfKit.PdfPage CurrentPage" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.CurrentPage" />
      <MemberSignature Language="F#" Value="member this.CurrentPage : PdfKit.PdfPage" Usage="PdfKit.PdfView.CurrentPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("currentPage")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>PdfKit.PdfPage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the currently displayed page.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentSelection">
      <MemberSignature Language="C#" Value="public virtual PdfKit.PdfSelection CurrentSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class PdfKit.PdfSelection CurrentSelection" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.CurrentSelection" />
      <MemberSignature Language="F#" Value="member this.CurrentSelection : PdfKit.PdfSelection with get, set" Usage="PdfKit.PdfView.CurrentSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("currentSelection")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setCurrentSelection:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>PdfKit.PdfSelection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the current selection.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public PdfKit.IPdfViewDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class PdfKit.IPdfViewDelegate Delegate" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.Delegate" />
      <MemberSignature Language="F#" Value="member this.Delegate : PdfKit.IPdfViewDelegate with get, set" Usage="PdfKit.PdfView.Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>PdfKit.IPdfViewDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the PdfKit.IPdfViewDelegate model class which acts as the class delegate.</summary>
        <value>The instance of the PdfKit.IPdfViewDelegate model class</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayBox">
      <MemberSignature Language="C#" Value="public virtual PdfKit.PdfDisplayBox DisplayBox { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype PdfKit.PdfDisplayBox DisplayBox" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.DisplayBox" />
      <MemberSignature Language="F#" Value="member this.DisplayBox : PdfKit.PdfDisplayBox with get, set" Usage="PdfKit.PdfView.DisplayBox" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("displayBox")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDisplayBox:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>PdfKit.PdfDisplayBox</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the display box style.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayBoxChangedNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString DisplayBoxChangedNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString DisplayBoxChangedNotification" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.DisplayBoxChangedNotification" />
      <MemberSignature Language="F#" Value="member this.DisplayBoxChangedNotification : Foundation.NSString" Usage="PdfKit.PdfView.DisplayBoxChangedNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use PdfView.Notifications.ObserveDisplayBoxChanged helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("PDFViewDisplayBoxChangedNotification", "PDFKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for DisplayBoxChanged</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification, also developers can use the strongly typed notification <see cref="M:PdfKit.PdfView.Notifications.ObserveDisplayBoxChanged*" /> instead.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        PdfView.DisplayBoxChangedNotification, (notification) => {Console.WriteLine ("Received the notification PdfView", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification PdfView", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (PdfView.DisplayBoxChangedNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayDirection">
      <MemberSignature Language="C#" Value="public virtual PdfKit.PdfDisplayDirection DisplayDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype PdfKit.PdfDisplayDirection DisplayDirection" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.DisplayDirection" />
      <MemberSignature Language="F#" Value="member this.DisplayDirection : PdfKit.PdfDisplayDirection with get, set" Usage="PdfKit.PdfView.DisplayDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("displayDirection")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDisplayDirection:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>PdfKit.PdfDisplayDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayMode">
      <MemberSignature Language="C#" Value="public virtual PdfKit.PdfDisplayMode DisplayMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype PdfKit.PdfDisplayMode DisplayMode" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.DisplayMode" />
      <MemberSignature Language="F#" Value="member this.DisplayMode : PdfKit.PdfDisplayMode with get, set" Usage="PdfKit.PdfView.DisplayMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("displayMode")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDisplayMode:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>PdfKit.PdfDisplayMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the display mode.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayModeChangedNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString DisplayModeChangedNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString DisplayModeChangedNotification" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.DisplayModeChangedNotification" />
      <MemberSignature Language="F#" Value="member this.DisplayModeChangedNotification : Foundation.NSString" Usage="PdfKit.PdfView.DisplayModeChangedNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use PdfView.Notifications.ObserveDisplayModeChanged helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("PDFViewDisplayModeChangedNotification", "PDFKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for DisplayModeChanged</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification, also developers can use the strongly typed notification <see cref="M:PdfKit.PdfView.Notifications.ObserveDisplayModeChanged*" /> instead.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        PdfView.DisplayModeChangedNotification, (notification) => {Console.WriteLine ("Received the notification PdfView", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification PdfView", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (PdfView.DisplayModeChangedNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplaysAsBook">
      <MemberSignature Language="C#" Value="public virtual bool DisplaysAsBook { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DisplaysAsBook" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.DisplaysAsBook" />
      <MemberSignature Language="F#" Value="member this.DisplaysAsBook : bool with get, set" Usage="PdfKit.PdfView.DisplaysAsBook" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("displaysAsBook")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDisplaysAsBook:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a Boolean value that controls whether the first page is displayed as a book cover for two-up or two-up continuous display.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplaysPageBreaks">
      <MemberSignature Language="C#" Value="public virtual bool DisplaysPageBreaks { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DisplaysPageBreaks" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.DisplaysPageBreaks" />
      <MemberSignature Language="F#" Value="member this.DisplaysPageBreaks : bool with get, set" Usage="PdfKit.PdfView.DisplaysPageBreaks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("displaysPageBreaks")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDisplaysPageBreaks:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a Boolean value that controls whether page breaks will be displayed.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplaysRtl">
      <MemberSignature Language="C#" Value="public virtual bool DisplaysRtl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DisplaysRtl" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.DisplaysRtl" />
      <MemberSignature Language="F#" Value="member this.DisplaysRtl : bool with get, set" Usage="PdfKit.PdfView.DisplaysRtl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("displaysRTL")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDisplaysRTL:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="pdfView.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the PdfView object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the PdfView class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the PdfView ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public virtual PdfKit.PdfDocument Document { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class PdfKit.PdfDocument Document" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.Document" />
      <MemberSignature Language="F#" Value="member this.Document : PdfKit.PdfDocument with get, set" Usage="PdfKit.PdfView.Document" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("document")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDocument:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>PdfKit.PdfDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the document to display.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentChangedNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString DocumentChangedNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString DocumentChangedNotification" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.DocumentChangedNotification" />
      <MemberSignature Language="F#" Value="member this.DocumentChangedNotification : Foundation.NSString" Usage="PdfKit.PdfView.DocumentChangedNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use PdfView.Notifications.ObserveDocumentChanged helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("PDFViewDocumentChangedNotification", "PDFKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for DocumentChanged</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification, also developers can use the strongly typed notification <see cref="M:PdfKit.PdfView.Notifications.ObserveDocumentChanged*" /> instead.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        PdfView.DocumentChangedNotification, (notification) => {Console.WriteLine ("Received the notification PdfView", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification PdfView", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (PdfView.DocumentChangedNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentView">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIView DocumentView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIView DocumentView" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.DocumentView" />
      <MemberSignature Language="F#" Value="member this.DocumentView : UIKit.UIView" Usage="PdfKit.PdfView.DocumentView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("documentView")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the innermost view.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPage">
      <MemberSignature Language="C#" Value="public virtual void DrawPage (PdfKit.PdfPage page, CoreGraphics.CGContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPage(class PdfKit.PdfPage page, class CoreGraphics.CGContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.DrawPage(PdfKit.PdfPage,CoreGraphics.CGContext)" />
      <MemberSignature Language="F#" Value="abstract member DrawPage : PdfKit.PdfPage * CoreGraphics.CGContext -&gt; unit&#xA;override this.DrawPage : PdfKit.PdfPage * CoreGraphics.CGContext -&gt; unit" Usage="pdfView.DrawPage (page, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("drawPage:toContext:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="PdfKit.PdfPage" />
        <Parameter Name="context" Type="CoreGraphics.CGContext" />
      </Parameters>
      <Docs>
        <param name="page">To be added.</param>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPagePost">
      <MemberSignature Language="C#" Value="public virtual void DrawPagePost (PdfKit.PdfPage page, CoreGraphics.CGContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPagePost(class PdfKit.PdfPage page, class CoreGraphics.CGContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.DrawPagePost(PdfKit.PdfPage,CoreGraphics.CGContext)" />
      <MemberSignature Language="F#" Value="abstract member DrawPagePost : PdfKit.PdfPage * CoreGraphics.CGContext -&gt; unit&#xA;override this.DrawPagePost : PdfKit.PdfPage * CoreGraphics.CGContext -&gt; unit" Usage="pdfView.DrawPagePost (page, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("drawPagePost:toContext:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="PdfKit.PdfPage" />
        <Parameter Name="context" Type="CoreGraphics.CGContext" />
      </Parameters>
      <Docs>
        <param name="page">To be added.</param>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDataDetectors">
      <MemberSignature Language="C#" Value="public virtual bool EnableDataDetectors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableDataDetectors" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.EnableDataDetectors" />
      <MemberSignature Language="F#" Value="member this.EnableDataDetectors : bool with get, set" Usage="PdfKit.PdfView.EnableDataDetectors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("enableDataDetectors")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setEnableDataDetectors:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static PdfKit.PdfView.PdfViewAppearance GetAppearance (UIKit.UITraitCollection traits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class PdfKit.PdfView/PdfViewAppearance GetAppearance(class UIKit.UITraitCollection traits) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.GetAppearance(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection -&gt; PdfKit.PdfView.PdfViewAppearance" Usage="PdfKit.PdfView.GetAppearance traits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PdfKit.PdfView+PdfViewAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="traits">The trait collection.</param>
        <summary>Returns the appearance proxy for the specified trait collection.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static PdfKit.PdfView.PdfViewAppearance GetAppearance (UIKit.UITraitCollection traits, params Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class PdfKit.PdfView/PdfViewAppearance GetAppearance(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.GetAppearance(UIKit.UITraitCollection,System.Type[])" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection * Type[] -&gt; PdfKit.PdfView.PdfViewAppearance" Usage="PdfKit.PdfView.GetAppearance (traits, containers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PdfKit.PdfView+PdfViewAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="traits">The trait collection.</param>
        <param name="containers">The containment hierarchy.</param>
        <summary>Returns the appearance proxy for the specified trait collection and view hierarchy.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static PdfKit.PdfView.PdfViewAppearance GetAppearance&lt;T&gt; () where T : PdfKit.PdfView;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class PdfKit.PdfView/PdfViewAppearance GetAppearance&lt;(class PdfKit.PdfView) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.GetAppearance``1" />
      <MemberSignature Language="F#" Value="static member GetAppearance : unit -&gt; PdfKit.PdfView.PdfViewAppearance (requires 'T :&gt; PdfKit.PdfView)" Usage="PdfKit.PdfView.GetAppearance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PdfKit.PdfView+PdfViewAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>PdfKit.PdfView</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of PdfView.</typeparam>
        <summary>Obtains the appearance proxy <see cref="T:PdfKit.PdfView.PdfViewAppearance" /> for the subclass of PdfView.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>Setting any appearance properties on the returned object will affect the appearance of all classes and subclasses of the type parameter.</para>
          <para>Unlike the <see cref="P:PdfKit.PdfView.Appearance" /> property, or the <see cref="M:PdfKit.PdfView.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = PdfView.GetAppearance<MyPdfViewSubclass> ();
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static PdfKit.PdfView.PdfViewAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits) where T : PdfKit.PdfView;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class PdfKit.PdfView/PdfViewAppearance GetAppearance&lt;(class PdfKit.PdfView) T&gt;(class UIKit.UITraitCollection traits) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.GetAppearance``1(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection -&gt; PdfKit.PdfView.PdfViewAppearance (requires 'T :&gt; PdfKit.PdfView)" Usage="PdfKit.PdfView.GetAppearance traits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PdfKit.PdfView+PdfViewAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>PdfKit.PdfView</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of PdfView.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <summary>Obtains the appearance proxy <see cref="T:PdfKit.PdfView.PdfViewAppearance" /> for the subclass of PdfView.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of PdfView.</para>
          <para>Unlike the <see cref="P:PdfKit.PdfView.Appearance" /> property, or the <see cref="M:PdfKit.PdfView.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = PdfView.GetAppearance<MyPdfViewSubclass> (myTraits, );
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static PdfKit.PdfView.PdfViewAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits, params Type[] containers) where T : PdfKit.PdfView;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class PdfKit.PdfView/PdfViewAppearance GetAppearance&lt;(class PdfKit.PdfView) T&gt;(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection * Type[] -&gt; PdfKit.PdfView.PdfViewAppearance (requires 'T :&gt; PdfKit.PdfView)" Usage="PdfKit.PdfView.GetAppearance (traits, containers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>PdfKit.PdfView+PdfViewAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>PdfKit.PdfView</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of PdfView.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <param name="containers">List of types that the developer wishes to have as the containers to apply this particular appearance.</param>
        <summary>Obtains the appearance proxy <see cref="T:PdfKit.PdfView.PdfViewAppearance" /> for the subclass of PdfView that has the specified trait collection when the view is hosted in the specified hierarchy.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of PdfView that has the specified trait collection when the view is hosted in the specified hierarchy when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>Unlike the <see cref="P:PdfKit.PdfView.Appearance" /> property, or the <see cref="M:PdfKit.PdfView.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = PdfView.GetAppearance<MyPdfViewSubclass> (myTraits, typeof (UINavigationBar), typeof (UIPopoverController));
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAreaOfInterest">
      <MemberSignature Language="C#" Value="public virtual PdfKit.PdfAreaOfInterest GetAreaOfInterest (CoreGraphics.CGPoint point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PdfKit.PdfAreaOfInterest GetAreaOfInterest(valuetype CoreGraphics.CGPoint point) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.GetAreaOfInterest(CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member GetAreaOfInterest : CoreGraphics.CGPoint -&gt; PdfKit.PdfAreaOfInterest&#xA;override this.GetAreaOfInterest : CoreGraphics.CGPoint -&gt; PdfKit.PdfAreaOfInterest" Usage="pdfView.GetAreaOfInterest point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("areaOfInterestForPoint:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, 3, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>PdfKit.PdfAreaOfInterest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="point">The point for which to obtain the area of interest</param>
        <summary>Returns the area of interest for the specified point.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAreaOfInterest">
      <MemberSignature Language="C#" Value="public virtual PdfKit.PdfAreaOfInterest GetAreaOfInterest (UIKit.UIEvent mouseEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype PdfKit.PdfAreaOfInterest GetAreaOfInterest(class UIKit.UIEvent mouseEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.GetAreaOfInterest(UIKit.UIEvent)" />
      <MemberSignature Language="F#" Value="abstract member GetAreaOfInterest : UIKit.UIEvent -&gt; PdfKit.PdfAreaOfInterest&#xA;override this.GetAreaOfInterest : UIKit.UIEvent -&gt; PdfKit.PdfAreaOfInterest" Usage="pdfView.GetAreaOfInterest mouseEvent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("areaOfInterestForMouse:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>PdfKit.PdfAreaOfInterest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mouseEvent" Type="UIKit.UIEvent" />
      </Parameters>
      <Docs>
        <param name="mouseEvent">The mouse event for which to obtain the area of interest.</param>
        <summary>Returns the area of interest for the current cursor position.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPage">
      <MemberSignature Language="C#" Value="public virtual PdfKit.PdfPage GetPage (CoreGraphics.CGPoint point, bool nearest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class PdfKit.PdfPage GetPage(valuetype CoreGraphics.CGPoint point, bool nearest) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.GetPage(CoreGraphics.CGPoint,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member GetPage : CoreGraphics.CGPoint * bool -&gt; PdfKit.PdfPage&#xA;override this.GetPage : CoreGraphics.CGPoint * bool -&gt; PdfKit.PdfPage" Usage="pdfView.GetPage (point, nearest)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("pageForPoint:nearest:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>PdfKit.PdfPage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
        <Parameter Name="nearest" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="point">The point for which to return a page.</param>
        <param name="nearest">Whether to return the nearest page if the point is not on a page.</param>
        <summary>Returns the page for the point, or the nearest page if <paramref name="nearest" /> is <see langword="true" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoBack">
      <MemberSignature Language="C#" Value="public virtual void GoBack (Foundation.NSObject sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GoBack(class Foundation.NSObject sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.GoBack(Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member GoBack : Foundation.NSObject -&gt; unit&#xA;override this.GoBack : Foundation.NSObject -&gt; unit" Usage="pdfView.GoBack sender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("goBack:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="sender">The object that requested the operation.</param>
        <summary>Goes back one page in the history.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoForward">
      <MemberSignature Language="C#" Value="public virtual void GoForward (Foundation.NSObject sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GoForward(class Foundation.NSObject sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.GoForward(Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member GoForward : Foundation.NSObject -&gt; unit&#xA;override this.GoForward : Foundation.NSObject -&gt; unit" Usage="pdfView.GoForward sender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("goForward:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="sender">The object that requested the operation.</param>
        <summary>Goes forward one page in the history.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoToDestination">
      <MemberSignature Language="C#" Value="public virtual void GoToDestination (PdfKit.PdfDestination destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GoToDestination(class PdfKit.PdfDestination destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.GoToDestination(PdfKit.PdfDestination)" />
      <MemberSignature Language="F#" Value="abstract member GoToDestination : PdfKit.PdfDestination -&gt; unit&#xA;override this.GoToDestination : PdfKit.PdfDestination -&gt; unit" Usage="pdfView.GoToDestination destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("goToDestination:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="PdfKit.PdfDestination" />
      </Parameters>
      <Docs>
        <param name="destination">The destination to which to go.</param>
        <summary>Goes to the specified <paramref name="destination" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoToFirstPage">
      <MemberSignature Language="C#" Value="public virtual void GoToFirstPage (Foundation.NSObject sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GoToFirstPage(class Foundation.NSObject sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.GoToFirstPage(Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member GoToFirstPage : Foundation.NSObject -&gt; unit&#xA;override this.GoToFirstPage : Foundation.NSObject -&gt; unit" Usage="pdfView.GoToFirstPage sender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("goToFirstPage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="sender">The object that requested the operation.</param>
        <summary>Goes to the first page of the PDF.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoToLastPage">
      <MemberSignature Language="C#" Value="public virtual void GoToLastPage (Foundation.NSObject sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GoToLastPage(class Foundation.NSObject sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.GoToLastPage(Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member GoToLastPage : Foundation.NSObject -&gt; unit&#xA;override this.GoToLastPage : Foundation.NSObject -&gt; unit" Usage="pdfView.GoToLastPage sender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("goToLastPage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="sender">The object that requested the operation..</param>
        <summary>Goes to the last page of the PDF.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoToNextPage">
      <MemberSignature Language="C#" Value="public virtual void GoToNextPage (Foundation.NSObject sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GoToNextPage(class Foundation.NSObject sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.GoToNextPage(Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member GoToNextPage : Foundation.NSObject -&gt; unit&#xA;override this.GoToNextPage : Foundation.NSObject -&gt; unit" Usage="pdfView.GoToNextPage sender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("goToNextPage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="sender">The object that requested the operation.</param>
        <summary>Goes to the next page in the PDF.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoToPage">
      <MemberSignature Language="C#" Value="public virtual void GoToPage (PdfKit.PdfPage page);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GoToPage(class PdfKit.PdfPage page) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.GoToPage(PdfKit.PdfPage)" />
      <MemberSignature Language="F#" Value="abstract member GoToPage : PdfKit.PdfPage -&gt; unit&#xA;override this.GoToPage : PdfKit.PdfPage -&gt; unit" Usage="pdfView.GoToPage page" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("goToPage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="PdfKit.PdfPage" />
      </Parameters>
      <Docs>
        <param name="page">The page to which to go.</param>
        <summary>Goes to the specified page.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoToPreviousPage">
      <MemberSignature Language="C#" Value="public virtual void GoToPreviousPage (Foundation.NSObject sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GoToPreviousPage(class Foundation.NSObject sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.GoToPreviousPage(Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member GoToPreviousPage : Foundation.NSObject -&gt; unit&#xA;override this.GoToPreviousPage : Foundation.NSObject -&gt; unit" Usage="pdfView.GoToPreviousPage sender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("goToPreviousPage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="sender">The object that requested the operation.</param>
        <summary>Goes to the previous page in the PDF.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoToRectangle">
      <MemberSignature Language="C#" Value="public virtual void GoToRectangle (CoreGraphics.CGRect rect, PdfKit.PdfPage page);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GoToRectangle(valuetype CoreGraphics.CGRect rect, class PdfKit.PdfPage page) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.GoToRectangle(CoreGraphics.CGRect,PdfKit.PdfPage)" />
      <MemberSignature Language="F#" Value="abstract member GoToRectangle : CoreGraphics.CGRect * PdfKit.PdfPage -&gt; unit&#xA;override this.GoToRectangle : CoreGraphics.CGRect * PdfKit.PdfPage -&gt; unit" Usage="pdfView.GoToRectangle (rect, page)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("goToRect:onPage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
        <Parameter Name="page" Type="PdfKit.PdfPage" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to which to go.</param>
        <param name="page">The page that contains the rectangle.</param>
        <summary>Goes to the specified rectangle on the specified page.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoToSelection">
      <MemberSignature Language="C#" Value="public virtual void GoToSelection (PdfKit.PdfSelection selection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GoToSelection(class PdfKit.PdfSelection selection) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.GoToSelection(PdfKit.PdfSelection)" />
      <MemberSignature Language="F#" Value="abstract member GoToSelection : PdfKit.PdfSelection -&gt; unit&#xA;override this.GoToSelection : PdfKit.PdfSelection -&gt; unit" Usage="pdfView.GoToSelection selection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("goToSelection:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selection" Type="PdfKit.PdfSelection" />
      </Parameters>
      <Docs>
        <param name="selection">The selection to which to go.</param>
        <summary>Goes to the specified selection.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreekingThreshold">
      <MemberSignature Language="C#" Value="public virtual nfloat GreekingThreshold { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat GreekingThreshold" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.GreekingThreshold" />
      <MemberSignature Language="F#" Value="member this.GreekingThreshold : nfloat with get, set" Usage="PdfKit.PdfView.GreekingThreshold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("greekingThreshold")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setGreekingThreshold:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Developers should not use this deprecated property. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HighlightedSelections">
      <MemberSignature Language="C#" Value="public virtual PdfKit.PdfSelection[] HighlightedSelections { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class PdfKit.PdfSelection[] HighlightedSelections" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.HighlightedSelections" />
      <MemberSignature Language="F#" Value="member this.HighlightedSelections : PdfKit.PdfSelection[] with get, set" Usage="PdfKit.PdfView.HighlightedSelections" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("highlightedSelections")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setHighlightedSelections:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>PdfKit.PdfSelection[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the currently highlighted selections.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolationQuality">
      <MemberSignature Language="C#" Value="public virtual PdfKit.PdfInterpolationQuality InterpolationQuality { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype PdfKit.PdfInterpolationQuality InterpolationQuality" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.InterpolationQuality" />
      <MemberSignature Language="F#" Value="member this.InterpolationQuality : PdfKit.PdfInterpolationQuality with get, set" Usage="PdfKit.PdfView.InterpolationQuality" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 7, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("interpolationQuality")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 7, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setInterpolationQuality:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 7, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("interpolationQuality", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setInterpolationQuality:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>PdfKit.PdfInterpolationQuality</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUsingPageViewController">
      <MemberSignature Language="C#" Value="public virtual bool IsUsingPageViewController { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUsingPageViewController" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.IsUsingPageViewController" />
      <MemberSignature Language="F#" Value="member this.IsUsingPageViewController : bool" Usage="PdfKit.PdfView.IsUsingPageViewController" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.MacOSX, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isUsingPageViewController")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.MacOSX, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutDocumentView">
      <MemberSignature Language="C#" Value="public virtual void LayoutDocumentView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LayoutDocumentView() cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.LayoutDocumentView" />
      <MemberSignature Language="F#" Value="abstract member LayoutDocumentView : unit -&gt; unit&#xA;override this.LayoutDocumentView : unit -&gt; unit" Usage="pdfView.LayoutDocumentView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("layoutDocumentView")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Lays out the document view.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxScaleFactor">
      <MemberSignature Language="C#" Value="public virtual nfloat MaxScaleFactor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat MaxScaleFactor" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.MaxScaleFactor" />
      <MemberSignature Language="F#" Value="member this.MaxScaleFactor : nfloat with get, set" Usage="PdfKit.PdfView.MaxScaleFactor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("maxScaleFactor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setMaxScaleFactor:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinScaleFactor">
      <MemberSignature Language="C#" Value="public virtual nfloat MinScaleFactor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat MinScaleFactor" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.MinScaleFactor" />
      <MemberSignature Language="F#" Value="member this.MinScaleFactor : nfloat with get, set" Usage="PdfKit.PdfView.MinScaleFactor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("minScaleFactor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setMinScaleFactor:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenPdf">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;PdfKit.PdfViewActionEventArgs&gt; OpenPdf;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class PdfKit.PdfViewActionEventArgs&gt; OpenPdf" />
      <MemberSignature Language="DocId" Value="E:PdfKit.PdfView.OpenPdf" />
      <MemberSignature Language="F#" Value="member this.OpenPdf : EventHandler&lt;PdfKit.PdfViewActionEventArgs&gt; " Usage="member this.OpenPdf : System.EventHandler&lt;PdfKit.PdfViewActionEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;PdfKit.PdfViewActionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PageBreakMargins">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIEdgeInsets PageBreakMargins { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIEdgeInsets PageBreakMargins" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.PageBreakMargins" />
      <MemberSignature Language="F#" Value="member this.PageBreakMargins : UIKit.UIEdgeInsets with get, set" Usage="PdfKit.PdfView.PageBreakMargins" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("pageBreakMargins")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setPageBreakMargins:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIEdgeInsets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PageChangedNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString PageChangedNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString PageChangedNotification" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.PageChangedNotification" />
      <MemberSignature Language="F#" Value="member this.PageChangedNotification : Foundation.NSString" Usage="PdfKit.PdfView.PageChangedNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use PdfView.Notifications.ObservePageChanged helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("PDFViewPageChangedNotification", "PDFKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for PageChanged</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification, also developers can use the strongly typed notification <see cref="M:PdfKit.PdfView.Notifications.ObservePageChanged*" /> instead.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        PdfView.PageChangedNotification, (notification) => {Console.WriteLine ("Received the notification PdfView", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification PdfView", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (PdfView.PageChangedNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformAction">
      <MemberSignature Language="C#" Value="public virtual void PerformAction (PdfKit.PdfAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformAction(class PdfKit.PdfAction action) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.PerformAction(PdfKit.PdfAction)" />
      <MemberSignature Language="F#" Value="abstract member PerformAction : PdfKit.PdfAction -&gt; unit&#xA;override this.PerformAction : PdfKit.PdfAction -&gt; unit" Usage="pdfView.PerformAction action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("performAction:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="PdfKit.PdfAction" />
      </Parameters>
      <Docs>
        <param name="action">The action to perform</param>
        <summary>Performs the action.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformFind">
      <MemberSignature Language="C#" Value="public event EventHandler PerformFind;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PerformFind" />
      <MemberSignature Language="DocId" Value="E:PdfKit.PdfView.PerformFind" />
      <MemberSignature Language="F#" Value="member this.PerformFind : EventHandler " Usage="member this.PerformFind : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformGoToPage">
      <MemberSignature Language="C#" Value="public event EventHandler PerformGoToPage;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PerformGoToPage" />
      <MemberSignature Language="DocId" Value="E:PdfKit.PdfView.PerformGoToPage" />
      <MemberSignature Language="F#" Value="member this.PerformGoToPage : EventHandler " Usage="member this.PerformGoToPage : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintPermissionNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString PrintPermissionNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString PrintPermissionNotification" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.PrintPermissionNotification" />
      <MemberSignature Language="F#" Value="member this.PrintPermissionNotification : Foundation.NSString" Usage="PdfKit.PdfView.PrintPermissionNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use PdfView.Notifications.ObservePrintPermission helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("PDFViewPrintPermissionNotification", "PDFKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for PrintPermission</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification, also developers can use the strongly typed notification <see cref="M:PdfKit.PdfView.Notifications.ObservePrintPermission*" /> instead.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        PdfView.PrintPermissionNotification, (notification) => {Console.WriteLine ("Received the notification PdfView", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification PdfView", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (PdfView.PrintPermissionNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowSize">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGSize RowSize (PdfKit.PdfPage page);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGSize RowSize(class PdfKit.PdfPage page) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.RowSize(PdfKit.PdfPage)" />
      <MemberSignature Language="F#" Value="abstract member RowSize : PdfKit.PdfPage -&gt; CoreGraphics.CGSize&#xA;override this.RowSize : PdfKit.PdfPage -&gt; CoreGraphics.CGSize" Usage="pdfView.RowSize page" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("rowSizeForPage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="PdfKit.PdfPage" />
      </Parameters>
      <Docs>
        <param name="page">The page for which to get the row size.</param>
        <summary>Returns the display size of a row on the specified <pararamref name="page" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleChangedNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ScaleChangedNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ScaleChangedNotification" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.ScaleChangedNotification" />
      <MemberSignature Language="F#" Value="member this.ScaleChangedNotification : Foundation.NSString" Usage="PdfKit.PdfView.ScaleChangedNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use PdfView.Notifications.ObserveScaleChanged helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("PDFViewScaleChangedNotification", "PDFKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for ScaleChanged</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification, also developers can use the strongly typed notification <see cref="M:PdfKit.PdfView.Notifications.ObserveScaleChanged*" /> instead.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        PdfView.ScaleChangedNotification, (notification) => {Console.WriteLine ("Received the notification PdfView", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification PdfView", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (PdfView.ScaleChangedNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleFactor">
      <MemberSignature Language="C#" Value="public virtual nfloat ScaleFactor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat ScaleFactor" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.ScaleFactor" />
      <MemberSignature Language="F#" Value="member this.ScaleFactor : nfloat with get, set" Usage="PdfKit.PdfView.ScaleFactor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("scaleFactor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setScaleFactor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the view scale factor.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleFactorForSizeToFit">
      <MemberSignature Language="C#" Value="public virtual nfloat ScaleFactorForSizeToFit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat ScaleFactorForSizeToFit" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.ScaleFactorForSizeToFit" />
      <MemberSignature Language="F#" Value="member this.ScaleFactorForSizeToFit : nfloat" Usage="PdfKit.PdfView.ScaleFactorForSizeToFit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("scaleFactorForSizeToFit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the scale factor that would fit the current PDF page(s) in the view.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollSelectionToVisible">
      <MemberSignature Language="C#" Value="public virtual void ScrollSelectionToVisible (Foundation.NSObject sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScrollSelectionToVisible(class Foundation.NSObject sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.ScrollSelectionToVisible(Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member ScrollSelectionToVisible : Foundation.NSObject -&gt; unit&#xA;override this.ScrollSelectionToVisible : Foundation.NSObject -&gt; unit" Usage="pdfView.ScrollSelectionToVisible sender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("scrollSelectionToVisible:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="sender">The object that requested the operation.</param>
        <summary>Scrolls the current selection into view.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectAll">
      <MemberSignature Language="C#" Value="public virtual void SelectAll (Foundation.NSObject sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SelectAll(class Foundation.NSObject sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.SelectAll(Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="override this.SelectAll : Foundation.NSObject -&gt; unit" Usage="pdfView.SelectAll sender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("selectAll:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="sender">
          <para>The object that requested the operation.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Selects all the text.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionChangedNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString SelectionChangedNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString SelectionChangedNotification" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.SelectionChangedNotification" />
      <MemberSignature Language="F#" Value="member this.SelectionChangedNotification : Foundation.NSString" Usage="PdfKit.PdfView.SelectionChangedNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use PdfView.Notifications.ObserveSelectionChanged helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("PDFViewSelectionChangedNotification", "PDFKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for SelectionChanged</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification, also developers can use the strongly typed notification <see cref="M:PdfKit.PdfView.Notifications.ObserveSelectionChanged*" /> instead.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        PdfView.SelectionChangedNotification, (notification) => {Console.WriteLine ("Received the notification PdfView", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification PdfView", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (PdfView.SelectionChangedNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCurrentSelection">
      <MemberSignature Language="C#" Value="public virtual void SetCurrentSelection (PdfKit.PdfSelection selection, bool animate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCurrentSelection(class PdfKit.PdfSelection selection, bool animate) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.SetCurrentSelection(PdfKit.PdfSelection,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetCurrentSelection : PdfKit.PdfSelection * bool -&gt; unit&#xA;override this.SetCurrentSelection : PdfKit.PdfSelection * bool -&gt; unit" Usage="pdfView.SetCurrentSelection (selection, animate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setCurrentSelection:animate:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selection" Type="PdfKit.PdfSelection" />
        <Parameter Name="animate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="selection">The selection to make current.</param>
        <param name="animate">Whether to animate the selection operation.</param>
        <summary>Sets the current selection with an optional animation.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldAntiAlias">
      <MemberSignature Language="C#" Value="public virtual bool ShouldAntiAlias { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldAntiAlias" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.ShouldAntiAlias" />
      <MemberSignature Language="F#" Value="member this.ShouldAntiAlias : bool with get, set" Usage="PdfKit.PdfView.ShouldAntiAlias" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("shouldAntiAlias")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setShouldAntiAlias:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldBegin">
      <MemberSignature Language="C#" Value="public virtual bool ShouldBegin (UIKit.UIGestureRecognizer recognizer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldBegin(class UIKit.UIGestureRecognizer recognizer) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.ShouldBegin(UIKit.UIGestureRecognizer)" />
      <MemberSignature Language="F#" Value="abstract member ShouldBegin : UIKit.UIGestureRecognizer -&gt; bool&#xA;override this.ShouldBegin : UIKit.UIGestureRecognizer -&gt; bool" Usage="pdfView.ShouldBegin recognizer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("gestureRecognizerShouldBegin:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recognizer" Type="UIKit.UIGestureRecognizer" />
      </Parameters>
      <Docs>
        <param name="recognizer">The recognizer to query.</param>
        <summary>Method that is called to find out if the specified recognizer should begin recognizing a gesture.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldBeRequiredToFailBy">
      <MemberSignature Language="C#" Value="public virtual bool ShouldBeRequiredToFailBy (UIKit.UIGestureRecognizer gestureRecognizer, UIKit.UIGestureRecognizer otherGestureRecognizer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldBeRequiredToFailBy(class UIKit.UIGestureRecognizer gestureRecognizer, class UIKit.UIGestureRecognizer otherGestureRecognizer) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.ShouldBeRequiredToFailBy(UIKit.UIGestureRecognizer,UIKit.UIGestureRecognizer)" />
      <MemberSignature Language="F#" Value="abstract member ShouldBeRequiredToFailBy : UIKit.UIGestureRecognizer * UIKit.UIGestureRecognizer -&gt; bool&#xA;override this.ShouldBeRequiredToFailBy : UIKit.UIGestureRecognizer * UIKit.UIGestureRecognizer -&gt; bool" Usage="pdfView.ShouldBeRequiredToFailBy (gestureRecognizer, otherGestureRecognizer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("gestureRecognizer:shouldBeRequiredToFailByGestureRecognizer:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gestureRecognizer" Type="UIKit.UIGestureRecognizer" />
        <Parameter Name="otherGestureRecognizer" Type="UIKit.UIGestureRecognizer" />
      </Parameters>
      <Docs>
        <param name="gestureRecognizer">The possibly dependent recognizer.</param>
        <param name="otherGestureRecognizer">The possibly controlling recognizer.</param>
        <summary>Method that is called to find out if <paramref name="gestureRecognizer" /> should fail because of <paramref name="otherGestureRecognizer" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldReceivePress">
      <MemberSignature Language="C#" Value="public virtual bool ShouldReceivePress (UIKit.UIGestureRecognizer gestureRecognizer, UIKit.UIPress press);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldReceivePress(class UIKit.UIGestureRecognizer gestureRecognizer, class UIKit.UIPress press) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.ShouldReceivePress(UIKit.UIGestureRecognizer,UIKit.UIPress)" />
      <MemberSignature Language="F#" Value="abstract member ShouldReceivePress : UIKit.UIGestureRecognizer * UIKit.UIPress -&gt; bool&#xA;override this.ShouldReceivePress : UIKit.UIGestureRecognizer * UIKit.UIPress -&gt; bool" Usage="pdfView.ShouldReceivePress (gestureRecognizer, press)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("gestureRecognizer:shouldReceivePress:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gestureRecognizer" Type="UIKit.UIGestureRecognizer" />
        <Parameter Name="press" Type="UIKit.UIPress" />
      </Parameters>
      <Docs>
        <param name="gestureRecognizer">The recognizer to query.</param>
        <param name="press">The press to check.</param>
        <summary>Method that is called to find out if the specified recognizer should receive the specified press.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldReceiveTouch">
      <MemberSignature Language="C#" Value="public virtual bool ShouldReceiveTouch (UIKit.UIGestureRecognizer recognizer, UIKit.UITouch touch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldReceiveTouch(class UIKit.UIGestureRecognizer recognizer, class UIKit.UITouch touch) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.ShouldReceiveTouch(UIKit.UIGestureRecognizer,UIKit.UITouch)" />
      <MemberSignature Language="F#" Value="abstract member ShouldReceiveTouch : UIKit.UIGestureRecognizer * UIKit.UITouch -&gt; bool&#xA;override this.ShouldReceiveTouch : UIKit.UIGestureRecognizer * UIKit.UITouch -&gt; bool" Usage="pdfView.ShouldReceiveTouch (recognizer, touch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("gestureRecognizer:shouldReceiveTouch:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recognizer" Type="UIKit.UIGestureRecognizer" />
        <Parameter Name="touch" Type="UIKit.UITouch" />
      </Parameters>
      <Docs>
        <param name="recognizer">The recognizer to query.</param>
        <param name="touch">The touch to check.</param>
        <summary>Method that is called to find out if the specified recognizer should receive the specified touch.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldRecognizeSimultaneously">
      <MemberSignature Language="C#" Value="public virtual bool ShouldRecognizeSimultaneously (UIKit.UIGestureRecognizer gestureRecognizer, UIKit.UIGestureRecognizer otherGestureRecognizer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldRecognizeSimultaneously(class UIKit.UIGestureRecognizer gestureRecognizer, class UIKit.UIGestureRecognizer otherGestureRecognizer) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.ShouldRecognizeSimultaneously(UIKit.UIGestureRecognizer,UIKit.UIGestureRecognizer)" />
      <MemberSignature Language="F#" Value="abstract member ShouldRecognizeSimultaneously : UIKit.UIGestureRecognizer * UIKit.UIGestureRecognizer -&gt; bool&#xA;override this.ShouldRecognizeSimultaneously : UIKit.UIGestureRecognizer * UIKit.UIGestureRecognizer -&gt; bool" Usage="pdfView.ShouldRecognizeSimultaneously (gestureRecognizer, otherGestureRecognizer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("gestureRecognizer:shouldRecognizeSimultaneouslyWithGestureRecognizer:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gestureRecognizer" Type="UIKit.UIGestureRecognizer" />
        <Parameter Name="otherGestureRecognizer" Type="UIKit.UIGestureRecognizer" />
      </Parameters>
      <Docs>
        <param name="gestureRecognizer">The first recognizer.</param>
        <param name="otherGestureRecognizer">The second recognizer.</param>
        <summary>Method that is called to find out if <paramref name="gestureRecognizer" /> should recognize at the same time as <paramref name="otherGestureRecognizer" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldRequireFailureOf">
      <MemberSignature Language="C#" Value="public virtual bool ShouldRequireFailureOf (UIKit.UIGestureRecognizer gestureRecognizer, UIKit.UIGestureRecognizer otherGestureRecognizer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldRequireFailureOf(class UIKit.UIGestureRecognizer gestureRecognizer, class UIKit.UIGestureRecognizer otherGestureRecognizer) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.ShouldRequireFailureOf(UIKit.UIGestureRecognizer,UIKit.UIGestureRecognizer)" />
      <MemberSignature Language="F#" Value="abstract member ShouldRequireFailureOf : UIKit.UIGestureRecognizer * UIKit.UIGestureRecognizer -&gt; bool&#xA;override this.ShouldRequireFailureOf : UIKit.UIGestureRecognizer * UIKit.UIGestureRecognizer -&gt; bool" Usage="pdfView.ShouldRequireFailureOf (gestureRecognizer, otherGestureRecognizer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("gestureRecognizer:shouldRequireFailureOfGestureRecognizer:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gestureRecognizer" Type="UIKit.UIGestureRecognizer" />
        <Parameter Name="otherGestureRecognizer" Type="UIKit.UIGestureRecognizer" />
      </Parameters>
      <Docs>
        <param name="gestureRecognizer">The possibly controlling recognizer.</param>
        <param name="otherGestureRecognizer">The possibly dependent recognizer.</param>
        <summary>Method that is called to find out if <paramref name="gestureRecognizer" /> should cause <paramref name="otherGestureRecognizer" /> to fail.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TakeBackgroundColor">
      <MemberSignature Language="C#" Value="public virtual void TakeBackgroundColor (Foundation.NSObject sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TakeBackgroundColor(class Foundation.NSObject sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.TakeBackgroundColor(Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member TakeBackgroundColor : Foundation.NSObject -&gt; unit&#xA;override this.TakeBackgroundColor : Foundation.NSObject -&gt; unit" Usage="pdfView.TakeBackgroundColor sender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("takeBackgroundColorFrom:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="sender">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TakePasswordFrom">
      <MemberSignature Language="C#" Value="public virtual void TakePasswordFrom (Foundation.NSObject sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TakePasswordFrom(class Foundation.NSObject sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.TakePasswordFrom(Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member TakePasswordFrom : Foundation.NSObject -&gt; unit&#xA;override this.TakePasswordFrom : Foundation.NSObject -&gt; unit" Usage="pdfView.TakePasswordFrom sender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("takePasswordFrom:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="sender">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsePageViewController">
      <MemberSignature Language="C#" Value="public virtual void UsePageViewController (bool enable, Foundation.NSDictionary viewOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UsePageViewController(bool enable, class Foundation.NSDictionary viewOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.UsePageViewController(System.Boolean,Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="abstract member UsePageViewController : bool * Foundation.NSDictionary -&gt; unit&#xA;override this.UsePageViewController : bool * Foundation.NSDictionary -&gt; unit" Usage="pdfView.UsePageViewController (enable, viewOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("usePageViewController:withViewOptions:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.MacOSX, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enable" Type="System.Boolean" />
        <Parameter Name="viewOptions" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="enable">To be added.</param>
        <param name="viewOptions">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisiblePages">
      <MemberSignature Language="C#" Value="public virtual PdfKit.PdfPage[] VisiblePages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class PdfKit.PdfPage[] VisiblePages" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.VisiblePages" />
      <MemberSignature Language="F#" Value="member this.VisiblePages : PdfKit.PdfPage[]" Usage="PdfKit.PdfView.VisiblePages" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("visiblePages")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>PdfKit.PdfPage[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the currently visible pages.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisiblePagesChangedNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString VisiblePagesChangedNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString VisiblePagesChangedNotification" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.VisiblePagesChangedNotification" />
      <MemberSignature Language="F#" Value="member this.VisiblePagesChangedNotification : Foundation.NSString" Usage="PdfKit.PdfView.VisiblePagesChangedNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use PdfView.Notifications.ObserveVisiblePagesChanged helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("PDFViewVisiblePagesChangedNotification", "PDFKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for VisiblePagesChanged</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification, also developers can use the strongly typed notification <see cref="M:PdfKit.PdfView.Notifications.ObserveVisiblePagesChanged*" /> instead.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        PdfView.VisiblePagesChangedNotification, (notification) => {Console.WriteLine ("Received the notification PdfView", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification PdfView", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (PdfView.VisiblePagesChangedNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakDelegate" />
      <MemberSignature Language="DocId" Value="P:PdfKit.PdfView.WeakDelegate" />
      <MemberSignature Language="F#" Value="member this.WeakDelegate : Foundation.NSObject with get, set" Usage="PdfKit.PdfView.WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("delegate")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setDelegate:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("delegate", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDelegate:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for this type</summary>
        <value>The instance that will respond to events and data requests.</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>   Methods must be decorated with the [Export ("selectorName")] attribute to respond to each method from the protocol.   Alternatively use the Delegate method which is strongly typed and does not require the [Export] attributes on methods.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WillClickOnLink">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;PdfKit.PdfViewUrlEventArgs&gt; WillClickOnLink;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class PdfKit.PdfViewUrlEventArgs&gt; WillClickOnLink" />
      <MemberSignature Language="DocId" Value="E:PdfKit.PdfView.WillClickOnLink" />
      <MemberSignature Language="F#" Value="member this.WillClickOnLink : EventHandler&lt;PdfKit.PdfViewUrlEventArgs&gt; " Usage="member this.WillClickOnLink : System.EventHandler&lt;PdfKit.PdfViewUrlEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;PdfKit.PdfViewUrlEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomIn">
      <MemberSignature Language="C#" Value="public virtual void ZoomIn (Foundation.NSObject sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ZoomIn(class Foundation.NSObject sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.ZoomIn(Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member ZoomIn : Foundation.NSObject -&gt; unit&#xA;override this.ZoomIn : Foundation.NSObject -&gt; unit" Usage="pdfView.ZoomIn sender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("zoomIn:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="sender">The object that requested the operation.</param>
        <summary>Zooms in one level.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomOut">
      <MemberSignature Language="C#" Value="public virtual void ZoomOut (Foundation.NSObject sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ZoomOut(class Foundation.NSObject sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:PdfKit.PdfView.ZoomOut(Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member ZoomOut : Foundation.NSObject -&gt; unit&#xA;override this.ZoomOut : Foundation.NSObject -&gt; unit" Usage="pdfView.ZoomOut sender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("zoomOut:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="sender">The object that requested the operation.</param>
        <summary>Zooms out one level.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
