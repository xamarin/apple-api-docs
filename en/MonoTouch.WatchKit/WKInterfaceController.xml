<Type Name="WKInterfaceController" FullName="MonoTouch.WatchKit.WKInterfaceController">
  <TypeSignature Language="C#" Value="public abstract class WKInterfaceController : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WKInterfaceController extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("WKInterfaceController", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 2, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Base class for controller objects in Watch Extension projects.</summary>
    <remarks>
      <para>
        Watch Kit Extensions extend <c>WKInterfaceController</c> to access the Watch App lifecycle. 
      </para>
      <para>When associated with a Watch App storyboard (the most common way in which a <see cref="T:WatchKit.WKInterfaceController" /> is instantiated), the <see cref="C:WatchKit.WKInterfaceController.ctor(IntPtr)" /> constructor is used. Application developers should use this and the <see cref="M:WatchKit.WKInterfaceController.Awake" /> method to do the bulk of their initialization work.
      </para>
      <para>
        Shortly before the Watch App's user interface appears to the user, the system calls the <see cref="M:WatchKit.WKInterfaceController.WillActivate" /> method. This method is also 
        called if the app has been deactivated but not terminated. Developers should use this method for last-minute initialization and to, for instance, begin animations or 
        other interface-related processes.
      </para>
      <para>
        After the Watch App has been dismissed by the user, the system calls the <see cref="M:WatchKit.WKInterfaceController.DidDeactivate" /> method. After this method exits, 
        the Watch Extension may perform no further processing. Pending asynchronous methods will not run. Watch Extension's may not use background processing modes. App 
        devs who need to process data while the Watch Extension is deactivated must use the parent app to do so, communicating, as necessary, by using the <see cref="M:WatchKit.WKInterfaceController.OpenParentApplication" /> and <see cref="M:UIKit.UIApplicationDelegate.HandleWatchKitExtensionRequest" /> methods.
      </para>
      <para>
        <img href="WatchKit.WKInterfaceControllerLifecycle.png" />
      </para>
    </remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/WatchKit/Reference/WKInterfaceController_class/index.html">Apple documentation for <c>WKInterfaceController</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WKInterfaceController ();" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected WKInterfaceController ();" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public WKInterfaceController (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WKInterfaceController (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected WKInterfaceController (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WKInterfaceController (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected WKInterfaceController (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" apistyle="classic" />
        <Parameter Name="t" Type="Foundation.NSObjectFlag" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMenuItem">
      <MemberSignature Language="C#" Value="public virtual void AddMenuItem (MonoTouch.UIKit.UIImage image, string title, MonoTouch.ObjCRuntime.Selector action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddMenuItem(class MonoTouch.UIKit.UIImage image, string title, class MonoTouch.ObjCRuntime.Selector action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addMenuItemWithImage:title:action:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.UIKit.UIImage" />
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="action" Type="MonoTouch.ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="title">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMenuItem">
      <MemberSignature Language="C#" Value="public void AddMenuItem (MonoTouch.UIKit.UIImage image, string title, Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddMenuItem(class MonoTouch.UIKit.UIImage image, string title, class System.Action action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.UIKit.UIImage" />
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="title">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMenuItem">
      <MemberSignature Language="C#" Value="public virtual void AddMenuItem (MonoTouch.WatchKit.WKMenuItemIcon itemIcon, string title, MonoTouch.ObjCRuntime.Selector action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddMenuItem(valuetype MonoTouch.WatchKit.WKMenuItemIcon itemIcon, string title, class MonoTouch.ObjCRuntime.Selector action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addMenuItemWithItemIcon:title:action:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIcon" Type="MonoTouch.WatchKit.WKMenuItemIcon" />
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="action" Type="MonoTouch.ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="itemIcon">To be added.</param>
        <param name="title">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMenuItem">
      <MemberSignature Language="C#" Value="public void AddMenuItem (MonoTouch.WatchKit.WKMenuItemIcon itemIcon, string title, Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddMenuItem(valuetype MonoTouch.WatchKit.WKMenuItemIcon itemIcon, string title, class System.Action action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIcon" Type="MonoTouch.WatchKit.WKMenuItemIcon" />
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="itemIcon">To be added.</param>
        <param name="title">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMenuItem">
      <MemberSignature Language="C#" Value="public virtual void AddMenuItem (string imageName, string title, MonoTouch.ObjCRuntime.Selector action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddMenuItem(string imageName, string title, class MonoTouch.ObjCRuntime.Selector action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addMenuItemWithImageNamed:title:action:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageName" Type="System.String" />
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="action" Type="MonoTouch.ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="imageName">To be added.</param>
        <param name="title">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMenuItem">
      <MemberSignature Language="C#" Value="public void AddMenuItem (string imageName, string title, Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddMenuItem(string imageName, string title, class System.Action action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageName" Type="System.String" />
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="imageName">To be added.</param>
        <param name="title">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Awake">
      <MemberSignature Language="C#" Value="public virtual void Awake (MonoTouch.Foundation.NSObject context);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Awake(class MonoTouch.Foundation.NSObject context) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual void Awake (Foundation.NSObject context);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Awake(class Foundation.NSObject context) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("awakeWithContext:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="MonoTouch.Foundation.NSObject" apistyle="classic" />
        <Parameter Name="context" Type="Foundation.NSObject" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="context">Arbitrary data (set by presenting <see cref="T:WatchKit.WKInterfaceController" />). May be <see langword="null" />.<para tool="nullallowed">This parameter can be <see langword="null" />.</para></param>
        <summary>Main initialization method.</summary>
        <remarks>
          <para>The <paramref name="context" /> may contain data from a 
            previous <see cref="T:WatchKit.WKInterfaceController" />, and is passed by the <see cref="M:WatchKit.WKInterfaceController.PresentController" /> method.</para>
          <para>Most initialization should be done in this method rather than <see cref="M:WKInterfaceController.WillActivate" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BecomeCurrentPage">
      <MemberSignature Language="C#" Value="public virtual void BecomeCurrentPage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BecomeCurrentPage() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("becomeCurrentPage")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.ThreadSafe(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>In a page-based UI, makes <c>this</c> the active controller.</summary>
        <remarks>
          <para>
            This method must be called from the Watch Kit Extension's main thread. (See <see cref="M:MonoTouch.Foundation.NSObject.InvokeOnMainThread" /> and <see cref="M:MonoTouch.Foundation.NSObject.BeginInvokeOnMainThread" />)
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearAllMenuItems">
      <MemberSignature Language="C#" Value="public virtual void ClearAllMenuItems ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearAllMenuItems() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("clearAllMenuItems")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes programmatically-added items from the context menu.</summary>
        <remarks>
          <para>This method does not remove menu items specified in the Watch App's storyboard. It only removes items added with <see cref="M:WatchKit.WKInterfaceController.AddMenuItem" /> method calls.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentFrame">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.RectangleF ContentFrame { get; }" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF ContentFrame" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGRect ContentFrame { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreGraphics.CGRect ContentFrame" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("contentFrame")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The rectangle in which content is displayed. Measured in points.</summary>
        <value> Measured in points.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidDeactivate">
      <MemberSignature Language="C#" Value="public virtual void DidDeactivate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidDeactivate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("didDeactivate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called after the Watch App has been dismissed by the user.</summary>
        <remarks>
          <para>After this method has completed, the Watch Extension will be deactivated and potentially terminated. No pending asynchronous functions will execute.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidSelectRow">
      <MemberSignature Language="C#" Value="public virtual void DidSelectRow (MonoTouch.WatchKit.WKInterfaceTable table, int rowIndex);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidSelectRow(class MonoTouch.WatchKit.WKInterfaceTable table, int32 rowIndex) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual void DidSelectRow (MonoTouch.WatchKit.WKInterfaceTable table, nint rowIndex);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidSelectRow(class MonoTouch.WatchKit.WKInterfaceTable table, valuetype System.nint rowIndex) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("table:didSelectRowAtIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="MonoTouch.WatchKit.WKInterfaceTable" apistyle="classic" />
        <Parameter Name="table" Type="WatchKit.WKInterfaceTable" apistyle="unified" />
        <Parameter Name="rowIndex" Type="System.Int32" apistyle="classic" />
        <Parameter Name="rowIndex" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="table">The table in which the selection occurred.</param>
        <param name="rowIndex">The index of the selected row.</param>
        <summary>Called when the user has selected a row in the <paramref name="table" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DismissController">
      <MemberSignature Language="C#" Value="public virtual void DismissController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DismissController() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("dismissController")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.ThreadSafe(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Dismisses a modally-presented <see cref="T:WatchKit.WKInterfaceController" />.</summary>
        <remarks>
          <para>
            This method must be called from the Watch Kit Extension's main thread. (See <see cref="M:MonoTouch.Foundation.NSObject.InvokeOnMainThread" /> and <see cref="M:MonoTouch.Foundation.NSObject.BeginInvokeOnMainThread" />)
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DismissTextInputController">
      <MemberSignature Language="C#" Value="public virtual void DismissTextInputController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DismissTextInputController() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("dismissTextInputController")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancels text input and dismisses the text input controller.</summary>
        <remarks>
          <para>Calling this method cancels text input and prevents the completion handler specified in <see cref="M:WatchKit.WKInterfaceController.PresentTextInputController" /> from running.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorDomain">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString ErrorDomain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString ErrorDomain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("WatchKitErrorDomain", "WatchKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Defines the Watch Kit error domain.</summary>
        <value>To be added.</value>
        <remarks>
          <para>See <see cref="P:MonoTouch.Foundation.NSErrorException.Domain" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContextForSegue">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject GetContextForSegue (string segueIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject GetContextForSegue(string segueIdentifier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("contextForSegueWithIdentifier:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segueIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="segueIdentifier">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContextForSegue">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject GetContextForSegue (string segueIdentifier, MonoTouch.WatchKit.WKInterfaceTable table, int rowIndex);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject GetContextForSegue(string segueIdentifier, class MonoTouch.WatchKit.WKInterfaceTable table, int32 rowIndex) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject GetContextForSegue (string segueIdentifier, MonoTouch.WatchKit.WKInterfaceTable table, nint rowIndex);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject GetContextForSegue(string segueIdentifier, class MonoTouch.WatchKit.WKInterfaceTable table, valuetype System.nint rowIndex) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("contextForSegueWithIdentifier:inTable:rowIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segueIdentifier" Type="System.String" />
        <Parameter Name="table" Type="MonoTouch.WatchKit.WKInterfaceTable" />
        <Parameter Name="rowIndex" Type="System.Int32" apistyle="classic" />
        <Parameter Name="rowIndex" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="segueIdentifier">To be added.</param>
        <param name="table">To be added.</param>
        <param name="rowIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContextsForSegue">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject[] GetContextsForSegue (string segueIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject[] GetContextsForSegue(string segueIdentifier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("contextsForSegueWithIdentifier:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segueIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="segueIdentifier">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContextsForSegue">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject[] GetContextsForSegue (string segueIdentifier, MonoTouch.WatchKit.WKInterfaceTable table, int rowIndex);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject[] GetContextsForSegue(string segueIdentifier, class MonoTouch.WatchKit.WKInterfaceTable table, int32 rowIndex) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject[] GetContextsForSegue (string segueIdentifier, MonoTouch.WatchKit.WKInterfaceTable table, nint rowIndex);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject[] GetContextsForSegue(string segueIdentifier, class MonoTouch.WatchKit.WKInterfaceTable table, valuetype System.nint rowIndex) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("contextsForSegueWithIdentifier:inTable:rowIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segueIdentifier" Type="System.String" />
        <Parameter Name="table" Type="MonoTouch.WatchKit.WKInterfaceTable" />
        <Parameter Name="rowIndex" Type="System.Int32" apistyle="classic" />
        <Parameter Name="rowIndex" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="segueIdentifier">To be added.</param>
        <param name="table">To be added.</param>
        <param name="rowIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleAction">
      <MemberSignature Language="C#" Value="public virtual void HandleAction (string identifier, MonoTouch.UserNotifications.UNNotification notification);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HandleAction(string identifier, class MonoTouch.UserNotifications.UNNotification notification) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("handleActionWithIdentifier:forNotification:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Unavailable(MonoTouch.ObjCRuntime.PlatformName.WatchOS, MonoTouch.ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="notification" Type="MonoTouch.UserNotifications.UNNotification" />
      </Parameters>
      <Docs>
        <param name="identifier">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="notification">To be added.</param>
        <summary>Method that is called to deliver notification payloads and actions to the interface controller.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleLocalNotificationAction">
      <MemberSignature Language="C#" Value="public virtual void HandleLocalNotificationAction (string identifier, MonoTouch.UIKit.UILocalNotification localNotification);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HandleLocalNotificationAction(string identifier, class MonoTouch.UIKit.UILocalNotification localNotification) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("handleActionWithIdentifier:forLocalNotification:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Deprecated(MonoTouch.ObjCRuntime.PlatformName.iOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, "Use UNUserNotificationCenterDelegate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Deprecated(MonoTouch.ObjCRuntime.PlatformName.WatchOS, 3, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, "Use UNUserNotificationCenterDelegate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="localNotification" Type="MonoTouch.UIKit.UILocalNotification" />
      </Parameters>
      <Docs>
        <param name="identifier">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="localNotification">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleRemoteNotificationAction">
      <MemberSignature Language="C#" Value="public virtual void HandleRemoteNotificationAction (string identifier, MonoTouch.Foundation.NSDictionary remoteNotification);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HandleRemoteNotificationAction(string identifier, class MonoTouch.Foundation.NSDictionary remoteNotification) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual void HandleRemoteNotificationAction (string identifier, Foundation.NSDictionary remoteNotification);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HandleRemoteNotificationAction(string identifier, class Foundation.NSDictionary remoteNotification) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("handleActionWithIdentifier:forRemoteNotification:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Deprecated(MonoTouch.ObjCRuntime.PlatformName.iOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, "Use UNUserNotificationCenterDelegate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Deprecated(MonoTouch.ObjCRuntime.PlatformName.WatchOS, 3, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, "Use UNUserNotificationCenterDelegate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="remoteNotification" Type="MonoTouch.Foundation.NSDictionary" apistyle="classic" />
        <Parameter Name="remoteNotification" Type="Foundation.NSDictionary" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="identifier">
          <para>The action chosen by the user, or an empty string if the user launched the app without using an action button.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="remoteNotification">The notification.</param>
        <summary>Called on the Watch App's initial <see cref="T:WatchKit.WKInterfaceController" /> when the user reacts to a remote notification.</summary>
        <remarks>
          <para>This method is called on the <see cref="T:WatchKit.WKInterfaceController" /> that is the initial one in the Watch App storyboard, not the <see cref="T:WatchKit.WKInterfaceController" /> that displays notifications.</para>
          <para>This method is called on the Watch Extension's main thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleUserActivity">
      <MemberSignature Language="C#" Value="public virtual void HandleUserActivity (MonoTouch.Foundation.NSDictionary userActivity);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HandleUserActivity(class MonoTouch.Foundation.NSDictionary userActivity) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual void HandleUserActivity (Foundation.NSDictionary userActivity);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HandleUserActivity(class Foundation.NSDictionary userActivity) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("handleUserActivity:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userActivity" Type="MonoTouch.Foundation.NSDictionary" apistyle="classic" />
        <Parameter Name="userActivity" Type="Foundation.NSDictionary" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="userActivity">A dictionary containing information about the user activity. Set by a Glance controller calling <see cref="M:WatchKit.WKInterfaceController.UpdateUserActivity" />.<para tool="nullallowed">This parameter can be <see langword="null" />.</para></param>
        <summary>Indicates that the Watch App was launched as a result of a Handoff action.</summary>
        <remarks>
          <para>If needed, this method should be overridden in the Watch App's initial <see cref="T:WatchKit.WKInterfaceController" />. If the Watch App uses a page-based interface, this method will be called on each <see cref="T:WatchKit.WKInterfaceController" /> in the initial interface.</para>
          <para>Application developers who override this method should not call the base implementation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateUserActivity">
      <MemberSignature Language="C#" Value="public virtual void InvalidateUserActivity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateUserActivity() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("invalidateUserActivity")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalidates the most recent user activity.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenParentApplication">
      <MemberSignature Language="C#" Value="public static bool OpenParentApplication (MonoTouch.Foundation.NSDictionary userInfo, Action&lt;MonoTouch.Foundation.NSDictionary,MonoTouch.Foundation.NSError&gt; reply);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool OpenParentApplication(class MonoTouch.Foundation.NSDictionary userInfo, class System.Action`2&lt;class MonoTouch.Foundation.NSDictionary, class MonoTouch.Foundation.NSError&gt; reply) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("openParentApplication:reply:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Unavailable(MonoTouch.ObjCRuntime.PlatformName.WatchOS, MonoTouch.ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userInfo" Type="MonoTouch.Foundation.NSDictionary" />
        <Parameter Name="reply" Type="System.Action&lt;MonoTouch.Foundation.NSDictionary,MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity2V40))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="userInfo">To be added.</param>
        <param name="reply">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopController">
      <MemberSignature Language="C#" Value="public virtual void PopController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PopController() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("popController")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.ThreadSafe(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>In a navigation interface, pops the current <see cref="T:WatchKit.WKInterfaceController" />.</summary>
        <remarks>
          <para>
            This method must be called from the Watch Kit Extension's main thread. (See <see cref="M:MonoTouch.Foundation.NSObject.InvokeOnMainThread" /> and <see cref="M:MonoTouch.Foundation.NSObject.BeginInvokeOnMainThread" />)
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PopToRootController">
      <MemberSignature Language="C#" Value="public virtual void PopToRootController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PopToRootController() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("popToRootController")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.ThreadSafe(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>In a navigation interface, pops all <see cref="T:WatchKit.WKInterfaceController" /> except the root.</summary>
        <remarks>
          <para>
            This method must be called from the Watch Kit Extension's main thread. (See <see cref="M:MonoTouch.Foundation.NSObject.InvokeOnMainThread" /> and <see cref="M:MonoTouch.Foundation.NSObject.BeginInvokeOnMainThread" />)
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentController">
      <MemberSignature Language="C#" Value="public void PresentController (string name, string context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PresentController(string name, string context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">In the Storyboard, the value of the Identifier for the <see cref="T:WatchKit.WKInterfaceController" /> to be presented.</param>
        <param name="context">Information for the <see cref="T:WatchKit.WKInterfaceController" /> to be presented. May be <see langword="null" />.</param>
        <summary>Modally presents a <see cref="T:WatchKit.WKInterfaceController" />.</summary>
        <remarks>
          <para>
            This method must be called from the Watch Kit Extension's main thread. (See <see cref="M:MonoTouch.Foundation.NSObject.InvokeOnMainThread" /> and <see cref="M:MonoTouch.Foundation.NSObject.BeginInvokeOnMainThread" />)
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentController">
      <MemberSignature Language="C#" Value="public void PresentController (string[] names, string[] contexts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PresentController(string[] names, string[] contexts) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.String[]" />
        <Parameter Name="contexts" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="names">In the Storyboard, the values of the Identifier for the <see cref="T:WatchKit.WKInterfaceController" /> objects to be presented.</param>
        <param name="contexts">Information for the <see cref="T:WatchKit.WKInterfaceController" />s to be presented. May be <see langword="null" />.</param>
        <summary>Modally presents a page-based UI with the specified <see cref="T:WatchKit.WKInterfaceController" />s.</summary>
        <remarks>
          <para>The Title of the presented page-based UI will be "Cancel" unless the app dev changes it with <see cref="M:WatchKit.WKInterfaceController.SetTitle" />.</para>
          <para>
            This method must be called from the Watch Kit Extension's main thread. (See <see cref="M:MonoTouch.Foundation.NSObject.InvokeOnMainThread" /> and <see cref="M:MonoTouch.Foundation.NSObject.BeginInvokeOnMainThread" />)
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentController">
      <MemberSignature Language="C#" Value="public virtual void PresentController (string name, MonoTouch.Foundation.NSObject context);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PresentController(string name, class MonoTouch.Foundation.NSObject context) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual void PresentController (string name, Foundation.NSObject context);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PresentController(string name, class Foundation.NSObject context) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("presentControllerWithName:context:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.ThreadSafe(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="MonoTouch.Foundation.NSObject" apistyle="classic" />
        <Parameter Name="context" Type="Foundation.NSObject" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="name">In the Storyboard, the value of the Identifier for the <see cref="T:WatchKit.WKInterfaceController" /> to be presented.</param>
        <param name="context">Information for the <see cref="T:WatchKit.WKInterfaceController" /> to be presented. May be <see langword="null" />.<para tool="nullallowed">This parameter can be <see langword="null" />.</para></param>
        <summary>Modally presents a <see cref="T:WatchKit.WKInterfaceController" />.</summary>
        <remarks>
          <para>
            This method must be called from the Watch Kit Extension's main thread. (See <see cref="M:MonoTouch.Foundation.NSObject.InvokeOnMainThread" /> and <see cref="M:MonoTouch.Foundation.NSObject.BeginInvokeOnMainThread" />)
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentController">
      <MemberSignature Language="C#" Value="public virtual void PresentController (string[] names, MonoTouch.Foundation.NSObject[] contexts);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PresentController(string[] names, class MonoTouch.Foundation.NSObject[] contexts) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual void PresentController (string[] names, Foundation.NSObject[] contexts);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PresentController(string[] names, class Foundation.NSObject[] contexts) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("presentControllerWithNames:contexts:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.ThreadSafe(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.String[]" />
        <Parameter Name="contexts" Type="MonoTouch.Foundation.NSObject[]" apistyle="classic" />
        <Parameter Name="contexts" Type="Foundation.NSObject[]" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="names">In the Storyboard, the values of the Identifier for the <see cref="T:WatchKit.WKInterfaceController" /> objects to be presented.</param>
        <param name="contexts">Information for the <see cref="T:WatchKit.WKInterfaceController" />s to be presented. May be <see langword="null" />.<para tool="nullallowed">This parameter can be <see langword="null" />.</para></param>
        <summary>Modally presents a page-based UI with the specified <see cref="T:WatchKit.WKInterfaceController" />s.</summary>
        <remarks>
          <para>The Title of the presented page-based UI will be "Cancel" unless the app dev changes it with <see cref="M:WatchKit.WKInterfaceController.SetTitle" />.</para>
          <para>
            This method must be called from the Watch Kit Extension's main thread. (See <see cref="M:MonoTouch.Foundation.NSObject.InvokeOnMainThread" /> and <see cref="M:MonoTouch.Foundation.NSObject.BeginInvokeOnMainThread" />)
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentTextInputController">
      <MemberSignature Language="C#" Value="public virtual void PresentTextInputController (Func&lt;MonoTouch.Foundation.NSString,MonoTouch.Foundation.NSArray&gt; suggestionsHandler, MonoTouch.WatchKit.WKTextInputMode inputMode, Action&lt;MonoTouch.Foundation.NSArray&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PresentTextInputController(class System.Func`2&lt;class MonoTouch.Foundation.NSString, class MonoTouch.Foundation.NSArray&gt; suggestionsHandler, valuetype MonoTouch.WatchKit.WKTextInputMode inputMode, class System.Action`1&lt;class MonoTouch.Foundation.NSArray&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("presentTextInputControllerWithSuggestionsForLanguage:allowedInputMode:completion:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="suggestionsHandler" Type="System.Func&lt;MonoTouch.Foundation.NSString,MonoTouch.Foundation.NSArray&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDFuncArity2V3))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="inputMode" Type="MonoTouch.WatchKit.WKTextInputMode" />
        <Parameter Name="completion" Type="System.Action&lt;MonoTouch.Foundation.NSArray&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity1V33))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="suggestionsHandler">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="inputMode">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentTextInputController">
      <MemberSignature Language="C#" Value="public virtual void PresentTextInputController (string[] suggestions, MonoTouch.WatchKit.WKTextInputMode inputMode, Action&lt;MonoTouch.Foundation.NSArray&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PresentTextInputController(string[] suggestions, valuetype MonoTouch.WatchKit.WKTextInputMode inputMode, class System.Action`1&lt;class MonoTouch.Foundation.NSArray&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("presentTextInputControllerWithSuggestions:allowedInputMode:completion:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.ThreadSafe(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="suggestions" Type="System.String[]" />
        <Parameter Name="inputMode" Type="MonoTouch.WatchKit.WKTextInputMode" />
        <Parameter Name="completion" Type="System.Action&lt;MonoTouch.Foundation.NSArray&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity1V35))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="suggestions">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="inputMode">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PushController">
      <MemberSignature Language="C#" Value="public void PushController (string name, string context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PushController(string name, string context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PushController">
      <MemberSignature Language="C#" Value="public virtual void PushController (string name, MonoTouch.Foundation.NSObject context);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PushController(string name, class MonoTouch.Foundation.NSObject context) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual void PushController (string name, Foundation.NSObject context);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PushController(string name, class Foundation.NSObject context) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("pushControllerWithName:context:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.ThreadSafe(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="context" Type="MonoTouch.Foundation.NSObject" apistyle="classic" />
        <Parameter Name="context" Type="Foundation.NSObject" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="name">In the Storyboard, the value of the Identifier for the <see cref="T:WatchKit.WKInterfaceController" /> to be displayed.</param>
        <param name="context">Information for the <see cref="T:WatchKit.WKInterfaceController" /> being displayed. May be <see langword="null" />.<para tool="nullallowed">This parameter can be <see langword="null" />.</para></param>
        <summary>In a navigation interface, initializes and displays a new <see cref="T:WatchKit.WKInterfaceController" />.</summary>
        <remarks>
          <para>
            This method must be called from the Watch Kit Extension's main thread. (See <see cref="M:MonoTouch.Foundation.NSObject.InvokeOnMainThread" /> and <see cref="M:MonoTouch.Foundation.NSObject.BeginInvokeOnMainThread" />)
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReloadRootControllers">
      <MemberSignature Language="C#" Value="public static void ReloadRootControllers (string[] names, MonoTouch.Foundation.NSObject[] contexts);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReloadRootControllers(string[] names, class MonoTouch.Foundation.NSObject[] contexts) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static void ReloadRootControllers (string[] names, Foundation.NSObject[] contexts);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReloadRootControllers(string[] names, class Foundation.NSObject[] contexts) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("reloadRootControllersWithNames:contexts:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.String[]" />
        <Parameter Name="contexts" Type="MonoTouch.Foundation.NSObject[]" apistyle="classic" />
        <Parameter Name="contexts" Type="Foundation.NSObject[]" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="names">In the Storyboard, the Identifiers of the <see cref="T:WatchKit.WKInterfaceController" />s.</param>
        <param name="contexts">Information for the <see cref="T:WatchKit.WKInterfaceController" />s being loaded. May be <see langword="null" />.<para tool="nullallowed">This parameter can be <see langword="null" />.</para></param>
        <summary>In a page-based UI, reloads the set of <see cref="T:WatchKit.WKInterfaceController" />s displayed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTitle">
      <MemberSignature Language="C#" Value="public virtual void SetTitle (string title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTitle(string title) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setTitle:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="title">
          <para>The new title.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Sets the title for the interface.</summary>
        <remarks>
          <para>If the Extension contains a <c>Localizable.string</c> file, the <paramref name="title" /> parameter will be used as the key to lookup the value displayed.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateUserActivity">
      <MemberSignature Language="C#" Value="public virtual void UpdateUserActivity (string type, MonoTouch.Foundation.NSDictionary userInfo, MonoTouch.Foundation.NSUrl webpageURL);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateUserActivity(string type, class MonoTouch.Foundation.NSDictionary userInfo, class MonoTouch.Foundation.NSUrl webpageURL) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual void UpdateUserActivity (string type, Foundation.NSDictionary userInfo, Foundation.NSUrl webpageURL);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateUserActivity(string type, class Foundation.NSDictionary userInfo, class Foundation.NSUrl webpageURL) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("updateUserActivity:userInfo:webpageURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.String" />
        <Parameter Name="userInfo" Type="MonoTouch.Foundation.NSDictionary" apistyle="classic" />
        <Parameter Name="webpageURL" Type="MonoTouch.Foundation.NSUrl" apistyle="classic" />
        <Parameter Name="userInfo" Type="Foundation.NSDictionary" apistyle="unified" />
        <Parameter Name="webpageURL" Type="Foundation.NSUrl" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="type">The type of activity to be continued. May not be <see langword="null" /> or empty.</param>
        <param name="userInfo">
          <para>App-specific state information necessary to continue the activity on another device.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="webpageURL">
          <para>An http: or https: URL specifying the page to load in a browser to continue the activity.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Publishes information about the current activity for Handoff. At least one of <paramref name="userInfo" /> or <paramref name="webpageURL" /> must be set.</summary>
        <remarks>
          <para>Application developers can use this method to activate Handoff on a connected device or computer. The <paramref name="type" /> is the activity identifier and must have a corresponding entry in the handling app's <c>info.plist</c> file as part of the <c>NSUserActivityTypes</c> array. By convention, the <paramref name="type" /> starts with a domain-reversed string indicating the originating company, for example, <c>com.xamarin.SomeApp.SomeVerb</c>.</para>
          <para>Either the <paramref name="userInfo" /> or the <paramref name="webpageURL" /> must be non-<see langword="null" />. The <paramref name="webpageURL" /> is intended for situations where a browser-based continuation of the activity is appropriate. The <paramref name="userInfo" /> is used for device-based continuations. The <paramref name="userInfo" /> can contain arbitrary key-value data to provide context to the handling application.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WillActivate">
      <MemberSignature Language="C#" Value="public virtual void WillActivate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillActivate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>monotouch</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("willActivate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called shortly before the <see cref="T:WatchKit.WKInterfaceController" /> appears to the user.</summary>
        <remarks>
          <para>This method is called shortly before the <see cref="T:WatchKit.WKInterfaceController" /> appears and when the <see cref="T:WatchKit.WKInterfaceController" /> is re-activated without having been terminated.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
