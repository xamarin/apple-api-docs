<Type Name="VSAccountManager" FullName="VideoSubscriberAccount.VSAccountManager">
  <TypeSignature Language="C#" Value="public class VSAccountManager : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VSAccountManager extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:VideoSubscriberAccount.VSAccountManager" />
  <TypeSignature Language="F#" Value="type VSAccountManager = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("VSAccountManager", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 14, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Coordinates access to the user's subscription.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/reference/VideoSubscriberAccount/VSAccountManager">Apple documentation for <c>VSAccountManager</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VSAccountManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:VideoSubscriberAccount.VSAccountManager.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VSAccountManager (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:VideoSubscriberAccount.VSAccountManager.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new VideoSubscriberAccount.VSAccountManager : Foundation.NSObjectFlag -&gt; VideoSubscriberAccount.VSAccountManager" Usage="new VideoSubscriberAccount.VSAccountManager t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal VSAccountManager (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:VideoSubscriberAccount.VSAccountManager.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new VideoSubscriberAccount.VSAccountManager : nativeint -&gt; VideoSubscriberAccount.VSAccountManager" Usage="new VideoSubscriberAccount.VSAccountManager handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccessStatus">
      <MemberSignature Language="C#" Value="public virtual void CheckAccessStatus (Foundation.NSDictionary options, Action&lt;VideoSubscriberAccount.VSAccountAccessStatus,Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CheckAccessStatus(class Foundation.NSDictionary options, class System.Action`2&lt;valuetype VideoSubscriberAccount.VSAccountAccessStatus, class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:VideoSubscriberAccount.VSAccountManager.CheckAccessStatus(Foundation.NSDictionary,System.Action{VideoSubscriberAccount.VSAccountAccessStatus,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member CheckAccessStatus : Foundation.NSDictionary * Action&lt;VideoSubscriberAccount.VSAccountAccessStatus, Foundation.NSError&gt; -&gt; unit&#xA;override this.CheckAccessStatus : Foundation.NSDictionary * Action&lt;VideoSubscriberAccount.VSAccountAccessStatus, Foundation.NSError&gt; -&gt; unit" Usage="vSAccountManager.CheckAccessStatus (options, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("checkAccessStatusWithOptions:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.MacOSX, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Foundation.NSDictionary" />
        <Parameter Name="completionHandler" Type="System.Action&lt;VideoSubscriberAccount.VSAccountAccessStatus,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V72))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">If not empty, may contain the key <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=Video%20Subscriber%20Account%20VSCheck%20Access%20Option%20Keys&amp;scope=Xamarin" title="P:VideoSubscriberAccount.VSCheckAccessOptionKeys">P:VideoSubscriberAccount.VSCheckAccessOptionKeys</a></format>.</param>
        <param name="completionHandler">Called by the system with the results of the permission check.</param>
        <summary>Checks whether the user has provided permission for the app to access their subscription information.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccessStatus">
      <MemberSignature Language="C#" Value="public void CheckAccessStatus (VideoSubscriberAccount.VSAccountManagerAccessOptions accessOptions, Action&lt;VideoSubscriberAccount.VSAccountAccessStatus,Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CheckAccessStatus(class VideoSubscriberAccount.VSAccountManagerAccessOptions accessOptions, class System.Action`2&lt;valuetype VideoSubscriberAccount.VSAccountAccessStatus, class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:VideoSubscriberAccount.VSAccountManager.CheckAccessStatus(VideoSubscriberAccount.VSAccountManagerAccessOptions,System.Action{VideoSubscriberAccount.VSAccountAccessStatus,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="member this.CheckAccessStatus : VideoSubscriberAccount.VSAccountManagerAccessOptions * Action&lt;VideoSubscriberAccount.VSAccountAccessStatus, Foundation.NSError&gt; -&gt; unit" Usage="vSAccountManager.CheckAccessStatus (accessOptions, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessOptions" Type="VideoSubscriberAccount.VSAccountManagerAccessOptions" />
        <Parameter Name="completionHandler" Type="System.Action&lt;VideoSubscriberAccount.VSAccountAccessStatus,Foundation.NSError&gt;" />
      </Parameters>
      <Docs>
        <param name="accessOptions">If not empty, may contain the key <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=Video%20Subscriber%20Account%20VSCheck%20Access%20Option%20Keys&amp;scope=Xamarin" title="P:VideoSubscriberAccount.VSCheckAccessOptionKeys">P:VideoSubscriberAccount.VSCheckAccessOptionKeys</a></format>.</param>
        <param name="completionHandler">Called by the system with the results of the permission check.</param>
        <summary>Checks whether the user has provided permission for the app to access their subscription information.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccessStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;VideoSubscriberAccount.VSAccountAccessStatus&gt; CheckAccessStatusAsync (Foundation.NSDictionary options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype VideoSubscriberAccount.VSAccountAccessStatus&gt; CheckAccessStatusAsync(class Foundation.NSDictionary options) cil managed" />
      <MemberSignature Language="DocId" Value="M:VideoSubscriberAccount.VSAccountManager.CheckAccessStatusAsync(Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="abstract member CheckAccessStatusAsync : Foundation.NSDictionary -&gt; System.Threading.Tasks.Task&lt;VideoSubscriberAccount.VSAccountAccessStatus&gt;&#xA;override this.CheckAccessStatusAsync : Foundation.NSDictionary -&gt; System.Threading.Tasks.Task&lt;VideoSubscriberAccount.VSAccountAccessStatus&gt;" Usage="vSAccountManager.CheckAccessStatusAsync options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.MacOSX, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;VideoSubscriberAccount.VSAccountAccessStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="options">If not empty, may contain the key .</param>
        <summary>Checks whether the user has provided permission for the app to access their subscription information.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous CheckAccessStatus operation.  The value of the TResult parameter is of type System.Action&lt;VideoSubscriberAccount.VSAccountAccessStatus,Foundation.NSError&gt;.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccessStatusAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;VideoSubscriberAccount.VSAccountAccessStatus&gt; CheckAccessStatusAsync (VideoSubscriberAccount.VSAccountManagerAccessOptions accessOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;valuetype VideoSubscriberAccount.VSAccountAccessStatus&gt; CheckAccessStatusAsync(class VideoSubscriberAccount.VSAccountManagerAccessOptions accessOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:VideoSubscriberAccount.VSAccountManager.CheckAccessStatusAsync(VideoSubscriberAccount.VSAccountManagerAccessOptions)" />
      <MemberSignature Language="F#" Value="member this.CheckAccessStatusAsync : VideoSubscriberAccount.VSAccountManagerAccessOptions -&gt; System.Threading.Tasks.Task&lt;VideoSubscriberAccount.VSAccountAccessStatus&gt;" Usage="vSAccountManager.CheckAccessStatusAsync accessOptions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;VideoSubscriberAccount.VSAccountAccessStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessOptions" Type="VideoSubscriberAccount.VSAccountManagerAccessOptions" />
      </Parameters>
      <Docs>
        <param name="accessOptions">To be added.</param>
        <summary>Asynchronously checks whether the user has provided permission for the app to access their subscription information.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:VideoSubscriberAccount.VSAccountManager.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="VideoSubscriberAccount.VSAccountManager.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public virtual VideoSubscriberAccount.IVSAccountManagerDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class VideoSubscriberAccount.IVSAccountManagerDelegate Delegate" />
      <MemberSignature Language="DocId" Value="P:VideoSubscriberAccount.VSAccountManager.Delegate" />
      <MemberSignature Language="F#" Value="member this.Delegate : VideoSubscriberAccount.IVSAccountManagerDelegate with get, set" Usage="VideoSubscriberAccount.VSAccountManager.Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("delegate")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setDelegate:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("delegate", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDelegate:", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>VideoSubscriberAccount.IVSAccountManagerDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the VideoSubscriberAccount.IVSAccountManagerDelegate model class which acts as the class delegate.</summary>
        <value>The instance of the VideoSubscriberAccount.IVSAccountManagerDelegate model class</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:VideoSubscriberAccount.VSAccountManager.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="vSAccountManager.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the VSAccountManager object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the VSAccountManager class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the VSAccountManager ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enqueue">
      <MemberSignature Language="C#" Value="public virtual VideoSubscriberAccount.VSAccountManagerResult Enqueue (VideoSubscriberAccount.VSAccountMetadataRequest accountMetadataRequest, Action&lt;VideoSubscriberAccount.VSAccountMetadata,Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class VideoSubscriberAccount.VSAccountManagerResult Enqueue(class VideoSubscriberAccount.VSAccountMetadataRequest accountMetadataRequest, class System.Action`2&lt;class VideoSubscriberAccount.VSAccountMetadata, class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:VideoSubscriberAccount.VSAccountManager.Enqueue(VideoSubscriberAccount.VSAccountMetadataRequest,System.Action{VideoSubscriberAccount.VSAccountMetadata,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member Enqueue : VideoSubscriberAccount.VSAccountMetadataRequest * Action&lt;VideoSubscriberAccount.VSAccountMetadata, Foundation.NSError&gt; -&gt; VideoSubscriberAccount.VSAccountManagerResult&#xA;override this.Enqueue : VideoSubscriberAccount.VSAccountMetadataRequest * Action&lt;VideoSubscriberAccount.VSAccountMetadata, Foundation.NSError&gt; -&gt; VideoSubscriberAccount.VSAccountManagerResult" Usage="vSAccountManager.Enqueue (accountMetadataRequest, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("enqueueAccountMetadataRequest:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.MacOSX, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>VideoSubscriberAccount.VSAccountManagerResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accountMetadataRequest" Type="VideoSubscriberAccount.VSAccountMetadataRequest" />
        <Parameter Name="completionHandler" Type="System.Action&lt;VideoSubscriberAccount.VSAccountMetadata,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V82))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="accountMetadataRequest">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnqueueAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;VideoSubscriberAccount.VSAccountMetadata&gt; EnqueueAsync (VideoSubscriberAccount.VSAccountMetadataRequest accountMetadataRequest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class VideoSubscriberAccount.VSAccountMetadata&gt; EnqueueAsync(class VideoSubscriberAccount.VSAccountMetadataRequest accountMetadataRequest) cil managed" />
      <MemberSignature Language="DocId" Value="M:VideoSubscriberAccount.VSAccountManager.EnqueueAsync(VideoSubscriberAccount.VSAccountMetadataRequest)" />
      <MemberSignature Language="F#" Value="abstract member EnqueueAsync : VideoSubscriberAccount.VSAccountMetadataRequest -&gt; System.Threading.Tasks.Task&lt;VideoSubscriberAccount.VSAccountMetadata&gt;&#xA;override this.EnqueueAsync : VideoSubscriberAccount.VSAccountMetadataRequest -&gt; System.Threading.Tasks.Task&lt;VideoSubscriberAccount.VSAccountMetadata&gt;" Usage="vSAccountManager.EnqueueAsync accountMetadataRequest" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.MacOSX, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;VideoSubscriberAccount.VSAccountMetadata&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accountMetadataRequest" Type="VideoSubscriberAccount.VSAccountMetadataRequest" />
      </Parameters>
      <Docs>
        <param name="accountMetadataRequest">To be added.</param>
        <summary>To be added.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous Enqueue operation.  The value of the TResult parameter is of type System.Action&lt;VideoSubscriberAccount.VSAccountMetadata,Foundation.NSError&gt;.</para>
        </returns>
        <remarks>
          <para copied="true">The EnqueueAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnqueueAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;VideoSubscriberAccount.VSAccountMetadata&gt; EnqueueAsync (VideoSubscriberAccount.VSAccountMetadataRequest accountMetadataRequest, out VideoSubscriberAccount.VSAccountManagerResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class VideoSubscriberAccount.VSAccountMetadata&gt; EnqueueAsync(class VideoSubscriberAccount.VSAccountMetadataRequest accountMetadataRequest, [out] class VideoSubscriberAccount.VSAccountManagerResult&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:VideoSubscriberAccount.VSAccountManager.EnqueueAsync(VideoSubscriberAccount.VSAccountMetadataRequest,VideoSubscriberAccount.VSAccountManagerResult@)" />
      <MemberSignature Language="F#" Value="abstract member EnqueueAsync : VideoSubscriberAccount.VSAccountMetadataRequest *  -&gt; System.Threading.Tasks.Task&lt;VideoSubscriberAccount.VSAccountMetadata&gt;&#xA;override this.EnqueueAsync : VideoSubscriberAccount.VSAccountMetadataRequest *  -&gt; System.Threading.Tasks.Task&lt;VideoSubscriberAccount.VSAccountMetadata&gt;" Usage="vSAccountManager.EnqueueAsync (accountMetadataRequest, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.MacOSX, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;VideoSubscriberAccount.VSAccountMetadata&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accountMetadataRequest" Type="VideoSubscriberAccount.VSAccountMetadataRequest" />
        <Parameter Name="result" Type="VideoSubscriberAccount.VSAccountManagerResult" RefType="out" />
      </Parameters>
      <Docs>
        <param name="accountMetadataRequest">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
