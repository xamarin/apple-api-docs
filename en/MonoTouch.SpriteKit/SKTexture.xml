<Type Name="SKTexture" FullName="MonoTouch.SpriteKit.SKTexture">
  <TypeSignature Language="C#" Value="public class SKTexture : MonoTouch.Foundation.NSObject, IDisposable, MonoTouch.Foundation.INSCoding, MonoTouch.Foundation.INSCopying" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SKTexture extends MonoTouch.Foundation.NSObject implements class MonoTouch.Foundation.INSCoding, class MonoTouch.Foundation.INSCopying, class MonoTouch.ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo apistyle="old">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="new">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>MonoTouch.Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("SKTexture", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.Mac_10_0 | MonoTouch.ObjCRuntime.Platform.Mac_10_1 | MonoTouch.ObjCRuntime.Platform.Mac_10_2 | MonoTouch.ObjCRuntime.Platform.Mac_10_3 | MonoTouch.ObjCRuntime.Platform.Mac_10_4 | MonoTouch.ObjCRuntime.Platform.Mac_10_5 | MonoTouch.ObjCRuntime.Platform.Mac_10_6 | MonoTouch.ObjCRuntime.Platform.Mac_10_7 | MonoTouch.ObjCRuntime.Platform.Mac_10_8 | MonoTouch.ObjCRuntime.Platform.Mac_10_9 | MonoTouch.ObjCRuntime.Platform.Mac_10_10 | MonoTouch.ObjCRuntime.Platform.Mac_Version | MonoTouch.ObjCRuntime.Platform.Mac_Arch64 | MonoTouch.ObjCRuntime.Platform.Mac_Arch)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An image that can be used with one or more <see cref="T:MonoTouch.SpriteKit.SKSpriteNode" />s and particles.</summary>
    <remarks>
      <para>Sprite Kit attempts to be efficient with the memory associated with textures. Textures are lazy-loaded from their source files and in preparation for loading onto the graphics hardware. This lazy-loading can be overridden with the <c>Preload*</c> methods.</para>
    </remarks>
    <altmember cref="T:MonoTouch.SpriteKit.TextureAtlas" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SKTexture (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SKTexture (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SKTexture (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject Copy (MonoTouch.Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject Copy(class MonoTouch.Foundation.NSZone zone) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="MonoTouch.Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTextureByGeneratingNormalMap">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.SpriteKit.SKTexture CreateTextureByGeneratingNormalMap ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.SpriteKit.SKTexture CreateTextureByGeneratingNormalMap() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("textureByGeneratingNormalMap")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKTexture</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTextureByGeneratingNormalMap">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.SpriteKit.SKTexture CreateTextureByGeneratingNormalMap (float smoothness, float contrast);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.SpriteKit.SKTexture CreateTextureByGeneratingNormalMap(float32 smoothness, float32 contrast) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.SpriteKit.SKTexture CreateTextureByGeneratingNormalMap (nfloat smoothness, nfloat contrast);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.SpriteKit.SKTexture CreateTextureByGeneratingNormalMap(valuetype System.nfloat smoothness, valuetype System.nfloat contrast) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("textureByGeneratingNormalMapWithSmoothness:contrast:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKTexture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="smoothness" Type="System.Single" apistyle="old" />
        <Parameter Name="contrast" Type="System.Single" apistyle="old" />
        <Parameter Name="smoothness" Type="System.nfloat" apistyle="new" />
        <Parameter Name="contrast" Type="System.nfloat" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="smoothness">To be added.</param>
        <param name="contrast">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo" apistyle="new">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (MonoTouch.Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class MonoTouch.Foundation.NSCoder encoder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilteringMode">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.SpriteKit.SKTextureFilteringMode FilteringMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.SpriteKit.SKTextureFilteringMode FilteringMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("filteringMode")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setFilteringMode:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKTextureFilteringMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromData">
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKTexture FromData (MonoTouch.Foundation.NSData pixelData, System.Drawing.SizeF size);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKTexture FromData(class MonoTouch.Foundation.NSData pixelData, valuetype System.Drawing.SizeF size) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKTexture FromData (MonoTouch.Foundation.NSData pixelData, MonoTouch.CoreGraphics.CGSize size);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKTexture FromData(class MonoTouch.Foundation.NSData pixelData, valuetype MonoTouch.CoreGraphics.CGSize size) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("textureWithData:size:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKTexture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pixelData" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="size" Type="System.Drawing.SizeF" apistyle="old" />
        <Parameter Name="size" Type="MonoTouch.CoreGraphics.CGSize" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="pixelData">To be added.</param>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromData">
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKTexture FromData (MonoTouch.Foundation.NSData pixelData, System.Drawing.SizeF size, bool flipped);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKTexture FromData(class MonoTouch.Foundation.NSData pixelData, valuetype System.Drawing.SizeF size, bool flipped) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKTexture FromData (MonoTouch.Foundation.NSData pixelData, MonoTouch.CoreGraphics.CGSize size, bool flipped);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKTexture FromData(class MonoTouch.Foundation.NSData pixelData, valuetype MonoTouch.CoreGraphics.CGSize size, bool flipped) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("textureWithData:size:flipped:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKTexture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pixelData" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="size" Type="System.Drawing.SizeF" apistyle="old" />
        <Parameter Name="flipped" Type="System.Boolean" />
        <Parameter Name="size" Type="MonoTouch.CoreGraphics.CGSize" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="pixelData">To be added.</param>
        <param name="size">To be added.</param>
        <param name="flipped">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromData">
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKTexture FromData (MonoTouch.Foundation.NSData pixelData, System.Drawing.SizeF size, uint rowLength, uint alignment);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKTexture FromData(class MonoTouch.Foundation.NSData pixelData, valuetype System.Drawing.SizeF size, unsigned int32 rowLength, unsigned int32 alignment) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKTexture FromData (MonoTouch.Foundation.NSData pixelData, MonoTouch.CoreGraphics.CGSize size, uint rowLength, uint alignment);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKTexture FromData(class MonoTouch.Foundation.NSData pixelData, valuetype MonoTouch.CoreGraphics.CGSize size, unsigned int32 rowLength, unsigned int32 alignment) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("textureWithData:size:rowLength:alignment:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKTexture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pixelData" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="size" Type="System.Drawing.SizeF" apistyle="old" />
        <Parameter Name="rowLength" Type="System.UInt32" />
        <Parameter Name="alignment" Type="System.UInt32" />
        <Parameter Name="size" Type="MonoTouch.CoreGraphics.CGSize" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="pixelData">To be added.</param>
        <param name="size">To be added.</param>
        <param name="rowLength">To be added.</param>
        <param name="alignment">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromImage">
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKTexture FromImage (MonoTouch.CoreGraphics.CGImage image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKTexture FromImage(class MonoTouch.CoreGraphics.CGImage image) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("textureWithCGImage:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKTexture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreGraphics.CGImage" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromImage">
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKTexture FromImage (MonoTouch.UIKit.UIImage image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKTexture FromImage(class MonoTouch.UIKit.UIImage image) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("textureWithImage:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKTexture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.UIKit.UIImage" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromImageNamed">
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKTexture FromImageNamed (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKTexture FromImageNamed(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("textureWithImageNamed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKTexture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromRectangle">
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKTexture FromRectangle (System.Drawing.RectangleF rect, MonoTouch.SpriteKit.SKTexture texture);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKTexture FromRectangle(valuetype System.Drawing.RectangleF rect, class MonoTouch.SpriteKit.SKTexture texture) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKTexture FromRectangle (MonoTouch.CoreGraphics.CGRect rect, MonoTouch.SpriteKit.SKTexture texture);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKTexture FromRectangle(valuetype MonoTouch.CoreGraphics.CGRect rect, class MonoTouch.SpriteKit.SKTexture texture) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("textureWithRect:inTexture:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKTexture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" apistyle="old" />
        <Parameter Name="texture" Type="MonoTouch.SpriteKit.SKTexture" />
        <Parameter Name="rect" Type="MonoTouch.CoreGraphics.CGRect" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <param name="texture">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromTextureNoise">
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKTexture FromTextureNoise (float smoothness, System.Drawing.SizeF size, bool grayscale);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKTexture FromTextureNoise(float32 smoothness, valuetype System.Drawing.SizeF size, bool grayscale) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKTexture FromTextureNoise (nfloat smoothness, MonoTouch.CoreGraphics.CGSize size, bool grayscale);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKTexture FromTextureNoise(valuetype System.nfloat smoothness, valuetype MonoTouch.CoreGraphics.CGSize size, bool grayscale) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("textureNoiseWithSmoothness:size:grayscale:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.Mac_10_10)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKTexture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="smoothness" Type="System.Single" apistyle="old" />
        <Parameter Name="size" Type="System.Drawing.SizeF" apistyle="old" />
        <Parameter Name="grayscale" Type="System.Boolean" />
        <Parameter Name="smoothness" Type="System.nfloat" apistyle="new" />
        <Parameter Name="size" Type="MonoTouch.CoreGraphics.CGSize" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="smoothness">To be added.</param>
        <param name="size">To be added.</param>
        <param name="grayscale">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromTextureVectorNoise">
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKTexture FromTextureVectorNoise (float smoothness, System.Drawing.SizeF size);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKTexture FromTextureVectorNoise(float32 smoothness, valuetype System.Drawing.SizeF size) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKTexture FromTextureVectorNoise (nfloat smoothness, MonoTouch.CoreGraphics.CGSize size);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKTexture FromTextureVectorNoise(valuetype System.nfloat smoothness, valuetype MonoTouch.CoreGraphics.CGSize size) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("textureVectorNoiseWithSmoothness:size:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.Mac_10_10)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKTexture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="smoothness" Type="System.Single" apistyle="old" />
        <Parameter Name="size" Type="System.Drawing.SizeF" apistyle="old" />
        <Parameter Name="smoothness" Type="System.nfloat" apistyle="new" />
        <Parameter Name="size" Type="MonoTouch.CoreGraphics.CGSize" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="smoothness">To be added.</param>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Preload" apistyle="old">
      <MemberSignature Language="C#" Value="public virtual void Preload (MonoTouch.Foundation.NSAction completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Preload(class MonoTouch.Foundation.NSAction completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("preloadWithCompletionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="completion" Type="MonoTouch.Foundation.NSAction">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDNSAction))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="completion">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Preload" apistyle="new">
      <MemberSignature Language="C#" Value="public virtual void Preload (Action completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Preload(class System.Action completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("preloadWithCompletionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="completion" Type="System.Action">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDAction))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="completion">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreloadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task PreloadAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task PreloadAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>A task that represents the asynchronous Preload operation</returns>
        <remarks>
          <para copied="true">The PreloadAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreloadTextures" apistyle="old">
      <MemberSignature Language="C#" Value="public static void PreloadTextures (MonoTouch.SpriteKit.SKTexture[] textures, MonoTouch.Foundation.NSAction completion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PreloadTextures(class MonoTouch.SpriteKit.SKTexture[] textures, class MonoTouch.Foundation.NSAction completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("preloadTextures:withCompletionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textures" Type="MonoTouch.SpriteKit.SKTexture[]" />
        <Parameter Name="completion" Type="MonoTouch.Foundation.NSAction">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDNSAction))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="textures">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreloadTextures" apistyle="new">
      <MemberSignature Language="C#" Value="public static void PreloadTextures (MonoTouch.SpriteKit.SKTexture[] textures, Action completion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PreloadTextures(class MonoTouch.SpriteKit.SKTexture[] textures, class System.Action completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("preloadTextures:withCompletionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textures" Type="MonoTouch.SpriteKit.SKTexture[]" />
        <Parameter Name="completion" Type="System.Action">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDAction))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="textures">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreloadTexturesAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task PreloadTexturesAsync (MonoTouch.SpriteKit.SKTexture[] textures);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task PreloadTexturesAsync(class MonoTouch.SpriteKit.SKTexture[] textures) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textures" Type="MonoTouch.SpriteKit.SKTexture[]" />
      </Parameters>
      <Docs>
        <param name="textures">To be added.</param>
        <summary>To be added.</summary>
        <returns>A task that represents the asynchronous PreloadTextures operation</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.SizeF Size { get; }" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.SizeF Size" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGSize Size { get; }" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreGraphics.CGSize Size" apistyle="new" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("size")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="old">System.Drawing.SizeF</ReturnType>
        <ReturnType apistyle="new">MonoTouch.CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextureByApplyingCIFilter">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.SpriteKit.SKTexture TextureByApplyingCIFilter (MonoTouch.CoreImage.CIFilter filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.SpriteKit.SKTexture TextureByApplyingCIFilter(class MonoTouch.CoreImage.CIFilter filter) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("textureByApplyingCIFilter:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKTexture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="MonoTouch.CoreImage.CIFilter" />
      </Parameters>
      <Docs>
        <param name="filter">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextureRect">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.RectangleF TextureRect { get; }" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF TextureRect" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGRect TextureRect { get; }" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreGraphics.CGRect TextureRect" apistyle="new" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("textureRect")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="old">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="new">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsesMipmaps">
      <MemberSignature Language="C#" Value="public virtual bool UsesMipmaps { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UsesMipmaps" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("usesMipmaps")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setUsesMipmaps:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
