<Type Name="Test" FullName="NUnit.Framework.Internal.Test">
  <TypeSignature Language="C#" Value="public abstract class Test : IComparable, Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.ITest" apistyle="unified" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Test extends System.Object implements class System.IComparable, class Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.ITest, class Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.IXmlNodeBuilder" apistyle="unified" />
  <AssemblyInfo apistyle="unified">
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>NUnit.Framework.Api.ITest</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            The Test abstract class represents a test within the framework.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Test (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the test</param>
        <summary>
            Constructs a test given its name
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Test (Type fixtureType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Type fixtureType) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fixtureType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="fixtureType"></param>
        <summary>
            TODO: Documentation needed for constructor
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Test (string pathName, string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string pathName, string name) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pathName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pathName">The parent tests full name</param>
        <param name="name">The name of the test</param>
        <summary>
            Constructs a test given the path through the
            test hierarchy to its parent and a name.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAttributesToTest">
      <MemberSignature Language="C#" Value="public void ApplyAttributesToTest (System.Reflection.ICustomAttributeProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyAttributesToTest(class System.Reflection.ICustomAttributeProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Reflection.ICustomAttributeProvider" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The other test</param>
        <summary>
            Compares this test to another test for sorting purposes
            </summary>
        <returns>Value of -1, 0 or +1 depending on whether the current test is less than, equal to or greater than the other test</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkItem">
      <MemberSignature Language="C#" Value="public abstract NUnit.Framework.Internal.WorkItems.WorkItem CreateWorkItem (NUnit.Framework.Api.ITestFilter childFilter, NUnit.Framework.Internal.FinallyDelegate finD);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class NUnit.Framework.Internal.WorkItems.WorkItem CreateWorkItem(class NUnit.Framework.Api.ITestFilter childFilter, class NUnit.Framework.Internal.FinallyDelegate finD) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Internal.WorkItems.WorkItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="childFilter" Type="NUnit.Framework.Api.ITestFilter" />
        <Parameter Name="finD" Type="NUnit.Framework.Internal.FinallyDelegate" />
      </Parameters>
      <Docs>
        <param name="childFilter">To be added.</param>
        <param name="finD">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fixture">
      <MemberSignature Language="C#" Value="public object Fixture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Fixture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FixtureType">
      <MemberSignature Language="C#" Value="public Type FixtureType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type FixtureType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the Type of the fixture used in running this test
            or null if no fixture type is associated with it.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public string FullName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the fully qualified name of the test
            </summary>
        <value />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasChildren">
      <MemberSignature Language="C#" Value="public abstract bool HasChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a bool indicating whether the current test
            has any descendant tests.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the id of the test
            </summary>
        <value />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSuite">
      <MemberSignature Language="C#" Value="public bool IsSuite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSuite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the name of the test
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.ITest Parent { get; set; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance class Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.ITest Parent" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="unified">Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.ITest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the parent as a Test object.
            Used by the core to set the parent.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopulateTestNode">
      <MemberSignature Language="C#" Value="protected void PopulateTestNode (Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.XmlNode thisNode, bool recursive);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void PopulateTestNode(class Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.XmlNode thisNode, bool recursive) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recursive" Type="System.Boolean" />
        <Parameter Name="thisNode" Type="Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.XmlNode" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="thisNode">To be added.</param>
        <param name="recursive">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.IPropertyBag Properties { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance class Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.IPropertyBag Properties" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="unified">Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.IPropertyBag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the properties for this test
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunState">
      <MemberSignature Language="C#" Value="public Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.RunState RunState { get; set; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.RunState RunState" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="unified">Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.RunState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Whether or not the test should be run
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Seed">
      <MemberSignature Language="C#" Value="public int Seed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Seed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="setUpMethods">
      <MemberSignature Language="C#" Value="protected System.Reflection.MethodInfo[] setUpMethods;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Reflection.MethodInfo[] setUpMethods" />
      <MemberType>Field</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The SetUp methods.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="tearDownMethods">
      <MemberSignature Language="C#" Value="protected System.Reflection.MethodInfo[] tearDownMethods;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Reflection.MethodInfo[] tearDownMethods" />
      <MemberType>Field</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The teardown method
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TestCaseCount">
      <MemberSignature Language="C#" Value="public virtual int TestCaseCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TestCaseCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a count of test cases represented by
            or contained under this test.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tests">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IList&lt;Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.ITest&gt; Tests { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.ITest&gt; Tests" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="unified">System.Collections.Generic.IList&lt;Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.ITest&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets this test's child tests
            </summary>
        <value>A list of child tests</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TestType">
      <MemberSignature Language="C#" Value="public virtual string TestType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TestType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a string representing the type of test. Used as an attribute
            value in the XML representation of a test and has no other
            function in the framework.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlElementName">
      <MemberSignature Language="C#" Value="public abstract string XmlElementName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlElementName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>