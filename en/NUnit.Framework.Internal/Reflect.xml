<Type Name="Reflect" FullName="NUnit.Framework.Internal.Reflect">
  <TypeSignature Language="C#" Value="public class Reflect" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Reflect extends System.Object" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>0.7.0.0</AssemblyVersion>
    <AssemblyVersion>0.8.0.0</AssemblyVersion>
    <AssemblyVersion>0.9.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Helper methods for inspecting a type by reflection.
            Many of these methods take ICustomAttributeProvider as an
            argument to avoid duplication, even though certain attributes can
            only appear on specific types of members, like MethodInfo or Type.
            In the case where a type is being examined for the presence of
            an attribute, interface or named member, the Reflect methods
            operate with the full name of the member being sought. This
            removes the necessity of the caller having a reference to the
            assembly that defines the item being sought and allows the
            NUnit core to inspect assemblies that reference an older
            version of the NUnit framework.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Construct">
      <MemberSignature Language="C#" Value="public static object Construct (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Construct(class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.7.0.0</AssemblyVersion>
        <AssemblyVersion>0.8.0.0</AssemblyVersion>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The Type to be constructed</param>
        <summary>
            Invoke the default constructor on a Type
            </summary>
        <returns>An instance of the Type</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Construct">
      <MemberSignature Language="C#" Value="public static object Construct (Type type, object[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Construct(class System.Type type, object[] arguments) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.7.0.0</AssemblyVersion>
        <AssemblyVersion>0.8.0.0</AssemblyVersion>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="type">The Type to be constructed</param>
        <param name="arguments">Arguments to the constructor</param>
        <summary>
            Invoke a constructor on a Type with arguments
            </summary>
        <returns>An instance of the Type</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodsWithAttribute">
      <MemberSignature Language="C#" Value="public static System.Reflection.MethodInfo[] GetMethodsWithAttribute (Type fixtureType, Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.MethodInfo[] GetMethodsWithAttribute(class System.Type fixtureType, class System.Type attributeType, bool inherit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.7.0.0</AssemblyVersion>
        <AssemblyVersion>0.8.0.0</AssemblyVersion>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixtureType" Type="System.Type" />
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fixtureType">The type to examine</param>
        <param name="attributeType">The attribute Type to look for</param>
        <param name="inherit">Specifies whether to search the fixture type inheritance chain</param>
        <summary>
            Examine a fixture type and return an array of methods having a
            particular attribute. The array is order with base methods first.
            </summary>
        <returns>The array of methods found</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasMethodWithAttribute">
      <MemberSignature Language="C#" Value="public static bool HasMethodWithAttribute (Type fixtureType, Type attributeType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasMethodWithAttribute(class System.Type fixtureType, class System.Type attributeType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fixtureType" Type="System.Type" />
        <Parameter Name="attributeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="fixtureType">To be added.</param>
        <param name="attributeType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMethod">
      <MemberSignature Language="C#" Value="public static object InvokeMethod (System.Reflection.MethodInfo method, object fixture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object InvokeMethod(class System.Reflection.MethodInfo method, object fixture) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.7.0.0</AssemblyVersion>
        <AssemblyVersion>0.8.0.0</AssemblyVersion>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="fixture" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="method">A MethodInfo for the method to be invoked</param>
        <param name="fixture">The object on which to invoke the method</param>
        <summary>
            Invoke a parameterless method returning void on an object.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMethod">
      <MemberSignature Language="C#" Value="public static object InvokeMethod (System.Reflection.MethodInfo method, object fixture, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object InvokeMethod(class System.Reflection.MethodInfo method, object fixture, object[] args) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.7.0.0</AssemblyVersion>
        <AssemblyVersion>0.8.0.0</AssemblyVersion>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="fixture" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">A MethodInfo for the method to be invoked</param>
        <param name="fixture">The object on which to invoke the method</param>
        <param name="args">The argument list for the method</param>
        <summary>
            Invoke a method, converting any TargetInvocationException to an NUnitException.
            </summary>
        <returns>The return value from the invoked method</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
