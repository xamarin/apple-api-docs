<Type Name="ParameterSet" FullName="NUnit.Framework.Internal.ParameterSet">
  <TypeSignature Language="C#" Value="public class ParameterSet : Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.ITestCaseData, Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Internal.IApplyToTest" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParameterSet extends System.Object implements class Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.ITestCaseData, class Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Internal.IApplyToTest" />
  <AssemblyInfo>
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>NUnit.Framework.Api.ITestCaseData</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>NUnit.Framework.Internal.IApplyToTest</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            ParameterSet encapsulates method arguments and
            other selected parameters needed for constructing
            a parameterized test case.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ParameterSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Construct an empty parameter set, which
            defaults to being Runnable.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ParameterSet (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception exception) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">To be added.</param>
        <summary>
            Construct a non-runnable ParameterSet, specifying
            the provider exception that made it invalid.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ParameterSet (Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.ITestCaseData data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.ITestCaseData data) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="data" Type="Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.ITestCaseData" />
      </Parameters>
      <Docs>
        <param name="data"></param>
        <summary>
            Construct a ParameterSet from an object implementing ITestCaseData
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyToTest">
      <MemberSignature Language="C#" Value="public void ApplyToTest (Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Internal.Test test);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyToTest(class Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Internal.Test test) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Internal.Test" />
      </Parameters>
      <Docs>
        <param name="test">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arguments">
      <MemberSignature Language="C#" Value="public object[] Arguments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object[] Arguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The arguments to be used in running the test,
            which must match the method signature.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionData">
      <MemberSignature Language="C#" Value="public Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.ExpectedExceptionData ExceptionData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.ExpectedExceptionData ExceptionData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.ExpectedExceptionData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Data about any expected exception
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionExpected">
      <MemberSignature Language="C#" Value="public bool ExceptionExpected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExceptionExpected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a flag indicating whether an exception is expected.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpectedResult">
      <MemberSignature Language="C#" Value="public object ExpectedResult { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ExpectedResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The expected result of the test, which
            must match the method return type.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasExpectedResult">
      <MemberSignature Language="C#" Value="public bool HasExpectedResult { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasExpectedResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating whether an expected result was specified.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalArguments">
      <MemberSignature Language="C#" Value="public object[] OriginalArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object[] OriginalArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The original arguments provided by the user,
            used for display purposes.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.IPropertyBag Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.IPropertyBag Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.IPropertyBag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the property dictionary for this test
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunState">
      <MemberSignature Language="C#" Value="public Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.RunState RunState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.RunState RunState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.RunState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The RunState for this set of parameters.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TestName">
      <MemberSignature Language="C#" Value="public string TestName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TestName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A name to be used for this test case in lieu
            of the standard generated name containing
            the argument list.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>