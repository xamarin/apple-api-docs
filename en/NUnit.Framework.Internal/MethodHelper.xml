<Type Name="MethodHelper" FullName="NUnit.Framework.Internal.MethodHelper">
  <TypeSignature Language="C#" Value="public class MethodHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MethodHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:NUnit.Framework.Internal.MethodHelper" />
  <TypeSignature Language="F#" Value="type MethodHelper = class" />
  <AssemblyInfo>
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MethodHelper ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Internal.MethodHelper.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDisplayName">
      <MemberSignature Language="C#" Value="public static string GetDisplayName (System.Reflection.MethodInfo method, object[] arglist);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDisplayName(class System.Reflection.MethodInfo method, object[] arglist) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Internal.MethodHelper.GetDisplayName(System.Reflection.MethodInfo,System.Object[])" />
      <MemberSignature Language="F#" Value="static member GetDisplayName : System.Reflection.MethodInfo * obj[] -&gt; string" Usage="NUnit.Framework.Internal.MethodHelper.GetDisplayName (method, arglist)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arglist" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <param name="arglist">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAsyncMethod">
      <MemberSignature Language="C#" Value="public static bool IsAsyncMethod (System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAsyncMethod(class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Internal.MethodHelper.IsAsyncMethod(System.Reflection.MethodInfo)" />
      <MemberSignature Language="F#" Value="static member IsAsyncMethod : System.Reflection.MethodInfo -&gt; bool" Usage="NUnit.Framework.Internal.MethodHelper.IsAsyncMethod method" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="method">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
