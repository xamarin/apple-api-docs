<Type Name="ALAsset" FullName="MonoTouch.AssetsLibrary.ALAsset">
  <TypeSignature Language="C#" Value="public class ALAsset : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ALAsset extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("ALAsset", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Availability(Deprecated=MonoTouch.ObjCRuntime.Platform.iOS_9_0, Message="Use Photos API instead")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Availability(Deprecated=MonoTouch.ObjCRuntime.Platform.iOS_9_0, Message="Use Photos API instead")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An asset managed by the Photo application (videos and photos).</summary>
    <remarks>
    </remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/AssetsLibrary/Reference/ALAsset_Class/index.html">Apple documentation for <c>ALAsset</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ALAsset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public ALAsset (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ALAsset (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected ALAsset (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ALAsset (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected ALAsset (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AspectRatioThumbnail">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGImage AspectRatioThumbnail ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.CoreGraphics.CGImage AspectRatioThumbnail() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("aspectRatioThumbnail")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a thumbnail image that preserves the original aspect ration of the source image.</summary>
        <returns>CGImage that has already been rotated to the right orientation.</returns>
        <remarks>
          <para>

	    This returns a thumbnail image representing the asset.
	    The thumbnail returned will preserve the original aspect
	    ration of the original image returned by the <see cref="P:MonoTouch.AssetsLibrary.ALAssetRepresentation" />.<see cref="M:MonoTouch.AssetsLibrary.ALAssetRepresentation.GetImage()" />.
	    The image will be rendered in the correct orientation, so
	    it is not necessary to apply any rotation on the returned value.

	  </para>
          <para>

	    This API is only available on iOS 5.  On previous version
	    of the operating system you can obtain a square thumbnail by using the <see cref="P:MonoTouch.AssetsLibrary.ALAsset.Thumbnail" />
	    property.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssetType">
      <MemberSignature Language="C#" Value="public MonoTouch.AssetsLibrary.ALAssetType AssetType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.AssetsLibrary.ALAssetType AssetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.AssetsLibrary.ALAssetType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The asset type (photo, video, unknown).</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssetUrl">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSUrl AssetUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSUrl AssetUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.iOS(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSUrl</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSDate Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSDate Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Asset's creation time stamp.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultRepresentation">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.AssetsLibrary.ALAssetRepresentation DefaultRepresentation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.AssetsLibrary.ALAssetRepresentation DefaultRepresentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("defaultRepresentation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.AssetsLibrary.ALAssetRepresentation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Default asset representation.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the ALAsset object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the ALAsset class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the ALAsset ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public double Duration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Duration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>For videos, play time.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Editable">
      <MemberSignature Language="C#" Value="public virtual bool Editable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Editable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isEditable")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the application may edit the asset.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public MonoTouch.CoreLocation.CLLocation Location { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.CoreLocation.CLLocation Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreLocation.CLLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Geographical information about the asset.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Orientation">
      <MemberSignature Language="C#" Value="public MonoTouch.AssetsLibrary.ALAssetOrientation Orientation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.AssetsLibrary.ALAssetOrientation Orientation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.AssetsLibrary.ALAssetOrientation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Asset orientation.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalAsset">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.AssetsLibrary.ALAsset OriginalAsset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.AssetsLibrary.ALAsset OriginalAsset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("originalAsset")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.AssetsLibrary.ALAsset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The original version, if the <see cref="T:MonoTouch.AssetsLibrary.ALAsset" /> is a modification.</summary>
        <value>
          <see langword="null" /> if the <c>this</c> is not a modified version.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RepresentationForUti">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.AssetsLibrary.ALAssetRepresentation RepresentationForUti (string uti);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.AssetsLibrary.ALAssetRepresentation RepresentationForUti(string uti) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("representationForUTI:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.AssetsLibrary.ALAssetRepresentation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uti" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uti">To be added.</param>
        <summary>Returns the specific version for the asset that matches the requested UTI.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Representations">
      <MemberSignature Language="C#" Value="public string[] Representations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Representations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a list of all the available representations for this asset.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetImageData" apistyle="classic">
      <MemberSignature Language="C#" Value="public virtual void SetImageData (MonoTouch.Foundation.NSData imageData, MonoTouch.Foundation.NSDictionary metadata, MonoTouch.AssetsLibrary.ALAssetsLibraryWriteCompletionDelegate completionBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetImageData(class MonoTouch.Foundation.NSData imageData, class MonoTouch.Foundation.NSDictionary metadata, class MonoTouch.AssetsLibrary.ALAssetsLibraryWriteCompletionDelegate completionBlock) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setImageData:metadata:completionBlock:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageData" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="metadata" Type="MonoTouch.Foundation.NSDictionary" />
        <Parameter Name="completionBlock" Type="MonoTouch.AssetsLibrary.ALAssetsLibraryWriteCompletionDelegate">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDALAssetsLibraryWriteCompletionDelegate))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="imageData">The data to be used for the modified version.</param>
        <param name="metadata">Metadata to be saved with the modified image.</param>
        <param name="completionBlock">
          <para>Executed when the asset is successfully modified.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Changes the data to <paramref name="imageData" /> and the metadata to <paramref name="metadata" />. On success, executes <paramref name="completionBlock" />.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetImageData" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual void SetImageData (MonoTouch.Foundation.NSData imageData, MonoTouch.Foundation.NSDictionary metadata, Action&lt;MonoTouch.Foundation.NSUrl,MonoTouch.Foundation.NSError&gt; completionBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetImageData(class MonoTouch.Foundation.NSData imageData, class MonoTouch.Foundation.NSDictionary metadata, class System.Action`2&lt;class MonoTouch.Foundation.NSUrl, class MonoTouch.Foundation.NSError&gt; completionBlock) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setImageData:metadata:completionBlock:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageData" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="metadata" Type="MonoTouch.Foundation.NSDictionary" />
        <Parameter Name="completionBlock" Type="System.Action&lt;MonoTouch.Foundation.NSUrl,MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity2V38))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="imageData">To be added.</param>
        <param name="metadata">To be added.</param>
        <param name="completionBlock">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetImageDataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.Foundation.NSUrl&gt; SetImageDataAsync (MonoTouch.Foundation.NSData imageData, MonoTouch.Foundation.NSDictionary metadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.Foundation.NSUrl&gt; SetImageDataAsync(class MonoTouch.Foundation.NSData imageData, class MonoTouch.Foundation.NSDictionary metadata) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.Foundation.NSUrl&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageData" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="metadata" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="imageData">The data to be used for the modified version.</param>
        <param name="metadata">Metadata to be saved with the modified image.</param>
        <summary>Changes the data to  and the metadata to . On success, executes .</summary>
        <returns>
          <para>A task that represents the asynchronous SetImageData operation.   The value of the TResult parameter is a MonoTouch.AssetsLibrary.ALAssetsLibraryWriteCompletionDelegate.</para>
          <para>Application developers should check the <see cref="P:MonoTouch.AssetsLibrary.ALAsset.Editable" /> property priot to using this method.</para>
        </returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SetVideoAtPath" apistyle="classic">
      <MemberSignature Language="C#" Value="public virtual void SetVideoAtPath (MonoTouch.Foundation.NSUrl videoPathURL, MonoTouch.AssetsLibrary.ALAssetsLibraryWriteCompletionDelegate completionBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVideoAtPath(class MonoTouch.Foundation.NSUrl videoPathURL, class MonoTouch.AssetsLibrary.ALAssetsLibraryWriteCompletionDelegate completionBlock) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setVideoAtPath:completionBlock:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="videoPathURL" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="completionBlock" Type="MonoTouch.AssetsLibrary.ALAssetsLibraryWriteCompletionDelegate">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDALAssetsLibraryWriteCompletionDelegate))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="videoPathURL">A URL specifying the locaiton of the modified videofile.</param>
        <param name="completionBlock">
          <para>Executed when the modified asset is saved successfully.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Modifies the <see cref="T:MonoTouch.AssetsLibrary.ALAsset" /> to refer to the <paramref name="videoPathURL" />.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVideoAtPath" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual void SetVideoAtPath (MonoTouch.Foundation.NSUrl videoPathURL, Action&lt;MonoTouch.Foundation.NSUrl,MonoTouch.Foundation.NSError&gt; completionBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVideoAtPath(class MonoTouch.Foundation.NSUrl videoPathURL, class System.Action`2&lt;class MonoTouch.Foundation.NSUrl, class MonoTouch.Foundation.NSError&gt; completionBlock) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setVideoAtPath:completionBlock:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="videoPathURL" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="completionBlock" Type="System.Action&lt;MonoTouch.Foundation.NSUrl,MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity2V38))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="videoPathURL">To be added.</param>
        <param name="completionBlock">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVideoAtPathAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.Foundation.NSUrl&gt; SetVideoAtPathAsync (MonoTouch.Foundation.NSUrl videoPathURL);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.Foundation.NSUrl&gt; SetVideoAtPathAsync(class MonoTouch.Foundation.NSUrl videoPathURL) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.Foundation.NSUrl&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="videoPathURL" Type="MonoTouch.Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="videoPathURL">A URL specifying the locaiton of the modified videofile.</param>
        <summary>Modifies the  to refer to the .</summary>
        <returns>
          <para>A task that represents the asynchronous SetVideoAtPath operation.   The value of the TResult parameter is a MonoTouch.AssetsLibrary.ALAssetsLibraryWriteCompletionDelegate.</para>
        </returns>
        <remarks>
          <para>Application developers should check the <see cref="P:MonoTouch.AssetsLibrary.ALAsset.Editable" /> property prior to calling this method.</para>
          <para copied="true">The SetVideoAtPathAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Thumbnail">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGImage Thumbnail { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.CoreGraphics.CGImage Thumbnail" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("thumbnail")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the thumbnail for the asset.</summary>
        <value>
        </value>
        <remarks>
          <para>

	    This returns a square thumbnail image representing the
	    asset.  The image will be rendered in the correct
	    orientation, so it is not necessary to apply any rotation
	    on the returned image.

	  </para>
          <para>

	    Starting with iOS 5, you can also use <see cref="M:MonoTouch.AssetsLibrary.ALAsset.AspectRatioThumbnail()" />
	    property to get a thumbnail that preserves the original
	    aspect ratio of the image, instead of the square/cropped
	    version returned by this property.

	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtiToUrlDictionary">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSDictionary UtiToUrlDictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSDictionary UtiToUrlDictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The UTI to URL dictionary for the asset.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueForProperty">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject ValueForProperty (MonoTouch.Foundation.NSString property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject ValueForProperty(class MonoTouch.Foundation.NSString property) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("valueForProperty:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="property">To be added.</param>
        <summary>Low-level access to properties in the ALAsset.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteModifiedImageToSavedToPhotosAlbum" apistyle="classic">
      <MemberSignature Language="C#" Value="public virtual void WriteModifiedImageToSavedToPhotosAlbum (MonoTouch.Foundation.NSData imageData, MonoTouch.Foundation.NSDictionary metadata, MonoTouch.AssetsLibrary.ALAssetsLibraryWriteCompletionDelegate completionBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteModifiedImageToSavedToPhotosAlbum(class MonoTouch.Foundation.NSData imageData, class MonoTouch.Foundation.NSDictionary metadata, class MonoTouch.AssetsLibrary.ALAssetsLibraryWriteCompletionDelegate completionBlock) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("writeModifiedImageDataToSavedPhotosAlbum:metadata:completionBlock:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageData" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="metadata" Type="MonoTouch.Foundation.NSDictionary" />
        <Parameter Name="completionBlock" Type="MonoTouch.AssetsLibrary.ALAssetsLibraryWriteCompletionDelegate">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDALAssetsLibraryWriteCompletionDelegate))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="imageData">To be added.</param>
        <param name="metadata">To be added.</param>
        <param name="completionBlock">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Modifies and writes an image asset to the user's Photos directory.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteModifiedImageToSavedToPhotosAlbum" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual void WriteModifiedImageToSavedToPhotosAlbum (MonoTouch.Foundation.NSData imageData, MonoTouch.Foundation.NSDictionary metadata, Action&lt;MonoTouch.Foundation.NSUrl,MonoTouch.Foundation.NSError&gt; completionBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteModifiedImageToSavedToPhotosAlbum(class MonoTouch.Foundation.NSData imageData, class MonoTouch.Foundation.NSDictionary metadata, class System.Action`2&lt;class MonoTouch.Foundation.NSUrl, class MonoTouch.Foundation.NSError&gt; completionBlock) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("writeModifiedImageDataToSavedPhotosAlbum:metadata:completionBlock:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageData" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="metadata" Type="MonoTouch.Foundation.NSDictionary" />
        <Parameter Name="completionBlock" Type="System.Action&lt;MonoTouch.Foundation.NSUrl,MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity2V38))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="imageData">To be added.</param>
        <param name="metadata">To be added.</param>
        <param name="completionBlock">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteModifiedImageToSavedToPhotosAlbumAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.Foundation.NSUrl&gt; WriteModifiedImageToSavedToPhotosAlbumAsync (MonoTouch.Foundation.NSData imageData, MonoTouch.Foundation.NSDictionary metadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.Foundation.NSUrl&gt; WriteModifiedImageToSavedToPhotosAlbumAsync(class MonoTouch.Foundation.NSData imageData, class MonoTouch.Foundation.NSDictionary metadata) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.Foundation.NSUrl&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageData" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="metadata" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="imageData">To be added.</param>
        <param name="metadata">To be added.</param>
        <summary>Modifies and writes an image asset to the user's Photos directory.</summary>
        <returns>
          <para>A task that represents the asynchronous WriteModifiedImageToSavedToPhotosAlbum operation.   The value of the TResult parameter is a MonoTouch.AssetsLibrary.ALAssetsLibraryWriteCompletionDelegate.</para>
          <para>Application developers should check the <see cref="P:MonoTouch.AssetsLibrary.ALAsset.Editable" /> property prior to calling htis method.</para>
        </returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="WriteModifiedVideoToSavedPhotosAlbum" apistyle="classic">
      <MemberSignature Language="C#" Value="public virtual void WriteModifiedVideoToSavedPhotosAlbum (MonoTouch.Foundation.NSUrl videoPathURL, MonoTouch.AssetsLibrary.ALAssetsLibraryWriteCompletionDelegate completionBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteModifiedVideoToSavedPhotosAlbum(class MonoTouch.Foundation.NSUrl videoPathURL, class MonoTouch.AssetsLibrary.ALAssetsLibraryWriteCompletionDelegate completionBlock) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("writeModifiedVideoAtPathToSavedPhotosAlbum:completionBlock:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="videoPathURL" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="completionBlock" Type="MonoTouch.AssetsLibrary.ALAssetsLibraryWriteCompletionDelegate">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDALAssetsLibraryWriteCompletionDelegate))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="videoPathURL">URL to store the video at.</param>
        <param name="completionBlock">
          <para>Callback invoked the write operation has completed.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Writes the video to the specified path.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteModifiedVideoToSavedPhotosAlbum" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual void WriteModifiedVideoToSavedPhotosAlbum (MonoTouch.Foundation.NSUrl videoPathURL, Action&lt;MonoTouch.Foundation.NSUrl,MonoTouch.Foundation.NSError&gt; completionBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteModifiedVideoToSavedPhotosAlbum(class MonoTouch.Foundation.NSUrl videoPathURL, class System.Action`2&lt;class MonoTouch.Foundation.NSUrl, class MonoTouch.Foundation.NSError&gt; completionBlock) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("writeModifiedVideoAtPathToSavedPhotosAlbum:completionBlock:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="videoPathURL" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="completionBlock" Type="System.Action&lt;MonoTouch.Foundation.NSUrl,MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity2V38))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="videoPathURL">To be added.</param>
        <param name="completionBlock">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteModifiedVideoToSavedPhotosAlbumAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.Foundation.NSUrl&gt; WriteModifiedVideoToSavedPhotosAlbumAsync (MonoTouch.Foundation.NSUrl videoPathURL);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.Foundation.NSUrl&gt; WriteModifiedVideoToSavedPhotosAlbumAsync(class MonoTouch.Foundation.NSUrl videoPathURL) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.Foundation.NSUrl&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="videoPathURL" Type="MonoTouch.Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="videoPathURL">URL to store the video at.</param>
        <summary>Writes the video to the specified path.</summary>
        <returns>
          <para>A task that represents the asynchronous WriteModifiedVideoToSavedPhotosAlbum operation.   The value of the TResult parameter is a MonoTouch.AssetsLibrary.ALAssetsLibraryWriteCompletionDelegate.</para>
        </returns>
        <remarks />
      </Docs>
    </Member>
  </Members>
</Type>
