<Type Name="NSFileProviderManager" FullName="FileProvider.NSFileProviderManager">
  <TypeSignature Language="C#" Value="public class NSFileProviderManager : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSFileProviderManager extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:FileProvider.NSFileProviderManager" />
  <TypeSignature Language="F#" Value="type NSFileProviderManager = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("NSFileProviderManager", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A shared object that is accessible from both the containing app and the extension.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSFileProviderManager (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:FileProvider.NSFileProviderManager.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new FileProvider.NSFileProviderManager : Foundation.NSObjectFlag -&gt; FileProvider.NSFileProviderManager" Usage="new FileProvider.NSFileProviderManager t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NSFileProviderManager (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:FileProvider.NSFileProviderManager.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new FileProvider.NSFileProviderManager : nativeint -&gt; FileProvider.NSFileProviderManager" Usage="new FileProvider.NSFileProviderManager handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDomain">
      <MemberSignature Language="C#" Value="public static void AddDomain (FileProvider.NSFileProviderDomain domain, Action&lt;Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddDomain(class FileProvider.NSFileProviderDomain domain, class System.Action`1&lt;class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:FileProvider.NSFileProviderManager.AddDomain(FileProvider.NSFileProviderDomain,System.Action{Foundation.NSError})" />
      <MemberSignature Language="F#" Value="static member AddDomain : FileProvider.NSFileProviderDomain * Action&lt;Foundation.NSError&gt; -&gt; unit" Usage="FileProvider.NSFileProviderManager.AddDomain (domain, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addDomain:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="FileProvider.NSFileProviderDomain" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V9))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="domain">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDomainAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task AddDomainAsync (FileProvider.NSFileProviderDomain domain);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task AddDomainAsync(class FileProvider.NSFileProviderDomain domain) cil managed" />
      <MemberSignature Language="DocId" Value="M:FileProvider.NSFileProviderManager.AddDomainAsync(FileProvider.NSFileProviderDomain)" />
      <MemberSignature Language="F#" Value="static member AddDomainAsync : FileProvider.NSFileProviderDomain -&gt; System.Threading.Tasks.Task" Usage="FileProvider.NSFileProviderManager.AddDomainAsync domain" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="FileProvider.NSFileProviderDomain" />
      </Parameters>
      <Docs>
        <param name="domain">To be added.</param>
        <summary>To be added.</summary>
        <returns>A task that represents the asynchronous AddDomain operation</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:FileProvider.NSFileProviderManager.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="FileProvider.NSFileProviderManager.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultManager">
      <MemberSignature Language="C#" Value="public static FileProvider.NSFileProviderManager DefaultManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class FileProvider.NSFileProviderManager DefaultManager" />
      <MemberSignature Language="DocId" Value="P:FileProvider.NSFileProviderManager.DefaultManager" />
      <MemberSignature Language="F#" Value="member this.DefaultManager : FileProvider.NSFileProviderManager" Usage="FileProvider.NSFileProviderManager.DefaultManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("defaultManager", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>FileProvider.NSFileProviderManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentStorageUrl">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSUrl DocumentStorageUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSUrl DocumentStorageUrl" />
      <MemberSignature Language="DocId" Value="P:FileProvider.NSFileProviderManager.DocumentStorageUrl" />
      <MemberSignature Language="F#" Value="member this.DocumentStorageUrl : Foundation.NSUrl" Usage="FileProvider.NSFileProviderManager.DocumentStorageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("documentStorageURL")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSUrl</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromDomain">
      <MemberSignature Language="C#" Value="public static FileProvider.NSFileProviderManager FromDomain (FileProvider.NSFileProviderDomain domain);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class FileProvider.NSFileProviderManager FromDomain(class FileProvider.NSFileProviderDomain domain) cil managed" />
      <MemberSignature Language="DocId" Value="M:FileProvider.NSFileProviderManager.FromDomain(FileProvider.NSFileProviderDomain)" />
      <MemberSignature Language="F#" Value="static member FromDomain : FileProvider.NSFileProviderDomain -&gt; FileProvider.NSFileProviderManager" Usage="FileProvider.NSFileProviderManager.FromDomain domain" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("managerForDomain:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>FileProvider.NSFileProviderManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="FileProvider.NSFileProviderDomain" />
      </Parameters>
      <Docs>
        <param name="domain">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDomains">
      <MemberSignature Language="C#" Value="public static void GetDomains (Action&lt;FileProvider.NSFileProviderDomain[],Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetDomains(class System.Action`2&lt;class FileProvider.NSFileProviderDomain[], class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:FileProvider.NSFileProviderManager.GetDomains(System.Action{FileProvider.NSFileProviderDomain[],Foundation.NSError})" />
      <MemberSignature Language="F#" Value="static member GetDomains : Action&lt;FileProvider.NSFileProviderDomain[], Foundation.NSError&gt; -&gt; unit" Usage="FileProvider.NSFileProviderManager.GetDomains completionHandler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("getDomainsWithCompletionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="completionHandler" Type="System.Action&lt;FileProvider.NSFileProviderDomain[],Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V40))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="completionHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDomainsAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;FileProvider.NSFileProviderDomain[]&gt; GetDomainsAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class FileProvider.NSFileProviderDomain[]&gt; GetDomainsAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:FileProvider.NSFileProviderManager.GetDomainsAsync" />
      <MemberSignature Language="F#" Value="static member GetDomainsAsync : unit -&gt; System.Threading.Tasks.Task&lt;FileProvider.NSFileProviderDomain[]&gt;" Usage="FileProvider.NSFileProviderManager.GetDomainsAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;FileProvider.NSFileProviderDomain[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous GetDomains operation.  The value of the TResult parameter is of type System.Action&lt;FileProvider.NSFileProviderDomain[],Foundation.NSError&gt;.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPlaceholderUrl">
      <MemberSignature Language="C#" Value="public static Foundation.NSUrl GetPlaceholderUrl (Foundation.NSUrl url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSUrl GetPlaceholderUrl(class Foundation.NSUrl url) cil managed" />
      <MemberSignature Language="DocId" Value="M:FileProvider.NSFileProviderManager.GetPlaceholderUrl(Foundation.NSUrl)" />
      <MemberSignature Language="F#" Value="static member GetPlaceholderUrl : Foundation.NSUrl -&gt; Foundation.NSUrl" Usage="FileProvider.NSFileProviderManager.GetPlaceholderUrl url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("placeholderURLForURL:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSUrl</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProviderIdentifier">
      <MemberSignature Language="C#" Value="public virtual string ProviderIdentifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderIdentifier" />
      <MemberSignature Language="DocId" Value="P:FileProvider.NSFileProviderManager.ProviderIdentifier" />
      <MemberSignature Language="F#" Value="member this.ProviderIdentifier : string" Usage="FileProvider.NSFileProviderManager.ProviderIdentifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("providerIdentifier")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public virtual void Register (Foundation.NSUrlSessionTask task, string identifier, Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Register(class Foundation.NSUrlSessionTask task, string identifier, class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:FileProvider.NSFileProviderManager.Register(Foundation.NSUrlSessionTask,System.String,System.Action{Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member Register : Foundation.NSUrlSessionTask * string * Action&lt;Foundation.NSError&gt; -&gt; unit&#xA;override this.Register : Foundation.NSUrlSessionTask * string * Action&lt;Foundation.NSError&gt; -&gt; unit" Usage="nSFileProviderManager.Register (task, identifier, completion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("registerURLSessionTask:forItemWithIdentifier:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Foundation.NSUrlSessionTask" />
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="completion" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V9))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="task">To be added.</param>
        <param name="identifier">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllDomains">
      <MemberSignature Language="C#" Value="public static void RemoveAllDomains (Action&lt;Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveAllDomains(class System.Action`1&lt;class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:FileProvider.NSFileProviderManager.RemoveAllDomains(System.Action{Foundation.NSError})" />
      <MemberSignature Language="F#" Value="static member RemoveAllDomains : Action&lt;Foundation.NSError&gt; -&gt; unit" Usage="FileProvider.NSFileProviderManager.RemoveAllDomains completionHandler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeAllDomainsWithCompletionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V9))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="completionHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllDomainsAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task RemoveAllDomainsAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task RemoveAllDomainsAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:FileProvider.NSFileProviderManager.RemoveAllDomainsAsync" />
      <MemberSignature Language="F#" Value="static member RemoveAllDomainsAsync : unit -&gt; System.Threading.Tasks.Task" Usage="FileProvider.NSFileProviderManager.RemoveAllDomainsAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>A task that represents the asynchronous RemoveAllDomains operation</returns>
        <remarks>
          <para copied="true">The RemoveAllDomainsAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDomain">
      <MemberSignature Language="C#" Value="public static void RemoveDomain (FileProvider.NSFileProviderDomain domain, Action&lt;Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveDomain(class FileProvider.NSFileProviderDomain domain, class System.Action`1&lt;class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:FileProvider.NSFileProviderManager.RemoveDomain(FileProvider.NSFileProviderDomain,System.Action{Foundation.NSError})" />
      <MemberSignature Language="F#" Value="static member RemoveDomain : FileProvider.NSFileProviderDomain * Action&lt;Foundation.NSError&gt; -&gt; unit" Usage="FileProvider.NSFileProviderManager.RemoveDomain (domain, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeDomain:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="FileProvider.NSFileProviderDomain" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V9))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="domain">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDomainAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task RemoveDomainAsync (FileProvider.NSFileProviderDomain domain);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task RemoveDomainAsync(class FileProvider.NSFileProviderDomain domain) cil managed" />
      <MemberSignature Language="DocId" Value="M:FileProvider.NSFileProviderManager.RemoveDomainAsync(FileProvider.NSFileProviderDomain)" />
      <MemberSignature Language="F#" Value="static member RemoveDomainAsync : FileProvider.NSFileProviderDomain -&gt; System.Threading.Tasks.Task" Usage="FileProvider.NSFileProviderManager.RemoveDomainAsync domain" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="FileProvider.NSFileProviderDomain" />
      </Parameters>
      <Docs>
        <param name="domain">To be added.</param>
        <summary>To be added.</summary>
        <returns>A task that represents the asynchronous RemoveDomain operation</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignalEnumerator">
      <MemberSignature Language="C#" Value="public virtual void SignalEnumerator (string containerItemIdentifier, Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SignalEnumerator(string containerItemIdentifier, class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:FileProvider.NSFileProviderManager.SignalEnumerator(System.String,System.Action{Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member SignalEnumerator : string * Action&lt;Foundation.NSError&gt; -&gt; unit&#xA;override this.SignalEnumerator : string * Action&lt;Foundation.NSError&gt; -&gt; unit" Usage="nSFileProviderManager.SignalEnumerator (containerItemIdentifier, completion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("signalEnumeratorForContainerItemIdentifier:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerItemIdentifier" Type="System.String" />
        <Parameter Name="completion" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V9))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="containerItemIdentifier">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WritePlaceholder">
      <MemberSignature Language="C#" Value="public static bool WritePlaceholder (Foundation.NSUrl placeholderUrl, FileProvider.INSFileProviderItem metadata, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WritePlaceholder(class Foundation.NSUrl placeholderUrl, class FileProvider.INSFileProviderItem metadata, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:FileProvider.NSFileProviderManager.WritePlaceholder(Foundation.NSUrl,FileProvider.INSFileProviderItem,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="static member WritePlaceholder : Foundation.NSUrl * FileProvider.INSFileProviderItem *  -&gt; bool" Usage="FileProvider.NSFileProviderManager.WritePlaceholder (placeholderUrl, metadata, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("writePlaceholderAtURL:withMetadata:error:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="placeholderUrl" Type="Foundation.NSUrl" />
        <Parameter Name="metadata" Type="FileProvider.INSFileProviderItem" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="placeholderUrl">To be added.</param>
        <param name="metadata">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
