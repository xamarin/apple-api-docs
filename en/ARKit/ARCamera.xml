<Type Name="ARCamera" FullName="ARKit.ARCamera">
  <TypeSignature Language="C#" Value="public class ARCamera : Foundation.NSObject, Foundation.INSCopying, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ARCamera extends Foundation.NSObject implements class Foundation.INSCopying, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:ARKit.ARCamera" />
  <TypeSignature Language="F#" Value="type ARCamera = class&#xA;    inherit NSObject&#xA;    interface INSCopying&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("ARCamera", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.MacOSX, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Information about the location and orientation of the camera that captured an augmented-reality frame.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ARCamera (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:ARKit.ARCamera.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new ARKit.ARCamera : Foundation.NSObjectFlag -&gt; ARKit.ARCamera" Usage="new ARKit.ARCamera t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal ARCamera (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:ARKit.ARCamera.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new ARKit.ARCamera : nativeint -&gt; ARKit.ARCamera" Usage="new ARKit.ARCamera handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:ARKit.ARCamera.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="ARKit.ARCamera.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject Copy (Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject Copy(class Foundation.NSZone zone) cil managed" />
      <MemberSignature Language="DocId" Value="M:ARKit.ARCamera.Copy(Foundation.NSZone)" />
      <MemberSignature Language="F#" Value="override this.Copy : Foundation.NSZone -&gt; Foundation.NSObject" Usage="aRCamera.Copy zone" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCopying.Copy(Foundation.NSZone)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Foundation.NSZone" />
      </Parameters>
      <Docs tool="CopiedFromAncestor">
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EulerAngles">
      <MemberSignature Language="C#" Value="public virtual OpenTK.NVector3 EulerAngles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype OpenTK.NVector3 EulerAngles" />
      <MemberSignature Language="DocId" Value="P:ARKit.ARCamera.EulerAngles" />
      <MemberSignature Language="F#" Value="member this.EulerAngles : OpenTK.NVector3" Usage="ARKit.ARCamera.EulerAngles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("eulerAngles")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>OpenTK.NVector3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The orientation of the camera [alpha, beta, gamma] in radians, relative to the mixed-reality world coordinate system.</summary>
        <value>
        </value>
        <remarks>
          <para>Euler angles define the orientation of the camera as a series of rotations around the axes of the world coordinate system. </para>
          <para>The beta value (<c>EulerAngles.Y</c>) is the angle, in radians, between the world coordinate system's Z axis and the camera's Z axis. The intersection of these two planes defines a "line of nodes" <c>N</c>. The alpha value (<c>EulerAngles.X</c>) is the angle from X in the world coordinate system's XY plane to this line. The gamma value (<c>EulerAngles.Z</c>) is the angle to X in the camera coordinate system's XY plane to the same <c>N</c> line.
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProjectionMatrix">
      <MemberSignature Language="C#" Value="public virtual OpenTK.NMatrix4 GetProjectionMatrix (UIKit.UIInterfaceOrientation orientation, CoreGraphics.CGSize viewportSize, nfloat zNear, nfloat zFar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype OpenTK.NMatrix4 GetProjectionMatrix(valuetype UIKit.UIInterfaceOrientation orientation, valuetype CoreGraphics.CGSize viewportSize, valuetype System.nfloat zNear, valuetype System.nfloat zFar) cil managed" />
      <MemberSignature Language="DocId" Value="M:ARKit.ARCamera.GetProjectionMatrix(UIKit.UIInterfaceOrientation,CoreGraphics.CGSize,System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="abstract member GetProjectionMatrix : UIKit.UIInterfaceOrientation * CoreGraphics.CGSize * nfloat * nfloat -&gt; OpenTK.NMatrix4&#xA;override this.GetProjectionMatrix : UIKit.UIInterfaceOrientation * CoreGraphics.CGSize * nfloat * nfloat -&gt; OpenTK.NMatrix4" Usage="aRCamera.GetProjectionMatrix (orientation, viewportSize, zNear, zFar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("projectionMatrixForOrientation:viewportSize:zNear:zFar:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>OpenTK.NMatrix4</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orientation" Type="UIKit.UIInterfaceOrientation" />
        <Parameter Name="viewportSize" Type="CoreGraphics.CGSize" />
        <Parameter Name="zNear" Type="System.nfloat" />
        <Parameter Name="zFar" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="orientation">The camera orientation.</param>
        <param name="viewportSize">The viewport size, in points.</param>
        <param name="zNear">The distance to the near Z-clipping plane.</param>
        <param name="zFar">The distance to the far Z-clipping plane..</param>
        <summary>The projection matrix used to render 3D content so that it will match the real-world imagery.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProjectPoint">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint GetProjectPoint (OpenTK.NVector3 point, UIKit.UIInterfaceOrientation orientation, CoreGraphics.CGSize viewportSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGPoint GetProjectPoint(valuetype OpenTK.NVector3 point, valuetype UIKit.UIInterfaceOrientation orientation, valuetype CoreGraphics.CGSize viewportSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:ARKit.ARCamera.GetProjectPoint(OpenTK.NVector3,UIKit.UIInterfaceOrientation,CoreGraphics.CGSize)" />
      <MemberSignature Language="F#" Value="abstract member GetProjectPoint : OpenTK.NVector3 * UIKit.UIInterfaceOrientation * CoreGraphics.CGSize -&gt; CoreGraphics.CGPoint&#xA;override this.GetProjectPoint : OpenTK.NVector3 * UIKit.UIInterfaceOrientation * CoreGraphics.CGSize -&gt; CoreGraphics.CGPoint" Usage="aRCamera.GetProjectPoint (point, orientation, viewportSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use 'Project' instead.", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="OpenTK.NVector3" />
        <Parameter Name="orientation" Type="UIKit.UIInterfaceOrientation" />
        <Parameter Name="viewportSize" Type="CoreGraphics.CGSize" />
      </Parameters>
      <Docs>
        <param name="point">The point to project.</param>
        <param name="orientation">The camera orientation.</param>
        <param name="viewportSize">The viewport size, in points.</param>
        <summary>Gets the location in screen-space of the <paramref name="point" /> projected into the world space.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewMatrix">
      <MemberSignature Language="C#" Value="public virtual OpenTK.NMatrix4 GetViewMatrix (UIKit.UIInterfaceOrientation orientation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype OpenTK.NMatrix4 GetViewMatrix(valuetype UIKit.UIInterfaceOrientation orientation) cil managed" />
      <MemberSignature Language="DocId" Value="M:ARKit.ARCamera.GetViewMatrix(UIKit.UIInterfaceOrientation)" />
      <MemberSignature Language="F#" Value="abstract member GetViewMatrix : UIKit.UIInterfaceOrientation -&gt; OpenTK.NMatrix4&#xA;override this.GetViewMatrix : UIKit.UIInterfaceOrientation -&gt; OpenTK.NMatrix4" Usage="aRCamera.GetViewMatrix orientation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("viewMatrixForOrientation:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>OpenTK.NMatrix4</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="orientation" Type="UIKit.UIInterfaceOrientation" />
      </Parameters>
      <Docs>
        <param name="orientation">The camera orientation.</param>
        <summary>Gets the view matrix, which can be used to convert from world coordinates to camera coordinates.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageResolution">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGSize ImageResolution { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGSize ImageResolution" />
      <MemberSignature Language="DocId" Value="P:ARKit.ARCamera.ImageResolution" />
      <MemberSignature Language="F#" Value="member this.ImageResolution : CoreGraphics.CGSize" Usage="ARKit.ARCamera.ImageResolution" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("imageResolution")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The resolution, in pixels, of the capturing camera.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Intrinsics">
      <MemberSignature Language="C#" Value="public virtual OpenTK.NMatrix3 Intrinsics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype OpenTK.NMatrix3 Intrinsics" />
      <MemberSignature Language="DocId" Value="P:ARKit.ARCamera.Intrinsics" />
      <MemberSignature Language="F#" Value="member this.Intrinsics : OpenTK.NMatrix3" Usage="ARKit.ARCamera.Intrinsics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("intrinsics")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>OpenTK.NMatrix3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A matrix specifying the focal length and optical center of the capturing camera.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The focal length of the camera is expressed in terms of pixels. The optical center (aka "principal point") is also in pixels, measured from the top-left of the frame. The matrix is defined as:</para>
          <para>
            <img href="~/ARKit/_images/ARCamera.Intrinsics.png" />
          </para>
          <para>This matrix is often referred to as <c>K</c> in texts on camera calibration, which will typically allow for a non-zero skew value in row 0, column 1.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Project">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint Project (OpenTK.NVector3 point, UIKit.UIInterfaceOrientation orientation, CoreGraphics.CGSize viewportSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGPoint Project(valuetype OpenTK.NVector3 point, valuetype UIKit.UIInterfaceOrientation orientation, valuetype CoreGraphics.CGSize viewportSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:ARKit.ARCamera.Project(OpenTK.NVector3,UIKit.UIInterfaceOrientation,CoreGraphics.CGSize)" />
      <MemberSignature Language="F#" Value="abstract member Project : OpenTK.NVector3 * UIKit.UIInterfaceOrientation * CoreGraphics.CGSize -&gt; CoreGraphics.CGPoint&#xA;override this.Project : OpenTK.NVector3 * UIKit.UIInterfaceOrientation * CoreGraphics.CGSize -&gt; CoreGraphics.CGPoint" Usage="aRCamera.Project (point, orientation, viewportSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("projectPoint:orientation:viewportSize:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="OpenTK.NVector3" />
        <Parameter Name="orientation" Type="UIKit.UIInterfaceOrientation" />
        <Parameter Name="viewportSize" Type="CoreGraphics.CGSize" />
      </Parameters>
      <Docs>
        <param name="point">The 3D point in world cordinates.</param>
        <param name="orientation">The orientation of the viewport.</param>
        <param name="viewportSize">The viewport size.</param>
        <summary>Returns the viewport-space projection of the 3D point in the world.</summary>
        <returns>The viewport-space projection of the 3D point in the world.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProjectionMatrix">
      <MemberSignature Language="C#" Value="public virtual OpenTK.NMatrix4 ProjectionMatrix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype OpenTK.NMatrix4 ProjectionMatrix" />
      <MemberSignature Language="DocId" Value="P:ARKit.ARCamera.ProjectionMatrix" />
      <MemberSignature Language="F#" Value="member this.ProjectionMatrix : OpenTK.NMatrix4" Usage="ARKit.ARCamera.ProjectionMatrix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("projectionMatrix")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>OpenTK.NMatrix4</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The projection matrix of the capturing camera.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The value returned by this method is equivalent to:  </para>
          <example>
            <code lang="C#"><![CDATA[
this.GetProjectionMatrix(
    this.ImageResolution,
    myOrientation, 
    0.001,
    1000.0
)
    ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackingState">
      <MemberSignature Language="C#" Value="public virtual ARKit.ARTrackingState TrackingState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype ARKit.ARTrackingState TrackingState" />
      <MemberSignature Language="DocId" Value="P:ARKit.ARCamera.TrackingState" />
      <MemberSignature Language="F#" Value="member this.TrackingState : ARKit.ARTrackingState" Usage="ARKit.ARCamera.TrackingState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("trackingState")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ARKit.ARTrackingState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The quality of the position tracking.</summary>
        <value>To be added.</value>
        <remarks>
          <para>If the <see cref="P:ARKit.ARCamera.TrackingState" /> is <see cref="F:ARKit.ARTrackingState.Limited" />, developers may consult <see cref="P:ARKit.ARCamera.TrackingStateReason" /> to diagnose the issue.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackingStateReason">
      <MemberSignature Language="C#" Value="public virtual ARKit.ARTrackingStateReason TrackingStateReason { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype ARKit.ARTrackingStateReason TrackingStateReason" />
      <MemberSignature Language="DocId" Value="P:ARKit.ARCamera.TrackingStateReason" />
      <MemberSignature Language="F#" Value="member this.TrackingStateReason : ARKit.ARTrackingStateReason" Usage="ARKit.ARCamera.TrackingStateReason" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("trackingStateReason")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ARKit.ARTrackingStateReason</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The cause when <see cref="P:ARKit.ARCamera.TrackingState" /> is <see cref="F:ARKit.ARTrackingState.Limited" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public virtual OpenTK.NMatrix4 Transform { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype OpenTK.NMatrix4 Transform" />
      <MemberSignature Language="DocId" Value="P:ARKit.ARCamera.Transform" />
      <MemberSignature Language="F#" Value="member this.Transform : OpenTK.NMatrix4" Usage="ARKit.ARCamera.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("transform")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>OpenTK.NMatrix4</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The position and orientation of the camera in the world coordinate space.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unproject">
      <MemberSignature Language="C#" Value="public virtual OpenTK.NVector3 Unproject (CoreGraphics.CGPoint point, OpenTK.NMatrix4 planeTransform, UIKit.UIInterfaceOrientation orientation, CoreGraphics.CGSize viewportSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype OpenTK.NVector3 Unproject(valuetype CoreGraphics.CGPoint point, valuetype OpenTK.NMatrix4 planeTransform, valuetype UIKit.UIInterfaceOrientation orientation, valuetype CoreGraphics.CGSize viewportSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:ARKit.ARCamera.Unproject(CoreGraphics.CGPoint,OpenTK.NMatrix4,UIKit.UIInterfaceOrientation,CoreGraphics.CGSize)" />
      <MemberSignature Language="F#" Value="abstract member Unproject : CoreGraphics.CGPoint * OpenTK.NMatrix4 * UIKit.UIInterfaceOrientation * CoreGraphics.CGSize -&gt; OpenTK.NVector3&#xA;override this.Unproject : CoreGraphics.CGPoint * OpenTK.NMatrix4 * UIKit.UIInterfaceOrientation * CoreGraphics.CGSize -&gt; OpenTK.NVector3" Usage="aRCamera.Unproject (point, planeTransform, orientation, viewportSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("unprojectPoint:ontoPlaneWithTransform:orientation:viewportSize:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>OpenTK.NVector3</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
        <Parameter Name="planeTransform" Type="OpenTK.NMatrix4" />
        <Parameter Name="orientation" Type="UIKit.UIInterfaceOrientation" />
        <Parameter Name="viewportSize" Type="CoreGraphics.CGSize" />
      </Parameters>
      <Docs>
        <param name="point">The point to unproject.</param>
        <param name="planeTransform">The XY plane of the current world coordinate space.</param>
        <param name="orientation">The orientation of the viewport.</param>
        <param name="viewportSize">The size of the viewport.</param>
        <summary>Returns the 3D world point of a rendered pixel in the viewport.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
