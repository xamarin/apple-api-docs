<Type Name="ARSession" FullName="ARKit.ARSession">
  <TypeSignature Language="C#" Value="public class ARSession : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ARSession extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:ARKit.ARSession" />
  <TypeSignature Language="F#" Value="type ARSession = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("ARSession", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.MacOSX, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Manages the camera capture, motion processing, and image analysis necessary to create a mixed-reality experience.</summary>
    <remarks>
      <para>An <see cref="T:ARKit.ARSession" /> object represents the system resources required for a mixed-reality experience. The <see cref="M:ARKit.ARSession.Run" /> method must be passed an <see cref="T:ARKit.ARSessionConfiguration" /> object that controls specific ebhaviors. </para>
      <para>Developers who use the <see cref="T:ARKit.ARSCNView" /> to present their AR imagery do not need to instantiate their own <see cref="T:ARKit.ARSession" /> object but instead should call <see cref="M:ARKit.ARSession.Run" /> on the <see cref="P:ARKit.ARSCNView.Session" /> property. For example:</para>
      <example>
        <code lang="C#"><![CDATA[
var arView = new ARSCNView();
var arConfig = new ARWorldTrackingSessionConfiguration { PlaneDetection = ARPlaneDetection.Horizontal };
arView.Session.Run (arConfig);
    ]]></code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ARSession ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:ARKit.ARSession.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ARSession (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:ARKit.ARSession.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new ARKit.ARSession : Foundation.NSObjectFlag -&gt; ARKit.ARSession" Usage="new ARKit.ARSession t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal ARSession (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:ARKit.ARSession.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new ARKit.ARSession : nativeint -&gt; ARKit.ARSession" Usage="new ARKit.ARSession handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAnchor">
      <MemberSignature Language="C#" Value="public virtual void AddAnchor (ARKit.ARAnchor anchor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAnchor(class ARKit.ARAnchor anchor) cil managed" />
      <MemberSignature Language="DocId" Value="M:ARKit.ARSession.AddAnchor(ARKit.ARAnchor)" />
      <MemberSignature Language="F#" Value="abstract member AddAnchor : ARKit.ARAnchor -&gt; unit&#xA;override this.AddAnchor : ARKit.ARAnchor -&gt; unit" Usage="aRSession.AddAnchor anchor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("addAnchor:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="ARKit.ARAnchor" />
      </Parameters>
      <Docs>
        <param name="anchor">The anchor to track.</param>
        <summary>Adds the specified <paramref name="anchor" /> to the set of tracked objects.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:ARKit.ARSession.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="ARKit.ARSession.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Configuration">
      <MemberSignature Language="C#" Value="public virtual ARKit.ARConfiguration Configuration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ARKit.ARConfiguration Configuration" />
      <MemberSignature Language="DocId" Value="P:ARKit.ARSession.Configuration" />
      <MemberSignature Language="F#" Value="member this.Configuration : ARKit.ARConfiguration" Usage="ARKit.ARSession.Configuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("configuration")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("configuration", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ARKit.ARConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the configuration of the <see cref="T:ARKit.ARSession" />.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateReferenceObject">
      <MemberSignature Language="C#" Value="public virtual void CreateReferenceObject (OpenTK.NMatrix4 transform, OpenTK.NVector3 center, OpenTK.NVector3 extent, Action&lt;ARKit.ARReferenceObject,Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateReferenceObject(valuetype OpenTK.NMatrix4 transform, valuetype OpenTK.NVector3 center, valuetype OpenTK.NVector3 extent, class System.Action`2&lt;class ARKit.ARReferenceObject, class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:ARKit.ARSession.CreateReferenceObject(OpenTK.NMatrix4,OpenTK.NVector3,OpenTK.NVector3,System.Action{ARKit.ARReferenceObject,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member CreateReferenceObject : OpenTK.NMatrix4 * OpenTK.NVector3 * OpenTK.NVector3 * Action&lt;ARKit.ARReferenceObject, Foundation.NSError&gt; -&gt; unit&#xA;override this.CreateReferenceObject : OpenTK.NMatrix4 * OpenTK.NVector3 * OpenTK.NVector3 * Action&lt;ARKit.ARReferenceObject, Foundation.NSError&gt; -&gt; unit" Usage="aRSession.CreateReferenceObject (transform, center, extent, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("createReferenceObjectWithTransform:center:extent:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transform" Type="OpenTK.NMatrix4" />
        <Parameter Name="center" Type="OpenTK.NVector3" />
        <Parameter Name="extent" Type="OpenTK.NVector3" />
        <Parameter Name="completionHandler" Type="System.Action&lt;ARKit.ARReferenceObject,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V0))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="transform">The transform to the position and orientation of the region from which to create a reference object.</param>
        <param name="center">The center of the region.</param>
        <param name="extent">The exent of the region, in the <paramref name="transform" /> coordinate space.</param>
        <param name="completionHandler">A handler that receives the created object, if present, and any error that occurs.</param>
        <summary>Creates and returns a reference object from a region in space.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateReferenceObjectAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;ARKit.ARReferenceObject&gt; CreateReferenceObjectAsync (OpenTK.NMatrix4 transform, OpenTK.NVector3 center, OpenTK.NVector3 extent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class ARKit.ARReferenceObject&gt; CreateReferenceObjectAsync(valuetype OpenTK.NMatrix4 transform, valuetype OpenTK.NVector3 center, valuetype OpenTK.NVector3 extent) cil managed" />
      <MemberSignature Language="DocId" Value="M:ARKit.ARSession.CreateReferenceObjectAsync(OpenTK.NMatrix4,OpenTK.NVector3,OpenTK.NVector3)" />
      <MemberSignature Language="F#" Value="abstract member CreateReferenceObjectAsync : OpenTK.NMatrix4 * OpenTK.NVector3 * OpenTK.NVector3 -&gt; System.Threading.Tasks.Task&lt;ARKit.ARReferenceObject&gt;&#xA;override this.CreateReferenceObjectAsync : OpenTK.NMatrix4 * OpenTK.NVector3 * OpenTK.NVector3 -&gt; System.Threading.Tasks.Task&lt;ARKit.ARReferenceObject&gt;" Usage="aRSession.CreateReferenceObjectAsync (transform, center, extent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;ARKit.ARReferenceObject&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transform" Type="OpenTK.NMatrix4" />
        <Parameter Name="center" Type="OpenTK.NVector3" />
        <Parameter Name="extent" Type="OpenTK.NVector3" />
      </Parameters>
      <Docs>
        <param name="transform">The transform to the position and orientation of the region from which to create a reference object.</param>
        <param name="center">The center of the region.</param>
        <param name="extent">The exent of the region, in the <paramref name="transform" /> coordinate space.</param>
        <summary>Asynchronously creates a reference object from a region in space and returns a task that contains the resulting object.</summary>
        <returns>A task that receives the created object, if present.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentFrame">
      <MemberSignature Language="C#" Value="public virtual ARKit.ARFrame CurrentFrame { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ARKit.ARFrame CurrentFrame" />
      <MemberSignature Language="DocId" Value="P:ARKit.ARSession.CurrentFrame" />
      <MemberSignature Language="F#" Value="member this.CurrentFrame : ARKit.ARFrame" Usage="ARKit.ARSession.CurrentFrame" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("currentFrame")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("currentFrame", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ARKit.ARFrame</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The most-recently processed <see cref="T:ARKit.ARFrame" />.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public virtual ARKit.IARSessionDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ARKit.IARSessionDelegate Delegate" />
      <MemberSignature Language="DocId" Value="P:ARKit.ARSession.Delegate" />
      <MemberSignature Language="F#" Value="member this.Delegate : ARKit.IARSessionDelegate with get, set" Usage="ARKit.ARSession.Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("delegate")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setDelegate:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("delegate", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDelegate:", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ARKit.IARSessionDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the ARKit.IARSessionDelegate model class which acts as the class delegate.</summary>
        <value>The instance of the ARKit.IARSessionDelegate model class</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DelegateQueue">
      <MemberSignature Language="C#" Value="public virtual CoreFoundation.DispatchQueue DelegateQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreFoundation.DispatchQueue DelegateQueue" />
      <MemberSignature Language="DocId" Value="P:ARKit.ARSession.DelegateQueue" />
      <MemberSignature Language="F#" Value="member this.DelegateQueue : CoreFoundation.DispatchQueue with get, set" Usage="ARKit.ARSession.DelegateQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("delegateQueue")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setDelegateQueue:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("delegateQueue", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDelegateQueue:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreFoundation.DispatchQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the dispatch queue on which the <see cref="P:ARKit.ARSession.Delegate" /> object's methods are called.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:ARKit.ARSession.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="aRSession.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the ARSession object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the ARSession class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the ARSession ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentWorldMap">
      <MemberSignature Language="C#" Value="public virtual void GetCurrentWorldMap (Action&lt;ARKit.ARWorldMap,Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetCurrentWorldMap(class System.Action`2&lt;class ARKit.ARWorldMap, class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:ARKit.ARSession.GetCurrentWorldMap(System.Action{ARKit.ARWorldMap,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentWorldMap : Action&lt;ARKit.ARWorldMap, Foundation.NSError&gt; -&gt; unit&#xA;override this.GetCurrentWorldMap : Action&lt;ARKit.ARWorldMap, Foundation.NSError&gt; -&gt; unit" Usage="aRSession.GetCurrentWorldMap completionHandler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("getCurrentWorldMapWithCompletionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="completionHandler" Type="System.Action&lt;ARKit.ARWorldMap,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V1))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="completionHandler">A handler that receives the map, if present, and an error, if one occured.</param>
        <summary>Passes the current world map to a completion handler.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentWorldMapAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;ARKit.ARWorldMap&gt; GetCurrentWorldMapAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class ARKit.ARWorldMap&gt; GetCurrentWorldMapAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:ARKit.ARSession.GetCurrentWorldMapAsync" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentWorldMapAsync : unit -&gt; System.Threading.Tasks.Task&lt;ARKit.ARWorldMap&gt;&#xA;override this.GetCurrentWorldMapAsync : unit -&gt; System.Threading.Tasks.Task&lt;ARKit.ARWorldMap&gt;" Usage="aRSession.GetCurrentWorldMapAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;ARKit.ARWorldMap&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Asynchronously returns a task that contains the current world map.</summary>
        <returns>A task that contains the current world map.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public virtual void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:ARKit.ARSession.Pause" />
      <MemberSignature Language="F#" Value="abstract member Pause : unit -&gt; unit&#xA;override this.Pause : unit -&gt; unit" Usage="aRSession.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("pause")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pauses frame capture, while maintaining configuration and state.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnchor">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnchor (ARKit.ARAnchor anchor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnchor(class ARKit.ARAnchor anchor) cil managed" />
      <MemberSignature Language="DocId" Value="M:ARKit.ARSession.RemoveAnchor(ARKit.ARAnchor)" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnchor : ARKit.ARAnchor -&gt; unit&#xA;override this.RemoveAnchor : ARKit.ARAnchor -&gt; unit" Usage="aRSession.RemoveAnchor anchor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeAnchor:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="ARKit.ARAnchor" />
      </Parameters>
      <Docs>
        <param name="anchor">The anchor to stop tracking.</param>
        <summary>Removes the <paramref name="anchor" /> from the set of tracked objects.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public virtual void Run (ARKit.ARConfiguration configuration, ARKit.ARSessionRunOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Run(class ARKit.ARConfiguration configuration, valuetype ARKit.ARSessionRunOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:ARKit.ARSession.Run(ARKit.ARConfiguration,ARKit.ARSessionRunOptions)" />
      <MemberSignature Language="F#" Value="abstract member Run : ARKit.ARConfiguration * ARKit.ARSessionRunOptions -&gt; unit&#xA;override this.Run : ARKit.ARConfiguration * ARKit.ARSessionRunOptions -&gt; unit" Usage="aRSession.Run (configuration, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("runWithConfiguration:options:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configuration" Type="ARKit.ARConfiguration" />
        <Parameter Name="options" Type="ARKit.ARSessionRunOptions" />
      </Parameters>
      <Docs>
        <param name="configuration">World alignment, light estimation, and audio configuration information.</param>
        <param name="options">Whether existing anchors are kept, and whether position and motion tracking is continued from a previous session.</param>
        <summary>Begins an AR processing session.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetWorldOrigin">
      <MemberSignature Language="C#" Value="public virtual void SetWorldOrigin (OpenTK.NMatrix4 relativeTransform);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetWorldOrigin(valuetype OpenTK.NMatrix4 relativeTransform) cil managed" />
      <MemberSignature Language="DocId" Value="M:ARKit.ARSession.SetWorldOrigin(OpenTK.NMatrix4)" />
      <MemberSignature Language="F#" Value="abstract member SetWorldOrigin : OpenTK.NMatrix4 -&gt; unit&#xA;override this.SetWorldOrigin : OpenTK.NMatrix4 -&gt; unit" Usage="aRSession.SetWorldOrigin relativeTransform" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setWorldOrigin:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 3, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeTransform" Type="OpenTK.NMatrix4" />
      </Parameters>
      <Docs>
        <param name="relativeTransform">The transform to apply to the world origin to create a new world origin.</param>
        <summary>Applies the specified transform to the world origin, moving it and translating it to the new world origin.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
