<Type Name="SecPolicy" FullName="Security.SecPolicy">
  <TypeSignature Language="C#" Value="public class SecPolicy : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SecPolicy extends System.Object implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Security.SecPolicy" />
  <TypeSignature Language="F#" Value="type SecPolicy = class&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Encapsulates a security policy. A policy comprises a set of rules that specify how to evaluate a certificate for a certain level of trust.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecPolicy (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Security.SecPolicy.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new Security.SecPolicy : nativeint -&gt; Security.SecPolicy" Usage="new Security.SecPolicy handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBasicX509Policy">
      <MemberSignature Language="C#" Value="public static Security.SecPolicy CreateBasicX509Policy ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Security.SecPolicy CreateBasicX509Policy() cil managed" />
      <MemberSignature Language="DocId" Value="M:Security.SecPolicy.CreateBasicX509Policy" />
      <MemberSignature Language="F#" Value="static member CreateBasicX509Policy : unit -&gt; Security.SecPolicy" Usage="Security.SecPolicy.CreateBasicX509Policy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Security.SecPolicy</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Create a policy instance that represent the basic X.509 certificate profile.</summary>
        <returns>A SecPolicy instance that can be used to validate a SecCertificate using SecTrust.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePolicy">
      <MemberSignature Language="C#" Value="public static Security.SecPolicy CreatePolicy (Foundation.NSString policyIdentifier, Foundation.NSDictionary properties);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Security.SecPolicy CreatePolicy(class Foundation.NSString policyIdentifier, class Foundation.NSDictionary properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:Security.SecPolicy.CreatePolicy(Foundation.NSString,Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="static member CreatePolicy : Foundation.NSString * Foundation.NSDictionary -&gt; Security.SecPolicy" Usage="Security.SecPolicy.CreatePolicy (policyIdentifier, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Security.SecPolicy</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policyIdentifier" Type="Foundation.NSString" />
        <Parameter Name="properties" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="policyIdentifier">To be added.</param>
        <param name="properties">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRevocationPolicy">
      <MemberSignature Language="C#" Value="public static Security.SecPolicy CreateRevocationPolicy (Security.SecRevocation revocationFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Security.SecPolicy CreateRevocationPolicy(valuetype Security.SecRevocation revocationFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Security.SecPolicy.CreateRevocationPolicy(Security.SecRevocation)" />
      <MemberSignature Language="F#" Value="static member CreateRevocationPolicy : Security.SecRevocation -&gt; Security.SecPolicy" Usage="Security.SecPolicy.CreateRevocationPolicy revocationFlags" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Security.SecPolicy</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="revocationFlags" Type="Security.SecRevocation" />
      </Parameters>
      <Docs>
        <param name="revocationFlags">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSslPolicy">
      <MemberSignature Language="C#" Value="public static Security.SecPolicy CreateSslPolicy (bool server, string hostName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Security.SecPolicy CreateSslPolicy(bool server, string hostName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Security.SecPolicy.CreateSslPolicy(System.Boolean,System.String)" />
      <MemberSignature Language="F#" Value="static member CreateSslPolicy : bool * string -&gt; Security.SecPolicy" Usage="Security.SecPolicy.CreateSslPolicy (server, hostName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Security.SecPolicy</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="server" Type="System.Boolean" />
        <Parameter Name="hostName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="server">Indicate if the policy is for a server (true) or client (false) certificate.</param>
        <param name="hostName">The server host name on which the policy will be applied.</param>
        <summary>Create a policy instance that represent the SSL/TLS profile.</summary>
        <returns>A SecPolicy instance that can be used to validate a SecCertificate using SecTrust.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Security.SecPolicy.Dispose" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="secPolicy.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resources used by the SecPolicy object.</summary>
        <remarks>
          <para>The Dispose method releases the resources used by the SecPolicy class.</para>
          <para>Calling the Dispose method when the application is finished using the SecPolicy ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.  For more information on releasing resources see ``Cleaning up Unmananaged Resources'' at https://msdn.microsoft.com/en-us/library/498928w2.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Security.SecPolicy.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="secPolicy.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the SecPolicy object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the SecPolicy class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the SecPolicy ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at https://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Security.SecPolicy.Equals(System.Object)" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="secPolicy.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SecPolicy ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Security.SecPolicy.Finalize" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="secPolicy.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finalizer for the SecPolicy object</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Security.SecPolicy.GetHashCode" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="secPolicy.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public Foundation.NSDictionary GetProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.NSDictionary GetProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:Security.SecPolicy.GetProperties" />
      <MemberSignature Language="F#" Value="member this.GetProperties : unit -&gt; Foundation.NSDictionary" Usage="secPolicy.GetProperties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeID">
      <MemberSignature Language="C#" Value="public static nint GetTypeID ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;/System/Library/Frameworks/Security.framework/Security&quot; as &quot;SecPolicyGetTypeID&quot; winapi)valuetype System.nint GetTypeID() cil managed" />
      <MemberSignature Language="DocId" Value="M:Security.SecPolicy.GetTypeID" />
      <MemberSignature Language="F#" Value="static member GetTypeID : unit -&gt; nint" Usage="Security.SecPolicy.GetTypeID " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Type identifier for the Security.SecPolicy type.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>The returned token is the CoreFoundation type identifier (CFType) that has been assigned to this class.</para>
          <para>This can be used to determine type identity between different CoreFoundation objects.</para>
          <para>You can retrieve the type of a CoreFoundation object by invoking the <see cref="M:CoreFoundation.CFType.GetTypeID(System.IntPtr)" /> on the native handle of the object</para>
          <example>
            <code lang="C#"><![CDATA[bool isSecPolicy = (CFType.GetTypeID (foo.Handle) == SecPolicy.GetTypeID ());]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:Security.SecPolicy.Handle" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="Security.SecPolicy.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:ObjCRuntime.INativeObject.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Handle (pointer) to the unmanaged object representation.</summary>
        <value>A pointer</value>
        <remarks>This IntPtr is a handle to the underlying unmanaged representation for this object.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Security.SecPolicy a, Security.SecPolicy b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class Security.SecPolicy a, class Security.SecPolicy b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Security.SecPolicy.op_Equality(Security.SecPolicy,Security.SecPolicy)" />
      <MemberSignature Language="F#" Value="static member ( = ) : Security.SecPolicy * Security.SecPolicy -&gt; bool" Usage="a = b" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="Security.SecPolicy" />
        <Parameter Name="b" Type="Security.SecPolicy" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <param name="b">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Security.SecPolicy a, Security.SecPolicy b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class Security.SecPolicy a, class Security.SecPolicy b) cil managed" />
      <MemberSignature Language="DocId" Value="M:Security.SecPolicy.op_Inequality(Security.SecPolicy,Security.SecPolicy)" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Security.SecPolicy * Security.SecPolicy -&gt; bool" Usage="Security.SecPolicy.op_Inequality (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="Security.SecPolicy" />
        <Parameter Name="b" Type="Security.SecPolicy" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <param name="b">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
