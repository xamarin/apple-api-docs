<Type Name="NETunnelProvider" FullName="NetworkExtension.NETunnelProvider">
  <TypeSignature Language="C#" Value="public class NETunnelProvider : NetworkExtension.NEProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NETunnelProvider extends NetworkExtension.NEProvider" />
  <TypeSignature Language="DocId" Value="T:NetworkExtension.NETunnelProvider" />
  <TypeSignature Language="F#" Value="type NETunnelProvider = class&#xA;    inherit NEProvider" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>NetworkExtension.NEProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("NETunnelProvider", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Base class for extensions that implement client-side ends of a network tunnel.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/NetworkExtension/Reference/NETunnelProviderClassRef/index.html">Apple documentation for <c>NETunnelProvider</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NETunnelProvider (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:NetworkExtension.NETunnelProvider.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new NetworkExtension.NETunnelProvider : Foundation.NSObjectFlag -&gt; NetworkExtension.NETunnelProvider" Usage="new NetworkExtension.NETunnelProvider t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NETunnelProvider (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:NetworkExtension.NETunnelProvider.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new NetworkExtension.NETunnelProvider : nativeint -&gt; NetworkExtension.NETunnelProvider" Usage="new NetworkExtension.NETunnelProvider handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppRules">
      <MemberSignature Language="C#" Value="public virtual NetworkExtension.NEAppRule[] AppRules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NetworkExtension.NEAppRule[] AppRules" />
      <MemberSignature Language="DocId" Value="P:NetworkExtension.NETunnelProvider.AppRules" />
      <MemberSignature Language="F#" Value="member this.AppRules : NetworkExtension.NEAppRule[]" Usage="NetworkExtension.NETunnelProvider.AppRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("appRules")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>NetworkExtension.NEAppRule[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the rules that control which apps will use the tunneling session.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:NetworkExtension.NETunnelProvider.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="NetworkExtension.NETunnelProvider.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleAppMessage">
      <MemberSignature Language="C#" Value="public virtual void HandleAppMessage (Foundation.NSData messageData, Action&lt;Foundation.NSData&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HandleAppMessage(class Foundation.NSData messageData, class System.Action`1&lt;class Foundation.NSData&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:NetworkExtension.NETunnelProvider.HandleAppMessage(Foundation.NSData,System.Action{Foundation.NSData})" />
      <MemberSignature Language="F#" Value="abstract member HandleAppMessage : Foundation.NSData * Action&lt;Foundation.NSData&gt; -&gt; unit&#xA;override this.HandleAppMessage : Foundation.NSData * Action&lt;Foundation.NSData&gt; -&gt; unit" Usage="nETunnelProvider.HandleAppMessage (messageData, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("handleAppMessage:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageData" Type="Foundation.NSData" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSData&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V15))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="messageData">To be added.</param>
        <param name="completionHandler">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Method that is called to handle messages from the containing app.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleAppMessageAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Foundation.NSData&gt; HandleAppMessageAsync (Foundation.NSData messageData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Foundation.NSData&gt; HandleAppMessageAsync(class Foundation.NSData messageData) cil managed" />
      <MemberSignature Language="DocId" Value="M:NetworkExtension.NETunnelProvider.HandleAppMessageAsync(Foundation.NSData)" />
      <MemberSignature Language="F#" Value="abstract member HandleAppMessageAsync : Foundation.NSData -&gt; System.Threading.Tasks.Task&lt;Foundation.NSData&gt;&#xA;override this.HandleAppMessageAsync : Foundation.NSData -&gt; System.Threading.Tasks.Task&lt;Foundation.NSData&gt;" Usage="nETunnelProvider.HandleAppMessageAsync messageData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Foundation.NSData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageData" Type="Foundation.NSData" />
      </Parameters>
      <Docs>
        <param name="messageData">To be added.</param>
        <summary>Method that is called to handle messages from the containing app.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous HandleAppMessage operation.  The value of the TResult parameter is of type System.Action&lt;Foundation.NSData&gt;.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtocolConfiguration">
      <MemberSignature Language="C#" Value="public virtual NetworkExtension.NEVpnProtocol ProtocolConfiguration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NetworkExtension.NEVpnProtocol ProtocolConfiguration" />
      <MemberSignature Language="DocId" Value="P:NetworkExtension.NETunnelProvider.ProtocolConfiguration" />
      <MemberSignature Language="F#" Value="member this.ProtocolConfiguration : NetworkExtension.NEVpnProtocol" Usage="NetworkExtension.NETunnelProvider.ProtocolConfiguration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("protocolConfiguration")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>NetworkExtension.NEVpnProtocol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the tunnel configuration.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reasserting">
      <MemberSignature Language="C#" Value="public virtual bool Reasserting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Reasserting" />
      <MemberSignature Language="DocId" Value="P:NetworkExtension.NETunnelProvider.Reasserting" />
      <MemberSignature Language="F#" Value="member this.Reasserting : bool with get, set" Usage="NetworkExtension.NETunnelProvider.Reasserting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("reasserting")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setReasserting:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a Boolean value that tells the system that the tunnel is being reestablished.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RoutingMethod">
      <MemberSignature Language="C#" Value="public virtual NetworkExtension.NETunnelProviderRoutingMethod RoutingMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype NetworkExtension.NETunnelProviderRoutingMethod RoutingMethod" />
      <MemberSignature Language="DocId" Value="P:NetworkExtension.NETunnelProvider.RoutingMethod" />
      <MemberSignature Language="F#" Value="member this.RoutingMethod : NetworkExtension.NETunnelProviderRoutingMethod" Usage="NetworkExtension.NETunnelProvider.RoutingMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("routingMethod")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>NetworkExtension.NETunnelProviderRoutingMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the routing method.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTunnelNetworkSettings">
      <MemberSignature Language="C#" Value="public virtual void SetTunnelNetworkSettings (NetworkExtension.NETunnelNetworkSettings tunnelNetworkSettings, Action&lt;Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTunnelNetworkSettings(class NetworkExtension.NETunnelNetworkSettings tunnelNetworkSettings, class System.Action`1&lt;class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:NetworkExtension.NETunnelProvider.SetTunnelNetworkSettings(NetworkExtension.NETunnelNetworkSettings,System.Action{Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member SetTunnelNetworkSettings : NetworkExtension.NETunnelNetworkSettings * Action&lt;Foundation.NSError&gt; -&gt; unit&#xA;override this.SetTunnelNetworkSettings : NetworkExtension.NETunnelNetworkSettings * Action&lt;Foundation.NSError&gt; -&gt; unit" Usage="nETunnelProvider.SetTunnelNetworkSettings (tunnelNetworkSettings, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setTunnelNetworkSettings:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tunnelNetworkSettings" Type="NetworkExtension.NETunnelNetworkSettings" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V9))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tunnelNetworkSettings">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="completionHandler">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Updates the network settings for the tunnel.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTunnelNetworkSettingsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SetTunnelNetworkSettingsAsync (NetworkExtension.NETunnelNetworkSettings tunnelNetworkSettings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SetTunnelNetworkSettingsAsync(class NetworkExtension.NETunnelNetworkSettings tunnelNetworkSettings) cil managed" />
      <MemberSignature Language="DocId" Value="M:NetworkExtension.NETunnelProvider.SetTunnelNetworkSettingsAsync(NetworkExtension.NETunnelNetworkSettings)" />
      <MemberSignature Language="F#" Value="abstract member SetTunnelNetworkSettingsAsync : NetworkExtension.NETunnelNetworkSettings -&gt; System.Threading.Tasks.Task&#xA;override this.SetTunnelNetworkSettingsAsync : NetworkExtension.NETunnelNetworkSettings -&gt; System.Threading.Tasks.Task" Usage="nETunnelProvider.SetTunnelNetworkSettingsAsync tunnelNetworkSettings" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tunnelNetworkSettings" Type="NetworkExtension.NETunnelNetworkSettings" />
      </Parameters>
      <Docs>
        <param name="tunnelNetworkSettings">To be added.This parameter can be .</param>
        <summary>Updates the network settings for the tunnel.</summary>
        <returns>A task that represents the asynchronous SetTunnelNetworkSettings operation</returns>
        <remarks>
          <para copied="true">The SetTunnelNetworkSettingsAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
