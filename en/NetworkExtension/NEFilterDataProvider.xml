<Type Name="NEFilterDataProvider" FullName="NetworkExtension.NEFilterDataProvider">
  <TypeSignature Language="C#" Value="public class NEFilterDataProvider : NetworkExtension.NEFilterProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NEFilterDataProvider extends NetworkExtension.NEFilterProvider" />
  <TypeSignature Language="DocId" Value="T:NetworkExtension.NEFilterDataProvider" />
  <TypeSignature Language="F#" Value="type NEFilterDataProvider = class&#xA;    inherit NEFilterProvider" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>NetworkExtension.NEFilterProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("NEFilterDataProvider", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Filters network data.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/NetworkExtension/Reference/NEFilterDataProviderClassRef/index.html">Apple documentation for <c>NEFilterDataProvider</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NEFilterDataProvider (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:NetworkExtension.NEFilterDataProvider.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new NetworkExtension.NEFilterDataProvider : Foundation.NSObjectFlag -&gt; NetworkExtension.NEFilterDataProvider" Usage="new NetworkExtension.NEFilterDataProvider t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NEFilterDataProvider (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:NetworkExtension.NEFilterDataProvider.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new NetworkExtension.NEFilterDataProvider : nativeint -&gt; NetworkExtension.NEFilterDataProvider" Usage="new NetworkExtension.NEFilterDataProvider handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:NetworkExtension.NEFilterDataProvider.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="NetworkExtension.NEFilterDataProvider.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleInboundDataCompleteForFlow">
      <MemberSignature Language="C#" Value="public virtual NetworkExtension.NEFilterDataVerdict HandleInboundDataCompleteForFlow (NetworkExtension.NEFilterFlow flow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class NetworkExtension.NEFilterDataVerdict HandleInboundDataCompleteForFlow(class NetworkExtension.NEFilterFlow flow) cil managed" />
      <MemberSignature Language="DocId" Value="M:NetworkExtension.NEFilterDataProvider.HandleInboundDataCompleteForFlow(NetworkExtension.NEFilterFlow)" />
      <MemberSignature Language="F#" Value="abstract member HandleInboundDataCompleteForFlow : NetworkExtension.NEFilterFlow -&gt; NetworkExtension.NEFilterDataVerdict&#xA;override this.HandleInboundDataCompleteForFlow : NetworkExtension.NEFilterFlow -&gt; NetworkExtension.NEFilterDataVerdict" Usage="nEFilterDataProvider.HandleInboundDataCompleteForFlow flow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("handleInboundDataCompleteForFlow:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>NetworkExtension.NEFilterDataVerdict</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flow" Type="NetworkExtension.NEFilterFlow" />
      </Parameters>
      <Docs>
        <param name="flow">To be added.</param>
        <summary>Method that is called to make a filtering decision for inbound data flow after the data is seen.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleInboundDataFromFlow">
      <MemberSignature Language="C#" Value="public virtual NetworkExtension.NEFilterDataVerdict HandleInboundDataFromFlow (NetworkExtension.NEFilterFlow flow, nuint offset, Foundation.NSData readBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class NetworkExtension.NEFilterDataVerdict HandleInboundDataFromFlow(class NetworkExtension.NEFilterFlow flow, valuetype System.nuint offset, class Foundation.NSData readBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:NetworkExtension.NEFilterDataProvider.HandleInboundDataFromFlow(NetworkExtension.NEFilterFlow,System.nuint,Foundation.NSData)" />
      <MemberSignature Language="F#" Value="abstract member HandleInboundDataFromFlow : NetworkExtension.NEFilterFlow * nuint * Foundation.NSData -&gt; NetworkExtension.NEFilterDataVerdict&#xA;override this.HandleInboundDataFromFlow : NetworkExtension.NEFilterFlow * nuint * Foundation.NSData -&gt; NetworkExtension.NEFilterDataVerdict" Usage="nEFilterDataProvider.HandleInboundDataFromFlow (flow, offset, readBytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("handleInboundDataFromFlow:readBytesStartOffset:readBytes:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>NetworkExtension.NEFilterDataVerdict</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flow" Type="NetworkExtension.NEFilterFlow" />
        <Parameter Name="offset" Type="System.nuint" />
        <Parameter Name="readBytes" Type="Foundation.NSData" />
      </Parameters>
      <Docs>
        <param name="flow">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="readBytes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleNewFlow">
      <MemberSignature Language="C#" Value="public virtual NetworkExtension.NEFilterNewFlowVerdict HandleNewFlow (NetworkExtension.NEFilterFlow flow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class NetworkExtension.NEFilterNewFlowVerdict HandleNewFlow(class NetworkExtension.NEFilterFlow flow) cil managed" />
      <MemberSignature Language="DocId" Value="M:NetworkExtension.NEFilterDataProvider.HandleNewFlow(NetworkExtension.NEFilterFlow)" />
      <MemberSignature Language="F#" Value="abstract member HandleNewFlow : NetworkExtension.NEFilterFlow -&gt; NetworkExtension.NEFilterNewFlowVerdict&#xA;override this.HandleNewFlow : NetworkExtension.NEFilterFlow -&gt; NetworkExtension.NEFilterNewFlowVerdict" Usage="nEFilterDataProvider.HandleNewFlow flow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("handleNewFlow:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>NetworkExtension.NEFilterNewFlowVerdict</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flow" Type="NetworkExtension.NEFilterFlow" />
      </Parameters>
      <Docs>
        <param name="flow">To be added.</param>
        <summary>Method that is called to filter a new network flow.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleOutboundDataCompleteForFlow">
      <MemberSignature Language="C#" Value="public virtual NetworkExtension.NEFilterDataVerdict HandleOutboundDataCompleteForFlow (NetworkExtension.NEFilterFlow flow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class NetworkExtension.NEFilterDataVerdict HandleOutboundDataCompleteForFlow(class NetworkExtension.NEFilterFlow flow) cil managed" />
      <MemberSignature Language="DocId" Value="M:NetworkExtension.NEFilterDataProvider.HandleOutboundDataCompleteForFlow(NetworkExtension.NEFilterFlow)" />
      <MemberSignature Language="F#" Value="abstract member HandleOutboundDataCompleteForFlow : NetworkExtension.NEFilterFlow -&gt; NetworkExtension.NEFilterDataVerdict&#xA;override this.HandleOutboundDataCompleteForFlow : NetworkExtension.NEFilterFlow -&gt; NetworkExtension.NEFilterDataVerdict" Usage="nEFilterDataProvider.HandleOutboundDataCompleteForFlow flow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("handleOutboundDataCompleteForFlow:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>NetworkExtension.NEFilterDataVerdict</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flow" Type="NetworkExtension.NEFilterFlow" />
      </Parameters>
      <Docs>
        <param name="flow">To be added.</param>
        <summary>ethod that is called to make a filtering decision for outbound data flow after the data is seen.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleOutboundDataFromFlow">
      <MemberSignature Language="C#" Value="public virtual NetworkExtension.NEFilterDataVerdict HandleOutboundDataFromFlow (NetworkExtension.NEFilterFlow flow, nuint offset, Foundation.NSData readBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class NetworkExtension.NEFilterDataVerdict HandleOutboundDataFromFlow(class NetworkExtension.NEFilterFlow flow, valuetype System.nuint offset, class Foundation.NSData readBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:NetworkExtension.NEFilterDataProvider.HandleOutboundDataFromFlow(NetworkExtension.NEFilterFlow,System.nuint,Foundation.NSData)" />
      <MemberSignature Language="F#" Value="abstract member HandleOutboundDataFromFlow : NetworkExtension.NEFilterFlow * nuint * Foundation.NSData -&gt; NetworkExtension.NEFilterDataVerdict&#xA;override this.HandleOutboundDataFromFlow : NetworkExtension.NEFilterFlow * nuint * Foundation.NSData -&gt; NetworkExtension.NEFilterDataVerdict" Usage="nEFilterDataProvider.HandleOutboundDataFromFlow (flow, offset, readBytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("handleOutboundDataFromFlow:readBytesStartOffset:readBytes:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>NetworkExtension.NEFilterDataVerdict</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flow" Type="NetworkExtension.NEFilterFlow" />
        <Parameter Name="offset" Type="System.nuint" />
        <Parameter Name="readBytes" Type="Foundation.NSData" />
      </Parameters>
      <Docs>
        <param name="flow">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="readBytes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleRemediationForFlow">
      <MemberSignature Language="C#" Value="public virtual NetworkExtension.NEFilterRemediationVerdict HandleRemediationForFlow (NetworkExtension.NEFilterFlow flow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class NetworkExtension.NEFilterRemediationVerdict HandleRemediationForFlow(class NetworkExtension.NEFilterFlow flow) cil managed" />
      <MemberSignature Language="DocId" Value="M:NetworkExtension.NEFilterDataProvider.HandleRemediationForFlow(NetworkExtension.NEFilterFlow)" />
      <MemberSignature Language="F#" Value="abstract member HandleRemediationForFlow : NetworkExtension.NEFilterFlow -&gt; NetworkExtension.NEFilterRemediationVerdict&#xA;override this.HandleRemediationForFlow : NetworkExtension.NEFilterFlow -&gt; NetworkExtension.NEFilterRemediationVerdict" Usage="nEFilterDataProvider.HandleRemediationForFlow flow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("handleRemediationForFlow:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>NetworkExtension.NEFilterRemediationVerdict</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flow" Type="NetworkExtension.NEFilterFlow" />
      </Parameters>
      <Docs>
        <param name="flow">To be added.</param>
        <summary>Method that is called to handle a user remediation request.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleRulesChanged">
      <MemberSignature Language="C#" Value="public virtual void HandleRulesChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HandleRulesChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:NetworkExtension.NEFilterDataProvider.HandleRulesChanged" />
      <MemberSignature Language="F#" Value="abstract member HandleRulesChanged : unit -&gt; unit&#xA;override this.HandleRulesChanged : unit -&gt; unit" Usage="nEFilterDataProvider.HandleRulesChanged " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("handleRulesChanged")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Method that is called to handle to handle a change to the filtering rules.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
