<Type Name="NWTcpConnectionAuthenticationDelegate" FullName="NetworkExtension.NWTcpConnectionAuthenticationDelegate">
  <TypeSignature Language="C#" Value="public class NWTcpConnectionAuthenticationDelegate : Foundation.NSObject, IDisposable, NetworkExtension.INWTcpConnectionAuthenticationDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NWTcpConnectionAuthenticationDelegate extends Foundation.NSObject implements class NetworkExtension.INWTcpConnectionAuthenticationDelegate, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:NetworkExtension.NWTcpConnectionAuthenticationDelegate" />
  <TypeSignature Language="F#" Value="type NWTcpConnectionAuthenticationDelegate = class&#xA;    inherit NSObject&#xA;    interface INWTcpConnectionAuthenticationDelegate&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>NetworkExtension.INWTcpConnectionAuthenticationDelegate</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Register("NWTCPConnectionAuthenticationDelegate", false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Class that handles authentication for network connections.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/NetworkExtension/Reference/NWTCPConnectionAuthenticationDelegateClassRef/index.html">Apple documentation for <c>NWTCPConnectionAuthenticationDelegate</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NWTcpConnectionAuthenticationDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:NetworkExtension.NWTcpConnectionAuthenticationDelegate.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NWTcpConnectionAuthenticationDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:NetworkExtension.NWTcpConnectionAuthenticationDelegate.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new NetworkExtension.NWTcpConnectionAuthenticationDelegate : Foundation.NSObjectFlag -&gt; NetworkExtension.NWTcpConnectionAuthenticationDelegate" Usage="new NetworkExtension.NWTcpConnectionAuthenticationDelegate t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NWTcpConnectionAuthenticationDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:NetworkExtension.NWTcpConnectionAuthenticationDelegate.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new NetworkExtension.NWTcpConnectionAuthenticationDelegate : nativeint -&gt; NetworkExtension.NWTcpConnectionAuthenticationDelegate" Usage="new NetworkExtension.NWTcpConnectionAuthenticationDelegate handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateTrust">
      <MemberSignature Language="C#" Value="public virtual void EvaluateTrust (NetworkExtension.NWTcpConnection connection, Foundation.NSArray peerCertificateChain, Action&lt;Security.SecTrust&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EvaluateTrust(class NetworkExtension.NWTcpConnection connection, class Foundation.NSArray peerCertificateChain, class System.Action`1&lt;class Security.SecTrust&gt; completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:NetworkExtension.NWTcpConnectionAuthenticationDelegate.EvaluateTrust(NetworkExtension.NWTcpConnection,Foundation.NSArray,System.Action{Security.SecTrust})" />
      <MemberSignature Language="F#" Value="abstract member EvaluateTrust : NetworkExtension.NWTcpConnection * Foundation.NSArray * Action&lt;Security.SecTrust&gt; -&gt; unit&#xA;override this.EvaluateTrust : NetworkExtension.NWTcpConnection * Foundation.NSArray * Action&lt;Security.SecTrust&gt; -&gt; unit" Usage="nWTcpConnectionAuthenticationDelegate.EvaluateTrust (connection, peerCertificateChain, completion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("evaluateTrustForConnection:peerCertificateChain:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="NetworkExtension.NWTcpConnection" />
        <Parameter Name="peerCertificateChain" Type="Foundation.NSArray" />
        <Parameter Name="completion" Type="System.Action&lt;Security.SecTrust&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V165))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="connection">To be added.</param>
        <param name="peerCertificateChain">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>When implemented by the developer, overrides the default trust evaluation and runs a completion handler when the operation is complete.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateTrustAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Security.SecTrust&gt; EvaluateTrustAsync (NetworkExtension.NWTcpConnection connection, Foundation.NSArray peerCertificateChain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Security.SecTrust&gt; EvaluateTrustAsync(class NetworkExtension.NWTcpConnection connection, class Foundation.NSArray peerCertificateChain) cil managed" />
      <MemberSignature Language="DocId" Value="M:NetworkExtension.NWTcpConnectionAuthenticationDelegate.EvaluateTrustAsync(NetworkExtension.NWTcpConnection,Foundation.NSArray)" />
      <MemberSignature Language="F#" Value="abstract member EvaluateTrustAsync : NetworkExtension.NWTcpConnection * Foundation.NSArray -&gt; System.Threading.Tasks.Task&lt;Security.SecTrust&gt;&#xA;override this.EvaluateTrustAsync : NetworkExtension.NWTcpConnection * Foundation.NSArray -&gt; System.Threading.Tasks.Task&lt;Security.SecTrust&gt;" Usage="nWTcpConnectionAuthenticationDelegate.EvaluateTrustAsync (connection, peerCertificateChain)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use 'NWTcpConnectionAuthenticationDelegate_Extensions.EvaluateTrustAsync' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Security.SecTrust&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="NetworkExtension.NWTcpConnection" />
        <Parameter Name="peerCertificateChain" Type="Foundation.NSArray" />
      </Parameters>
      <Docs>
        <param name="connection">To be added.</param>
        <param name="peerCertificateChain">To be added.</param>
        <summary>When implemented by the developer, overrides the default trust evaluation and runs a completion handler when the operation is complete.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous EvaluateTrust operation.  The value of the TResult parameter is of type System.Action&lt;Security.SecTrust&gt;.</para>
        </returns>
        <remarks>
          <para copied="true">The EvaluateTrustAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProvideIdentity">
      <MemberSignature Language="C#" Value="public virtual void ProvideIdentity (NetworkExtension.NWTcpConnection connection, Action&lt;Security.SecIdentity,Foundation.NSArray&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProvideIdentity(class NetworkExtension.NWTcpConnection connection, class System.Action`2&lt;class Security.SecIdentity, class Foundation.NSArray&gt; completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:NetworkExtension.NWTcpConnectionAuthenticationDelegate.ProvideIdentity(NetworkExtension.NWTcpConnection,System.Action{Security.SecIdentity,Foundation.NSArray})" />
      <MemberSignature Language="F#" Value="abstract member ProvideIdentity : NetworkExtension.NWTcpConnection * Action&lt;Security.SecIdentity, Foundation.NSArray&gt; -&gt; unit&#xA;override this.ProvideIdentity : NetworkExtension.NWTcpConnection * Action&lt;Security.SecIdentity, Foundation.NSArray&gt; -&gt; unit" Usage="nWTcpConnectionAuthenticationDelegate.ProvideIdentity (connection, completion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("provideIdentityForConnection:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="NetworkExtension.NWTcpConnection" />
        <Parameter Name="completion" Type="System.Action&lt;Security.SecIdentity,Foundation.NSArray&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V86))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="connection">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>Method that is called to provide an identity and an optional certificate.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldEvaluateTrust">
      <MemberSignature Language="C#" Value="public virtual bool ShouldEvaluateTrust (NetworkExtension.NWTcpConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldEvaluateTrust(class NetworkExtension.NWTcpConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:NetworkExtension.NWTcpConnectionAuthenticationDelegate.ShouldEvaluateTrust(NetworkExtension.NWTcpConnection)" />
      <MemberSignature Language="F#" Value="abstract member ShouldEvaluateTrust : NetworkExtension.NWTcpConnection -&gt; bool&#xA;override this.ShouldEvaluateTrust : NetworkExtension.NWTcpConnection -&gt; bool" Usage="nWTcpConnectionAuthenticationDelegate.ShouldEvaluateTrust connection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("shouldEvaluateTrustForConnection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="NetworkExtension.NWTcpConnection" />
      </Parameters>
      <Docs>
        <param name="connection">To be added.</param>
        <summary>Method that is called to inform the delegate that it should evaluate trust.</summary>
        <returns>
          <see langword="true" /> to indicate that the delegate will evaluate trust.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldProvideIdentity">
      <MemberSignature Language="C#" Value="public virtual bool ShouldProvideIdentity (NetworkExtension.NWTcpConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldProvideIdentity(class NetworkExtension.NWTcpConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:NetworkExtension.NWTcpConnectionAuthenticationDelegate.ShouldProvideIdentity(NetworkExtension.NWTcpConnection)" />
      <MemberSignature Language="F#" Value="abstract member ShouldProvideIdentity : NetworkExtension.NWTcpConnection -&gt; bool&#xA;override this.ShouldProvideIdentity : NetworkExtension.NWTcpConnection -&gt; bool" Usage="nWTcpConnectionAuthenticationDelegate.ShouldProvideIdentity connection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("shouldProvideIdentityForConnection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="NetworkExtension.NWTcpConnection" />
      </Parameters>
      <Docs>
        <param name="connection">To be added.</param>
        <summary>Method that is called to inform the delegate that it should provide identity information.</summary>
        <returns>
          <see langword="true" /> to indicate that the delegate will provide identity information.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
