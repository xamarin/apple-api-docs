<Type Name="NEPacketTunnelProvider" FullName="NetworkExtension.NEPacketTunnelProvider">
  <TypeSignature Language="C#" Value="public class NEPacketTunnelProvider : NetworkExtension.NETunnelProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NEPacketTunnelProvider extends NetworkExtension.NETunnelProvider" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>NetworkExtension.NETunnelProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("NEPacketTunnelProvider", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides sockets by creating <see cref="T:NetworkExtension.NEPacketTunnelFlow" /> objects.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/NetworkExtension/Reference/NEPacketTunnelProviderClassRef/index.html">Apple documentation for <c>NEPacketTunnelProvider</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NEPacketTunnelProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NEPacketTunnelProvider (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NEPacketTunnelProvider (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelTunnel">
      <MemberSignature Language="C#" Value="public virtual void CancelTunnel (Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelTunnel(class Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("cancelTunnelWithError:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="Foundation.NSError" />
      </Parameters>
      <Docs>
        <param name="error">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Cancels the tunnel with the specified error.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTcpConnection">
      <MemberSignature Language="C#" Value="public virtual NetworkExtension.NWTcpConnection CreateTcpConnection (NetworkExtension.NWEndpoint remoteEndpoint, bool enableTls, NetworkExtension.NWTlsParameters tlsParameters, NetworkExtension.INWTcpConnectionAuthenticationDelegate delegate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class NetworkExtension.NWTcpConnection CreateTcpConnection(class NetworkExtension.NWEndpoint remoteEndpoint, bool enableTls, class NetworkExtension.NWTlsParameters tlsParameters, class NetworkExtension.INWTcpConnectionAuthenticationDelegate delegate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("createTCPConnectionThroughTunnelToEndpoint:enableTLS:TLSParameters:delegate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>NetworkExtension.NWTcpConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="remoteEndpoint" Type="NetworkExtension.NWEndpoint" />
        <Parameter Name="enableTls" Type="System.Boolean" />
        <Parameter Name="tlsParameters" Type="NetworkExtension.NWTlsParameters" />
        <Parameter Name="delegate" Type="NetworkExtension.INWTcpConnectionAuthenticationDelegate" />
      </Parameters>
      <Docs>
        <param name="remoteEndpoint">The remote endpoint for the connection.</param>
        <param name="enableTls">Whether TLS is enabled.</param>
        <param name="tlsParameters">
          <para>TLS parameters, if TLS is enabled.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="delegate">
          <para>Handler to run when the connection is created.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new tunneled TCP connection.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTcpConnection">
      <MemberSignature Language="C#" Value="public virtual NetworkExtension.NWTcpConnection CreateTcpConnection (NetworkExtension.NWEndpoint remoteEndpoint, bool enableTls, NetworkExtension.NWTlsParameters tlsParameters, NetworkExtension.NWTcpConnectionAuthenticationDelegate delegate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class NetworkExtension.NWTcpConnection CreateTcpConnection(class NetworkExtension.NWEndpoint remoteEndpoint, bool enableTls, class NetworkExtension.NWTlsParameters tlsParameters, class NetworkExtension.NWTcpConnectionAuthenticationDelegate delegate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use the overload accepting a 'INWTcpConnectionAuthenticationDelegate' argument.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>NetworkExtension.NWTcpConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="remoteEndpoint" Type="NetworkExtension.NWEndpoint" />
        <Parameter Name="enableTls" Type="System.Boolean" />
        <Parameter Name="tlsParameters" Type="NetworkExtension.NWTlsParameters" />
        <Parameter Name="delegate" Type="NetworkExtension.NWTcpConnectionAuthenticationDelegate" />
      </Parameters>
      <Docs>
        <param name="remoteEndpoint">The remote endpoint for the connection.</param>
        <param name="enableTls">Whether TLS is enabled.</param>
        <param name="tlsParameters">
          <para>TLS parameters, if TLS is enabled.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="delegate">
          <para>Handler to run when the connection is created.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new tunneled TCP connection.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUdpSession">
      <MemberSignature Language="C#" Value="public virtual NetworkExtension.NWUdpSession CreateUdpSession (NetworkExtension.NWEndpoint remoteEndpoint, NetworkExtension.NWHostEndpoint localEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class NetworkExtension.NWUdpSession CreateUdpSession(class NetworkExtension.NWEndpoint remoteEndpoint, class NetworkExtension.NWHostEndpoint localEndpoint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("createUDPSessionThroughTunnelToEndpoint:fromEndpoint:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>NetworkExtension.NWUdpSession</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="remoteEndpoint" Type="NetworkExtension.NWEndpoint" />
        <Parameter Name="localEndpoint" Type="NetworkExtension.NWHostEndpoint" />
      </Parameters>
      <Docs>
        <param name="remoteEndpoint">To be added.</param>
        <param name="localEndpoint">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new tunneled UDP connection.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PacketFlow">
      <MemberSignature Language="C#" Value="public virtual NetworkExtension.NEPacketTunnelFlow PacketFlow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NetworkExtension.NEPacketTunnelFlow PacketFlow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("packetFlow")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>NetworkExtension.NEPacketTunnelFlow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the packet flow that receives IP packets and injects IP packets into the network.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartTunnel">
      <MemberSignature Language="C#" Value="public virtual void StartTunnel (Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt; options, Action&lt;Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartTunnel(class Foundation.NSDictionary`2&lt;class Foundation.NSString, class Foundation.NSObject&gt; options, class System.Action`1&lt;class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("startTunnelWithOptions:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt;" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V8))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>Starts the tunnel.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartTunnelAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task StartTunnelAsync (Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt; options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task StartTunnelAsync(class Foundation.NSDictionary`2&lt;class Foundation.NSString, class Foundation.NSObject&gt; options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt;" />
      </Parameters>
      <Docs>
        <param name="options">To be added.</param>
        <summary>Returns a task that starts the tunnel.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopTunnel">
      <MemberSignature Language="C#" Value="public virtual void StopTunnel (NetworkExtension.NEProviderStopReason reason, Action completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopTunnel(valuetype NetworkExtension.NEProviderStopReason reason, class System.Action completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("stopTunnelWithReason:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="NetworkExtension.NEProviderStopReason" />
        <Parameter Name="completionHandler" Type="System.Action">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDAction))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reason">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>Stops the Tunnel.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopTunnelAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task StopTunnelAsync (NetworkExtension.NEProviderStopReason reason);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task StopTunnelAsync(valuetype NetworkExtension.NEProviderStopReason reason) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="NetworkExtension.NEProviderStopReason" />
      </Parameters>
      <Docs>
        <param name="reason">To be added.</param>
        <summary>Stops the Tunnel.</summary>
        <returns>A task that represents the asynchronous StopTunnel operation</returns>
        <remarks>
          <para copied="true">The StopTunnelAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
