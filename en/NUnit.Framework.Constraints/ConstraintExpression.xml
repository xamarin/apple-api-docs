<Type Name="ConstraintExpression" FullName="NUnit.Framework.Constraints.ConstraintExpression">
  <TypeSignature Language="C#" Value="public class ConstraintExpression : NUnit.Framework.Constraints.ConstraintExpressionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConstraintExpression extends NUnit.Framework.Constraints.ConstraintExpressionBase" />
  <TypeSignature Language="DocId" Value="T:NUnit.Framework.Constraints.ConstraintExpression" />
  <TypeSignature Language="F#" Value="type ConstraintExpression = class&#xA;    inherit ConstraintExpressionBase" />
  <AssemblyInfo>
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>0.6.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>NUnit.Framework.Constraints.ConstraintExpressionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            ConstraintExpression represents a compound constraint in the
            process of being constructed from a series of syntactic elements.
            Individual elements are appended to the expression as they are
            reognized. Once an actual Constraint is appended, the expression
            returns a resolvable Constraint.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConstraintExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:ConstraintExpression" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConstraintExpression (NUnit.Framework.Constraints.ConstraintBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class NUnit.Framework.Constraints.ConstraintBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)" />
      <MemberSignature Language="F#" Value="new NUnit.Framework.Constraints.ConstraintExpression : NUnit.Framework.Constraints.ConstraintBuilder -&gt; NUnit.Framework.Constraints.ConstraintExpression" Usage="new NUnit.Framework.Constraints.ConstraintExpression builder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="NUnit.Framework.Constraints.ConstraintBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">The builder.</param>
        <summary>
            Initializes a new instance of the <see cref="T:ConstraintExpression" />
            class passing in a ConstraintBuilder, which may be pre-populated.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="All">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.ConstraintExpression All { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Constraints.ConstraintExpression All" />
      <MemberSignature Language="DocId" Value="P:NUnit.Framework.Constraints.ConstraintExpression.All" />
      <MemberSignature Language="F#" Value="member this.All : NUnit.Framework.Constraints.ConstraintExpression" Usage="NUnit.Framework.Constraints.ConstraintExpression.All" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.ConstraintExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssignableFrom">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.AssignableFromConstraint AssignableFrom (Type expectedType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.AssignableFromConstraint AssignableFrom(class System.Type expectedType) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableFrom(System.Type)" />
      <MemberSignature Language="F#" Value="member this.AssignableFrom : Type -&gt; NUnit.Framework.Constraints.AssignableFromConstraint" Usage="constraintExpression.AssignableFrom expectedType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.AssignableFromConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expectedType">To be added.</param>
        <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssignableFrom&lt;T&gt;">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.AssignableFromConstraint AssignableFrom&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.AssignableFromConstraint AssignableFrom&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableFrom``1" />
      <MemberSignature Language="F#" Value="member this.AssignableFrom : unit -&gt; NUnit.Framework.Constraints.AssignableFromConstraint" Usage="constraintExpression.AssignableFrom " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.AssignableFromConstraint</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssignableTo">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.AssignableToConstraint AssignableTo (Type expectedType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.AssignableToConstraint AssignableTo(class System.Type expectedType) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableTo(System.Type)" />
      <MemberSignature Language="F#" Value="member this.AssignableTo : Type -&gt; NUnit.Framework.Constraints.AssignableToConstraint" Usage="constraintExpression.AssignableTo expectedType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.AssignableToConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expectedType">To be added.</param>
        <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssignableTo&lt;T&gt;">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.AssignableToConstraint AssignableTo&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.AssignableToConstraint AssignableTo&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableTo``1" />
      <MemberSignature Language="F#" Value="member this.AssignableTo : unit -&gt; NUnit.Framework.Constraints.AssignableToConstraint" Usage="constraintExpression.AssignableTo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.AssignableToConstraint</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AtLeast">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.GreaterThanOrEqualConstraint AtLeast (object expected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.GreaterThanOrEqualConstraint AtLeast(object expected) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.AtLeast(System.Object)" />
      <MemberSignature Language="F#" Value="member this.AtLeast : obj -&gt; NUnit.Framework.Constraints.GreaterThanOrEqualConstraint" Usage="constraintExpression.AtLeast expected" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.GreaterThanOrEqualConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AtMost">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.LessThanOrEqualConstraint AtMost (object expected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.LessThanOrEqualConstraint AtMost(object expected) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.AtMost(System.Object)" />
      <MemberSignature Language="F#" Value="member this.AtMost : obj -&gt; NUnit.Framework.Constraints.LessThanOrEqualConstraint" Usage="constraintExpression.AtMost expected" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.LessThanOrEqualConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attribute">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.ResolvableConstraintExpression Attribute (Type expectedType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.ResolvableConstraintExpression Attribute(class System.Type expectedType) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.Attribute(System.Type)" />
      <MemberSignature Language="F#" Value="member this.Attribute : Type -&gt; NUnit.Framework.Constraints.ResolvableConstraintExpression" Usage="constraintExpression.Attribute expectedType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.ResolvableConstraintExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expectedType">To be added.</param>
        <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attribute&lt;T&gt;">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.ResolvableConstraintExpression Attribute&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.ResolvableConstraintExpression Attribute&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.Attribute``1" />
      <MemberSignature Language="F#" Value="member this.Attribute : unit -&gt; NUnit.Framework.Constraints.ResolvableConstraintExpression" Usage="constraintExpression.Attribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.ResolvableConstraintExpression</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BinarySerializable">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.BinarySerializableConstraint BinarySerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Constraints.BinarySerializableConstraint BinarySerializable" />
      <MemberSignature Language="DocId" Value="P:NUnit.Framework.Constraints.ConstraintExpression.BinarySerializable" />
      <MemberSignature Language="F#" Value="member this.BinarySerializable : NUnit.Framework.Constraints.BinarySerializableConstraint" Usage="NUnit.Framework.Constraints.ConstraintExpression.BinarySerializable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.BinarySerializableConstraint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns a constraint that tests whether an object graph is serializable in binary format.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.CollectionContainsConstraint Contains (object expected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.CollectionContainsConstraint Contains(object expected) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.Contains(System.Object)" />
      <MemberSignature Language="F#" Value="member this.Contains : obj -&gt; NUnit.Framework.Constraints.CollectionContainsConstraint" Usage="constraintExpression.Contains expected" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.CollectionContainsConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.ContainsConstraint Contains (string expected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.ContainsConstraint Contains(string expected) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.Contains(System.String)" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; NUnit.Framework.Constraints.ContainsConstraint" Usage="constraintExpression.Contains expected" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.ContainsConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <summary>
            Returns a new ContainsConstraint. This constraint
            will, in turn, make use of the appropriate second-level
            constraint, depending on the type of the actual argument.
            This overload is only used if the item sought is a string,
            since any other type implies that we are looking for a
            collection member.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsSubstring">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.SubstringConstraint ContainsSubstring (string expected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.SubstringConstraint ContainsSubstring(string expected) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.ContainsSubstring(System.String)" />
      <MemberSignature Language="F#" Value="member this.ContainsSubstring : string -&gt; NUnit.Framework.Constraints.SubstringConstraint" Usage="constraintExpression.ContainsSubstring expected" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.SubstringConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.ResolvableConstraintExpression Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Constraints.ResolvableConstraintExpression Count" />
      <MemberSignature Language="DocId" Value="P:NUnit.Framework.Constraints.ConstraintExpression.Count" />
      <MemberSignature Language="F#" Value="member this.Count : NUnit.Framework.Constraints.ResolvableConstraintExpression" Usage="NUnit.Framework.Constraints.ConstraintExpression.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.ResolvableConstraintExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Count property of the object being tested.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.EmptyConstraint Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Constraints.EmptyConstraint Empty" />
      <MemberSignature Language="DocId" Value="P:NUnit.Framework.Constraints.ConstraintExpression.Empty" />
      <MemberSignature Language="F#" Value="member this.Empty : NUnit.Framework.Constraints.EmptyConstraint" Usage="NUnit.Framework.Constraints.ConstraintExpression.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.EmptyConstraint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns a constraint that tests for empty
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.EndsWithConstraint EndsWith (string expected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.EndsWithConstraint EndsWith(string expected) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.EndsWith(System.String)" />
      <MemberSignature Language="F#" Value="member this.EndsWith : string -&gt; NUnit.Framework.Constraints.EndsWithConstraint" Usage="constraintExpression.EndsWith expected" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.EndsWithConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualTo">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.EqualConstraint EqualTo (object expected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.EqualConstraint EqualTo(object expected) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.EqualTo(System.Object)" />
      <MemberSignature Language="F#" Value="member this.EqualTo : obj -&gt; NUnit.Framework.Constraints.EqualConstraint" Usage="constraintExpression.EqualTo expected" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.EqualConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <summary>
            Returns a constraint that tests two items for equality
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EquivalentTo">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.CollectionEquivalentConstraint EquivalentTo (System.Collections.IEnumerable expected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.CollectionEquivalentConstraint EquivalentTo(class System.Collections.IEnumerable expected) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.EquivalentTo(System.Collections.IEnumerable)" />
      <MemberSignature Language="F#" Value="member this.EquivalentTo : System.Collections.IEnumerable -&gt; NUnit.Framework.Constraints.CollectionEquivalentConstraint" Usage="constraintExpression.EquivalentTo expected" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.CollectionEquivalentConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <summary>
            Returns a constraint that tests whether the actual value
            is a collection containing the same elements as the
            collection supplied as an argument.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exactly">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.ConstraintExpression Exactly (int expectedCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.ConstraintExpression Exactly(int32 expectedCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.Exactly(System.Int32)" />
      <MemberSignature Language="F#" Value="member this.Exactly : int -&gt; NUnit.Framework.Constraints.ConstraintExpression" Usage="constraintExpression.Exactly expectedCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.ConstraintExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="expectedCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="False">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.FalseConstraint False { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Constraints.FalseConstraint False" />
      <MemberSignature Language="DocId" Value="P:NUnit.Framework.Constraints.ConstraintExpression.False" />
      <MemberSignature Language="F#" Value="member this.False : NUnit.Framework.Constraints.FalseConstraint" Usage="NUnit.Framework.Constraints.ConstraintExpression.False" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.FalseConstraint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns a constraint that tests for False
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.GreaterThanConstraint GreaterThan (object expected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.GreaterThanConstraint GreaterThan(object expected) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.GreaterThan(System.Object)" />
      <MemberSignature Language="F#" Value="member this.GreaterThan : obj -&gt; NUnit.Framework.Constraints.GreaterThanConstraint" Usage="constraintExpression.GreaterThan expected" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.GreaterThanConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <summary>
            Returns a constraint that tests whether the
            actual value is greater than the suppled argument
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqualTo">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.GreaterThanOrEqualConstraint GreaterThanOrEqualTo (object expected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.GreaterThanOrEqualConstraint GreaterThanOrEqualTo(object expected) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.GreaterThanOrEqualTo(System.Object)" />
      <MemberSignature Language="F#" Value="member this.GreaterThanOrEqualTo : obj -&gt; NUnit.Framework.Constraints.GreaterThanOrEqualConstraint" Usage="constraintExpression.GreaterThanOrEqualTo expected" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.GreaterThanOrEqualConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the suppled argument
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InnerException">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.ResolvableConstraintExpression InnerException { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Constraints.ResolvableConstraintExpression InnerException" />
      <MemberSignature Language="DocId" Value="P:NUnit.Framework.Constraints.ConstraintExpression.InnerException" />
      <MemberSignature Language="F#" Value="member this.InnerException : NUnit.Framework.Constraints.ResolvableConstraintExpression" Usage="NUnit.Framework.Constraints.ConstraintExpression.InnerException" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.ResolvableConstraintExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the InnerException property of the object being tested.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InRange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.RangeConstraint&lt;T&gt; InRange&lt;T&gt; (T from, T to) where T : IComparable&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.RangeConstraint`1&lt;!!T&gt; InRange&lt;(class System.IComparable`1&lt;!!T&gt;) T&gt;(!!T from, !!T to) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.InRange``1(``0,``0)" />
      <MemberSignature Language="F#" Value="member this.InRange : 'T * 'T -&gt; NUnit.Framework.Constraints.RangeConstraint&lt;'T (requires 'T :&gt; IComparable&lt;'T&gt;)&gt; (requires 'T :&gt; IComparable&lt;'T&gt;)" Usage="constraintExpression.InRange (from, to)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.RangeConstraint&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>System.IComparable&lt;T&gt;</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="from" Type="T" />
        <Parameter Name="to" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="from">To be added.</param>
        <param name="to">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InstanceOf">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.InstanceOfTypeConstraint InstanceOf (Type expectedType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.InstanceOfTypeConstraint InstanceOf(class System.Type expectedType) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.InstanceOf(System.Type)" />
      <MemberSignature Language="F#" Value="member this.InstanceOf : Type -&gt; NUnit.Framework.Constraints.InstanceOfTypeConstraint" Usage="constraintExpression.InstanceOf expectedType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.InstanceOfTypeConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expectedType">To be added.</param>
        <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InstanceOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.InstanceOfTypeConstraint InstanceOf&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.InstanceOfTypeConstraint InstanceOf&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.InstanceOf``1" />
      <MemberSignature Language="F#" Value="member this.InstanceOf : unit -&gt; NUnit.Framework.Constraints.InstanceOfTypeConstraint" Usage="constraintExpression.InstanceOf " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.InstanceOfTypeConstraint</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.ResolvableConstraintExpression Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Constraints.ResolvableConstraintExpression Length" />
      <MemberSignature Language="DocId" Value="P:NUnit.Framework.Constraints.ConstraintExpression.Length" />
      <MemberSignature Language="F#" Value="member this.Length : NUnit.Framework.Constraints.ResolvableConstraintExpression" Usage="NUnit.Framework.Constraints.ConstraintExpression.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.ResolvableConstraintExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Length property of the object being tested.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.LessThanConstraint LessThan (object expected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.LessThanConstraint LessThan(object expected) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.LessThan(System.Object)" />
      <MemberSignature Language="F#" Value="member this.LessThan : obj -&gt; NUnit.Framework.Constraints.LessThanConstraint" Usage="constraintExpression.LessThan expected" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.LessThanConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <summary>
            Returns a constraint that tests whether the
            actual value is less than the suppled argument
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.LessThanOrEqualConstraint LessThanOrEqualTo (object expected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.LessThanOrEqualConstraint LessThanOrEqualTo(object expected) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.LessThanOrEqualTo(System.Object)" />
      <MemberSignature Language="F#" Value="member this.LessThanOrEqualTo : obj -&gt; NUnit.Framework.Constraints.LessThanOrEqualConstraint" Usage="constraintExpression.LessThanOrEqualTo expected" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.LessThanOrEqualConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the suppled argument
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.Constraint Matches (NUnit.Framework.Constraints.Constraint constraint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.Constraint Matches(class NUnit.Framework.Constraints.Constraint constraint) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.Matches(NUnit.Framework.Constraints.Constraint)" />
      <MemberSignature Language="F#" Value="member this.Matches : NUnit.Framework.Constraints.Constraint -&gt; NUnit.Framework.Constraints.Constraint" Usage="constraintExpression.Matches constraint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.Constraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constraint" Type="NUnit.Framework.Constraints.Constraint" />
      </Parameters>
      <Docs>
        <param name="constraint">To be added.</param>
        <summary>
            Returns the constraint provided as an argument - used to allow custom
            custom constraints to easily participate in the syntax.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Matches">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.RegexConstraint Matches (string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.RegexConstraint Matches(string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.Matches(System.String)" />
      <MemberSignature Language="F#" Value="member this.Matches : string -&gt; NUnit.Framework.Constraints.RegexConstraint" Usage="constraintExpression.Matches pattern" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.RegexConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">To be added.</param>
        <summary>
            Returns a constraint that succeeds if the actual
            value matches the Regex pattern supplied as an argument.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Matches&lt;T&gt;">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.Constraint Matches&lt;T&gt; (Predicate&lt;T&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.Constraint Matches&lt;T&gt;(class System.Predicate`1&lt;!!T&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.Matches``1(System.Predicate{``0})" />
      <MemberSignature Language="F#" Value="member this.Matches : Predicate&lt;'T&gt; -&gt; NUnit.Framework.Constraints.Constraint" Usage="constraintExpression.Matches predicate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.Constraint</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="predicate" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="predicate">To be added.</param>
        <summary>
            Returns the constraint provided as an argument - used to allow custom
            custom constraints to easily participate in the syntax.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Member">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.CollectionContainsConstraint Member (object expected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.CollectionContainsConstraint Member(object expected) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.Member(System.Object)" />
      <MemberSignature Language="F#" Value="member this.Member : obj -&gt; NUnit.Framework.Constraints.CollectionContainsConstraint" Usage="constraintExpression.Member expected" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.CollectionContainsConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <summary>
            Returns a new CollectionContainsConstraint checking for the
            presence of a particular object in the collection.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.ResolvableConstraintExpression Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Constraints.ResolvableConstraintExpression Message" />
      <MemberSignature Language="DocId" Value="P:NUnit.Framework.Constraints.ConstraintExpression.Message" />
      <MemberSignature Language="F#" Value="member this.Message : NUnit.Framework.Constraints.ResolvableConstraintExpression" Usage="NUnit.Framework.Constraints.ConstraintExpression.Message" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.ResolvableConstraintExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Message property of the object being tested.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NaN">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.NaNConstraint NaN { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Constraints.NaNConstraint NaN" />
      <MemberSignature Language="DocId" Value="P:NUnit.Framework.Constraints.ConstraintExpression.NaN" />
      <MemberSignature Language="F#" Value="member this.NaN : NUnit.Framework.Constraints.NaNConstraint" Usage="NUnit.Framework.Constraints.ConstraintExpression.NaN" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.NaNConstraint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns a constraint that tests for NaN
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Negative">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.LessThanConstraint Negative { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Constraints.LessThanConstraint Negative" />
      <MemberSignature Language="DocId" Value="P:NUnit.Framework.Constraints.ConstraintExpression.Negative" />
      <MemberSignature Language="F#" Value="member this.Negative : NUnit.Framework.Constraints.LessThanConstraint" Usage="NUnit.Framework.Constraints.ConstraintExpression.Negative" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.LessThanConstraint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="No">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.ConstraintExpression No { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Constraints.ConstraintExpression No" />
      <MemberSignature Language="DocId" Value="P:NUnit.Framework.Constraints.ConstraintExpression.No" />
      <MemberSignature Language="F#" Value="member this.No : NUnit.Framework.Constraints.ConstraintExpression" Usage="NUnit.Framework.Constraints.ConstraintExpression.No" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.ConstraintExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.ConstraintExpression None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Constraints.ConstraintExpression None" />
      <MemberSignature Language="DocId" Value="P:NUnit.Framework.Constraints.ConstraintExpression.None" />
      <MemberSignature Language="F#" Value="member this.None : NUnit.Framework.Constraints.ConstraintExpression" Usage="NUnit.Framework.Constraints.ConstraintExpression.None" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.ConstraintExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them fail.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.ConstraintExpression Not { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Constraints.ConstraintExpression Not" />
      <MemberSignature Language="DocId" Value="P:NUnit.Framework.Constraints.ConstraintExpression.Not" />
      <MemberSignature Language="F#" Value="member this.Not : NUnit.Framework.Constraints.ConstraintExpression" Usage="NUnit.Framework.Constraints.ConstraintExpression.Not" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.ConstraintExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.NullConstraint Null { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Constraints.NullConstraint Null" />
      <MemberSignature Language="DocId" Value="P:NUnit.Framework.Constraints.ConstraintExpression.Null" />
      <MemberSignature Language="F#" Value="member this.Null : NUnit.Framework.Constraints.NullConstraint" Usage="NUnit.Framework.Constraints.ConstraintExpression.Null" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.NullConstraint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns a constraint that tests for null
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ordered">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.CollectionOrderedConstraint Ordered { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Constraints.CollectionOrderedConstraint Ordered" />
      <MemberSignature Language="DocId" Value="P:NUnit.Framework.Constraints.ConstraintExpression.Ordered" />
      <MemberSignature Language="F#" Value="member this.Ordered : NUnit.Framework.Constraints.CollectionOrderedConstraint" Usage="NUnit.Framework.Constraints.ConstraintExpression.Ordered" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.CollectionOrderedConstraint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns a constraint that tests whether a collection is ordered
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Positive">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.GreaterThanConstraint Positive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Constraints.GreaterThanConstraint Positive" />
      <MemberSignature Language="DocId" Value="P:NUnit.Framework.Constraints.ConstraintExpression.Positive" />
      <MemberSignature Language="F#" Value="member this.Positive : NUnit.Framework.Constraints.GreaterThanConstraint" Usage="NUnit.Framework.Constraints.ConstraintExpression.Positive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.GreaterThanConstraint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.ResolvableConstraintExpression Property (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.ResolvableConstraintExpression Property(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.Property(System.String)" />
      <MemberSignature Language="F#" Value="member this.Property : string -&gt; NUnit.Framework.Constraints.ResolvableConstraintExpression" Usage="constraintExpression.Property name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.ResolvableConstraintExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>
            Returns a new PropertyConstraintExpression, which will either
            test for the existence of the named property on the object
            being tested or apply any following constraint to that property.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SameAs">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.SameAsConstraint SameAs (object expected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.SameAsConstraint SameAs(object expected) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.SameAs(System.Object)" />
      <MemberSignature Language="F#" Value="member this.SameAs : obj -&gt; NUnit.Framework.Constraints.SameAsConstraint" Usage="constraintExpression.SameAs expected" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.SameAsConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <summary>
            Returns a constraint that tests that two references are the same object
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SamePath">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.SamePathConstraint SamePath (string expected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.SamePathConstraint SamePath(string expected) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.SamePath(System.String)" />
      <MemberSignature Language="F#" Value="member this.SamePath : string -&gt; NUnit.Framework.Constraints.SamePathConstraint" Usage="constraintExpression.SamePath expected" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.SamePathConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <summary>
            Returns a constraint that tests whether the path provided
            is the same as an expected path after canonicalization.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SamePathOrUnder">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.SamePathOrUnderConstraint SamePathOrUnder (string expected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.SamePathOrUnderConstraint SamePathOrUnder(string expected) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.SamePathOrUnder(System.String)" />
      <MemberSignature Language="F#" Value="member this.SamePathOrUnder : string -&gt; NUnit.Framework.Constraints.SamePathOrUnderConstraint" Usage="constraintExpression.SamePathOrUnder expected" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.SamePathOrUnderConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <summary>
            Returns a constraint that tests whether the path provided
            is the same path or under an expected path after canonicalization.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Some">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.ConstraintExpression Some { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Constraints.ConstraintExpression Some" />
      <MemberSignature Language="DocId" Value="P:NUnit.Framework.Constraints.ConstraintExpression.Some" />
      <MemberSignature Language="F#" Value="member this.Some : NUnit.Framework.Constraints.ConstraintExpression" Usage="NUnit.Framework.Constraints.ConstraintExpression.Some" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.ConstraintExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if at least one of them succeeds.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.StartsWithConstraint StartsWith (string expected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.StartsWithConstraint StartsWith(string expected) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.StartsWith(System.String)" />
      <MemberSignature Language="F#" Value="member this.StartsWith : string -&gt; NUnit.Framework.Constraints.StartsWithConstraint" Usage="constraintExpression.StartsWith expected" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.StartsWithConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringContaining">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.SubstringConstraint StringContaining (string expected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.SubstringConstraint StringContaining(string expected) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.StringContaining(System.String)" />
      <MemberSignature Language="F#" Value="member this.StringContaining : string -&gt; NUnit.Framework.Constraints.SubstringConstraint" Usage="constraintExpression.StringContaining expected" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.SubstringConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringEnding">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.EndsWithConstraint StringEnding (string expected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.EndsWithConstraint StringEnding(string expected) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.StringEnding(System.String)" />
      <MemberSignature Language="F#" Value="member this.StringEnding : string -&gt; NUnit.Framework.Constraints.EndsWithConstraint" Usage="constraintExpression.StringEnding expected" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.EndsWithConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringMatching">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.RegexConstraint StringMatching (string pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.RegexConstraint StringMatching(string pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.StringMatching(System.String)" />
      <MemberSignature Language="F#" Value="member this.StringMatching : string -&gt; NUnit.Framework.Constraints.RegexConstraint" Usage="constraintExpression.StringMatching pattern" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.RegexConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pattern">To be added.</param>
        <summary>
            Returns a constraint that succeeds if the actual
            value matches the Regex pattern supplied as an argument.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringStarting">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.StartsWithConstraint StringStarting (string expected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.StartsWithConstraint StringStarting(string expected) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.StringStarting(System.String)" />
      <MemberSignature Language="F#" Value="member this.StringStarting : string -&gt; NUnit.Framework.Constraints.StartsWithConstraint" Usage="constraintExpression.StringStarting expected" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.StartsWithConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubPath">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.SubPathConstraint SubPath (string expected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.SubPathConstraint SubPath(string expected) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.SubPath(System.String)" />
      <MemberSignature Language="F#" Value="member this.SubPath : string -&gt; NUnit.Framework.Constraints.SubPathConstraint" Usage="constraintExpression.SubPath expected" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.SubPathConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubsetOf">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.CollectionSubsetConstraint SubsetOf (System.Collections.IEnumerable expected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.CollectionSubsetConstraint SubsetOf(class System.Collections.IEnumerable expected) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.SubsetOf(System.Collections.IEnumerable)" />
      <MemberSignature Language="F#" Value="member this.SubsetOf : System.Collections.IEnumerable -&gt; NUnit.Framework.Constraints.CollectionSubsetConstraint" Usage="constraintExpression.SubsetOf expected" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.CollectionSubsetConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="expected">To be added.</param>
        <summary>
            Returns a constraint that tests whether the actual value
            is a subset of the collection supplied as an argument.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="True">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.TrueConstraint True { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Constraints.TrueConstraint True" />
      <MemberSignature Language="DocId" Value="P:NUnit.Framework.Constraints.ConstraintExpression.True" />
      <MemberSignature Language="F#" Value="member this.True : NUnit.Framework.Constraints.TrueConstraint" Usage="NUnit.Framework.Constraints.ConstraintExpression.True" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.TrueConstraint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns a constraint that tests for True
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeOf">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.ExactTypeConstraint TypeOf (Type expectedType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.ExactTypeConstraint TypeOf(class System.Type expectedType) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.TypeOf(System.Type)" />
      <MemberSignature Language="F#" Value="member this.TypeOf : Type -&gt; NUnit.Framework.Constraints.ExactTypeConstraint" Usage="constraintExpression.TypeOf expectedType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.ExactTypeConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expectedType">To be added.</param>
        <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.ExactTypeConstraint TypeOf&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Constraints.ExactTypeConstraint TypeOf&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.ConstraintExpression.TypeOf``1" />
      <MemberSignature Language="F#" Value="member this.TypeOf : unit -&gt; NUnit.Framework.Constraints.ExactTypeConstraint" Usage="constraintExpression.TypeOf " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.ExactTypeConstraint</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unique">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.UniqueItemsConstraint Unique { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Constraints.UniqueItemsConstraint Unique" />
      <MemberSignature Language="DocId" Value="P:NUnit.Framework.Constraints.ConstraintExpression.Unique" />
      <MemberSignature Language="F#" Value="member this.Unique : NUnit.Framework.Constraints.UniqueItemsConstraint" Usage="NUnit.Framework.Constraints.ConstraintExpression.Unique" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.UniqueItemsConstraint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns a constraint that tests whether a collection
            contains all unique items.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="With">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.ConstraintExpression With { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Constraints.ConstraintExpression With" />
      <MemberSignature Language="DocId" Value="P:NUnit.Framework.Constraints.ConstraintExpression.With" />
      <MemberSignature Language="F#" Value="member this.With : NUnit.Framework.Constraints.ConstraintExpression" Usage="NUnit.Framework.Constraints.ConstraintExpression.With" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.ConstraintExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            With is currently a NOP - reserved for future use.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlSerializable">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Constraints.XmlSerializableConstraint XmlSerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Constraints.XmlSerializableConstraint XmlSerializable" />
      <MemberSignature Language="DocId" Value="P:NUnit.Framework.Constraints.ConstraintExpression.XmlSerializable" />
      <MemberSignature Language="F#" Value="member this.XmlSerializable : NUnit.Framework.Constraints.XmlSerializableConstraint" Usage="NUnit.Framework.Constraints.ConstraintExpression.XmlSerializable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.XmlSerializableConstraint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns a constraint that tests whether an object graph is serializable in xml format.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
