<Type Name="FloatingPointNumerics" FullName="NUnit.Framework.Constraints.FloatingPointNumerics">
  <TypeSignature Language="C#" Value="public class FloatingPointNumerics" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FloatingPointNumerics extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>0.6.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Helper routines for working with floating point numbers</summary>
    <remarks>
      <para>
            The floating point comparison code is based on this excellent article:
            http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm
            </para>
      <para>
            "ULP" means Unit in the Last Place and in the context of this library refers to
            the distance between two adjacent floating point numbers. IEEE floating point
            numbers can only represent a finite subset of natural numbers, with greater
            accuracy for smaller numbers and lower accuracy for very large numbers.
            </para>
      <para>
            If a comparison is allowed "2 ulps" of deviation, that means the values are
            allowed to deviate by up to 2 adjacent floating point values, which might be
            as low as 0.0000001 for small numbers or as high as 10.0 for large numbers.
            </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AreAlmostEqualUlps">
      <MemberSignature Language="C#" Value="public static bool AreAlmostEqualUlps (double left, double right, long maxUlps);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreAlmostEqualUlps(float64 left, float64 right, int64 maxUlps) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Double" />
        <Parameter Name="right" Type="System.Double" />
        <Parameter Name="maxUlps" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="left">First double precision floating point value to be compared</param>
        <param name="right">Second double precision floating point value t be compared</param>
        <param name="maxUlps">
            Maximum number of representable double precision floating point values that are
            allowed to be between the left and the right double precision floating point values
            </param>
        <summary>Compares two double precision floating point values for equality</summary>
        <returns>True if both numbers are equal or close to being equal</returns>
        <remarks>
          <para>
            Double precision floating point values can only represent a limited series of
            natural numbers. For example, the values 2.0000000000000000 and 2.0000000000000004
            can be stored in a double, but nothing inbetween them.
            </para>
          <para>
            This comparison will count how many possible double precision floating point
            values are between the left and the right number. If the number of possible
            values between both numbers is less than or equal to maxUlps, then the numbers
            are considered as being equal.
            </para>
          <para>
            Implementation partially follows the code outlined here:
            http://www.anttirt.net/2007/08/19/proper-floating-point-comparisons/
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreAlmostEqualUlps">
      <MemberSignature Language="C#" Value="public static bool AreAlmostEqualUlps (float left, float right, int maxUlps);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreAlmostEqualUlps(float32 left, float32 right, int32 maxUlps) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" />
        <Parameter Name="right" Type="System.Single" />
        <Parameter Name="maxUlps" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="left">First floating point value to be compared</param>
        <param name="right">Second floating point value t be compared</param>
        <param name="maxUlps">
            Maximum number of representable floating point values that are allowed to
            be between the left and the right floating point values
            </param>
        <summary>Compares two floating point values for equality</summary>
        <returns>True if both numbers are equal or close to being equal</returns>
        <remarks>
          <para>
            Floating point values can only represent a finite subset of natural numbers.
            For example, the values 2.00000000 and 2.00000024 can be stored in a float,
            but nothing inbetween them.
            </para>
          <para>
            This comparison will count how many possible floating point values are between
            the left and the right number. If the number of possible values between both
            numbers is less than or equal to maxUlps, then the numbers are considered as
            being equal.
            </para>
          <para>
            Implementation partially follows the code outlined here:
            http://www.anttirt.net/2007/08/19/proper-floating-point-comparisons/
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReinterpretAsDouble">
      <MemberSignature Language="C#" Value="public static double ReinterpretAsDouble (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ReinterpretAsDouble(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Integer whose memory contents to reinterpret</param>
        <summary>
            Reinterprets the memory contents of an integer value as a double precision
            floating point value
            </summary>
        <returns>
            The memory contents of the integer interpreted as a double precision
            floating point value
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReinterpretAsFloat">
      <MemberSignature Language="C#" Value="public static float ReinterpretAsFloat (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ReinterpretAsFloat(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Integer value whose memory contents to reinterpret</param>
        <summary>
            Reinterprets the memory contents of an integer as a floating point value
            </summary>
        <returns>
            The memory contents of the integer value interpreted as a floating point value
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReinterpretAsInt">
      <MemberSignature Language="C#" Value="public static int ReinterpretAsInt (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ReinterpretAsInt(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">
            Floating point value whose memory contents to reinterpret
            </param>
        <summary>
            Reinterprets the memory contents of a floating point value as an integer value
            </summary>
        <returns>
            The memory contents of the floating point value interpreted as an integer
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReinterpretAsLong">
      <MemberSignature Language="C#" Value="public static long ReinterpretAsLong (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ReinterpretAsLong(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">
            Double precision floating point value whose memory contents to reinterpret
            </param>
        <summary>
            Reinterprets the memory contents of a double precision floating point
            value as an integer value
            </summary>
        <returns>
            The memory contents of the double precision floating point value
            interpreted as an integer
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
