<Type Name="PrefixOperator" FullName="NUnit.Framework.Constraints.PrefixOperator">
  <TypeSignature Language="C#" Value="public abstract class PrefixOperator : NUnit.Framework.Constraints.ConstraintOperator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PrefixOperator extends NUnit.Framework.Constraints.ConstraintOperator" />
  <TypeSignature Language="DocId" Value="T:NUnit.Framework.Constraints.PrefixOperator" />
  <TypeSignature Language="F#" Value="type PrefixOperator = class&#xA;    inherit ConstraintOperator" />
  <AssemblyInfo>
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>0.6.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>NUnit.Framework.Constraints.ConstraintOperator</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            PrefixOperator takes a single constraint and modifies
            it's action in some way.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PrefixOperator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.PrefixOperator.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyPrefix">
      <MemberSignature Language="C#" Value="public abstract NUnit.Framework.Constraints.Constraint ApplyPrefix (NUnit.Framework.Constraints.Constraint constraint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class NUnit.Framework.Constraints.Constraint ApplyPrefix(class NUnit.Framework.Constraints.Constraint constraint) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.PrefixOperator.ApplyPrefix(NUnit.Framework.Constraints.Constraint)" />
      <MemberSignature Language="F#" Value="abstract member ApplyPrefix : NUnit.Framework.Constraints.Constraint -&gt; NUnit.Framework.Constraints.Constraint" Usage="prefixOperator.ApplyPrefix constraint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Constraints.Constraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constraint" Type="NUnit.Framework.Constraints.Constraint" />
      </Parameters>
      <Docs>
        <param name="constraint">
        </param>
        <summary>
            Returns the constraint created by applying this
            prefix to another constraint.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reduce">
      <MemberSignature Language="C#" Value="public override void Reduce (NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack stack);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reduce(class NUnit.Framework.Constraints.ConstraintBuilder/ConstraintStack stack) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.PrefixOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)" />
      <MemberSignature Language="F#" Value="override this.Reduce : NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack -&gt; unit" Usage="prefixOperator.Reduce stack" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stack" Type="NUnit.Framework.Constraints.ConstraintBuilder+ConstraintStack" />
      </Parameters>
      <Docs>
        <param name="stack">
        </param>
        <summary>
            Reduce produces a constraint from the operator and
            any arguments. It takes the arguments from the constraint
            stack and pushes the resulting constraint on it.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
