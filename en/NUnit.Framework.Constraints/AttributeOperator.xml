<Type Name="AttributeOperator" FullName="NUnit.Framework.Constraints.AttributeOperator">
  <TypeSignature Language="C#" Value="public class AttributeOperator : NUnit.Framework.Constraints.SelfResolvingOperator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AttributeOperator extends NUnit.Framework.Constraints.SelfResolvingOperator" />
  <TypeSignature Language="DocId" Value="T:NUnit.Framework.Constraints.AttributeOperator" />
  <TypeSignature Language="F#" Value="type AttributeOperator = class&#xA;    inherit SelfResolvingOperator" />
  <AssemblyInfo>
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>0.6.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>NUnit.Framework.Constraints.SelfResolvingOperator</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Operator that tests for the presence of a particular attribute
            on a type and optionally applies further tests to the attribute.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AttributeOperator (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.AttributeOperator.#ctor(System.Type)" />
      <MemberSignature Language="F#" Value="new NUnit.Framework.Constraints.AttributeOperator : Type -&gt; NUnit.Framework.Constraints.AttributeOperator" Usage="new NUnit.Framework.Constraints.AttributeOperator type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The Type of attribute tested</param>
        <summary>
            Construct an AttributeOperator for a particular Type
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reduce">
      <MemberSignature Language="C#" Value="public override void Reduce (NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack stack);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reduce(class NUnit.Framework.Constraints.ConstraintBuilder/ConstraintStack stack) cil managed" />
      <MemberSignature Language="DocId" Value="M:NUnit.Framework.Constraints.AttributeOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)" />
      <MemberSignature Language="F#" Value="override this.Reduce : NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack -&gt; unit" Usage="attributeOperator.Reduce stack" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stack" Type="NUnit.Framework.Constraints.ConstraintBuilder+ConstraintStack" />
      </Parameters>
      <Docs>
        <param name="stack">To be added.</param>
        <summary>
            Reduce produces a constraint from the operator and
            any arguments. It takes the arguments from the constraint
            stack and pushes the resulting constraint on it.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
