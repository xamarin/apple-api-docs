<Type Name="MDLMesh" FullName="MonoTouch.ModelIO.MDLMesh">
  <TypeSignature Language="C#" Value="public class MDLMesh : MonoTouch.ModelIO.MDLObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MDLMesh extends MonoTouch.ModelIO.MDLObject" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.ModelIO.MDLObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("MDLMesh", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=Platform.Mac_10_11 | Platform.Mac_Arch64)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A collection of <see cref="T:MonoTouch.ModelIO.MDLSubmesh" /> objects that, together, define the geometric and material properties for rendering a 3D object.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLMesh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public MDLMesh (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLMesh (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected MDLMesh (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLMesh (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected MDLMesh (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLMesh (MonoTouch.ModelIO.IMDLMeshBuffer vertexBuffer, uint vertexCount, MonoTouch.ModelIO.MDLVertexDescriptor descriptor, MonoTouch.ModelIO.MDLSubmesh[] submeshes);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.ModelIO.IMDLMeshBuffer vertexBuffer, unsigned int32 vertexCount, class MonoTouch.ModelIO.MDLVertexDescriptor descriptor, class MonoTouch.ModelIO.MDLSubmesh[] submeshes) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MDLMesh (MonoTouch.ModelIO.IMDLMeshBuffer vertexBuffer, nuint vertexCount, MonoTouch.ModelIO.MDLVertexDescriptor descriptor, MonoTouch.ModelIO.MDLSubmesh[] submeshes);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.ModelIO.IMDLMeshBuffer vertexBuffer, valuetype System.nuint vertexCount, class MonoTouch.ModelIO.MDLVertexDescriptor descriptor, class MonoTouch.ModelIO.MDLSubmesh[] submeshes) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithVertexBuffer:vertexCount:descriptor:submeshes:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="vertexBuffer" Type="MonoTouch.ModelIO.IMDLMeshBuffer" />
        <Parameter Name="vertexCount" Type="System.UInt32" apistyle="classic" />
        <Parameter Name="descriptor" Type="MonoTouch.ModelIO.MDLVertexDescriptor" />
        <Parameter Name="submeshes" Type="MonoTouch.ModelIO.MDLSubmesh[]" />
        <Parameter Name="vertexCount" Type="System.nuint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="vertexBuffer">To be added.</param>
        <param name="vertexCount">To be added.</param>
        <param name="descriptor">To be added.</param>
        <param name="submeshes">To be added.</param>
        <summary>Creates a new mesh from the specified vertex buffer, vertex descriptor, and array of submeshes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLMesh (MonoTouch.ModelIO.IMDLMeshBuffer[] vertexBuffers, uint vertexCount, MonoTouch.ModelIO.MDLVertexDescriptor descriptor, MonoTouch.ModelIO.MDLSubmesh[] submeshes);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.ModelIO.IMDLMeshBuffer[] vertexBuffers, unsigned int32 vertexCount, class MonoTouch.ModelIO.MDLVertexDescriptor descriptor, class MonoTouch.ModelIO.MDLSubmesh[] submeshes) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MDLMesh (MonoTouch.ModelIO.IMDLMeshBuffer[] vertexBuffers, nuint vertexCount, MonoTouch.ModelIO.MDLVertexDescriptor descriptor, MonoTouch.ModelIO.MDLSubmesh[] submeshes);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.ModelIO.IMDLMeshBuffer[] vertexBuffers, valuetype System.nuint vertexCount, class MonoTouch.ModelIO.MDLVertexDescriptor descriptor, class MonoTouch.ModelIO.MDLSubmesh[] submeshes) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithVertexBuffers:vertexCount:descriptor:submeshes:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="vertexBuffers" Type="MonoTouch.ModelIO.IMDLMeshBuffer[]" />
        <Parameter Name="vertexCount" Type="System.UInt32" apistyle="classic" />
        <Parameter Name="descriptor" Type="MonoTouch.ModelIO.MDLVertexDescriptor" />
        <Parameter Name="submeshes" Type="MonoTouch.ModelIO.MDLSubmesh[]" />
        <Parameter Name="vertexCount" Type="System.nuint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="vertexBuffers">To be added.</param>
        <param name="vertexCount">To be added.</param>
        <param name="descriptor">To be added.</param>
        <param name="submeshes">To be added.</param>
        <summary>Creates a new mesh from the specified vertex buffer array, vertex descriptor, and array of submeshes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, MonoTouch.ModelIO.MDLVertexFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, valuetype MonoTouch.ModelIO.MDLVertexFormat format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addAttributeWithName:format:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="format" Type="MonoTouch.ModelIO.MDLVertexFormat" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="format">To be added.</param>
        <summary>Adds the <paramref name="format" /> attribute, indexed by the keyword <paramref name="name" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddNormals">
      <MemberSignature Language="C#" Value="public virtual void AddNormals (string name, float creaseThreshold);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddNormals(string name, float32 creaseThreshold) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addNormalsWithAttributeNamed:creaseThreshold:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="creaseThreshold" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="name">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="creaseThreshold">To be added.</param>
        <summary>Generates surface normals for a mesh, interpolating between adjacent faces when the dot product of their unit normals is greater than <paramref name="creaseThreshold" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTangentBasis">
      <MemberSignature Language="C#" Value="public virtual void AddTangentBasis (string textureCoordinateAttributeName, string tangentAttributeName, string bitangentAttributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTangentBasis(string textureCoordinateAttributeName, string tangentAttributeName, string bitangentAttributeName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addTangentBasisForTextureCoordinateAttributeNamed:tangentAttributeNamed:bitangentAttributeNamed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textureCoordinateAttributeName" Type="System.String" />
        <Parameter Name="tangentAttributeName" Type="System.String" />
        <Parameter Name="bitangentAttributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textureCoordinateAttributeName">To be added.</param>
        <param name="tangentAttributeName">To be added.</param>
        <param name="bitangentAttributeName">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Reads texture coordinates from the buffer that is specified by <paramref name="textureCoordinateAttributeName" />, calculates tangents and bitangents, and stores them in the specified buffers.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTangentBasisWithNormals">
      <MemberSignature Language="C#" Value="public virtual void AddTangentBasisWithNormals (string textureCoordinateAttributeName, string normalAttributeName, string tangentAttributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTangentBasisWithNormals(string textureCoordinateAttributeName, string normalAttributeName, string tangentAttributeName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addTangentBasisForTextureCoordinateAttributeNamed:normalAttributeNamed:tangentAttributeNamed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textureCoordinateAttributeName" Type="System.String" />
        <Parameter Name="normalAttributeName" Type="System.String" />
        <Parameter Name="tangentAttributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textureCoordinateAttributeName">To be added.</param>
        <param name="normalAttributeName">To be added.</param>
        <param name="tangentAttributeName">To be added.</param>
        <summary>Reads surface normals from the buffer that is specified by <paramref name="textureCoordinateAttributeName" />, calculates tangents and bitangents, and stores them in the specified buffers.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnisotropyVertexData">
      <MemberSignature Language="C#" Value="public MonoTouch.ModelIO.MDLVertexAttributeData AnisotropyVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.ModelIO.MDLVertexAttributeData AnisotropyVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the visual anisotropy of the surface, if present. This data is associated with the <see cref="P:MonoTouch.ModelIO.MDLVertexAttributes.Anisotropy" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BinormalVertexData">
      <MemberSignature Language="C#" Value="public MonoTouch.ModelIO.MDLVertexAttributeData BinormalVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.ModelIO.MDLVertexAttributeData BinormalVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the binormal data at each vertex. These data are associated with the <see cref="P:MonoTouch.ModelIO.MDLVertexAttributes.Binormal" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitangentVertexData">
      <MemberSignature Language="C#" Value="public MonoTouch.ModelIO.MDLVertexAttributeData BitangentVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.ModelIO.MDLVertexAttributeData BitangentVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the bitangent vectors for each vertex. These data are associated with the <see cref="P:MonoTouch.ModelIO.MDLVertexAttributes.Bitangent" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundingBox">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.ModelIO.MDLAxisAlignedBoundingBox BoundingBox { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.ModelIO.MDLAxisAlignedBoundingBox BoundingBox" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("boundingBox")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLAxisAlignedBoundingBox</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the smallest box that contains all of the vertices in the mesh.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColorVertexData">
      <MemberSignature Language="C#" Value="public MonoTouch.ModelIO.MDLVertexAttributeData ColorVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.ModelIO.MDLVertexAttributeData ColorVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets color data for each vertex. These data are associated with the <see cref="P:MonoTouch.ModelIO.MDLVertexAttributes.Color" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBox">
      <MemberSignature Language="C#" Value="public static MonoTouch.ModelIO.MDLMesh CreateBox (OpenTK.Vector3 dimensions, OpenTK.Vector3i segments, MonoTouch.ModelIO.MDLGeometryType geometryType, bool inwardNormals, MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.ModelIO.MDLMesh CreateBox(valuetype OpenTK.Vector3 dimensions, valuetype OpenTK.Vector3i segments, valuetype MonoTouch.ModelIO.MDLGeometryType geometryType, bool inwardNormals, class MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.ModelIO.MDLMesh CreateBox (MonoTouch.OpenTK.Vector3 dimensions, MonoTouch.OpenTK.Vector3i segments, MonoTouch.ModelIO.MDLGeometryType geometryType, bool inwardNormals, MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.ModelIO.MDLMesh CreateBox(valuetype MonoTouch.OpenTK.Vector3 dimensions, valuetype MonoTouch.OpenTK.Vector3i segments, valuetype MonoTouch.ModelIO.MDLGeometryType geometryType, bool inwardNormals, class MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newBoxWithDimensions:segments:geometryType:inwardNormals:allocator:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimensions" Type="OpenTK.Vector3" apistyle="classic" />
        <Parameter Name="segments" Type="OpenTK.Vector3i" apistyle="classic" />
        <Parameter Name="geometryType" Type="MonoTouch.ModelIO.MDLGeometryType" />
        <Parameter Name="inwardNormals" Type="System.Boolean" />
        <Parameter Name="allocator" Type="MonoTouch.ModelIO.IMDLMeshBufferAllocator" />
        <Parameter Name="dimensions" Type="MonoTouch.OpenTK.Vector3" apistyle="unified" />
        <Parameter Name="segments" Type="MonoTouch.OpenTK.Vector3i" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="dimensions">To be added.</param>
        <param name="segments">To be added.</param>
        <param name="geometryType">To be added.</param>
        <param name="inwardNormals">To be added.</param>
        <param name="allocator">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a right rectangular box from the width, height, and depth that are contained in <paramref name="dimensions" />, with the specified number of segments and geometry kind.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCylindroid">
      <MemberSignature Language="C#" Value="public static MonoTouch.ModelIO.MDLMesh CreateCylindroid (float height, OpenTK.Vector2 radii, uint radialSegments, uint verticalSegments, MonoTouch.ModelIO.MDLGeometryType geometryType, bool inwardNormals, MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.ModelIO.MDLMesh CreateCylindroid(float32 height, valuetype OpenTK.Vector2 radii, unsigned int32 radialSegments, unsigned int32 verticalSegments, valuetype MonoTouch.ModelIO.MDLGeometryType geometryType, bool inwardNormals, class MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.ModelIO.MDLMesh CreateCylindroid (float height, MonoTouch.OpenTK.Vector2 radii, nuint radialSegments, nuint verticalSegments, MonoTouch.ModelIO.MDLGeometryType geometryType, bool inwardNormals, MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.ModelIO.MDLMesh CreateCylindroid(float32 height, valuetype MonoTouch.OpenTK.Vector2 radii, valuetype System.nuint radialSegments, valuetype System.nuint verticalSegments, valuetype MonoTouch.ModelIO.MDLGeometryType geometryType, bool inwardNormals, class MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newCylinderWithHeight:radii:radialSegments:verticalSegments:geometryType:inwardNormals:allocator:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="radii" Type="OpenTK.Vector2" apistyle="classic" />
        <Parameter Name="radialSegments" Type="System.UInt32" apistyle="classic" />
        <Parameter Name="verticalSegments" Type="System.UInt32" apistyle="classic" />
        <Parameter Name="geometryType" Type="MonoTouch.ModelIO.MDLGeometryType" />
        <Parameter Name="inwardNormals" Type="System.Boolean" />
        <Parameter Name="allocator" Type="MonoTouch.ModelIO.IMDLMeshBufferAllocator" />
        <Parameter Name="radii" Type="MonoTouch.OpenTK.Vector2" apistyle="unified" />
        <Parameter Name="radialSegments" Type="System.nuint" apistyle="unified" />
        <Parameter Name="verticalSegments" Type="System.nuint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="height">To be added.</param>
        <param name="radii">To be added.</param>
        <param name="radialSegments">To be added.</param>
        <param name="verticalSegments">To be added.</param>
        <param name="geometryType">To be added.</param>
        <param name="inwardNormals">To be added.</param>
        <param name="allocator">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a right elliptical or circular cylinder from the specified height and radii, with the specified number of segments and geometry kind.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEllipsoid">
      <MemberSignature Language="C#" Value="public static MonoTouch.ModelIO.MDLMesh CreateEllipsoid (OpenTK.Vector3 radii, uint radialSegments, uint verticalSegments, MonoTouch.ModelIO.MDLGeometryType geometryType, bool inwardNormals, bool hemisphere, MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.ModelIO.MDLMesh CreateEllipsoid(valuetype OpenTK.Vector3 radii, unsigned int32 radialSegments, unsigned int32 verticalSegments, valuetype MonoTouch.ModelIO.MDLGeometryType geometryType, bool inwardNormals, bool hemisphere, class MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.ModelIO.MDLMesh CreateEllipsoid (MonoTouch.OpenTK.Vector3 radii, nuint radialSegments, nuint verticalSegments, MonoTouch.ModelIO.MDLGeometryType geometryType, bool inwardNormals, bool hemisphere, MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.ModelIO.MDLMesh CreateEllipsoid(valuetype MonoTouch.OpenTK.Vector3 radii, valuetype System.nuint radialSegments, valuetype System.nuint verticalSegments, valuetype MonoTouch.ModelIO.MDLGeometryType geometryType, bool inwardNormals, bool hemisphere, class MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newEllipsoidWithRadii:radialSegments:verticalSegments:geometryType:inwardNormals:hemisphere:allocator:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="radii" Type="OpenTK.Vector3" apistyle="classic" />
        <Parameter Name="radialSegments" Type="System.UInt32" apistyle="classic" />
        <Parameter Name="verticalSegments" Type="System.UInt32" apistyle="classic" />
        <Parameter Name="geometryType" Type="MonoTouch.ModelIO.MDLGeometryType" />
        <Parameter Name="inwardNormals" Type="System.Boolean" />
        <Parameter Name="hemisphere" Type="System.Boolean" />
        <Parameter Name="allocator" Type="MonoTouch.ModelIO.IMDLMeshBufferAllocator" />
        <Parameter Name="radii" Type="MonoTouch.OpenTK.Vector3" apistyle="unified" />
        <Parameter Name="radialSegments" Type="System.nuint" apistyle="unified" />
        <Parameter Name="verticalSegments" Type="System.nuint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="radii">To be added.</param>
        <param name="radialSegments">To be added.</param>
        <param name="verticalSegments">To be added.</param>
        <param name="geometryType">To be added.</param>
        <param name="inwardNormals">To be added.</param>
        <param name="hemisphere">To be added.</param>
        <param name="allocator">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates an ellipsoid or upper-half-ellipsoid from the width, height, and depth that are contained in <paramref name="radii" />, with the specified number of radial segments and geometry kind.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEllipticalCone">
      <MemberSignature Language="C#" Value="public static MonoTouch.ModelIO.MDLMesh CreateEllipticalCone (float height, OpenTK.Vector2 radii, uint radialSegments, uint verticalSegments, MonoTouch.ModelIO.MDLGeometryType geometryType, bool inwardNormals, MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.ModelIO.MDLMesh CreateEllipticalCone(float32 height, valuetype OpenTK.Vector2 radii, unsigned int32 radialSegments, unsigned int32 verticalSegments, valuetype MonoTouch.ModelIO.MDLGeometryType geometryType, bool inwardNormals, class MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.ModelIO.MDLMesh CreateEllipticalCone (float height, MonoTouch.OpenTK.Vector2 radii, nuint radialSegments, nuint verticalSegments, MonoTouch.ModelIO.MDLGeometryType geometryType, bool inwardNormals, MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.ModelIO.MDLMesh CreateEllipticalCone(float32 height, valuetype MonoTouch.OpenTK.Vector2 radii, valuetype System.nuint radialSegments, valuetype System.nuint verticalSegments, valuetype MonoTouch.ModelIO.MDLGeometryType geometryType, bool inwardNormals, class MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newEllipticalConeWithHeight:radii:radialSegments:verticalSegments:geometryType:inwardNormals:allocator:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="radii" Type="OpenTK.Vector2" apistyle="classic" />
        <Parameter Name="radialSegments" Type="System.UInt32" apistyle="classic" />
        <Parameter Name="verticalSegments" Type="System.UInt32" apistyle="classic" />
        <Parameter Name="geometryType" Type="MonoTouch.ModelIO.MDLGeometryType" />
        <Parameter Name="inwardNormals" Type="System.Boolean" />
        <Parameter Name="allocator" Type="MonoTouch.ModelIO.IMDLMeshBufferAllocator" />
        <Parameter Name="radii" Type="MonoTouch.OpenTK.Vector2" apistyle="unified" />
        <Parameter Name="radialSegments" Type="System.nuint" apistyle="unified" />
        <Parameter Name="verticalSegments" Type="System.nuint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="height">To be added.</param>
        <param name="radii">To be added.</param>
        <param name="radialSegments">To be added.</param>
        <param name="verticalSegments">To be added.</param>
        <param name="geometryType">To be added.</param>
        <param name="inwardNormals">To be added.</param>
        <param name="allocator">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates an elliptical cone from the specified height and the width and depth that are contained in <paramref name="radii" />, with the specified number of radial and vertical segments, and geometry kind.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateIcosahedron">
      <MemberSignature Language="C#" Value="public static MonoTouch.ModelIO.MDLMesh CreateIcosahedron (float radius, bool inwardNormals, MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.ModelIO.MDLMesh CreateIcosahedron(float32 radius, bool inwardNormals, class MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newIcosahedronWithRadius:inwardNormals:allocator:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="radius" Type="System.Single" />
        <Parameter Name="inwardNormals" Type="System.Boolean" />
        <Parameter Name="allocator" Type="MonoTouch.ModelIO.IMDLMeshBufferAllocator" />
      </Parameters>
      <Docs>
        <param name="radius">To be added.</param>
        <param name="inwardNormals">To be added.</param>
        <param name="allocator">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a regular icosohedron with the specified radius.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePlane">
      <MemberSignature Language="C#" Value="public static MonoTouch.ModelIO.MDLMesh CreatePlane (OpenTK.Vector2 dimensions, OpenTK.Vector2i segments, MonoTouch.ModelIO.MDLGeometryType geometryType, MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.ModelIO.MDLMesh CreatePlane(valuetype OpenTK.Vector2 dimensions, valuetype OpenTK.Vector2i segments, valuetype MonoTouch.ModelIO.MDLGeometryType geometryType, class MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.ModelIO.MDLMesh CreatePlane (MonoTouch.OpenTK.Vector2 dimensions, MonoTouch.OpenTK.Vector2i segments, MonoTouch.ModelIO.MDLGeometryType geometryType, MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.ModelIO.MDLMesh CreatePlane(valuetype MonoTouch.OpenTK.Vector2 dimensions, valuetype MonoTouch.OpenTK.Vector2i segments, valuetype MonoTouch.ModelIO.MDLGeometryType geometryType, class MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newPlaneWithDimensions:segments:geometryType:allocator:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimensions" Type="OpenTK.Vector2" apistyle="classic" />
        <Parameter Name="segments" Type="OpenTK.Vector2i" apistyle="classic" />
        <Parameter Name="geometryType" Type="MonoTouch.ModelIO.MDLGeometryType" />
        <Parameter Name="allocator" Type="MonoTouch.ModelIO.IMDLMeshBufferAllocator" />
        <Parameter Name="dimensions" Type="MonoTouch.OpenTK.Vector2" apistyle="unified" />
        <Parameter Name="segments" Type="MonoTouch.OpenTK.Vector2i" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="dimensions">To be added.</param>
        <param name="segments">To be added.</param>
        <param name="geometryType">To be added.</param>
        <param name="allocator">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a planar region centered at the origin, aligned with the X-Z plane, with the specified dimensions..</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSubdividedMesh">
      <MemberSignature Language="C#" Value="public static MonoTouch.ModelIO.MDLMesh CreateSubdividedMesh (MonoTouch.ModelIO.MDLMesh mesh, uint submeshIndex, uint subdivisionLevels);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.ModelIO.MDLMesh CreateSubdividedMesh(class MonoTouch.ModelIO.MDLMesh mesh, unsigned int32 submeshIndex, unsigned int32 subdivisionLevels) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.ModelIO.MDLMesh CreateSubdividedMesh (MonoTouch.ModelIO.MDLMesh mesh, nuint submeshIndex, nuint subdivisionLevels);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.ModelIO.MDLMesh CreateSubdividedMesh(class MonoTouch.ModelIO.MDLMesh mesh, valuetype System.nuint submeshIndex, valuetype System.nuint subdivisionLevels) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newSubdividedMesh:submeshIndex:subdivisionLevels:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mesh" Type="MonoTouch.ModelIO.MDLMesh" />
        <Parameter Name="submeshIndex" Type="System.UInt32" apistyle="classic" />
        <Parameter Name="subdivisionLevels" Type="System.UInt32" apistyle="classic" />
        <Parameter Name="submeshIndex" Type="System.nuint" apistyle="unified" />
        <Parameter Name="subdivisionLevels" Type="System.nuint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="mesh">To be added.</param>
        <param name="submeshIndex">To be added.</param>
        <param name="subdivisionLevels">To be added.</param>
        <summary>Subdivides the indexed submesh within the specified mesh, the specified number of times.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the MDLMesh object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the MDLMesh class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the MDLMesh ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EdgeCreaseVertexData">
      <MemberSignature Language="C#" Value="public MonoTouch.ModelIO.MDLVertexAttributeData EdgeCreaseVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.ModelIO.MDLVertexAttributeData EdgeCreaseVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets data that describe which edges that should not be modified when subdividing the surface. These data are associated with the <see cref="P:MonoTouch.ModelIO.MDLVertexAttributes.EdgeCrease" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromGeometry">
      <MemberSignature Language="C#" Value="public static MonoTouch.ModelIO.MDLMesh FromGeometry (MonoTouch.SceneKit.SCNGeometry geometry);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.ModelIO.MDLMesh FromGeometry(class MonoTouch.SceneKit.SCNGeometry geometry) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("meshWithSCNGeometry:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.Mac_10_11)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometry" Type="MonoTouch.SceneKit.SCNGeometry" />
      </Parameters>
      <Docs>
        <param name="geometry">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateAmbientOcclusionTexture">
      <MemberSignature Language="C#" Value="public virtual bool GenerateAmbientOcclusionTexture (float bakeQuality, float attenuationFactor, MonoTouch.ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GenerateAmbientOcclusionTexture(float32 bakeQuality, float32 attenuationFactor, class MonoTouch.ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("generateAmbientOcclusionTextureWithQuality:attenuationFactor:objectsToConsider:vertexAttributeNamed:materialPropertyNamed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bakeQuality" Type="System.Single" />
        <Parameter Name="attenuationFactor" Type="System.Single" />
        <Parameter Name="objectsToConsider" Type="MonoTouch.ModelIO.MDLObject[]" />
        <Parameter Name="vertexAttributeName" Type="System.String" />
        <Parameter Name="materialPropertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bakeQuality">To be added.</param>
        <param name="attenuationFactor">To be added.</param>
        <param name="objectsToConsider">To be added.</param>
        <param name="vertexAttributeName">To be added.</param>
        <param name="materialPropertyName">To be added.</param>
        <summary>Generates a texture that is used to simulate the occlusion of ambient light from recesses in the mesh.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateAmbientOcclusionTexture">
      <MemberSignature Language="C#" Value="public virtual bool GenerateAmbientOcclusionTexture (OpenTK.Vector2i textureSize, int raysPerSample, float attenuationFactor, MonoTouch.ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GenerateAmbientOcclusionTexture(valuetype OpenTK.Vector2i textureSize, int32 raysPerSample, float32 attenuationFactor, class MonoTouch.ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual bool GenerateAmbientOcclusionTexture (MonoTouch.OpenTK.Vector2i textureSize, nint raysPerSample, float attenuationFactor, MonoTouch.ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GenerateAmbientOcclusionTexture(valuetype MonoTouch.OpenTK.Vector2i textureSize, valuetype System.nint raysPerSample, float32 attenuationFactor, class MonoTouch.ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("generateAmbientOcclusionTextureWithSize:raysPerSample:attenuationFactor:objectsToConsider:vertexAttributeNamed:materialPropertyNamed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textureSize" Type="OpenTK.Vector2i" apistyle="classic" />
        <Parameter Name="raysPerSample" Type="System.Int32" apistyle="classic" />
        <Parameter Name="attenuationFactor" Type="System.Single" />
        <Parameter Name="objectsToConsider" Type="MonoTouch.ModelIO.MDLObject[]" />
        <Parameter Name="vertexAttributeName" Type="System.String" />
        <Parameter Name="materialPropertyName" Type="System.String" />
        <Parameter Name="textureSize" Type="MonoTouch.OpenTK.Vector2i" apistyle="unified" />
        <Parameter Name="raysPerSample" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="textureSize">To be added.</param>
        <param name="raysPerSample">To be added.</param>
        <param name="attenuationFactor">To be added.</param>
        <param name="objectsToConsider">To be added.</param>
        <param name="vertexAttributeName">To be added.</param>
        <param name="materialPropertyName">To be added.</param>
        <summary>Generates a texture that is used to simulate the occlusion of ambient light from recesses in the mesh.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateAmbientOcclusionVertexColors">
      <MemberSignature Language="C#" Value="public virtual bool GenerateAmbientOcclusionVertexColors (float bakeQuality, float attenuationFactor, MonoTouch.ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GenerateAmbientOcclusionVertexColors(float32 bakeQuality, float32 attenuationFactor, class MonoTouch.ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("generateAmbientOcclusionVertexColorsWithQuality:attenuationFactor:objectsToConsider:vertexAttributeNamed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bakeQuality" Type="System.Single" />
        <Parameter Name="attenuationFactor" Type="System.Single" />
        <Parameter Name="objectsToConsider" Type="MonoTouch.ModelIO.MDLObject[]" />
        <Parameter Name="vertexAttributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bakeQuality">To be added.</param>
        <param name="attenuationFactor">To be added.</param>
        <param name="objectsToConsider">To be added.</param>
        <param name="vertexAttributeName">To be added.</param>
        <summary>Generates vertex color data that is used to simulate the occlusion of ambient light from recesses in the mesh.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateAmbientOcclusionVertexColors">
      <MemberSignature Language="C#" Value="public virtual bool GenerateAmbientOcclusionVertexColors (int raysPerSample, float attenuationFactor, MonoTouch.ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GenerateAmbientOcclusionVertexColors(int32 raysPerSample, float32 attenuationFactor, class MonoTouch.ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual bool GenerateAmbientOcclusionVertexColors (nint raysPerSample, float attenuationFactor, MonoTouch.ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GenerateAmbientOcclusionVertexColors(valuetype System.nint raysPerSample, float32 attenuationFactor, class MonoTouch.ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("generateAmbientOcclusionVertexColorsWithRaysPerSample:attenuationFactor:objectsToConsider:vertexAttributeNamed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="raysPerSample" Type="System.Int32" apistyle="classic" />
        <Parameter Name="attenuationFactor" Type="System.Single" />
        <Parameter Name="objectsToConsider" Type="MonoTouch.ModelIO.MDLObject[]" />
        <Parameter Name="vertexAttributeName" Type="System.String" />
        <Parameter Name="raysPerSample" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="raysPerSample">To be added.</param>
        <param name="attenuationFactor">To be added.</param>
        <param name="objectsToConsider">To be added.</param>
        <param name="vertexAttributeName">To be added.</param>
        <summary>Generates vertex color data that is used to simulate the occlusion of ambient light from recesses in the mesh.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateLightMapTexture">
      <MemberSignature Language="C#" Value="public virtual bool GenerateLightMapTexture (float bakeQuality, MonoTouch.ModelIO.MDLLight[] lightsToConsider, MonoTouch.ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GenerateLightMapTexture(float32 bakeQuality, class MonoTouch.ModelIO.MDLLight[] lightsToConsider, class MonoTouch.ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("generateLightMapTextureWithQuality:lightsToConsider:objectsToConsider:vertexAttributeNamed:materialPropertyNamed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bakeQuality" Type="System.Single" />
        <Parameter Name="lightsToConsider" Type="MonoTouch.ModelIO.MDLLight[]" />
        <Parameter Name="objectsToConsider" Type="MonoTouch.ModelIO.MDLObject[]" />
        <Parameter Name="vertexAttributeName" Type="System.String" />
        <Parameter Name="materialPropertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bakeQuality">To be added.</param>
        <param name="lightsToConsider">To be added.</param>
        <param name="objectsToConsider">To be added.</param>
        <param name="vertexAttributeName">To be added.</param>
        <param name="materialPropertyName">To be added.</param>
        <summary>Generates a map that represents the computed result of shading from the specified lights, obstructed by the specified objects.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateLightMapTexture">
      <MemberSignature Language="C#" Value="public virtual bool GenerateLightMapTexture (OpenTK.Vector2i textureSize, MonoTouch.ModelIO.MDLLight[] lightsToConsider, MonoTouch.ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GenerateLightMapTexture(valuetype OpenTK.Vector2i textureSize, class MonoTouch.ModelIO.MDLLight[] lightsToConsider, class MonoTouch.ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual bool GenerateLightMapTexture (MonoTouch.OpenTK.Vector2i textureSize, MonoTouch.ModelIO.MDLLight[] lightsToConsider, MonoTouch.ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GenerateLightMapTexture(valuetype MonoTouch.OpenTK.Vector2i textureSize, class MonoTouch.ModelIO.MDLLight[] lightsToConsider, class MonoTouch.ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("generateLightMapTextureWithTextureSize:lightsToConsider:objectsToConsider:vertexAttributeNamed:materialPropertyNamed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textureSize" Type="OpenTK.Vector2i" apistyle="classic" />
        <Parameter Name="lightsToConsider" Type="MonoTouch.ModelIO.MDLLight[]" />
        <Parameter Name="objectsToConsider" Type="MonoTouch.ModelIO.MDLObject[]" />
        <Parameter Name="vertexAttributeName" Type="System.String" />
        <Parameter Name="materialPropertyName" Type="System.String" />
        <Parameter Name="textureSize" Type="MonoTouch.OpenTK.Vector2i" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="textureSize">To be added.</param>
        <param name="lightsToConsider">To be added.</param>
        <param name="objectsToConsider">To be added.</param>
        <param name="vertexAttributeName">To be added.</param>
        <param name="materialPropertyName">To be added.</param>
        <summary>Generates a map that represents the computed result of shading from the specified lights, obstructed by the specified objects.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateLightMapVertexColors">
      <MemberSignature Language="C#" Value="public virtual bool GenerateLightMapVertexColors (MonoTouch.ModelIO.MDLLight[] lightsToConsider, MonoTouch.ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GenerateLightMapVertexColors(class MonoTouch.ModelIO.MDLLight[] lightsToConsider, class MonoTouch.ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("generateLightMapVertexColorsWithLightsToConsider:objectsToConsider:vertexAttributeNamed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lightsToConsider" Type="MonoTouch.ModelIO.MDLLight[]" />
        <Parameter Name="objectsToConsider" Type="MonoTouch.ModelIO.MDLObject[]" />
        <Parameter Name="vertexAttributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="lightsToConsider">To be added.</param>
        <param name="objectsToConsider">To be added.</param>
        <param name="vertexAttributeName">To be added.</param>
        <summary>Generates vertex color data that represent the computed result of shading from the specified lights, obstructed by the specified objects.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JointIndicesVertexData">
      <MemberSignature Language="C#" Value="public MonoTouch.ModelIO.MDLVertexAttributeData JointIndicesVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.ModelIO.MDLVertexAttributeData JointIndicesVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets bone and joint indices. These data are associated with the <see cref="P:MonoTouch.ModelIO.MDLVertexAttributes.JointIndices" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JointWeightsVertexData">
      <MemberSignature Language="C#" Value="public MonoTouch.ModelIO.MDLVertexAttributeData JointWeightsVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.ModelIO.MDLVertexAttributeData JointWeightsVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets bone and joint weight information that is used to render a mesh that is associated with a skeleton. These data are associated with the <see cref="P:MonoTouch.ModelIO.MDLVertexAttributes.JointWeights" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeVerticesUnique">
      <MemberSignature Language="C#" Value="public virtual void MakeVerticesUnique ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MakeVerticesUnique() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("makeVerticesUnique")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Duplicates shared vertices until no vertices are shared.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalVertexData">
      <MemberSignature Language="C#" Value="public MonoTouch.ModelIO.MDLVertexAttributeData NormalVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.ModelIO.MDLVertexAttributeData NormalVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets normal vectors for the mesh vertices. These data are associated with the <see cref="P:MonoTouch.ModelIO.MDLVertexAttributes.Normal" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OcclusionValueVertexData">
      <MemberSignature Language="C#" Value="public MonoTouch.ModelIO.MDLVertexAttributeData OcclusionValueVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.ModelIO.MDLVertexAttributeData OcclusionValueVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets occlusion data for the mesh vertices. These data are associated with the <see cref="P:MonoTouch.ModelIO.MDLVertexAttributes.OcclusionValue" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PositionVertexData">
      <MemberSignature Language="C#" Value="public MonoTouch.ModelIO.MDLVertexAttributeData PositionVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.ModelIO.MDLVertexAttributeData PositionVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the positions of the mesh vertices. These data are associated with the <see cref="P:MonoTouch.ModelIO.MDLVertexAttributes.Position" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShadingBasisUVertexData">
      <MemberSignature Language="C#" Value="public MonoTouch.ModelIO.MDLVertexAttributeData ShadingBasisUVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.ModelIO.MDLVertexAttributeData ShadingBasisUVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the U basis vectors that are used for shading. These data are associated with the <see cref="P:MonoTouch.ModelIO.MDLVertexAttributes.ShadingBasisU" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShadingBasisVVertexData">
      <MemberSignature Language="C#" Value="public MonoTouch.ModelIO.MDLVertexAttributeData ShadingBasisVVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.ModelIO.MDLVertexAttributeData ShadingBasisVVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the V basis vectors that are used for shading. These data are associated with the <see cref="P:MonoTouch.ModelIO.MDLVertexAttributes.ShadingBasisV" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubdivisionStencilVertexData">
      <MemberSignature Language="C#" Value="public MonoTouch.ModelIO.MDLVertexAttributeData SubdivisionStencilVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.ModelIO.MDLVertexAttributeData SubdivisionStencilVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the data that decide which neighboring vertices are used for subdivision calculations. These data are associated with the <see cref="P:MonoTouch.ModelIO.MDLVertexAttributes.SubdivisionStencil" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Submeshes">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSMutableArray Submeshes { get; }" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSMutableArray Submeshes" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSMutableArray&lt;MonoTouch.ModelIO.MDLSubmesh&gt; Submeshes { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSMutableArray`1&lt;class MonoTouch.ModelIO.MDLSubmesh&gt; Submeshes" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("submeshes", MonoTouch.ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">MonoTouch.Foundation.NSMutableArray</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.Foundation.NSMutableArray&lt;MonoTouch.ModelIO.MDLSubmesh&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the array of submeshes for this mesh.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TangentVertexData">
      <MemberSignature Language="C#" Value="public MonoTouch.ModelIO.MDLVertexAttributeData TangentVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.ModelIO.MDLVertexAttributeData TangentVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the vertex tangent data. These data are associated with the <see cref="P:MonoTouch.ModelIO.MDLVertexAttributes.Tangent" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextureCoordinateVertexData">
      <MemberSignature Language="C#" Value="public MonoTouch.ModelIO.MDLVertexAttributeData TextureCoordinateVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.ModelIO.MDLVertexAttributeData TextureCoordinateVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the coordinate system for texture operations on vertices. These data are associated with the <see cref="P:MonoTouch.ModelIO.MDLVertexAttributes.TextureCoordinate" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VertexBuffers">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.ModelIO.IMDLMeshBuffer[] VertexBuffers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.ModelIO.IMDLMeshBuffer[] VertexBuffers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("vertexBuffers", MonoTouch.ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.IMDLMeshBuffer[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the buffers that contain the vertex data for the mesh.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VertexCount">
      <MemberSignature Language="C#" Value="public virtual uint VertexCount { get; }" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32 VertexCount" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nuint VertexCount { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint VertexCount" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("vertexCount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.UInt32</ReturnType>
        <ReturnType apistyle="unified">System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of vertices in the entire mesh.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VertexDescriptor">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.ModelIO.MDLVertexDescriptor VertexDescriptor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.ModelIO.MDLVertexDescriptor VertexDescriptor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("vertexDescriptor", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setVertexDescriptor:", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLVertexDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the description of the in-memory layout of vertices in a mesh.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
