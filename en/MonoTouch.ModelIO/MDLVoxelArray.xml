<Type Name="MDLVoxelArray" FullName="MonoTouch.ModelIO.MDLVoxelArray">
  <TypeSignature Language="C#" Value="public class MDLVoxelArray : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MDLVoxelArray extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("MDLVoxelArray", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=Platform.Mac_10_11 | Platform.Mac_Arch64)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Models a 3D object as a collection of volumetric elements, called voxels.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public MDLVoxelArray (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLVoxelArray (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected MDLVoxelArray (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLVoxelArray (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected MDLVoxelArray (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLVoxelArray (MonoTouch.Foundation.NSData voxelData, MonoTouch.ModelIO.MDLAxisAlignedBoundingBox boundingBox, float voxelExtent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSData voxelData, valuetype MonoTouch.ModelIO.MDLAxisAlignedBoundingBox boundingBox, float32 voxelExtent) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithData:boundingBox:voxelExtent:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="voxelData" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="boundingBox" Type="MonoTouch.ModelIO.MDLAxisAlignedBoundingBox" />
        <Parameter Name="voxelExtent" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="voxelData">To be added.</param>
        <param name="boundingBox">To be added.</param>
        <param name="voxelExtent">To be added.</param>
        <summary>Creates a new MDLVoxelArray from the provided voxel data, bounding box, and voxel extent.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLVoxelArray (MonoTouch.ModelIO.MDLAsset asset, int divisions, int interiorShells, int exteriorShells, float patchRadius);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.ModelIO.MDLAsset asset, int32 divisions, int32 interiorShells, int32 exteriorShells, float32 patchRadius) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithAsset:divisions:interiorShells:exteriorShells:patchRadius:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="asset" Type="MonoTouch.ModelIO.MDLAsset" />
        <Parameter Name="divisions" Type="System.Int32" />
        <Parameter Name="interiorShells" Type="System.Int32" />
        <Parameter Name="exteriorShells" Type="System.Int32" />
        <Parameter Name="patchRadius" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="asset">To be added.</param>
        <param name="divisions">To be added.</param>
        <param name="interiorShells">To be added.</param>
        <param name="exteriorShells">To be added.</param>
        <param name="patchRadius">To be added.</param>
        <summary>Creates a new MDLVoxelArray from the provided asset, with the specified number of divisions and the specified numbers of concentric interior and exterior shells of voxels.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLVoxelArray (MonoTouch.ModelIO.MDLAsset asset, int divisions, float interiorNBWidth, float exteriorNBWidth, float patchRadius);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.ModelIO.MDLAsset asset, int32 divisions, float32 interiorNBWidth, float32 exteriorNBWidth, float32 patchRadius) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithAsset:divisions:interiorNBWidth:exteriorNBWidth:patchRadius:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="asset" Type="MonoTouch.ModelIO.MDLAsset" />
        <Parameter Name="divisions" Type="System.Int32" />
        <Parameter Name="interiorNBWidth" Type="System.Single" />
        <Parameter Name="exteriorNBWidth" Type="System.Single" />
        <Parameter Name="patchRadius" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="asset">To be added.</param>
        <param name="divisions">To be added.</param>
        <param name="interiorNBWidth">To be added.</param>
        <param name="exteriorNBWidth">To be added.</param>
        <param name="patchRadius">To be added.</param>
        <summary>Creates a new MDLVoxelArray from the provided asset, with the specified number of divisions and the specified numbers of concentric interior and exterior shells of voxels.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundingBox">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.ModelIO.MDLAxisAlignedBoundingBox BoundingBox { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.ModelIO.MDLAxisAlignedBoundingBox BoundingBox" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("boundingBox")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLAxisAlignedBoundingBox</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the smallest box that contains all the voxels.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual uint Count { get; }" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32 Count" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nuint Count { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint Count" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("count")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.UInt32</ReturnType>
        <ReturnType apistyle="unified">System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of voxels in the array.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMesh">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.ModelIO.MDLMesh CreateMesh (MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.ModelIO.MDLMesh CreateMesh(class MonoTouch.ModelIO.IMDLMeshBufferAllocator allocator) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("meshUsingAllocator:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allocator" Type="MonoTouch.ModelIO.IMDLMeshBufferAllocator" />
      </Parameters>
      <Docs>
        <param name="allocator">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Returns a mesh that encloses the voxels in the array.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DifferenceWithVoxels">
      <MemberSignature Language="C#" Value="public virtual void DifferenceWithVoxels (MonoTouch.ModelIO.MDLVoxelArray voxels);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DifferenceWithVoxels(class MonoTouch.ModelIO.MDLVoxelArray voxels) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("differenceWithVoxels:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="voxels" Type="MonoTouch.ModelIO.MDLVoxelArray" />
      </Parameters>
      <Docs>
        <param name="voxels">To be added.</param>
        <summary>Returns the voxels in this array that intersect with <paramref name="voxels" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVoxelIndices">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSData GetVoxelIndices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSData GetVoxelIndices() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("voxelIndices")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a list of all the voxel indices as an array of 4-component integer arrays.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfSpatialLocation" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.OpenTK.Vector4i IndexOfSpatialLocation (MonoTouch.OpenTK.Vector3 location);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.OpenTK.Vector4i IndexOfSpatialLocation(valuetype MonoTouch.OpenTK.Vector3 location) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("indexOfSpatialLocation:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.OpenTK.Vector4i</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="MonoTouch.OpenTK.Vector3" />
      </Parameters>
      <Docs>
        <param name="location">To be added.</param>
        <summary>Returns a voxel index for the specified world-coordinate.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfSpatialLocation" apistyle="classic">
      <MemberSignature Language="C#" Value="public virtual OpenTK.Vector4i IndexOfSpatialLocation (OpenTK.Vector3 location);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype OpenTK.Vector4i IndexOfSpatialLocation(valuetype OpenTK.Vector3 location) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("indexOfSpatialLocation:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>OpenTK.Vector4i</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="OpenTK.Vector3" />
      </Parameters>
      <Docs>
        <param name="location">To be added.</param>
        <summary>Returns a world-coordinate for the specified voxel index.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectWithVoxels">
      <MemberSignature Language="C#" Value="public virtual void IntersectWithVoxels (MonoTouch.ModelIO.MDLVoxelArray voxels);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void IntersectWithVoxels(class MonoTouch.ModelIO.MDLVoxelArray voxels) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("intersectWithVoxels:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="voxels" Type="MonoTouch.ModelIO.MDLVoxelArray" />
      </Parameters>
      <Docs>
        <param name="voxels">To be added.</param>
        <summary>Returns the voxels in this array that intersect with <paramref name="voxels" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVoxelAtIndex">
      <MemberSignature Language="C#" Value="public virtual void SetVoxelAtIndex (OpenTK.Vector4i index);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVoxelAtIndex(valuetype OpenTK.Vector4i index) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual void SetVoxelAtIndex (MonoTouch.OpenTK.Vector4i index);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVoxelAtIndex(valuetype MonoTouch.OpenTK.Vector4i index) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setVoxelAtIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="OpenTK.Vector4i" apistyle="classic" />
        <Parameter Name="index" Type="MonoTouch.OpenTK.Vector4i" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>Places a voxel at the specified index.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVoxelsForMesh">
      <MemberSignature Language="C#" Value="public virtual void SetVoxelsForMesh (MonoTouch.ModelIO.MDLMesh mesh, int divisions, int interiorShells, int exteriorShells, float patchRadius);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVoxelsForMesh(class MonoTouch.ModelIO.MDLMesh mesh, int32 divisions, int32 interiorShells, int32 exteriorShells, float32 patchRadius) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setVoxelsForMesh:divisions:interiorShells:exteriorShells:patchRadius:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mesh" Type="MonoTouch.ModelIO.MDLMesh" />
        <Parameter Name="divisions" Type="System.Int32" />
        <Parameter Name="interiorShells" Type="System.Int32" />
        <Parameter Name="exteriorShells" Type="System.Int32" />
        <Parameter Name="patchRadius" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="mesh">To be added.</param>
        <param name="divisions">To be added.</param>
        <param name="interiorShells">To be added.</param>
        <param name="exteriorShells">To be added.</param>
        <param name="patchRadius">To be added.</param>
        <summary>Discretizes a mesh volume into a voxel array with the specified parameters.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVoxelsForMesh">
      <MemberSignature Language="C#" Value="public virtual void SetVoxelsForMesh (MonoTouch.ModelIO.MDLMesh mesh, int divisions, float interiorNBWidth, float exteriorNBWidth, float patchRadius);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVoxelsForMesh(class MonoTouch.ModelIO.MDLMesh mesh, int32 divisions, float32 interiorNBWidth, float32 exteriorNBWidth, float32 patchRadius) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setVoxelsForMesh:divisions:interiorNBWidth:exteriorNBWidth:patchRadius:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mesh" Type="MonoTouch.ModelIO.MDLMesh" />
        <Parameter Name="divisions" Type="System.Int32" />
        <Parameter Name="interiorNBWidth" Type="System.Single" />
        <Parameter Name="exteriorNBWidth" Type="System.Single" />
        <Parameter Name="patchRadius" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="mesh">To be added.</param>
        <param name="divisions">To be added.</param>
        <param name="interiorNBWidth">To be added.</param>
        <param name="exteriorNBWidth">To be added.</param>
        <param name="patchRadius">To be added.</param>
        <summary>Discretizes a mesh volume into a voxel array with the specified parameters.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpatialLocationOfIndex" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.OpenTK.Vector3 SpatialLocationOfIndex (MonoTouch.OpenTK.Vector4i index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.OpenTK.Vector3 SpatialLocationOfIndex(valuetype MonoTouch.OpenTK.Vector4i index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("spatialLocationOfIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.OpenTK.Vector3</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="MonoTouch.OpenTK.Vector4i" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>Returns world-coordinates for the specified voxel index.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpatialLocationOfIndex" apistyle="classic">
      <MemberSignature Language="C#" Value="public virtual OpenTK.Vector3 SpatialLocationOfIndex (OpenTK.Vector4i index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype OpenTK.Vector3 SpatialLocationOfIndex(valuetype OpenTK.Vector4i index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("spatialLocationOfIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>OpenTK.Vector3</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="OpenTK.Vector4i" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>Returns world-coordinates for the specified voxel index.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnionWithVoxels">
      <MemberSignature Language="C#" Value="public virtual void UnionWithVoxels (MonoTouch.ModelIO.MDLVoxelArray voxels);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnionWithVoxels(class MonoTouch.ModelIO.MDLVoxelArray voxels) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("unionWithVoxels:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="voxels" Type="MonoTouch.ModelIO.MDLVoxelArray" />
      </Parameters>
      <Docs>
        <param name="voxels">To be added.</param>
        <summary>Includes the specified voxels in this voxel array.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VoxelBoundingBoxAtIndex">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.ModelIO.MDLAxisAlignedBoundingBox VoxelBoundingBoxAtIndex (OpenTK.Vector4i index);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.ModelIO.MDLAxisAlignedBoundingBox VoxelBoundingBoxAtIndex(valuetype OpenTK.Vector4i index) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.ModelIO.MDLAxisAlignedBoundingBox VoxelBoundingBoxAtIndex (MonoTouch.OpenTK.Vector4i index);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.ModelIO.MDLAxisAlignedBoundingBox VoxelBoundingBoxAtIndex(valuetype MonoTouch.OpenTK.Vector4i index) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("voxelBoundingBoxAtIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLAxisAlignedBoundingBox</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="OpenTK.Vector4i" apistyle="classic" />
        <Parameter Name="index" Type="MonoTouch.OpenTK.Vector4i" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>Returns the bounding box for the specified voxel index.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VoxelExistsAtIndex">
      <MemberSignature Language="C#" Value="public virtual bool VoxelExistsAtIndex (OpenTK.Vector4i index, bool allowAnyX, bool allowAnyY, bool allowAnyZ, bool allowAnyShell);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool VoxelExistsAtIndex(valuetype OpenTK.Vector4i index, bool allowAnyX, bool allowAnyY, bool allowAnyZ, bool allowAnyShell) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual bool VoxelExistsAtIndex (MonoTouch.OpenTK.Vector4i index, bool allowAnyX, bool allowAnyY, bool allowAnyZ, bool allowAnyShell);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool VoxelExistsAtIndex(valuetype MonoTouch.OpenTK.Vector4i index, bool allowAnyX, bool allowAnyY, bool allowAnyZ, bool allowAnyShell) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("voxelExistsAtIndex:allowAnyX:allowAnyY:allowAnyZ:allowAnyShell:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="OpenTK.Vector4i" apistyle="classic" />
        <Parameter Name="allowAnyX" Type="System.Boolean" />
        <Parameter Name="allowAnyY" Type="System.Boolean" />
        <Parameter Name="allowAnyZ" Type="System.Boolean" />
        <Parameter Name="allowAnyShell" Type="System.Boolean" />
        <Parameter Name="index" Type="MonoTouch.OpenTK.Vector4i" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="allowAnyX">To be added.</param>
        <param name="allowAnyY">To be added.</param>
        <param name="allowAnyZ">To be added.</param>
        <param name="allowAnyShell">To be added.</param>
        <summary>Returns <see langword="true" /> if the voxel array contains a voxel that matches <paramref name="index" />, subject to the specified wildcards.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VoxelIndexExtent">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.ModelIO.MDLVoxelIndexExtent VoxelIndexExtent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.ModelIO.MDLVoxelIndexExtent VoxelIndexExtent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("voxelIndexExtent")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLVoxelIndexExtent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the allowable ranges for the four components of a voxel index.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VoxelsWithinExtent">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSData VoxelsWithinExtent (MonoTouch.ModelIO.MDLVoxelIndexExtent extent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSData VoxelsWithinExtent(valuetype MonoTouch.ModelIO.MDLVoxelIndexExtent extent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("voxelsWithinExtent:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extent" Type="MonoTouch.ModelIO.MDLVoxelIndexExtent" />
      </Parameters>
      <Docs>
        <param name="extent">To be added.</param>
        <summary>Returns indices for all the voxels within the specified extent.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
