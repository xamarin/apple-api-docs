<Type Name="MDLSubmesh" FullName="MonoTouch.ModelIO.MDLSubmesh">
  <TypeSignature Language="C#" Value="public class MDLSubmesh : MonoTouch.Foundation.NSObject, IDisposable, MonoTouch.ModelIO.IMDLNamed" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MDLSubmesh extends MonoTouch.Foundation.NSObject implements class MonoTouch.ModelIO.IMDLNamed, class MonoTouch.ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.ModelIO.IMDLNamed</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("MDLSubmesh", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 11, MonoTouch.ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Indexes and identifies a portion of an MDLMesh, and contains material information about the indexed portion.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/ModelIO/Reference/MDLSubmesh_Class/index.html">Apple documentation for <c>MDLSubmesh</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLSubmesh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLSubmesh (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLSubmesh (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected MDLSubmesh (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLSubmesh (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected MDLSubmesh (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLSubmesh (MonoTouch.ModelIO.MDLSubmesh indexBuffer, MonoTouch.ModelIO.MDLIndexBitDepth indexType, MonoTouch.ModelIO.MDLGeometryType geometryType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.ModelIO.MDLSubmesh indexBuffer, valuetype MonoTouch.ModelIO.MDLIndexBitDepth indexType, valuetype MonoTouch.ModelIO.MDLGeometryType geometryType) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithMDLSubmesh:indexType:geometryType:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="indexBuffer" Type="MonoTouch.ModelIO.MDLSubmesh" />
        <Parameter Name="indexType" Type="MonoTouch.ModelIO.MDLIndexBitDepth" />
        <Parameter Name="geometryType" Type="MonoTouch.ModelIO.MDLGeometryType" />
      </Parameters>
      <Docs>
        <param name="indexBuffer">To be added.</param>
        <param name="indexType">To be added.</param>
        <param name="geometryType">To be added.</param>
        <summary>Creates a new MDLSubmesh with the specified parameters.</summary>
        <remarks>If either <paramref name="indexType" /> or <paramref name="geometryType" /> do not match the type of data in <paramref name="indexBuffer" />, then a new buffer is created and filled with converted data.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLSubmesh (MonoTouch.ModelIO.IMDLMeshBuffer indexBuffer, uint indexCount, MonoTouch.ModelIO.MDLIndexBitDepth indexType, MonoTouch.ModelIO.MDLGeometryType geometryType, MonoTouch.ModelIO.MDLMaterial material);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.ModelIO.IMDLMeshBuffer indexBuffer, unsigned int32 indexCount, valuetype MonoTouch.ModelIO.MDLIndexBitDepth indexType, valuetype MonoTouch.ModelIO.MDLGeometryType geometryType, class MonoTouch.ModelIO.MDLMaterial material) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MDLSubmesh (MonoTouch.ModelIO.IMDLMeshBuffer indexBuffer, nuint indexCount, MonoTouch.ModelIO.MDLIndexBitDepth indexType, MonoTouch.ModelIO.MDLGeometryType geometryType, MonoTouch.ModelIO.MDLMaterial material);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.ModelIO.IMDLMeshBuffer indexBuffer, valuetype System.nuint indexCount, valuetype MonoTouch.ModelIO.MDLIndexBitDepth indexType, valuetype MonoTouch.ModelIO.MDLGeometryType geometryType, class MonoTouch.ModelIO.MDLMaterial material) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithIndexBuffer:indexCount:indexType:geometryType:material:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="indexBuffer" Type="MonoTouch.ModelIO.IMDLMeshBuffer" />
        <Parameter Name="indexCount" Type="System.UInt32" apistyle="classic" />
        <Parameter Name="indexType" Type="MonoTouch.ModelIO.MDLIndexBitDepth" />
        <Parameter Name="geometryType" Type="MonoTouch.ModelIO.MDLGeometryType" />
        <Parameter Name="material" Type="MonoTouch.ModelIO.MDLMaterial" />
        <Parameter Name="indexCount" Type="System.nuint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="indexBuffer">To be added.</param>
        <param name="indexCount">To be added.</param>
        <param name="indexType">To be added.</param>
        <param name="geometryType">To be added.</param>
        <param name="material">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new MDLSubmesh with the specified parameters.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLSubmesh (string name, MonoTouch.ModelIO.IMDLMeshBuffer indexBuffer, uint indexCount, MonoTouch.ModelIO.MDLIndexBitDepth indexType, MonoTouch.ModelIO.MDLGeometryType geometryType, MonoTouch.ModelIO.MDLMaterial material);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class MonoTouch.ModelIO.IMDLMeshBuffer indexBuffer, unsigned int32 indexCount, valuetype MonoTouch.ModelIO.MDLIndexBitDepth indexType, valuetype MonoTouch.ModelIO.MDLGeometryType geometryType, class MonoTouch.ModelIO.MDLMaterial material) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MDLSubmesh (string name, MonoTouch.ModelIO.IMDLMeshBuffer indexBuffer, nuint indexCount, MonoTouch.ModelIO.MDLIndexBitDepth indexType, MonoTouch.ModelIO.MDLGeometryType geometryType, MonoTouch.ModelIO.MDLMaterial material);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class MonoTouch.ModelIO.IMDLMeshBuffer indexBuffer, valuetype System.nuint indexCount, valuetype MonoTouch.ModelIO.MDLIndexBitDepth indexType, valuetype MonoTouch.ModelIO.MDLGeometryType geometryType, class MonoTouch.ModelIO.MDLMaterial material) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithName:indexBuffer:indexCount:indexType:geometryType:material:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="indexBuffer" Type="MonoTouch.ModelIO.IMDLMeshBuffer" />
        <Parameter Name="indexCount" Type="System.UInt32" apistyle="classic" />
        <Parameter Name="indexType" Type="MonoTouch.ModelIO.MDLIndexBitDepth" />
        <Parameter Name="geometryType" Type="MonoTouch.ModelIO.MDLGeometryType" />
        <Parameter Name="material" Type="MonoTouch.ModelIO.MDLMaterial" />
        <Parameter Name="indexCount" Type="System.nuint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="indexBuffer">To be added.</param>
        <param name="indexCount">To be added.</param>
        <param name="indexType">To be added.</param>
        <param name="geometryType">To be added.</param>
        <param name="material">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new MDLSubmesh with the specified parameters.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLSubmesh (string name, MonoTouch.ModelIO.IMDLMeshBuffer indexBuffer, uint indexCount, MonoTouch.ModelIO.MDLIndexBitDepth indexType, MonoTouch.ModelIO.MDLGeometryType geometryType, MonoTouch.ModelIO.MDLMaterial material, MonoTouch.ModelIO.MDLSubmeshTopology topology);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class MonoTouch.ModelIO.IMDLMeshBuffer indexBuffer, unsigned int32 indexCount, valuetype MonoTouch.ModelIO.MDLIndexBitDepth indexType, valuetype MonoTouch.ModelIO.MDLGeometryType geometryType, class MonoTouch.ModelIO.MDLMaterial material, class MonoTouch.ModelIO.MDLSubmeshTopology topology) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MDLSubmesh (string name, MonoTouch.ModelIO.IMDLMeshBuffer indexBuffer, nuint indexCount, MonoTouch.ModelIO.MDLIndexBitDepth indexType, MonoTouch.ModelIO.MDLGeometryType geometryType, MonoTouch.ModelIO.MDLMaterial material, MonoTouch.ModelIO.MDLSubmeshTopology topology);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class MonoTouch.ModelIO.IMDLMeshBuffer indexBuffer, valuetype System.nuint indexCount, valuetype MonoTouch.ModelIO.MDLIndexBitDepth indexType, valuetype MonoTouch.ModelIO.MDLGeometryType geometryType, class MonoTouch.ModelIO.MDLMaterial material, class MonoTouch.ModelIO.MDLSubmeshTopology topology) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithName:indexBuffer:indexCount:indexType:geometryType:material:topology:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="indexBuffer" Type="MonoTouch.ModelIO.IMDLMeshBuffer" />
        <Parameter Name="indexCount" Type="System.UInt32" apistyle="classic" />
        <Parameter Name="indexType" Type="MonoTouch.ModelIO.MDLIndexBitDepth" />
        <Parameter Name="geometryType" Type="MonoTouch.ModelIO.MDLGeometryType" />
        <Parameter Name="material" Type="MonoTouch.ModelIO.MDLMaterial" />
        <Parameter Name="topology" Type="MonoTouch.ModelIO.MDLSubmeshTopology" />
        <Parameter Name="indexCount" Type="System.nuint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="indexBuffer">To be added.</param>
        <param name="indexCount">To be added.</param>
        <param name="indexType">To be added.</param>
        <param name="geometryType">To be added.</param>
        <param name="material">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="topology">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new MDLSubmesh with the specified values.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromGeometryElement">
      <MemberSignature Language="C#" Value="public static MonoTouch.ModelIO.MDLSubmesh FromGeometryElement (MonoTouch.SceneKit.SCNGeometryElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.ModelIO.MDLSubmesh FromGeometryElement(class MonoTouch.SceneKit.SCNGeometryElement element) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("submeshWithSCNGeometryElement:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLSubmesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="MonoTouch.SceneKit.SCNGeometryElement" />
      </Parameters>
      <Docs>
        <param name="element">To be added.</param>
        <summary>Creates a new MDLSubmesh object from the specified Scene Kit geometry element.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GeometryType">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.ModelIO.MDLGeometryType GeometryType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.ModelIO.MDLGeometryType GeometryType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("geometryType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLGeometryType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the geometry type of the submesh.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexBuffer">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.ModelIO.IMDLMeshBuffer IndexBuffer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.ModelIO.IMDLMeshBuffer IndexBuffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("indexBuffer")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.IMDLMeshBuffer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the buffer whose indices sequence the vertex data into interpretable geometry.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexCount">
      <MemberSignature Language="C#" Value="public virtual uint IndexCount { get; }" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32 IndexCount" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nuint IndexCount { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint IndexCount" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("indexCount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.UInt32</ReturnType>
        <ReturnType apistyle="unified">System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of indices in the index buffer.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexType">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.ModelIO.MDLIndexBitDepth IndexType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.ModelIO.MDLIndexBitDepth IndexType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("indexType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLIndexBitDepth</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the numeric data type of the values in the index buffer.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Material">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.ModelIO.MDLMaterial Material { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.ModelIO.MDLMaterial Material" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("material")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setMaterial:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLMaterial</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the material to use when rendering the submesh.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 11, MonoTouch.ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("name")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setName:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the submesh.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Topology">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.ModelIO.MDLSubmeshTopology Topology { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.ModelIO.MDLSubmeshTopology Topology" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("topology")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ModelIO.MDLSubmeshTopology</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>Gets or sets an object that describes the submesh's topology.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
