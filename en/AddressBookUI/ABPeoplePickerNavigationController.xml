<Type Name="ABPeoplePickerNavigationController" FullName="AddressBookUI.ABPeoplePickerNavigationController">
  <TypeSignature Language="C#" Value="public class ABPeoplePickerNavigationController : UIKit.UINavigationController, IDisposable, UIKit.IUIAppearance" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ABPeoplePickerNavigationController extends UIKit.UINavigationController implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIAppearance" />
  <TypeSignature Language="DocId" Value="T:AddressBookUI.ABPeoplePickerNavigationController" />
  <TypeSignature Language="F#" Value="type ABPeoplePickerNavigationController = class&#xA;    inherit UINavigationController&#xA;    interface IUIAppearance&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.UINavigationController</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIAppearance</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("ABPeoplePickerNavigationController", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, "Use the 'Contacts' API instead.")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, "Use the 'Contacts' API instead.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <see cref="T:UIKit.UINavigationController" /> that allows the application user to select a contact or contact information from an <see cref="T:AddressBook.ABAddressBook" />.</summary>
    <remarks>
      <para>In iOS 8 and later bringing up a people-picker navigtion controller does not require the app to have access to a user’s contacts, and the user will not be prompted to grant access. If the app does not itself have access to the user’s contacts, a temporary copy of the contact selected by the user will be returned to the app.</para>
      <para>
        <format type="text/html">
          <span>See a <a href="https://github.com/xamarin/monotouch-samples/tree/master/ios8/PeoplePicker">sample project</a> illustrating the use of a people-picker navigation controller.</span>
        </format>
      </para>
      <para>
	With the introduction of iOS 8.0, it is possible to filter the
	information displayed by setting one or more of the Predicate
	properties in this class.   
      </para>
      <para>
	The predicates are: <see cref="T:AddressBookUI.ABPeoplePickerNavigationController.PredicateForEnablingPerons" />,
	<see cref="P:AddressBookUI.ABPeoplePickerNavigationController.PredicateForSelectionOfPerson" />
	and <see cref="P:AddressBookUI.ABPeoplePickerNavigationController.PredicateForSelectionOfProperty" />.
      </para>
      <para>
	The predicates can use the various members in <see cref="T:AddressBookUI.ABPersonPredicateKey" /> as
	constants in the above predicates, or you can use the hardcoded strings shown below.
      </para>
      <para>

	Each one of these properties has either a native type (like a
	string), an array of elements or is a structured type that
	contains elements that you can access from the predicate
	expression.

      </para>
      <list type="table">
        <listheader>
          <term>Structured Type Name</term>
          <description>Property Contents</description>
          <description>
          </description>
        </listheader>
        <item>
          <term>LabeledValue</term>
          <description>'label' and 'value'.</description>
        </item>
        <item>
          <term>PhoneNumber</term>
          <description>'stringValue', 'countryCode', 'formattedStringValue' and 'normalizedStringValue'</description>
        </item>
        <item>
          <term>InstantMessageAddress</term>
          <description>'username' and 'service'</description>
        </item>
        <item>
          <term>SocialProfile</term>
          <description>'username' and 'service'</description>
        </item>
        <item>
          <term>PostalAddress</term>
          <description>'street' property, 'subLocality' property, 'city' property, 'subAdministrativeArea' property, 'state' property, 'postalCode' property, 'country' and 'ISOCountryCode'.</description>
        </item>
      </list>
      <list type="table">
        <listheader>
          <term>ABPersonPredicateKey</term>
          <description>String Name</description>
          <description>Key value</description>
        </listheader>
        <item>
          <term>NamePrefix</term>
          <description>"namePrefix"</description>
          <description>string</description>
        </item>
        <item>
          <term>GivenName</term>
          <description>"givenName"</description>
          <description>string</description>
        </item>
        <item>
          <term>MiddleName</term>
          <description>"middleName"</description>
          <description>string</description>
        </item>
        <item>
          <term>FamilyName</term>
          <description>"familyName"</description>
          <description>string</description>
        </item>
        <item>
          <term>NameSuffix</term>
          <description>"nameSuffix"</description>
          <description>string</description>
        </item>
        <item>
          <term>PreviousFamilyName</term>
          <description>"previousFamilyName"</description>
          <description>string</description>
        </item>
        <item>
          <term>Nickname</term>
          <description>"nickname"</description>
          <description>string</description>
        </item>
        <item>
          <term>PhoneticGivenName</term>
          <description>"phoneticGivenName"</description>
          <description>string</description>
        </item>
        <item>
          <term>PhoneticMiddleName</term>
          <description>"phoneticMiddleName"</description>
          <description>string</description>
        </item>
        <item>
          <term>PhoneticFamilyName</term>
          <description>"phoneticFamilyName"</description>
          <description>string</description>
        </item>
        <item>
          <term>OrganizationName</term>
          <description>"organizationName"</description>
          <description>string</description>
        </item>
        <item>
          <term>DepartmentName</term>
          <description>"departmentName"</description>
          <description>string</description>
        </item>
        <item>
          <term>JobTitle</term>
          <description>"jobTitle"</description>
          <description>string</description>
        </item>
        <item>
          <term>Birthday</term>
          <description>"birthday"</description>
          <description>NSDateComponents</description>
        </item>
        <item>
          <term>Note</term>
          <description>"note"</description>
          <description>string</description>
        </item>
        <item>
          <term>PhoneNumbers</term>
          <description>"phoneNumbers"</description>
          <description>Array of LabeledValue with PhoneNumber values</description>
        </item>
        <item>
          <term>EmailAddresses</term>
          <description>"emailAddresses"</description>
          <description>array of LabeledValue with string values</description>
        </item>
        <item>
          <term>UrlAddresses</term>
          <description>"urlAddresses"</description>
          <description>array of LabeledValue with string values</description>
        </item>
        <item>
          <term>Dates</term>
          <description>"dates"</description>
          <description>array of LabeledValue with NSDateComponents values</description>
        </item>
        <item>
          <term>InstantMessageAddresses</term>
          <description>"instantMessageAddresses"</description>
          <description>array of LabeledValue with InstantMessageAddress values</description>
        </item>
        <item>
          <term>RelatedNames</term>
          <description>"relatedNames"</description>
          <description>array of LabeledValue with string values</description>
        </item>
        <item>
          <term>SocialProfiles</term>
          <description>"socialProfiles"</description>
          <description>array of LabeledValue with SocialProfile values</description>
        </item>
        <item>
          <term>PostalAddresses</term>
          <description>"postalAddresses"</description>
          <description>array of LabeledValue with PostalAddress values</description>
        </item>
      </list>
      <example>
        <code lang="C#"><![CDATA[[Register ("CompatibleEmailPickerViewController")]
public class CompatibleEmailPickerViewController : UIViewController
{
    [Outlet]
    UILabel ResultLabel { get ; set; }

    public CompatibleEmailPickerViewController (IntPtr handle)
        : base (handle)
    {
    }

    [Export("showPicker:")]
    void ShowPicker(NSObject sender)
    {
        ABPeoplePickerNavigationController picker = new ABPeoplePickerNavigationController ();

	// Hook up to both events to support iOS 7 and iOS 8 idioms

	// Hooks up to the iOS 7 and lower idioms
        picker.SelectPerson += HandleSelectPerson;
        picker.PerformAction += HandlePerformAction;

	// Hook up to the new iOS 8 idioms and parameters
        picker.SelectPerson2 += HandleSelectPerson2;
        picker.PerformAction2 += HandlePerformAction2;

        picker.Cancelled += HandleCancelled;

        // The people picker will only display the person's name, 
	// image and email properties in ABPersonViewController.
        picker.DisplayedProperties.Add (ABPersonProperty.Email);

        // The people picker will enable selection 
	// of persons that have at least one email address.
        if(picker.RespondsToSelector(new Selector("setPredicateForEnablingPerson:")))
            picker.PredicateForEnablingPerson = NSPredicate.FromFormat ("emailAddresses.@count > 0");

        // The people picker will select a person that has exactly one email address and 
	// call peoplePickerNavigationController:didSelectPerson:,
        // otherwise the people picker will present an ABPersonViewController for the 
	// user to pick one of the email addresses.
        if(picker.RespondsToSelector(new Selector("setPredicateForSelectionOfPerson:")))
            picker.PredicateForSelectionOfPerson = NSPredicate.FromFormat ("emailAddresses.@count = 1");

        PresentViewController (picker, true, null);
    }

    // iOS7 and below
    void HandleSelectPerson (object sender, ABPeoplePickerSelectPersonEventArgs e)
    {
        var peoplePicker = (ABPeoplePickerNavigationController)sender;

        e.Continue = false;
        using (ABMultiValue<string> emails = e.Person.GetEmails ())
            e.Continue = emails.Count == 1;

        if (!e.Continue) {
            ResultLabel.Text = PersonFormatter.GetPickedEmail (e.Person);
            peoplePicker.DismissViewController (true, null);
        }
    }

    // iOS8+
    void HandleSelectPerson2 (object sender, ABPeoplePickerSelectPerson2EventArgs e)
    {
        ResultLabel.Text = PersonFormatter.GetPickedEmail (e.Person);
    }

    // iOS7 and below
    void HandlePerformAction (object sender, ABPeoplePickerPerformActionEventArgs e)
    {
        var peoplePicker = (ABPeoplePickerNavigationController)sender;

        ResultLabel.Text = PersonFormatter.GetPickedEmail (e.Person, e.Identifier);
        peoplePicker.DismissViewController (true, null);

        e.Continue = false;
    }

    // iOS8+
    void HandlePerformAction2 (object sender, ABPeoplePickerPerformAction2EventArgs e)
    {
        ResultLabel.Text = PersonFormatter.GetPickedEmail (e.Person, e.Identifier);
    }

    void HandleCancelled (object sender, EventArgs e)
    {
        var peoplePicker = (ABPeoplePickerNavigationController)sender;
        peoplePicker.DismissViewController (true, null);
    }
}]]></code>
      </example>.</remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=23a2571b-45eb-4889-bb67-d88937cb68c1">monocatalog</related>
    <related type="sample" href="https://github.com/xamarin/monotouch-samples/tree/master/ios8/PeoplePicker">People Picker</related>
    <related type="recipe" href="http://docs.xamarin.com/ios/Recipes/Shared_Resources/Contacts/Choose_a_Contact">Choose a Contact</related>
    <related type="recipe" href="http://docs.xamarin.com/ios/Recipes/Shared_Resources/Contacts/Create_a_new_Contact">Create a New Contact</related>
    <related type="recipe" href="http://docs.xamarin.com/ios/Recipes/Shared_Resources/Contacts/Find_a_Contact">Find a Contact</related>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/AddressBookUI/Reference/ABPeoplePickerNavigationController_Class/index.html">Apple documentation for <c>ABPeoplePickerNavigationController</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ABPeoplePickerNavigationController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:AddressBookUI.ABPeoplePickerNavigationController.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ABPeoplePickerNavigationController (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:AddressBookUI.ABPeoplePickerNavigationController.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new AddressBookUI.ABPeoplePickerNavigationController : Foundation.NSCoder -&gt; AddressBookUI.ABPeoplePickerNavigationController" Usage="new AddressBookUI.ABPeoplePickerNavigationController coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ABPeoplePickerNavigationController (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:AddressBookUI.ABPeoplePickerNavigationController.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new AddressBookUI.ABPeoplePickerNavigationController : Foundation.NSObjectFlag -&gt; AddressBookUI.ABPeoplePickerNavigationController" Usage="new AddressBookUI.ABPeoplePickerNavigationController t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal ABPeoplePickerNavigationController (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:AddressBookUI.ABPeoplePickerNavigationController.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new AddressBookUI.ABPeoplePickerNavigationController : nativeint -&gt; AddressBookUI.ABPeoplePickerNavigationController" Usage="new AddressBookUI.ABPeoplePickerNavigationController handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ABPeoplePickerNavigationController (UIKit.UIViewController rootViewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class UIKit.UIViewController rootViewController) cil managed" />
      <MemberSignature Language="DocId" Value="M:AddressBookUI.ABPeoplePickerNavigationController.#ctor(UIKit.UIViewController)" />
      <MemberSignature Language="F#" Value="new AddressBookUI.ABPeoplePickerNavigationController : UIKit.UIViewController -&gt; AddressBookUI.ABPeoplePickerNavigationController" Usage="new AddressBookUI.ABPeoplePickerNavigationController rootViewController" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithRootViewController:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="rootViewController" Type="UIKit.UIViewController" />
      </Parameters>
      <Docs>
        <param name="rootViewController">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ABPeoplePickerNavigationController (string nibName, Foundation.NSBundle bundle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string nibName, class Foundation.NSBundle bundle) cil managed" />
      <MemberSignature Language="DocId" Value="M:AddressBookUI.ABPeoplePickerNavigationController.#ctor(System.String,Foundation.NSBundle)" />
      <MemberSignature Language="F#" Value="new AddressBookUI.ABPeoplePickerNavigationController : string * Foundation.NSBundle -&gt; AddressBookUI.ABPeoplePickerNavigationController" Usage="new AddressBookUI.ABPeoplePickerNavigationController (nibName, bundle)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithNibName:bundle:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="nibName" Type="System.String" />
        <Parameter Name="bundle" Type="Foundation.NSBundle" />
      </Parameters>
      <Docs>
        <param name="nibName">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="bundle">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddressBook">
      <MemberSignature Language="C#" Value="public AddressBook.ABAddressBook AddressBook { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AddressBook.ABAddressBook AddressBook" />
      <MemberSignature Language="DocId" Value="P:AddressBookUI.ABPeoplePickerNavigationController.AddressBook" />
      <MemberSignature Language="F#" Value="member this.AddressBook : AddressBook.ABAddressBook with get, set" Usage="AddressBookUI.ABPeoplePickerNavigationController.AddressBook" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AddressBook.ABAddressBook</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:AddressBook.ABAddressBook" /> that contains the list of contacts.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Appearance">
      <MemberSignature Language="C#" Value="public static AddressBookUI.ABPeoplePickerNavigationController.ABPeoplePickerNavigationControllerAppearance Appearance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class AddressBookUI.ABPeoplePickerNavigationController/ABPeoplePickerNavigationControllerAppearance Appearance" />
      <MemberSignature Language="DocId" Value="P:AddressBookUI.ABPeoplePickerNavigationController.Appearance" />
      <MemberSignature Language="F#" Value="member this.Appearance : AddressBookUI.ABPeoplePickerNavigationController.ABPeoplePickerNavigationControllerAppearance" Usage="AddressBookUI.ABPeoplePickerNavigationController.Appearance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AddressBookUI.ABPeoplePickerNavigationController+ABPeoplePickerNavigationControllerAppearance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Strongly-typed property that returns the UIAppearance class for this class.</summary>
        <value>
        </value>
        <remarks>
          <para>Setting any appearance properties on this instance will affect the appearance of all instances of ABPeoplePickerNavigationController.</para>
          <para>If developers want to control the appearance of subclasses of ABPeoplePickerNavigationController, they should use the <see cref="M:AddressBookUI.ABPeoplePickerNavigationController.GetAppearance" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppearanceWhenContainedIn">
      <MemberSignature Language="C#" Value="public static AddressBookUI.ABPeoplePickerNavigationController.ABPeoplePickerNavigationControllerAppearance AppearanceWhenContainedIn (params Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AddressBookUI.ABPeoplePickerNavigationController/ABPeoplePickerNavigationControllerAppearance AppearanceWhenContainedIn(class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:AddressBookUI.ABPeoplePickerNavigationController.AppearanceWhenContainedIn(System.Type[])" />
      <MemberSignature Language="F#" Value="static member AppearanceWhenContainedIn : Type[] -&gt; AddressBookUI.ABPeoplePickerNavigationController.ABPeoplePickerNavigationControllerAppearance" Usage="AddressBookUI.ABPeoplePickerNavigationController.AppearanceWhenContainedIn containers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AddressBookUI.ABPeoplePickerNavigationController+ABPeoplePickerNavigationControllerAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="containers">List of types that developers want to have as the containers to apply this particular appearance</param>
        <summary>Returns a strongly typed UIAppearance for instances of this class when the view is hosted in the specified hierarchy.</summary>
        <returns>The appearance proxy object that developers can use to set properties when the given container hierarchy is active</returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of ABPeoplePickerNavigationController when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>If developers want to control the appearance of subclasses of ABPeoplePickerNavigationController, they should use the <see cref="M:AddressBookUI.ABPeoplePickerNavigationController.GetAppearance" /> method.</para>
          <para>The following example shows how the AppearanceWhenContainedIn method works</para>
          <example>
            <code lang="C#"><![CDATA[
var mySliders = UISlider.AppearanceWhenContainedIn (typeof (UINavigationBar), typeof (UIPopoverController));
mySliders.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancelled">
      <MemberSignature Language="C#" Value="public event EventHandler Cancelled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Cancelled" />
      <MemberSignature Language="DocId" Value="E:AddressBookUI.ABPeoplePickerNavigationController.Cancelled" />
      <MemberSignature Language="F#" Value="member this.Cancelled : EventHandler " Usage="member this.Cancelled : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>iOS will call event handler when the user taps Cancel.</summary>
        <remarks>
          <para>If the developer does not subscribe to this event, the people picker will dismiss itself when the user taps cancel.</para>
          <para />
          <para>Note: Prior to iOS 8, the event handler was responsible for dismissing the people picker.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:AddressBookUI.ABPeoplePickerNavigationController.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="AddressBookUI.ABPeoplePickerNavigationController.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public AddressBookUI.IABPeoplePickerNavigationControllerDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AddressBookUI.IABPeoplePickerNavigationControllerDelegate Delegate" />
      <MemberSignature Language="DocId" Value="P:AddressBookUI.ABPeoplePickerNavigationController.Delegate" />
      <MemberSignature Language="F#" Value="member this.Delegate : AddressBookUI.IABPeoplePickerNavigationControllerDelegate with get, set" Usage="AddressBookUI.ABPeoplePickerNavigationController.Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AddressBookUI.IABPeoplePickerNavigationControllerDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the AddressBookUI.IABPeoplePickerNavigationControllerDelegate model class which acts as the class delegate.</summary>
        <value>The instance of the AddressBookUI.IABPeoplePickerNavigationControllerDelegate model class</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayedProperties">
      <MemberSignature Language="C#" Value="public AddressBookUI.DisplayedPropertiesCollection DisplayedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AddressBookUI.DisplayedPropertiesCollection DisplayedProperties" />
      <MemberSignature Language="DocId" Value="P:AddressBookUI.ABPeoplePickerNavigationController.DisplayedProperties" />
      <MemberSignature Language="F#" Value="member this.DisplayedProperties : AddressBookUI.DisplayedPropertiesCollection" Usage="AddressBookUI.ABPeoplePickerNavigationController.DisplayedProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AddressBookUI.DisplayedPropertiesCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the list of properties that the <see cref="T:AddressBookUI.ABPeoplePickerNavigationController" /> displays.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:AddressBookUI.ABPeoplePickerNavigationController.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="aBPeoplePickerNavigationController.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the ABPeoplePickerNavigationController object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the ABPeoplePickerNavigationController class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the ABPeoplePickerNavigationController ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static AddressBookUI.ABPeoplePickerNavigationController.ABPeoplePickerNavigationControllerAppearance GetAppearance (UIKit.UITraitCollection traits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AddressBookUI.ABPeoplePickerNavigationController/ABPeoplePickerNavigationControllerAppearance GetAppearance(class UIKit.UITraitCollection traits) cil managed" />
      <MemberSignature Language="DocId" Value="M:AddressBookUI.ABPeoplePickerNavigationController.GetAppearance(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection -&gt; AddressBookUI.ABPeoplePickerNavigationController.ABPeoplePickerNavigationControllerAppearance" Usage="AddressBookUI.ABPeoplePickerNavigationController.GetAppearance traits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AddressBookUI.ABPeoplePickerNavigationController+ABPeoplePickerNavigationControllerAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static AddressBookUI.ABPeoplePickerNavigationController.ABPeoplePickerNavigationControllerAppearance GetAppearance (UIKit.UITraitCollection traits, params Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AddressBookUI.ABPeoplePickerNavigationController/ABPeoplePickerNavigationControllerAppearance GetAppearance(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:AddressBookUI.ABPeoplePickerNavigationController.GetAppearance(UIKit.UITraitCollection,System.Type[])" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection * Type[] -&gt; AddressBookUI.ABPeoplePickerNavigationController.ABPeoplePickerNavigationControllerAppearance" Usage="AddressBookUI.ABPeoplePickerNavigationController.GetAppearance (traits, containers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AddressBookUI.ABPeoplePickerNavigationController+ABPeoplePickerNavigationControllerAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <param name="containers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static AddressBookUI.ABPeoplePickerNavigationController.ABPeoplePickerNavigationControllerAppearance GetAppearance&lt;T&gt; () where T : AddressBookUI.ABPeoplePickerNavigationController;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AddressBookUI.ABPeoplePickerNavigationController/ABPeoplePickerNavigationControllerAppearance GetAppearance&lt;(class AddressBookUI.ABPeoplePickerNavigationController) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:AddressBookUI.ABPeoplePickerNavigationController.GetAppearance``1" />
      <MemberSignature Language="F#" Value="static member GetAppearance : unit -&gt; AddressBookUI.ABPeoplePickerNavigationController.ABPeoplePickerNavigationControllerAppearance (requires 'T :&gt; AddressBookUI.ABPeoplePickerNavigationController)" Usage="AddressBookUI.ABPeoplePickerNavigationController.GetAppearance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AddressBookUI.ABPeoplePickerNavigationController+ABPeoplePickerNavigationControllerAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of ABPeoplePickerNavigationController.</typeparam>
        <summary>Obtains the appearance proxy <see cref="T:AddressBookUI.ABPeoplePickerNavigationController.ABPeoplePickerNavigationControllerAppearance" /> for the subclass of ABPeoplePickerNavigationController.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>Setting any appearance properties on the returned object will affect the appearance of all classes and subclasses of the type parameter.</para>
          <para>Unlike the <see cref="P:AddressBookUI.ABPeoplePickerNavigationController.Appearance" /> property, or the <see cref="M:AddressBookUI.ABPeoplePickerNavigationControllerAppearanceWhenContainedIn" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = ABPeoplePickerNavigationController.GetAppearance<MyABPeoplePickerNavigationControllerSubclass> ();
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static AddressBookUI.ABPeoplePickerNavigationController.ABPeoplePickerNavigationControllerAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits) where T : AddressBookUI.ABPeoplePickerNavigationController;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AddressBookUI.ABPeoplePickerNavigationController/ABPeoplePickerNavigationControllerAppearance GetAppearance&lt;(class AddressBookUI.ABPeoplePickerNavigationController) T&gt;(class UIKit.UITraitCollection traits) cil managed" />
      <MemberSignature Language="DocId" Value="M:AddressBookUI.ABPeoplePickerNavigationController.GetAppearance``1(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection -&gt; AddressBookUI.ABPeoplePickerNavigationController.ABPeoplePickerNavigationControllerAppearance (requires 'T :&gt; AddressBookUI.ABPeoplePickerNavigationController)" Usage="AddressBookUI.ABPeoplePickerNavigationController.GetAppearance traits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AddressBookUI.ABPeoplePickerNavigationController+ABPeoplePickerNavigationControllerAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>AddressBookUI.ABPeoplePickerNavigationController</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of ABPeoplePickerNavigationController.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <summary>Obtains the appearance proxy <see cref="T:AddressBookUI.ABPeoplePickerNavigationController.ABPeoplePickerNavigationControllerAppearance" /> for the subclass of ABPeoplePickerNavigationController.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of ABPeoplePickerNavigationController.</para>
          <para>Unlike the <see cref="P:AddressBookUI.ABPeoplePickerNavigationController.Appearance" /> property, or the <see cref="M:AddressBookUI.ABPeoplePickerNavigationControllerAppearanceWhenContainedIn" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = ABPeoplePickerNavigationController.GetAppearance<MyABPeoplePickerNavigationControllerSubclass> (myTraits, );
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static AddressBookUI.ABPeoplePickerNavigationController.ABPeoplePickerNavigationControllerAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits, params Type[] containers) where T : AddressBookUI.ABPeoplePickerNavigationController;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AddressBookUI.ABPeoplePickerNavigationController/ABPeoplePickerNavigationControllerAppearance GetAppearance&lt;(class AddressBookUI.ABPeoplePickerNavigationController) T&gt;(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:AddressBookUI.ABPeoplePickerNavigationController.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection * Type[] -&gt; AddressBookUI.ABPeoplePickerNavigationController.ABPeoplePickerNavigationControllerAppearance (requires 'T :&gt; AddressBookUI.ABPeoplePickerNavigationController)" Usage="AddressBookUI.ABPeoplePickerNavigationController.GetAppearance (traits, containers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AddressBookUI.ABPeoplePickerNavigationController+ABPeoplePickerNavigationControllerAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>AddressBookUI.ABPeoplePickerNavigationController</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of ABPeoplePickerNavigationController.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <param name="containers">List of types that the developer wishes to have as the containers to apply this particular appearance.</param>
        <summary>Obtains the appearance proxy <see cref="T:AddressBookUI.ABPeoplePickerNavigationController.ABPeoplePickerNavigationControllerAppearance" /> for the subclass of ABPeoplePickerNavigationController that has the specified trait collection when the view is hosted in the specified hierarchy.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of ABPeoplePickerNavigationController that has the specified trait collection when the view is hosted in the specified hierarchy when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>Unlike the <see cref="P:AddressBookUI.ABPeoplePickerNavigationController.Appearance" /> property, or the <see cref="M:AddressBookUI.ABPeoplePickerNavigationControllerAppearanceWhenContainedIn" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = ABPeoplePickerNavigationController.GetAppearance<MyABPeoplePickerNavigationControllerSubclass> (myTraits, typeof (UINavigationBar), typeof (UIPopoverController));
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCancelled">
      <MemberSignature Language="C#" Value="protected internal virtual void OnCancelled (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnCancelled(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:AddressBookUI.ABPeoplePickerNavigationController.OnCancelled(System.EventArgs)" />
      <MemberSignature Language="F#" Value="abstract member OnCancelled : EventArgs -&gt; unit&#xA;override this.OnCancelled : EventArgs -&gt; unit" Usage="aBPeoplePickerNavigationController.OnCancelled e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPerformAction">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPerformAction (AddressBookUI.ABPeoplePickerPerformActionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPerformAction(class AddressBookUI.ABPeoplePickerPerformActionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:AddressBookUI.ABPeoplePickerNavigationController.OnPerformAction(AddressBookUI.ABPeoplePickerPerformActionEventArgs)" />
      <MemberSignature Language="F#" Value="abstract member OnPerformAction : AddressBookUI.ABPeoplePickerPerformActionEventArgs -&gt; unit&#xA;override this.OnPerformAction : AddressBookUI.ABPeoplePickerPerformActionEventArgs -&gt; unit" Usage="aBPeoplePickerNavigationController.OnPerformAction e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="AddressBookUI.ABPeoplePickerPerformActionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPerformAction2">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPerformAction2 (AddressBookUI.ABPeoplePickerPerformAction2EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPerformAction2(class AddressBookUI.ABPeoplePickerPerformAction2EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:AddressBookUI.ABPeoplePickerNavigationController.OnPerformAction2(AddressBookUI.ABPeoplePickerPerformAction2EventArgs)" />
      <MemberSignature Language="F#" Value="abstract member OnPerformAction2 : AddressBookUI.ABPeoplePickerPerformAction2EventArgs -&gt; unit&#xA;override this.OnPerformAction2 : AddressBookUI.ABPeoplePickerPerformAction2EventArgs -&gt; unit" Usage="aBPeoplePickerNavigationController.OnPerformAction2 e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="AddressBookUI.ABPeoplePickerPerformAction2EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectPerson">
      <MemberSignature Language="C#" Value="protected internal virtual void OnSelectPerson (AddressBookUI.ABPeoplePickerSelectPersonEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnSelectPerson(class AddressBookUI.ABPeoplePickerSelectPersonEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:AddressBookUI.ABPeoplePickerNavigationController.OnSelectPerson(AddressBookUI.ABPeoplePickerSelectPersonEventArgs)" />
      <MemberSignature Language="F#" Value="abstract member OnSelectPerson : AddressBookUI.ABPeoplePickerSelectPersonEventArgs -&gt; unit&#xA;override this.OnSelectPerson : AddressBookUI.ABPeoplePickerSelectPersonEventArgs -&gt; unit" Usage="aBPeoplePickerNavigationController.OnSelectPerson e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="AddressBookUI.ABPeoplePickerSelectPersonEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectPerson2">
      <MemberSignature Language="C#" Value="protected internal virtual void OnSelectPerson2 (AddressBookUI.ABPeoplePickerSelectPerson2EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnSelectPerson2(class AddressBookUI.ABPeoplePickerSelectPerson2EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:AddressBookUI.ABPeoplePickerNavigationController.OnSelectPerson2(AddressBookUI.ABPeoplePickerSelectPerson2EventArgs)" />
      <MemberSignature Language="F#" Value="abstract member OnSelectPerson2 : AddressBookUI.ABPeoplePickerSelectPerson2EventArgs -&gt; unit&#xA;override this.OnSelectPerson2 : AddressBookUI.ABPeoplePickerSelectPerson2EventArgs -&gt; unit" Usage="aBPeoplePickerNavigationController.OnSelectPerson2 e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="AddressBookUI.ABPeoplePickerSelectPerson2EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformAction">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;AddressBookUI.ABPeoplePickerPerformActionEventArgs&gt; PerformAction;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class AddressBookUI.ABPeoplePickerPerformActionEventArgs&gt; PerformAction" />
      <MemberSignature Language="DocId" Value="E:AddressBookUI.ABPeoplePickerNavigationController.PerformAction" />
      <MemberSignature Language="F#" Value="member this.PerformAction : EventHandler&lt;AddressBookUI.ABPeoplePickerPerformActionEventArgs&gt; " Usage="member this.PerformAction : System.EventHandler&lt;AddressBookUI.ABPeoplePickerPerformActionEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;AddressBookUI.ABPeoplePickerPerformActionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Prior to iOS 8, this event handler was called when the user selected one of the person’s properties.</summary>
        <remarks>
          <para>In addition to subscribing to this event, also subscribe to <see cref="E:AddressBookUI.ABPeoplePickerNavigationController.PerformAction2" /> in iOS 8 and above.
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformAction2">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;AddressBookUI.ABPeoplePickerPerformAction2EventArgs&gt; PerformAction2;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class AddressBookUI.ABPeoplePickerPerformAction2EventArgs&gt; PerformAction2" />
      <MemberSignature Language="DocId" Value="E:AddressBookUI.ABPeoplePickerNavigationController.PerformAction2" />
      <MemberSignature Language="F#" Value="member this.PerformAction2 : EventHandler&lt;AddressBookUI.ABPeoplePickerPerformAction2EventArgs&gt; " Usage="member this.PerformAction2 : System.EventHandler&lt;AddressBookUI.ABPeoplePickerPerformAction2EventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;AddressBookUI.ABPeoplePickerPerformAction2EventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>In iOS8 and above, this event handler will be called after a person has been selected by the user.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PredicateForEnablingPerson">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSPredicate PredicateForEnablingPerson { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSPredicate PredicateForEnablingPerson" />
      <MemberSignature Language="DocId" Value="P:AddressBookUI.ABPeoplePickerNavigationController.PredicateForEnablingPerson" />
      <MemberSignature Language="F#" Value="member this.PredicateForEnablingPerson : Foundation.NSPredicate with get, set" Usage="AddressBookUI.ABPeoplePickerNavigationController.PredicateForEnablingPerson" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("predicateForEnablingPerson")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setPredicateForEnablingPerson:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("predicateForEnablingPerson", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setPredicateForEnablingPerson:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Use this property to set a predicate that determines whether the person can be selected or not.</summary>
        <value>
          <para>If the value is null, all persons are selectable;  Otherwise only those persons that match the predicate will be.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredicateForSelectionOfPerson">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSPredicate PredicateForSelectionOfPerson { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSPredicate PredicateForSelectionOfPerson" />
      <MemberSignature Language="DocId" Value="P:AddressBookUI.ABPeoplePickerNavigationController.PredicateForSelectionOfPerson" />
      <MemberSignature Language="F#" Value="member this.PredicateForSelectionOfPerson : Foundation.NSPredicate with get, set" Usage="AddressBookUI.ABPeoplePickerNavigationController.PredicateForSelectionOfPerson" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("predicateForSelectionOfPerson")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setPredicateForSelectionOfPerson:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("predicateForSelectionOfPerson", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setPredicateForSelectionOfPerson:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Use this property to set a predicate that determines whether the person should be returned to the app, or displayed to the user.</summary>
        <value>
          <para>If set, the predicate that determines whether to return the person to the app (the predicate evaluates to true) or displayed (the predicate evaluates to false).</para>
          <para>If the value is not set, the decision on whether the person is returned or displayed rests on the methods from the <see cref="T:AddressBookUI.ABPeoplePickerNavigationControllerDelegate" /> delegate.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredicateForSelectionOfProperty">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSPredicate PredicateForSelectionOfProperty { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSPredicate PredicateForSelectionOfProperty" />
      <MemberSignature Language="DocId" Value="P:AddressBookUI.ABPeoplePickerNavigationController.PredicateForSelectionOfProperty" />
      <MemberSignature Language="F#" Value="member this.PredicateForSelectionOfProperty : Foundation.NSPredicate with get, set" Usage="AddressBookUI.ABPeoplePickerNavigationController.PredicateForSelectionOfProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("predicateForSelectionOfProperty")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setPredicateForSelectionOfProperty:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("predicateForSelectionOfProperty", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setPredicateForSelectionOfProperty:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectPerson">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;AddressBookUI.ABPeoplePickerSelectPersonEventArgs&gt; SelectPerson;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class AddressBookUI.ABPeoplePickerSelectPersonEventArgs&gt; SelectPerson" />
      <MemberSignature Language="DocId" Value="E:AddressBookUI.ABPeoplePickerNavigationController.SelectPerson" />
      <MemberSignature Language="F#" Value="member this.SelectPerson : EventHandler&lt;AddressBookUI.ABPeoplePickerSelectPersonEventArgs&gt; " Usage="member this.SelectPerson : System.EventHandler&lt;AddressBookUI.ABPeoplePickerSelectPersonEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;AddressBookUI.ABPeoplePickerSelectPersonEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Prior to iOS 8, this event handler was called when the user selected a contact.</summary>
        <remarks>
          <para>In iOS 8 and above, in addition to subscribing to this event, also subscribe to <see cref="E:AddressBookUI.ABPeoplePickerNavigationController.SelectPerson2" />.</para>
          <para>Set <see cref="P:AddressBookUI.ABPeoplePickerSelectPersonEventArgs.Continue" /> to <see langword="true" /> to display the contact and dismiss the picker.</para>
          <para>Set <see cref="P:AddressBookUI.ABPeoplePickerSelectPersonEventArgs.Continue" /> to <see langword="false" /> to do nothing.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectPerson2">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;AddressBookUI.ABPeoplePickerSelectPerson2EventArgs&gt; SelectPerson2;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class AddressBookUI.ABPeoplePickerSelectPerson2EventArgs&gt; SelectPerson2" />
      <MemberSignature Language="DocId" Value="E:AddressBookUI.ABPeoplePickerNavigationController.SelectPerson2" />
      <MemberSignature Language="F#" Value="member this.SelectPerson2 : EventHandler&lt;AddressBookUI.ABPeoplePickerSelectPerson2EventArgs&gt; " Usage="member this.SelectPerson2 : System.EventHandler&lt;AddressBookUI.ABPeoplePickerSelectPerson2EventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;AddressBookUI.ABPeoplePickerSelectPerson2EventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>In iOS8 and above, this event handler is called after a person has been selected by the user.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakDelegate" />
      <MemberSignature Language="DocId" Value="P:AddressBookUI.ABPeoplePickerNavigationController.WeakDelegate" />
      <MemberSignature Language="F#" Value="member this.WeakDelegate : Foundation.NSObject with get, set" Usage="AddressBookUI.ABPeoplePickerNavigationController.WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("peoplePickerDelegate")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setPeoplePickerDelegate:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("peoplePickerDelegate", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setPeoplePickerDelegate:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for this type</summary>
        <value>The instance that will respond to events and data requests.</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>   Methods must be decorated with the [Export ("selectorName")] attribute to respond to each method from the protocol.   Alternatively use the Delegate method which is strongly typed and does not require the [Export] attributes on methods.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
