<Type Name="GKObstacleGraph" FullName="GameplayKit.GKObstacleGraph">
  <TypeSignature Language="C#" Value="public class GKObstacleGraph : GameplayKit.GKGraph" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GKObstacleGraph extends GameplayKit.GKGraph" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>GameplayKit.GKGraph</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("GKObstacleGraph", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <see cref="T:GameplayKit.GKGraph" /> that generates a space-filling network for representation, allowing smooth, but inefficient, paths.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/GameplayKit/Reference/GKObstacleGraph_Class/index.html">Apple documentation for <c>GKObstacleGraph</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GKObstacleGraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GKObstacleGraph (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected GKObstacleGraph (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected GKObstacleGraph (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GKObstacleGraph (GameplayKit.GKPolygonObstacle[] obstacles, float bufferRadius);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class GameplayKit.GKPolygonObstacle[] obstacles, float32 bufferRadius) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithObstacles:bufferRadius:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="obstacles" Type="GameplayKit.GKPolygonObstacle[]" />
        <Parameter Name="bufferRadius" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="obstacles">To be added.</param>
        <param name="bufferRadius">To be added.</param>
        <summary>Creates a <see cref="T:GameplayKit.GKObstacleGraph" /> with the specified <paramref name="obstacles" /> and <paramref name="bufferRadius" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddObstacles">
      <MemberSignature Language="C#" Value="public virtual void AddObstacles (GameplayKit.GKPolygonObstacle[] obstacles);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddObstacles(class GameplayKit.GKPolygonObstacle[] obstacles) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addObstacles:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obstacles" Type="GameplayKit.GKPolygonObstacle[]" />
      </Parameters>
      <Docs>
        <param name="obstacles">To be added.</param>
        <summary>Adds <paramref name="obstacles" /> to the internal model used for pathfinding.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BufferRadius">
      <MemberSignature Language="C#" Value="public virtual float BufferRadius { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 BufferRadius" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("bufferRadius")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The distance from the edges of <see cref="T:GameplayKit.GKObstacle" /> objects that is considered impassable.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectNodeUsingObstacles">
      <MemberSignature Language="C#" Value="public virtual void ConnectNodeUsingObstacles (GameplayKit.GKGraphNode2D node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectNodeUsingObstacles(class GameplayKit.GKGraphNode2D node) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("connectNodeUsingObstacles:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="GameplayKit.GKGraphNode2D" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Adds the node to the <see cref="T:GameplayKit.GKGraph" />, connecting it to its nearest neighbors, avoiding <see cref="P:GameplayKit.GKObstacleGraph.Obstacles" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectNodeUsingObstacles">
      <MemberSignature Language="C#" Value="public virtual void ConnectNodeUsingObstacles (GameplayKit.GKGraphNode2D node, GameplayKit.GKPolygonObstacle[] obstaclesToIgnore);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectNodeUsingObstacles(class GameplayKit.GKGraphNode2D node, class GameplayKit.GKPolygonObstacle[] obstaclesToIgnore) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("connectNodeUsingObstacles:ignoringObstacles:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="GameplayKit.GKGraphNode2D" />
        <Parameter Name="obstaclesToIgnore" Type="GameplayKit.GKPolygonObstacle[]" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <param name="obstaclesToIgnore">To be added.</param>
        <summary>Adds the node to the <see cref="T:GameplayKit.GKGraph" />, connecting it to its nearest neighbors, avoiding <see cref="P:GameplayKit.GKObstacleGraph.Obstacles" /> except those in <paramref name="obstaclesToIgnore" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectNodeUsingObstaclesIgnoringBufferRadius">
      <MemberSignature Language="C#" Value="public virtual void ConnectNodeUsingObstaclesIgnoringBufferRadius (GameplayKit.GKGraphNode2D node, GameplayKit.GKPolygonObstacle[] obstaclesBufferRadiusToIgnore);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectNodeUsingObstaclesIgnoringBufferRadius(class GameplayKit.GKGraphNode2D node, class GameplayKit.GKPolygonObstacle[] obstaclesBufferRadiusToIgnore) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("connectNodeUsingObstacles:ignoringBufferRadiusOfObstacles:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="GameplayKit.GKGraphNode2D" />
        <Parameter Name="obstaclesBufferRadiusToIgnore" Type="GameplayKit.GKPolygonObstacle[]" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <param name="obstaclesBufferRadiusToIgnore">To be added.</param>
        <summary>Connects a node to an existing graph, omitting connections within a specified radius of existing obstacles.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromObstacles">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKObstacleGraph FromObstacles (GameplayKit.GKPolygonObstacle[] obstacles, float bufferRadius);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKObstacleGraph FromObstacles(class GameplayKit.GKPolygonObstacle[] obstacles, float32 bufferRadius) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("graphWithObstacles:bufferRadius:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKObstacleGraph</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obstacles" Type="GameplayKit.GKPolygonObstacle[]" />
        <Parameter Name="bufferRadius" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="obstacles">To be added.</param>
        <param name="bufferRadius">To be added.</param>
        <summary>Factory method to create a <see cref="T:GameplayKit.GKObstacleGraph" /> with the specified <paramref name="obstacles" /> and <paramref name="bufferRadius" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClassForGenericArgument">
      <MemberSignature Language="C#" Value="public virtual ObjCRuntime.Class GetClassForGenericArgument (nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class ObjCRuntime.Class GetClassForGenericArgument(valuetype System.nuint index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("classForGenericArgumentAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ObjCRuntime.Class</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNodes">
      <MemberSignature Language="C#" Value="public virtual GameplayKit.GKGraphNode2D[] GetNodes (GameplayKit.GKPolygonObstacle obstacle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class GameplayKit.GKGraphNode2D[] GetNodes(class GameplayKit.GKPolygonObstacle obstacle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>GameplayKit.GKGraphNode2D[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obstacle" Type="GameplayKit.GKPolygonObstacle" />
      </Parameters>
      <Docs>
        <param name="obstacle">To be added.</param>
        <summary>Returns the array of <see cref="T:GameplayKit.GKGraphNode2D" /> corresponding to the <paramref name="obstacle" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeForGenericArgument">
      <MemberSignature Language="C#" Value="public Type GetTypeForGenericArgument (nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetTypeForGenericArgument(valuetype System.nuint index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConnectionLocked">
      <MemberSignature Language="C#" Value="public virtual bool IsConnectionLocked (GameplayKit.GKGraphNode2D startNode, GameplayKit.GKGraphNode2D endNode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsConnectionLocked(class GameplayKit.GKGraphNode2D startNode, class GameplayKit.GKGraphNode2D endNode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("isConnectionLockedFromNode:toNode:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startNode" Type="GameplayKit.GKGraphNode2D" />
        <Parameter Name="endNode" Type="GameplayKit.GKGraphNode2D" />
      </Parameters>
      <Docs>
        <param name="startNode">To be added.</param>
        <param name="endNode">To be added.</param>
        <summary>Whether the connected between the nodes is protected from being broken by the addition of an intermediary <see cref="T:GameplayKit.GKObstacle" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LockConnection">
      <MemberSignature Language="C#" Value="public virtual void LockConnection (GameplayKit.GKGraphNode2D startNode, GameplayKit.GKGraphNode2D endNode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LockConnection(class GameplayKit.GKGraphNode2D startNode, class GameplayKit.GKGraphNode2D endNode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("lockConnectionFromNode:toNode:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startNode" Type="GameplayKit.GKGraphNode2D" />
        <Parameter Name="endNode" Type="GameplayKit.GKGraphNode2D" />
      </Parameters>
      <Docs>
        <param name="startNode">To be added.</param>
        <param name="endNode">To be added.</param>
        <summary>Protects the connection from being broken by the addition of an intermediary <see cref="T:GameplayKit.GKObstacle" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Obstacles">
      <MemberSignature Language="C#" Value="public virtual GameplayKit.GKPolygonObstacle[] Obstacles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class GameplayKit.GKPolygonObstacle[] Obstacles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("obstacles")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKPolygonObstacle[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:GameplayKit.GKPolygonObstacle" /> objects in the <see cref="T:GameplayKit.GKObstacleGraph" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllObstacles">
      <MemberSignature Language="C#" Value="public virtual void RemoveAllObstacles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllObstacles() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeAllObstacles")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all <see cref="T:GameplayKit.GKObstacle" /> objects from the <see cref="T:GameplayKit.GKObstacleGraph" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveObstacles">
      <MemberSignature Language="C#" Value="public virtual void RemoveObstacles (GameplayKit.GKPolygonObstacle[] obstacles);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveObstacles(class GameplayKit.GKPolygonObstacle[] obstacles) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeObstacles:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obstacles" Type="GameplayKit.GKPolygonObstacle[]" />
      </Parameters>
      <Docs>
        <param name="obstacles">To be added.</param>
        <summary>Removes the specified <paramref name="obstacles" /> from the <see cref="T:GameplayKit.GKObstacleGraph" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnlockConnection">
      <MemberSignature Language="C#" Value="public virtual void UnlockConnection (GameplayKit.GKGraphNode2D startNode, GameplayKit.GKGraphNode2D endNode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnlockConnection(class GameplayKit.GKGraphNode2D startNode, class GameplayKit.GKGraphNode2D endNode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("unlockConnectionFromNode:toNode:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startNode" Type="GameplayKit.GKGraphNode2D" />
        <Parameter Name="endNode" Type="GameplayKit.GKGraphNode2D" />
      </Parameters>
      <Docs>
        <param name="startNode">To be added.</param>
        <param name="endNode">To be added.</param>
        <summary>Removes the protection of the connection between the nodes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
