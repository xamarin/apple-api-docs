<Type Name="GKNoise" FullName="GameplayKit.GKNoise">
  <TypeSignature Language="C#" Value="public class GKNoise : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GKNoise extends Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("GKNoise", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.TvOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 12, MonoTouch.ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GKNoise ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected GKNoise (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GKNoise (MonoTouch.GameplayKit.GKNoiseSource noiseSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.GameplayKit.GKNoiseSource noiseSource) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithNoiseSource:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="noiseSource" Type="MonoTouch.GameplayKit.GKNoiseSource" />
      </Parameters>
      <Docs>
        <param name="noiseSource">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected GKNoise (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GKNoise (MonoTouch.GameplayKit.GKNoiseSource noiseSource, MonoTouch.Foundation.NSDictionary&lt;MonoTouch.Foundation.NSNumber,MonoTouch.UIKit.UIColor&gt; gradientColors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.GameplayKit.GKNoiseSource noiseSource, class MonoTouch.Foundation.NSDictionary`2&lt;class MonoTouch.Foundation.NSNumber, class MonoTouch.UIKit.UIColor&gt; gradientColors) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithNoiseSource:gradientColors:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="noiseSource" Type="MonoTouch.GameplayKit.GKNoiseSource" />
        <Parameter Name="gradientColors" Type="MonoTouch.Foundation.NSDictionary&lt;MonoTouch.Foundation.NSNumber,MonoTouch.UIKit.UIColor&gt;" />
      </Parameters>
      <Docs>
        <param name="noiseSource">To be added.</param>
        <param name="gradientColors">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (MonoTouch.GameplayKit.GKNoise noise);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class MonoTouch.GameplayKit.GKNoise noise) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addWithNoise:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="noise" Type="MonoTouch.GameplayKit.GKNoise" />
      </Parameters>
      <Docs>
        <param name="noise">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAbsoluteValue">
      <MemberSignature Language="C#" Value="public virtual void ApplyAbsoluteValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAbsoluteValue() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("applyAbsoluteValue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyTurbulence">
      <MemberSignature Language="C#" Value="public virtual void ApplyTurbulence (double frequency, double power, int roughness, int seed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyTurbulence(float64 frequency, float64 power, int32 roughness, int32 seed) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("applyTurbulenceWithFrequency:power:roughness:seed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frequency" Type="System.Double" />
        <Parameter Name="power" Type="System.Double" />
        <Parameter Name="roughness" Type="System.Int32" />
        <Parameter Name="seed" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="frequency">To be added.</param>
        <param name="power">To be added.</param>
        <param name="roughness">To be added.</param>
        <param name="seed">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public virtual void Clamp (double lowerBound, double upperBound);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clamp(float64 lowerBound, float64 upperBound) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("clampWithLowerBound:upperBound:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowerBound" Type="System.Double" />
        <Parameter Name="upperBound" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="lowerBound">To be added.</param>
        <param name="upperBound">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplaceX">
      <MemberSignature Language="C#" Value="public virtual void DisplaceX (MonoTouch.GameplayKit.GKNoise xDisplacementNoise, MonoTouch.GameplayKit.GKNoise yDisplacementNoise, MonoTouch.GameplayKit.GKNoise zDisplacementNoise);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DisplaceX(class MonoTouch.GameplayKit.GKNoise xDisplacementNoise, class MonoTouch.GameplayKit.GKNoise yDisplacementNoise, class MonoTouch.GameplayKit.GKNoise zDisplacementNoise) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("displaceXWithNoise:yWithNoise:zWithNoise:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xDisplacementNoise" Type="MonoTouch.GameplayKit.GKNoise" />
        <Parameter Name="yDisplacementNoise" Type="MonoTouch.GameplayKit.GKNoise" />
        <Parameter Name="zDisplacementNoise" Type="MonoTouch.GameplayKit.GKNoise" />
      </Parameters>
      <Docs>
        <param name="xDisplacementNoise">To be added.</param>
        <param name="yDisplacementNoise">To be added.</param>
        <param name="zDisplacementNoise">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromComponentNoises">
      <MemberSignature Language="C#" Value="public static MonoTouch.GameplayKit.GKNoise FromComponentNoises (MonoTouch.GameplayKit.GKNoise[] noises, MonoTouch.GameplayKit.GKNoise selectionNoise);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.GameplayKit.GKNoise FromComponentNoises(class MonoTouch.GameplayKit.GKNoise[] noises, class MonoTouch.GameplayKit.GKNoise selectionNoise) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("noiseWithComponentNoises:selectionNoise:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.GameplayKit.GKNoise</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="noises" Type="MonoTouch.GameplayKit.GKNoise[]" />
        <Parameter Name="selectionNoise" Type="MonoTouch.GameplayKit.GKNoise" />
      </Parameters>
      <Docs>
        <param name="noises">To be added.</param>
        <param name="selectionNoise">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromComponentNoises">
      <MemberSignature Language="C#" Value="public static MonoTouch.GameplayKit.GKNoise FromComponentNoises (MonoTouch.GameplayKit.GKNoise[] noises, MonoTouch.GameplayKit.GKNoise selectionNoise, MonoTouch.Foundation.NSNumber[] componentBoundaries, MonoTouch.Foundation.NSNumber[] blendDistances);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.GameplayKit.GKNoise FromComponentNoises(class MonoTouch.GameplayKit.GKNoise[] noises, class MonoTouch.GameplayKit.GKNoise selectionNoise, class MonoTouch.Foundation.NSNumber[] componentBoundaries, class MonoTouch.Foundation.NSNumber[] blendDistances) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("noiseWithComponentNoises:selectionNoise:componentBoundaries:boundaryBlendDistances:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.GameplayKit.GKNoise</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="noises" Type="MonoTouch.GameplayKit.GKNoise[]" />
        <Parameter Name="selectionNoise" Type="MonoTouch.GameplayKit.GKNoise" />
        <Parameter Name="componentBoundaries" Type="MonoTouch.Foundation.NSNumber[]" />
        <Parameter Name="blendDistances" Type="MonoTouch.Foundation.NSNumber[]" />
      </Parameters>
      <Docs>
        <param name="noises">To be added.</param>
        <param name="selectionNoise">To be added.</param>
        <param name="componentBoundaries">To be added.</param>
        <param name="blendDistances">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromNoiseSource">
      <MemberSignature Language="C#" Value="public static MonoTouch.GameplayKit.GKNoise FromNoiseSource (MonoTouch.GameplayKit.GKNoiseSource noiseSource);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.GameplayKit.GKNoise FromNoiseSource(class MonoTouch.GameplayKit.GKNoiseSource noiseSource) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("noiseWithNoiseSource:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.GameplayKit.GKNoise</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="noiseSource" Type="MonoTouch.GameplayKit.GKNoiseSource" />
      </Parameters>
      <Docs>
        <param name="noiseSource">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromNoiseSource">
      <MemberSignature Language="C#" Value="public static MonoTouch.GameplayKit.GKNoise FromNoiseSource (MonoTouch.GameplayKit.GKNoiseSource noiseSource, MonoTouch.Foundation.NSDictionary&lt;MonoTouch.Foundation.NSNumber,MonoTouch.UIKit.UIColor&gt; gradientColors);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.GameplayKit.GKNoise FromNoiseSource(class MonoTouch.GameplayKit.GKNoiseSource noiseSource, class MonoTouch.Foundation.NSDictionary`2&lt;class MonoTouch.Foundation.NSNumber, class MonoTouch.UIKit.UIColor&gt; gradientColors) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("noiseWithNoiseSource:gradientColors:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.GameplayKit.GKNoise</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="noiseSource" Type="MonoTouch.GameplayKit.GKNoiseSource" />
        <Parameter Name="gradientColors" Type="MonoTouch.Foundation.NSDictionary&lt;MonoTouch.Foundation.NSNumber,MonoTouch.UIKit.UIColor&gt;" />
      </Parameters>
      <Docs>
        <param name="noiseSource">To be added.</param>
        <param name="gradientColors">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMaximum">
      <MemberSignature Language="C#" Value="public virtual void GetMaximum (MonoTouch.GameplayKit.GKNoise noise);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetMaximum(class MonoTouch.GameplayKit.GKNoise noise) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("maximumWithNoise:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="noise" Type="MonoTouch.GameplayKit.GKNoise" />
      </Parameters>
      <Docs>
        <param name="noise">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMinimum">
      <MemberSignature Language="C#" Value="public virtual void GetMinimum (MonoTouch.GameplayKit.GKNoise noise);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetMinimum(class MonoTouch.GameplayKit.GKNoise noise) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("minimumWithNoise:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="noise" Type="MonoTouch.GameplayKit.GKNoise" />
      </Parameters>
      <Docs>
        <param name="noise">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public virtual float GetValue (MonoTouch.OpenTK.Vector2 position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 GetValue(valuetype MonoTouch.OpenTK.Vector2 position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("valueAtPosition:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="MonoTouch.OpenTK.Vector2" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GradientColors">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDictionary&lt;MonoTouch.Foundation.NSNumber,MonoTouch.UIKit.UIColor&gt; GradientColors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSDictionary`2&lt;class MonoTouch.Foundation.NSNumber, class MonoTouch.UIKit.UIColor&gt; GradientColors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("gradientColors")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setGradientColors:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDictionary&lt;MonoTouch.Foundation.NSNumber,MonoTouch.UIKit.UIColor&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invert">
      <MemberSignature Language="C#" Value="public virtual void Invert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invert() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("invert")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public virtual void Move (MonoTouch.OpenTK.Vector3d delta);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Move(valuetype MonoTouch.OpenTK.Vector3d delta) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("moveBy:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delta" Type="MonoTouch.OpenTK.Vector3d" />
      </Parameters>
      <Docs>
        <param name="delta">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public virtual void Multiply (MonoTouch.GameplayKit.GKNoise noise);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Multiply(class MonoTouch.GameplayKit.GKNoise noise) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("multiplyWithNoise:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="noise" Type="MonoTouch.GameplayKit.GKNoise" />
      </Parameters>
      <Docs>
        <param name="noise">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseToPower">
      <MemberSignature Language="C#" Value="public virtual void RaiseToPower (MonoTouch.GameplayKit.GKNoise noise);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseToPower(class MonoTouch.GameplayKit.GKNoise noise) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("raiseToPowerWithNoise:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="noise" Type="MonoTouch.GameplayKit.GKNoise" />
      </Parameters>
      <Docs>
        <param name="noise">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseToPower">
      <MemberSignature Language="C#" Value="public virtual void RaiseToPower (double power);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseToPower(float64 power) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("raiseToPower:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="power" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="power">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemapValuesToCurve">
      <MemberSignature Language="C#" Value="public virtual void RemapValuesToCurve (MonoTouch.Foundation.NSDictionary&lt;MonoTouch.Foundation.NSNumber,MonoTouch.Foundation.NSNumber&gt; controlPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemapValuesToCurve(class MonoTouch.Foundation.NSDictionary`2&lt;class MonoTouch.Foundation.NSNumber, class MonoTouch.Foundation.NSNumber&gt; controlPoints) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("remapValuesToCurveWithControlPoints:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlPoints" Type="MonoTouch.Foundation.NSDictionary&lt;MonoTouch.Foundation.NSNumber,MonoTouch.Foundation.NSNumber&gt;" />
      </Parameters>
      <Docs>
        <param name="controlPoints">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemapValuesToTerraces">
      <MemberSignature Language="C#" Value="public virtual void RemapValuesToTerraces (MonoTouch.Foundation.NSNumber[] peakInputValues, bool inverted);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemapValuesToTerraces(class MonoTouch.Foundation.NSNumber[] peakInputValues, bool inverted) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("remapValuesToTerracesWithPeaks:terracesInverted:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peakInputValues" Type="MonoTouch.Foundation.NSNumber[]" />
        <Parameter Name="inverted" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="peakInputValues">To be added.</param>
        <param name="inverted">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rotate">
      <MemberSignature Language="C#" Value="public virtual void Rotate (MonoTouch.OpenTK.Vector3d radians);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Rotate(valuetype MonoTouch.OpenTK.Vector3d radians) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("rotateBy:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="radians" Type="MonoTouch.OpenTK.Vector3d" />
      </Parameters>
      <Docs>
        <param name="radians">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public virtual void Scale (MonoTouch.OpenTK.Vector3d factor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Scale(valuetype MonoTouch.OpenTK.Vector3d factor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("scaleBy:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="MonoTouch.OpenTK.Vector3d" />
      </Parameters>
      <Docs>
        <param name="factor">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>