<Type Name="GKNoise" FullName="GameplayKit.GKNoise">
  <TypeSignature Language="C#" Value="public class GKNoise : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GKNoise extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:GameplayKit.GKNoise" />
  <TypeSignature Language="F#" Value="type GKNoise = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("GKNoise", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Uses a <see cref="T:GameplayKit.GKNoiseSource" /> to procedurally generate an infinite three-dimensional noise field.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GKNoise ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected GKNoise (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new GameplayKit.GKNoise : Foundation.NSObjectFlag -&gt; GameplayKit.GKNoise" Usage="new GameplayKit.GKNoise t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GKNoise (GameplayKit.GKNoiseSource noiseSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class GameplayKit.GKNoiseSource noiseSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.#ctor(GameplayKit.GKNoiseSource)" />
      <MemberSignature Language="F#" Value="new GameplayKit.GKNoise : GameplayKit.GKNoiseSource -&gt; GameplayKit.GKNoise" Usage="new GameplayKit.GKNoise noiseSource" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithNoiseSource:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="noiseSource" Type="GameplayKit.GKNoiseSource" />
      </Parameters>
      <Docs>
        <param name="noiseSource">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal GKNoise (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new GameplayKit.GKNoise : nativeint -&gt; GameplayKit.GKNoise" Usage="new GameplayKit.GKNoise handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GKNoise (GameplayKit.GKNoiseSource noiseSource, Foundation.NSDictionary&lt;Foundation.NSNumber,UIKit.UIColor&gt; gradientColors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class GameplayKit.GKNoiseSource noiseSource, class Foundation.NSDictionary`2&lt;class Foundation.NSNumber, class UIKit.UIColor&gt; gradientColors) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.#ctor(GameplayKit.GKNoiseSource,Foundation.NSDictionary{Foundation.NSNumber,UIKit.UIColor})" />
      <MemberSignature Language="F#" Value="new GameplayKit.GKNoise : GameplayKit.GKNoiseSource * Foundation.NSDictionary&lt;Foundation.NSNumber, UIKit.UIColor&gt; -&gt; GameplayKit.GKNoise" Usage="new GameplayKit.GKNoise (noiseSource, gradientColors)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithNoiseSource:gradientColors:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="noiseSource" Type="GameplayKit.GKNoiseSource" />
        <Parameter Name="gradientColors" Type="Foundation.NSDictionary&lt;Foundation.NSNumber,UIKit.UIColor&gt;" />
      </Parameters>
      <Docs>
        <param name="noiseSource">To be added.</param>
        <param name="gradientColors">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (GameplayKit.GKNoise noise);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class GameplayKit.GKNoise noise) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.Add(GameplayKit.GKNoise)" />
      <MemberSignature Language="F#" Value="abstract member Add : GameplayKit.GKNoise -&gt; unit&#xA;override this.Add : GameplayKit.GKNoise -&gt; unit" Usage="gKNoise.Add noise" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("addWithNoise:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="noise" Type="GameplayKit.GKNoise" />
      </Parameters>
      <Docs>
        <param name="noise">To be added.</param>
        <summary>Adds the values produced by <param name="noise" /> to <see langword="this" />.</summary>
        <remarks>
          <para>Adding noise values can result in values outside the valid range of [-1.0, 1.0]. Developers should use <see cref="M:GameplayKit.GKNois.RemapValuesToCurve" /> as necessary to ensure that values stay within this range.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAbsoluteValue">
      <MemberSignature Language="C#" Value="public virtual void ApplyAbsoluteValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyAbsoluteValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.ApplyAbsoluteValue" />
      <MemberSignature Language="F#" Value="abstract member ApplyAbsoluteValue : unit -&gt; unit&#xA;override this.ApplyAbsoluteValue : unit -&gt; unit" Usage="gKNoise.ApplyAbsoluteValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("applyAbsoluteValue")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Replaces all negative values in the noise field with their positive absolute values.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyTurbulence">
      <MemberSignature Language="C#" Value="public virtual void ApplyTurbulence (double frequency, double power, int roughness, int seed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyTurbulence(float64 frequency, float64 power, int32 roughness, int32 seed) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.ApplyTurbulence(System.Double,System.Double,System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member ApplyTurbulence : double * double * int * int -&gt; unit&#xA;override this.ApplyTurbulence : double * double * int * int -&gt; unit" Usage="gKNoise.ApplyTurbulence (frequency, power, roughness, seed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("applyTurbulenceWithFrequency:power:roughness:seed:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frequency" Type="System.Double" />
        <Parameter Name="power" Type="System.Double" />
        <Parameter Name="roughness" Type="System.Int32" />
        <Parameter Name="seed" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="frequency">To be added.</param>
        <param name="power">To be added.</param>
        <param name="roughness">To be added.</param>
        <param name="seed">To be added.</param>
        <summary>Applies distortion to the noise field.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public virtual void Clamp (double lowerBound, double upperBound);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clamp(float64 lowerBound, float64 upperBound) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.Clamp(System.Double,System.Double)" />
      <MemberSignature Language="F#" Value="abstract member Clamp : double * double -&gt; unit&#xA;override this.Clamp : double * double -&gt; unit" Usage="gKNoise.Clamp (lowerBound, upperBound)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("clampWithLowerBound:upperBound:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowerBound" Type="System.Double" />
        <Parameter Name="upperBound" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="lowerBound">To be added.</param>
        <param name="upperBound">To be added.</param>
        <summary>Clamps values outside [<param name="lowerBound" />, <param name="upperBound" />] to the specified range.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:GameplayKit.GKNoise.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="GameplayKit.GKNoise.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplaceX">
      <MemberSignature Language="C#" Value="public virtual void DisplaceX (GameplayKit.GKNoise xDisplacementNoise, GameplayKit.GKNoise yDisplacementNoise, GameplayKit.GKNoise zDisplacementNoise);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DisplaceX(class GameplayKit.GKNoise xDisplacementNoise, class GameplayKit.GKNoise yDisplacementNoise, class GameplayKit.GKNoise zDisplacementNoise) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.DisplaceX(GameplayKit.GKNoise,GameplayKit.GKNoise,GameplayKit.GKNoise)" />
      <MemberSignature Language="F#" Value="abstract member DisplaceX : GameplayKit.GKNoise * GameplayKit.GKNoise * GameplayKit.GKNoise -&gt; unit&#xA;override this.DisplaceX : GameplayKit.GKNoise * GameplayKit.GKNoise * GameplayKit.GKNoise -&gt; unit" Usage="gKNoise.DisplaceX (xDisplacementNoise, yDisplacementNoise, zDisplacementNoise)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>System.Obsolete("Use 'GKNoise.Displace' instead.", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("displaceXWithNoise:yWithNoise:zWithNoise:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xDisplacementNoise" Type="GameplayKit.GKNoise" />
        <Parameter Name="yDisplacementNoise" Type="GameplayKit.GKNoise" />
        <Parameter Name="zDisplacementNoise" Type="GameplayKit.GKNoise" />
      </Parameters>
      <Docs>
        <param name="xDisplacementNoise">To be added.</param>
        <param name="yDisplacementNoise">To be added.</param>
        <param name="zDisplacementNoise">To be added.</param>
        <summary>Displaces noise values along a 3D vector defined by the corresponding values in the X, Y, and Z displacement arguments.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromComponentNoises">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKNoise FromComponentNoises (GameplayKit.GKNoise[] noises, GameplayKit.GKNoise selectionNoise);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKNoise FromComponentNoises(class GameplayKit.GKNoise[] noises, class GameplayKit.GKNoise selectionNoise) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.FromComponentNoises(GameplayKit.GKNoise[],GameplayKit.GKNoise)" />
      <MemberSignature Language="F#" Value="static member FromComponentNoises : GameplayKit.GKNoise[] * GameplayKit.GKNoise -&gt; GameplayKit.GKNoise" Usage="GameplayKit.GKNoise.FromComponentNoises (noises, selectionNoise)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("noiseWithComponentNoises:selectionNoise:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKNoise</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="noises" Type="GameplayKit.GKNoise[]" />
        <Parameter Name="selectionNoise" Type="GameplayKit.GKNoise" />
      </Parameters>
      <Docs>
        <param name="noises">To be added.</param>
        <param name="selectionNoise">To be added.</param>
        <summary>Static method for creating composite noise from <param name="noises" />, using <param name="selectionNoise" /> to map sources into specific locations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromComponentNoises">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKNoise FromComponentNoises (GameplayKit.GKNoise[] noises, GameplayKit.GKNoise selectionNoise, Foundation.NSNumber[] componentBoundaries, Foundation.NSNumber[] blendDistances);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKNoise FromComponentNoises(class GameplayKit.GKNoise[] noises, class GameplayKit.GKNoise selectionNoise, class Foundation.NSNumber[] componentBoundaries, class Foundation.NSNumber[] blendDistances) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.FromComponentNoises(GameplayKit.GKNoise[],GameplayKit.GKNoise,Foundation.NSNumber[],Foundation.NSNumber[])" />
      <MemberSignature Language="F#" Value="static member FromComponentNoises : GameplayKit.GKNoise[] * GameplayKit.GKNoise * Foundation.NSNumber[] * Foundation.NSNumber[] -&gt; GameplayKit.GKNoise" Usage="GameplayKit.GKNoise.FromComponentNoises (noises, selectionNoise, componentBoundaries, blendDistances)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("noiseWithComponentNoises:selectionNoise:componentBoundaries:boundaryBlendDistances:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKNoise</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="noises" Type="GameplayKit.GKNoise[]" />
        <Parameter Name="selectionNoise" Type="GameplayKit.GKNoise" />
        <Parameter Name="componentBoundaries" Type="Foundation.NSNumber[]" />
        <Parameter Name="blendDistances" Type="Foundation.NSNumber[]" />
      </Parameters>
      <Docs>
        <param name="noises">To be added.</param>
        <param name="selectionNoise">To be added.</param>
        <param name="componentBoundaries">To be added.</param>
        <param name="blendDistances">To be added.</param>
        <summary>Static method for creating composite noise from <param name="noises" />, using <param name="selectionNoise" /> to map sources into specific locations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromNoiseSource">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKNoise FromNoiseSource (GameplayKit.GKNoiseSource noiseSource);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKNoise FromNoiseSource(class GameplayKit.GKNoiseSource noiseSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.FromNoiseSource(GameplayKit.GKNoiseSource)" />
      <MemberSignature Language="F#" Value="static member FromNoiseSource : GameplayKit.GKNoiseSource -&gt; GameplayKit.GKNoise" Usage="GameplayKit.GKNoise.FromNoiseSource noiseSource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("noiseWithNoiseSource:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKNoise</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="noiseSource" Type="GameplayKit.GKNoiseSource" />
      </Parameters>
      <Docs>
        <param name="noiseSource">To be added.</param>
        <summary>Static method for creating a <see cref="T:GameplayKit.GKNoise" /> object with the specified <param name="noiseSource" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromNoiseSource">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKNoise FromNoiseSource (GameplayKit.GKNoiseSource noiseSource, Foundation.NSDictionary&lt;Foundation.NSNumber,UIKit.UIColor&gt; gradientColors);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKNoise FromNoiseSource(class GameplayKit.GKNoiseSource noiseSource, class Foundation.NSDictionary`2&lt;class Foundation.NSNumber, class UIKit.UIColor&gt; gradientColors) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.FromNoiseSource(GameplayKit.GKNoiseSource,Foundation.NSDictionary{Foundation.NSNumber,UIKit.UIColor})" />
      <MemberSignature Language="F#" Value="static member FromNoiseSource : GameplayKit.GKNoiseSource * Foundation.NSDictionary&lt;Foundation.NSNumber, UIKit.UIColor&gt; -&gt; GameplayKit.GKNoise" Usage="GameplayKit.GKNoise.FromNoiseSource (noiseSource, gradientColors)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("noiseWithNoiseSource:gradientColors:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKNoise</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="noiseSource" Type="GameplayKit.GKNoiseSource" />
        <Parameter Name="gradientColors" Type="Foundation.NSDictionary&lt;Foundation.NSNumber,UIKit.UIColor&gt;" />
      </Parameters>
      <Docs>
        <param name="noiseSource">To be added.</param>
        <param name="gradientColors">To be added.</param>
        <summary>Static method for creating a <see cref="T:GameplayKit.GKNoise" /> object with the specified <param name="noiseSource" /> and with colors as specified by <param name="gradientColors" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMaximum">
      <MemberSignature Language="C#" Value="public virtual void GetMaximum (GameplayKit.GKNoise noise);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetMaximum(class GameplayKit.GKNoise noise) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.GetMaximum(GameplayKit.GKNoise)" />
      <MemberSignature Language="F#" Value="abstract member GetMaximum : GameplayKit.GKNoise -&gt; unit&#xA;override this.GetMaximum : GameplayKit.GKNoise -&gt; unit" Usage="gKNoise.GetMaximum noise" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("maximumWithNoise:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="noise" Type="GameplayKit.GKNoise" />
      </Parameters>
      <Docs>
        <param name="noise">To be added.</param>
        <summary>Modifies <see langword="this" /> so that it's values are the greater of the current value and that of <param name="noise" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMinimum">
      <MemberSignature Language="C#" Value="public virtual void GetMinimum (GameplayKit.GKNoise noise);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetMinimum(class GameplayKit.GKNoise noise) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.GetMinimum(GameplayKit.GKNoise)" />
      <MemberSignature Language="F#" Value="abstract member GetMinimum : GameplayKit.GKNoise -&gt; unit&#xA;override this.GetMinimum : GameplayKit.GKNoise -&gt; unit" Usage="gKNoise.GetMinimum noise" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("minimumWithNoise:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="noise" Type="GameplayKit.GKNoise" />
      </Parameters>
      <Docs>
        <param name="noise">To be added.</param>
        <summary>Modifies <see langword="this" /> so that it's values are the lesser of the current value and that of <param name="noise" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public virtual float GetValue (OpenTK.Vector2 position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 GetValue(valuetype OpenTK.Vector2 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.GetValue(OpenTK.Vector2)" />
      <MemberSignature Language="F#" Value="abstract member GetValue : OpenTK.Vector2 -&gt; single&#xA;override this.GetValue : OpenTK.Vector2 -&gt; single" Usage="gKNoise.GetValue position" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("valueAtPosition:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="OpenTK.Vector2" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <summary>Returns the value of the noise field at <param name="position" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GradientColors">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary&lt;Foundation.NSNumber,UIKit.UIColor&gt; GradientColors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDictionary`2&lt;class Foundation.NSNumber, class UIKit.UIColor&gt; GradientColors" />
      <MemberSignature Language="DocId" Value="P:GameplayKit.GKNoise.GradientColors" />
      <MemberSignature Language="F#" Value="member this.GradientColors : Foundation.NSDictionary&lt;Foundation.NSNumber, UIKit.UIColor&gt; with get, set" Usage="GameplayKit.GKNoise.GradientColors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("gradientColors")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setGradientColors:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("gradientColors", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setGradientColors:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary&lt;Foundation.NSNumber,UIKit.UIColor&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Maps values to colors. Values represent gradient end-points.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invert">
      <MemberSignature Language="C#" Value="public virtual void Invert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invert() cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.Invert" />
      <MemberSignature Language="F#" Value="abstract member Invert : unit -&gt; unit&#xA;override this.Invert : unit -&gt; unit" Usage="gKNoise.Invert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("invert")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Changes all values by multiplying them by -1.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public virtual void Move (OpenTK.Vector3d delta);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Move(valuetype OpenTK.Vector3d delta) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.Move(OpenTK.Vector3d)" />
      <MemberSignature Language="F#" Value="abstract member Move : OpenTK.Vector3d -&gt; unit&#xA;override this.Move : OpenTK.Vector3d -&gt; unit" Usage="gKNoise.Move delta" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("moveBy:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delta" Type="OpenTK.Vector3d" />
      </Parameters>
      <Docs>
        <param name="delta">To be added.</param>
        <summary>Transforms the noise field by the specified <param name="delta" /> vector.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public virtual void Multiply (GameplayKit.GKNoise noise);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Multiply(class GameplayKit.GKNoise noise) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.Multiply(GameplayKit.GKNoise)" />
      <MemberSignature Language="F#" Value="abstract member Multiply : GameplayKit.GKNoise -&gt; unit&#xA;override this.Multiply : GameplayKit.GKNoise -&gt; unit" Usage="gKNoise.Multiply noise" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("multiplyWithNoise:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="noise" Type="GameplayKit.GKNoise" />
      </Parameters>
      <Docs>
        <param name="noise">To be added.</param>
        <summary>Multiplies all values by their corresponding value in <param name="noise" />. Since values should be in the range [-1,1] multiplication typically results in lower absolute values.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseToPower">
      <MemberSignature Language="C#" Value="public virtual void RaiseToPower (GameplayKit.GKNoise noise);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseToPower(class GameplayKit.GKNoise noise) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.RaiseToPower(GameplayKit.GKNoise)" />
      <MemberSignature Language="F#" Value="abstract member RaiseToPower : GameplayKit.GKNoise -&gt; unit&#xA;override this.RaiseToPower : GameplayKit.GKNoise -&gt; unit" Usage="gKNoise.RaiseToPower noise" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("raiseToPowerWithNoise:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="noise" Type="GameplayKit.GKNoise" />
      </Parameters>
      <Docs>
        <param name="noise">To be added.</param>
        <summary>Exponentiates values with their corresponding values from <param name="noise" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseToPower">
      <MemberSignature Language="C#" Value="public virtual void RaiseToPower (double power);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseToPower(float64 power) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.RaiseToPower(System.Double)" />
      <MemberSignature Language="F#" Value="abstract member RaiseToPower : double -&gt; unit&#xA;override this.RaiseToPower : double -&gt; unit" Usage="gKNoise.RaiseToPower power" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("raiseToPower:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="power" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="power">To be added.</param>
        <summary>Raises every value in <see langword="this" /> by <param name="power" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemapValuesToCurve">
      <MemberSignature Language="C#" Value="public virtual void RemapValuesToCurve (Foundation.NSDictionary&lt;Foundation.NSNumber,Foundation.NSNumber&gt; controlPoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemapValuesToCurve(class Foundation.NSDictionary`2&lt;class Foundation.NSNumber, class Foundation.NSNumber&gt; controlPoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.RemapValuesToCurve(Foundation.NSDictionary{Foundation.NSNumber,Foundation.NSNumber})" />
      <MemberSignature Language="F#" Value="abstract member RemapValuesToCurve : Foundation.NSDictionary&lt;Foundation.NSNumber, Foundation.NSNumber&gt; -&gt; unit&#xA;override this.RemapValuesToCurve : Foundation.NSDictionary&lt;Foundation.NSNumber, Foundation.NSNumber&gt; -&gt; unit" Usage="gKNoise.RemapValuesToCurve controlPoints" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("remapValuesToCurveWithControlPoints:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlPoints" Type="Foundation.NSDictionary&lt;Foundation.NSNumber,Foundation.NSNumber&gt;" />
      </Parameters>
      <Docs>
        <param name="controlPoints">To be added.</param>
        <summary>Remaps values in <see langword="this" /> into their values in the smooth curve that passes through <param name="controlPoints" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemapValuesToTerraces">
      <MemberSignature Language="C#" Value="public virtual void RemapValuesToTerraces (Foundation.NSNumber[] peakInputValues, bool inverted);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemapValuesToTerraces(class Foundation.NSNumber[] peakInputValues, bool inverted) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.RemapValuesToTerraces(Foundation.NSNumber[],System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member RemapValuesToTerraces : Foundation.NSNumber[] * bool -&gt; unit&#xA;override this.RemapValuesToTerraces : Foundation.NSNumber[] * bool -&gt; unit" Usage="gKNoise.RemapValuesToTerraces (peakInputValues, inverted)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("remapValuesToTerracesWithPeaks:terracesInverted:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peakInputValues" Type="Foundation.NSNumber[]" />
        <Parameter Name="inverted" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="peakInputValues">To be added.</param>
        <param name="inverted">To be added.</param>
        <summary>Remaps values in <see langword="this" /> into the scalloped curve defined by <param name="peakInputValues" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rotate">
      <MemberSignature Language="C#" Value="public virtual void Rotate (OpenTK.Vector3d radians);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Rotate(valuetype OpenTK.Vector3d radians) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.Rotate(OpenTK.Vector3d)" />
      <MemberSignature Language="F#" Value="abstract member Rotate : OpenTK.Vector3d -&gt; unit&#xA;override this.Rotate : OpenTK.Vector3d -&gt; unit" Usage="gKNoise.Rotate radians" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("rotateBy:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="radians" Type="OpenTK.Vector3d" />
      </Parameters>
      <Docs>
        <param name="radians">To be added.</param>
        <summary>Rotates the noise field by <param name="radians" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public virtual void Scale (OpenTK.Vector3d factor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Scale(valuetype OpenTK.Vector3d factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKNoise.Scale(OpenTK.Vector3d)" />
      <MemberSignature Language="F#" Value="abstract member Scale : OpenTK.Vector3d -&gt; unit&#xA;override this.Scale : OpenTK.Vector3d -&gt; unit" Usage="gKNoise.Scale factor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("scaleBy:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="OpenTK.Vector3d" />
      </Parameters>
      <Docs>
        <param name="factor">To be added.</param>
        <summary>Scales the noise field by <param name="factor" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
