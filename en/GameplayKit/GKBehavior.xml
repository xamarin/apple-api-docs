<Type Name="GKBehavior" FullName="GameplayKit.GKBehavior">
  <TypeSignature Language="C#" Value="public class GKBehavior : Foundation.NSObject, Foundation.INSCopying, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GKBehavior extends Foundation.NSObject implements class Foundation.INSCopying, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:GameplayKit.GKBehavior" />
  <TypeSignature Language="F#" Value="type GKBehavior = class&#xA;    inherit NSObject&#xA;    interface INSCopying&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("GKBehavior", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A collection of <see cref="T:GameplayKit.GKGoal" /> objects and weights, together defining a cohesive game behavior.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/GameplayKit/Reference/GKBehavior_Class/index.html">Apple documentation for <c>GKBehavior</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GKBehavior ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKBehavior.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected GKBehavior (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKBehavior.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new GameplayKit.GKBehavior : Foundation.NSObjectFlag -&gt; GameplayKit.GKBehavior" Usage="new GameplayKit.GKBehavior t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal GKBehavior (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKBehavior.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new GameplayKit.GKBehavior : nativeint -&gt; GameplayKit.GKBehavior" Usage="new GameplayKit.GKBehavior handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:GameplayKit.GKBehavior.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="GameplayKit.GKBehavior.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject Copy (Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject Copy(class Foundation.NSZone zone) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKBehavior.Copy(Foundation.NSZone)" />
      <MemberSignature Language="F#" Value="override this.Copy : Foundation.NSZone -&gt; Foundation.NSObject" Usage="gKBehavior.Copy zone" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCopying.Copy(Foundation.NSZone)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromGoal">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKBehavior FromGoal (GameplayKit.GKGoal goal, float weight);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKBehavior FromGoal(class GameplayKit.GKGoal goal, float32 weight) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKBehavior.FromGoal(GameplayKit.GKGoal,System.Single)" />
      <MemberSignature Language="F#" Value="static member FromGoal : GameplayKit.GKGoal * single -&gt; GameplayKit.GKBehavior" Usage="GameplayKit.GKBehavior.FromGoal (goal, weight)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("behaviorWithGoal:weight:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKBehavior</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="goal" Type="GameplayKit.GKGoal" />
        <Parameter Name="weight" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="goal">To be added.</param>
        <param name="weight">To be added.</param>
        <summary>Factory method to create a <see cref="T:GameplayKit.GKBehavior" /> with the specified <paramref name="goal" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromGoals">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKBehavior FromGoals (Foundation.NSDictionary&lt;GameplayKit.GKGoal,Foundation.NSNumber&gt; weightedGoals);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKBehavior FromGoals(class Foundation.NSDictionary`2&lt;class GameplayKit.GKGoal, class Foundation.NSNumber&gt; weightedGoals) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKBehavior.FromGoals(Foundation.NSDictionary{GameplayKit.GKGoal,Foundation.NSNumber})" />
      <MemberSignature Language="F#" Value="static member FromGoals : Foundation.NSDictionary&lt;GameplayKit.GKGoal, Foundation.NSNumber&gt; -&gt; GameplayKit.GKBehavior" Usage="GameplayKit.GKBehavior.FromGoals weightedGoals" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("behaviorWithWeightedGoals:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKBehavior</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="weightedGoals" Type="Foundation.NSDictionary&lt;GameplayKit.GKGoal,Foundation.NSNumber&gt;" />
      </Parameters>
      <Docs>
        <param name="weightedGoals">To be added.</param>
        <summary>Creates and returns a <see cref="T:GameplayKit.GKBehavior" /> for a set of weighted goals.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromGoals">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKBehavior FromGoals (GameplayKit.GKGoal[] goals);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKBehavior FromGoals(class GameplayKit.GKGoal[] goals) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKBehavior.FromGoals(GameplayKit.GKGoal[])" />
      <MemberSignature Language="F#" Value="static member FromGoals : GameplayKit.GKGoal[] -&gt; GameplayKit.GKBehavior" Usage="GameplayKit.GKBehavior.FromGoals goals" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("behaviorWithGoals:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKBehavior</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="goals" Type="GameplayKit.GKGoal[]" />
      </Parameters>
      <Docs>
        <param name="goals">To be added.</param>
        <summary>Factory method to create a <see cref="T:GameplayKit.GKBehavior" /> with the specified <paramref name="goals" />, each with a weight of 1.0.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromGoals">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKBehavior FromGoals (GameplayKit.GKGoal[] goals, Foundation.NSNumber[] weights);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKBehavior FromGoals(class GameplayKit.GKGoal[] goals, class Foundation.NSNumber[] weights) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKBehavior.FromGoals(GameplayKit.GKGoal[],Foundation.NSNumber[])" />
      <MemberSignature Language="F#" Value="static member FromGoals : GameplayKit.GKGoal[] * Foundation.NSNumber[] -&gt; GameplayKit.GKBehavior" Usage="GameplayKit.GKBehavior.FromGoals (goals, weights)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("behaviorWithGoals:andWeights:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKBehavior</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="goals" Type="GameplayKit.GKGoal[]" />
        <Parameter Name="weights" Type="Foundation.NSNumber[]" />
      </Parameters>
      <Docs>
        <param name="goals">To be added.</param>
        <param name="weights">To be added.</param>
        <summary>Factory method to create a <see cref="T:GameplayKit.GKBehavior" /> with the specified <paramref name="goals" /> and their corresponding <paramref name="weights" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWeight">
      <MemberSignature Language="C#" Value="public virtual float GetWeight (GameplayKit.GKGoal goal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 GetWeight(class GameplayKit.GKGoal goal) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKBehavior.GetWeight(GameplayKit.GKGoal)" />
      <MemberSignature Language="F#" Value="abstract member GetWeight : GameplayKit.GKGoal -&gt; single&#xA;override this.GetWeight : GameplayKit.GKGoal -&gt; single" Usage="gKBehavior.GetWeight goal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("weightForGoal:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="goal" Type="GameplayKit.GKGoal" />
      </Parameters>
      <Docs>
        <param name="goal">To be added.</param>
        <summary>Retrieves the weight associated with the <paramref name="goal" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoalCount">
      <MemberSignature Language="C#" Value="public virtual nint GoalCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint GoalCount" />
      <MemberSignature Language="DocId" Value="P:GameplayKit.GKBehavior.GoalCount" />
      <MemberSignature Language="F#" Value="member this.GoalCount : nint" Usage="GameplayKit.GKBehavior.GoalCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("goalCount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The total number of <see cref="T:GameplayKit.GKGoal" /> objects in the <see cref="T:GameplayKit.GKBehavior" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Foundation.NSNumber this[GameplayKit.GKGoal goal] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSNumber Item(class GameplayKit.GKGoal)" />
      <MemberSignature Language="DocId" Value="P:GameplayKit.GKBehavior.Item(GameplayKit.GKGoal)" />
      <MemberSignature Language="F#" Value="member this.Item(GameplayKit.GKGoal) : Foundation.NSNumber with get, set" Usage="GameplayKit.GKBehavior.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="goal" Type="GameplayKit.GKGoal" />
      </Parameters>
      <Docs>
        <param name="goal">To be added.</param>
        <summary>Retrieves the weight for the <paramref name="goal" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public GameplayKit.GKGoal this[nuint index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class GameplayKit.GKGoal Item(valuetype System.nuint)" />
      <MemberSignature Language="DocId" Value="P:GameplayKit.GKBehavior.Item(System.nuint)" />
      <MemberSignature Language="F#" Value="member this.Item(nuint) : GameplayKit.GKGoal" Usage="GameplayKit.GKBehavior.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>GameplayKit.GKGoal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>Retrieves the <see cref="T:GameplayKit.GKGoal" /> at the specified index. (see <see cref="P:GameplayKit.GKBehavior.GoalCount" />)</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllGoals">
      <MemberSignature Language="C#" Value="public virtual void RemoveAllGoals ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllGoals() cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKBehavior.RemoveAllGoals" />
      <MemberSignature Language="F#" Value="abstract member RemoveAllGoals : unit -&gt; unit&#xA;override this.RemoveAllGoals : unit -&gt; unit" Usage="gKBehavior.RemoveAllGoals " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeAllGoals")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all <see cref="T:GameplayKit.GKGoal" /> objects from this <see cref="T:GameplayKit.GKBehavior" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveGoal">
      <MemberSignature Language="C#" Value="public virtual void RemoveGoal (GameplayKit.GKGoal goal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveGoal(class GameplayKit.GKGoal goal) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKBehavior.RemoveGoal(GameplayKit.GKGoal)" />
      <MemberSignature Language="F#" Value="abstract member RemoveGoal : GameplayKit.GKGoal -&gt; unit&#xA;override this.RemoveGoal : GameplayKit.GKGoal -&gt; unit" Usage="gKBehavior.RemoveGoal goal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeGoal:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="goal" Type="GameplayKit.GKGoal" />
      </Parameters>
      <Docs>
        <param name="goal">To be added.</param>
        <summary>Removes the specified <paramref name="goal" /> from the <see cref="T:GameplayKit.GKBehavior" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetWeight">
      <MemberSignature Language="C#" Value="public virtual void SetWeight (float weight, GameplayKit.GKGoal goal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetWeight(float32 weight, class GameplayKit.GKGoal goal) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKBehavior.SetWeight(System.Single,GameplayKit.GKGoal)" />
      <MemberSignature Language="F#" Value="abstract member SetWeight : single * GameplayKit.GKGoal -&gt; unit&#xA;override this.SetWeight : single * GameplayKit.GKGoal -&gt; unit" Usage="gKBehavior.SetWeight (weight, goal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setWeight:forGoal:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="weight" Type="System.Single" />
        <Parameter Name="goal" Type="GameplayKit.GKGoal" />
      </Parameters>
      <Docs>
        <param name="weight">To be added.</param>
        <param name="goal">To be added.</param>
        <summary>Sets the <paramref name="weight" /> for <paramref name="goal" />, potentially adding <paramref name="goal" /> to the <see cref="T:GameplayKit.GKBehavior" />.</summary>
        <remarks>
          <para>If <paramref name="goal" /> is not currently in the <see cref="T:GameplayKit.GKBehavior" />, this method will add it.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
