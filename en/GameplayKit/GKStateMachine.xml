<Type Name="GKStateMachine" FullName="GameplayKit.GKStateMachine">
  <TypeSignature Language="C#" Value="public class GKStateMachine : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GKStateMachine extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:GameplayKit.GKStateMachine" />
  <TypeSignature Language="F#" Value="type GKStateMachine = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("GKStateMachine", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Holds <see cref="T:GameplayKit.GKState" /> objects and manages transitions between them.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/GameplayKit/Reference/GKStateMachine_Class/index.html">Apple documentation for <c>GKStateMachine</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected GKStateMachine (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKStateMachine.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new GameplayKit.GKStateMachine : Foundation.NSObjectFlag -&gt; GameplayKit.GKStateMachine" Usage="new GameplayKit.GKStateMachine t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GKStateMachine (GameplayKit.GKState[] states);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class GameplayKit.GKState[] states) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKStateMachine.#ctor(GameplayKit.GKState[])" />
      <MemberSignature Language="F#" Value="new GameplayKit.GKStateMachine : GameplayKit.GKState[] -&gt; GameplayKit.GKStateMachine" Usage="new GameplayKit.GKStateMachine states" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithStates:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="states" Type="GameplayKit.GKState[]" />
      </Parameters>
      <Docs>
        <param name="states">To be added.</param>
        <summary>Creates a state machine with the specified <paramref name="states" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal GKStateMachine (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKStateMachine.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new GameplayKit.GKStateMachine : nativeint -&gt; GameplayKit.GKStateMachine" Usage="new GameplayKit.GKStateMachine handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanEnterState">
      <MemberSignature Language="C#" Value="public bool CanEnterState (GameplayKit.GKState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanEnterState(class GameplayKit.GKState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKStateMachine.CanEnterState(GameplayKit.GKState)" />
      <MemberSignature Language="F#" Value="member this.CanEnterState : GameplayKit.GKState -&gt; bool" Usage="gKStateMachine.CanEnterState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="GameplayKit.GKState" />
      </Parameters>
      <Docs>
        <param name="state">To be added.</param>
        <summary>Returns <see langword="true" /> if a transition from the current state of the state machine leads to <paramref name="state" />. Otherwise, returns <see langword="false" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanEnterState">
      <MemberSignature Language="C#" Value="protected virtual bool CanEnterState (ObjCRuntime.Class stateClass);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool CanEnterState(class ObjCRuntime.Class stateClass) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKStateMachine.CanEnterState(ObjCRuntime.Class)" />
      <MemberSignature Language="F#" Value="abstract member CanEnterState : ObjCRuntime.Class -&gt; bool&#xA;override this.CanEnterState : ObjCRuntime.Class -&gt; bool" Usage="gKStateMachine.CanEnterState stateClass" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("canEnterState:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateClass" Type="ObjCRuntime.Class" />
      </Parameters>
      <Docs>
        <param name="stateClass">To be added.</param>
        <summary>Returns <see langword="true" /> if a transition from the current state of the state machine leads to <paramref name="stateClass" />. Otherwise, returns <see langword="false" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanEnterState">
      <MemberSignature Language="C#" Value="public bool CanEnterState (Type stateType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanEnterState(class System.Type stateType) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKStateMachine.CanEnterState(System.Type)" />
      <MemberSignature Language="F#" Value="member this.CanEnterState : Type -&gt; bool" Usage="gKStateMachine.CanEnterState stateType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="stateType">Must be a subclass of <see cref="T:GameplayKit.GKState" /></param>
        <summary>Whether a transition from <see cref="P:GameplayKit.GKStateMachine.CurrentState" /> to <paramref name="stateType" /> is valid.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:GameplayKit.GKStateMachine.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="GameplayKit.GKStateMachine.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentState">
      <MemberSignature Language="C#" Value="public virtual GameplayKit.GKState CurrentState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class GameplayKit.GKState CurrentState" />
      <MemberSignature Language="DocId" Value="P:GameplayKit.GKStateMachine.CurrentState" />
      <MemberSignature Language="F#" Value="member this.CurrentState : GameplayKit.GKState" Usage="GameplayKit.GKStateMachine.CurrentState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("currentState")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The current <see cref="T:GameplayKit.GKState" /> of the machine.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterState">
      <MemberSignature Language="C#" Value="public virtual bool EnterState (GameplayKit.GKState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EnterState(class GameplayKit.GKState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKStateMachine.EnterState(GameplayKit.GKState)" />
      <MemberSignature Language="F#" Value="abstract member EnterState : GameplayKit.GKState -&gt; bool&#xA;override this.EnterState : GameplayKit.GKState -&gt; bool" Usage="gKStateMachine.EnterState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="GameplayKit.GKState" />
      </Parameters>
      <Docs>
        <param name="state">To be added.</param>
        <summary>Attempts to transition from the current state to the specified <paramref name="state" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterState">
      <MemberSignature Language="C#" Value="protected virtual bool EnterState (ObjCRuntime.Class stateClass);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool EnterState(class ObjCRuntime.Class stateClass) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKStateMachine.EnterState(ObjCRuntime.Class)" />
      <MemberSignature Language="F#" Value="abstract member EnterState : ObjCRuntime.Class -&gt; bool&#xA;override this.EnterState : ObjCRuntime.Class -&gt; bool" Usage="gKStateMachine.EnterState stateClass" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("enterState:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateClass" Type="ObjCRuntime.Class" />
      </Parameters>
      <Docs>
        <param name="stateClass">To be added.</param>
        <summary>Attempts to transition from the current state to the state that is identified by the specified <paramref name="stateClass" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterState">
      <MemberSignature Language="C#" Value="public virtual bool EnterState (Type stateType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EnterState(class System.Type stateType) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKStateMachine.EnterState(System.Type)" />
      <MemberSignature Language="F#" Value="abstract member EnterState : Type -&gt; bool&#xA;override this.EnterState : Type -&gt; bool" Usage="gKStateMachine.EnterState stateType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="stateType">To be added.</param>
        <summary>Attempts to transition from <see cref="P:GameplayKit.GKStateMachine.CurrentState" /> to <paramref name="stateType" />.</summary>
        <returns>
          <see langword="true" /> if the transition succeeded.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromStates">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKStateMachine FromStates (GameplayKit.GKState[] states);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKStateMachine FromStates(class GameplayKit.GKState[] states) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKStateMachine.FromStates(GameplayKit.GKState[])" />
      <MemberSignature Language="F#" Value="static member FromStates : GameplayKit.GKState[] -&gt; GameplayKit.GKStateMachine" Usage="GameplayKit.GKStateMachine.FromStates states" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("stateMachineWithStates:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKStateMachine</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="states" Type="GameplayKit.GKState[]" />
      </Parameters>
      <Docs>
        <param name="states">To be added.</param>
        <summary>Factory method to create a new <see cref="T:GameplayKit.GKStateMachine" /> with the specified <paramref name="states" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetState">
      <MemberSignature Language="C#" Value="public GameplayKit.GKState GetState (GameplayKit.GKState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class GameplayKit.GKState GetState(class GameplayKit.GKState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKStateMachine.GetState(GameplayKit.GKState)" />
      <MemberSignature Language="F#" Value="member this.GetState : GameplayKit.GKState -&gt; GameplayKit.GKState" Usage="gKStateMachine.GetState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>GameplayKit.GKState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="GameplayKit.GKState" />
      </Parameters>
      <Docs>
        <param name="state">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetState">
      <MemberSignature Language="C#" Value="protected virtual GameplayKit.GKState GetState (ObjCRuntime.Class stateClass);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class GameplayKit.GKState GetState(class ObjCRuntime.Class stateClass) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKStateMachine.GetState(ObjCRuntime.Class)" />
      <MemberSignature Language="F#" Value="abstract member GetState : ObjCRuntime.Class -&gt; GameplayKit.GKState&#xA;override this.GetState : ObjCRuntime.Class -&gt; GameplayKit.GKState" Usage="gKStateMachine.GetState stateClass" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("stateForClass:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateClass" Type="ObjCRuntime.Class" />
      </Parameters>
      <Docs>
        <param name="stateClass">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetState">
      <MemberSignature Language="C#" Value="public GameplayKit.GKState GetState (Type stateType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class GameplayKit.GKState GetState(class System.Type stateType) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKStateMachine.GetState(System.Type)" />
      <MemberSignature Language="F#" Value="member this.GetState : Type -&gt; GameplayKit.GKState" Usage="gKStateMachine.GetState stateType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>GameplayKit.GKState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="stateType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual void Update (double deltaTimeInSeconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Update(float64 deltaTimeInSeconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKStateMachine.Update(System.Double)" />
      <MemberSignature Language="F#" Value="abstract member Update : double -&gt; unit&#xA;override this.Update : double -&gt; unit" Usage="gKStateMachine.Update deltaTimeInSeconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("updateWithDeltaTime:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deltaTimeInSeconds" Type="System.Double" Index="0" FrameworkAlternate="xamarin-ios-sdk-12" />
      </Parameters>
      <Docs>
        <param name="deltaTimeInSeconds">To be added.</param>
        <summary>Calls the <see cref="M:GameplayKit.GKState.Update(System.Double)" /> method of the <see cref="P:GameplayKit.GKStateMachine.CurrentState" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
