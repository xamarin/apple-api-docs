<Type Name="IGKStrategist" FullName="GameplayKit.IGKStrategist">
  <TypeSignature Language="C#" Value="public interface IGKStrategist : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IGKStrategist implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:GameplayKit.IGKStrategist" />
  <TypeSignature Language="F#" Value="type IGKStrategist = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="GKStrategist", WrapperType=typeof(GameplayKit.GKStrategistWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetBestMoveForActivePlayer", ReturnType=typeof(GameplayKit.IGKGameModelUpdate), Selector="bestMoveForActivePlayer")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.Strong, GetterSelector="gameModel", IsProperty=true, IsRequired=true, IsStatic=false, Name="GameModel", PropertyType=typeof(GameplayKit.IGKGameModel), Selector="gameModel", SetterSelector="setGameModel:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.Strong, GetterSelector="randomSource", IsProperty=true, IsRequired=true, IsStatic=false, Name="RandomSource", PropertyType=typeof(GameplayKit.IGKRandom), Selector="randomSource", SetterSelector="setRandomSource:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 1, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface for a game strategist (AI).</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GameModel">
      <MemberSignature Language="C#" Value="public GameplayKit.IGKGameModel GameModel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class GameplayKit.IGKGameModel GameModel" />
      <MemberSignature Language="DocId" Value="P:GameplayKit.IGKStrategist.GameModel" />
      <MemberSignature Language="F#" Value="member this.GameModel : GameplayKit.IGKGameModel with get, set" Usage="GameplayKit.IGKStrategist.GameModel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("gameModel", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setGameModel:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.IGKGameModel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the current game state.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBestMoveForActivePlayer">
      <MemberSignature Language="C#" Value="public GameplayKit.IGKGameModelUpdate GetBestMoveForActivePlayer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class GameplayKit.IGKGameModelUpdate GetBestMoveForActivePlayer() cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.IGKStrategist.GetBestMoveForActivePlayer" />
      <MemberSignature Language="F#" Value="abstract member GetBestMoveForActivePlayer : unit -&gt; GameplayKit.IGKGameModelUpdate" Usage="iGKStrategist.GetBestMoveForActivePlayer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("bestMoveForActivePlayer")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.IGKGameModelUpdate</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns what the strategist indicates is the best move for the active player.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RandomSource">
      <MemberSignature Language="C#" Value="public GameplayKit.IGKRandom RandomSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class GameplayKit.IGKRandom RandomSource" />
      <MemberSignature Language="DocId" Value="P:GameplayKit.IGKStrategist.RandomSource" />
      <MemberSignature Language="F#" Value="member this.RandomSource : GameplayKit.IGKRandom with get, set" Usage="GameplayKit.IGKStrategist.RandomSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("randomSource", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setRandomSource:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.IGKRandom</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the source of randomness for the strategist.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
