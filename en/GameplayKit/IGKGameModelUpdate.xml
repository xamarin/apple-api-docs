<Type Name="IGKGameModelUpdate" FullName="GameplayKit.IGKGameModelUpdate">
  <TypeSignature Language="C#" Value="public interface IGKGameModelUpdate : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IGKGameModelUpdate implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:GameplayKit.IGKGameModelUpdate" />
  <TypeSignature Language="F#" Value="type IGKGameModelUpdate = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol(Name="GKGameModelUpdate", WrapperType=typeof(GameplayKit.GKGameModelUpdateWrapper))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.UnsafeUnretained, GetterSelector="value", IsProperty=true, IsRequired=true, IsStatic=false, Name="Value", PropertyType=typeof(System.nint), Selector="value", SetterSelector="setValue:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A valid game move. The minimal data necessary to transition a valid <see cref="T:GameplayKit.IGKGameModel" /> into a valid subsequent state.</summary>
    <remarks>
      <para>Developers should strive to make their implementations of this interface efficient. A large number of <see cref="T:GameplayKit.IGKGameModelUpdate" /> objects are likely to be produced by <see cref="M:GameplayKit.IGKGameModel.GetGameModelUpdates(GameplayKit.IGKGameModelPlayer)" /> which, in return, is likely to be called many times by <see cref="M:GameplayKit.GKMinMaxStrategist.GetBestMove(GameplayKit.IGKGameModelPlayer)" />.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public nint Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint Value" />
      <MemberSignature Language="DocId" Value="P:GameplayKit.IGKGameModelUpdate.Value" />
      <MemberSignature Language="F#" Value="member this.Value : nint with get, set" Usage="GameplayKit.IGKGameModelUpdate.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("value")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setValue:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("value", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setValue:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Equivalent to the value produced by <see cref="M:GameplayKit.GKGameModel_Extensions.GetScore(GameplayKit.IGKGameModel,GameplayKit.IGKGameModelPlayer)" />.</summary>
        <value>To be added.</value>
        <remarks>
          <para>This property is determined by the <see cref="M:GameplayKit.GKGameModel_Extensions.GetScore(GameplayKit.IGKGameModel,GameplayKit.IGKGameModelPlayer)" /> when <c>this</c><see cref="T:GameplayKit.IGKGameModelUpdate" /> is applied to the game state of the <see cref="T:GameplayKit.IGKGameModel" />. Ultimately, the <see cref="M:GameplayKit.GKMinMaxStrategist.GetBestMove(GameplayKit.IGKGameModelPlayer)" /> method returns the <see cref="T:GameplayKit.IGKGameModelUpdate" /> with the highest <see cref="P:GameplayKit.IGKGameModelUpdate.Value" />. If multiple <see cref="T:GameplayKit.IGKGameModelUpdate" /> have the same <see cref="P:GameplayKit.IGKGameModelUpdate.Value" /> and <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=Gameplay%20Kit%20GKMin%20Max%20Strategist%20Random&amp;scope=Xamarin" title="P:GameplayKit.GKMinMaxStrategist.Random">P:GameplayKit.GKMinMaxStrategist.Random</a></format> is not <see langword="null" />, the returned <see cref="T:GameplayKit.IGKGameModelUpdate" /> is chosen randomly among those with the highest <see cref="P:GameplayKit.IGKGameModelUpdate.Value" />.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
