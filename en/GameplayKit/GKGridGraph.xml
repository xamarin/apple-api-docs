<Type Name="GKGridGraph" FullName="GameplayKit.GKGridGraph">
  <TypeSignature Language="C#" Value="public class GKGridGraph : GameplayKit.GKGraph" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GKGridGraph extends GameplayKit.GKGraph" />
  <TypeSignature Language="DocId" Value="T:GameplayKit.GKGridGraph" />
  <TypeSignature Language="F#" Value="type GKGridGraph = class&#xA;    inherit GKGraph" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>GameplayKit.GKGraph</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("GKGridGraph", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <see cref="T:GameplayKit.GKGraph" /> in which movement is constrained to an integer grid</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/GameplayKit/Reference/GKGridGraph_Class/index.html">Apple documentation for <c>GKGridGraph</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GKGridGraph ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKGridGraph.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GKGridGraph (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKGridGraph.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new GameplayKit.GKGridGraph : Foundation.NSCoder -&gt; GameplayKit.GKGridGraph" Usage="new GameplayKit.GKGridGraph coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected GKGridGraph (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKGridGraph.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new GameplayKit.GKGridGraph : Foundation.NSObjectFlag -&gt; GameplayKit.GKGridGraph" Usage="new GameplayKit.GKGridGraph t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal GKGridGraph (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKGridGraph.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new GameplayKit.GKGridGraph : nativeint -&gt; GameplayKit.GKGridGraph" Usage="new GameplayKit.GKGridGraph handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GKGridGraph (OpenTK.Vector2i position, int width, int height, bool diagonalsAllowed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype OpenTK.Vector2i position, int32 width, int32 height, bool diagonalsAllowed) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKGridGraph.#ctor(OpenTK.Vector2i,System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="F#" Value="new GameplayKit.GKGridGraph : OpenTK.Vector2i * int * int * bool -&gt; GameplayKit.GKGridGraph" Usage="new GameplayKit.GKGridGraph (position, width, height, diagonalsAllowed)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initFromGridStartingAt:width:height:diagonalsAllowed:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="position" Type="OpenTK.Vector2i" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="diagonalsAllowed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <param name="diagonalsAllowed">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GKGridGraph (OpenTK.Vector2i position, int width, int height, bool diagonalsAllowed, ObjCRuntime.Class aClass);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype OpenTK.Vector2i position, int32 width, int32 height, bool diagonalsAllowed, class ObjCRuntime.Class aClass) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKGridGraph.#ctor(OpenTK.Vector2i,System.Int32,System.Int32,System.Boolean,ObjCRuntime.Class)" />
      <MemberSignature Language="F#" Value="new GameplayKit.GKGridGraph : OpenTK.Vector2i * int * int * bool * ObjCRuntime.Class -&gt; GameplayKit.GKGridGraph" Usage="new GameplayKit.GKGridGraph (position, width, height, diagonalsAllowed, aClass)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initFromGridStartingAt:width:height:diagonalsAllowed:nodeClass:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="position" Type="OpenTK.Vector2i" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="diagonalsAllowed" Type="System.Boolean" />
        <Parameter Name="aClass" Type="ObjCRuntime.Class" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <param name="diagonalsAllowed">To be added.</param>
        <param name="aClass">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GKGridGraph (OpenTK.Vector2i position, int width, int height, bool diagonalsAllowed, Type nodeType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype OpenTK.Vector2i position, int32 width, int32 height, bool diagonalsAllowed, class System.Type nodeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKGridGraph.#ctor(OpenTK.Vector2i,System.Int32,System.Int32,System.Boolean,System.Type)" />
      <MemberSignature Language="F#" Value="new GameplayKit.GKGridGraph : OpenTK.Vector2i * int * int * bool * Type -&gt; GameplayKit.GKGridGraph" Usage="new GameplayKit.GKGridGraph (position, width, height, diagonalsAllowed, nodeType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="position" Type="OpenTK.Vector2i" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="diagonalsAllowed" Type="System.Boolean" />
        <Parameter Name="nodeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <param name="diagonalsAllowed">To be added.</param>
        <param name="nodeType">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:GameplayKit.GKGridGraph.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="GameplayKit.GKGridGraph.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectNodeToAdjacentNodes">
      <MemberSignature Language="C#" Value="public virtual void ConnectNodeToAdjacentNodes (GameplayKit.GKGridGraphNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectNodeToAdjacentNodes(class GameplayKit.GKGridGraphNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKGridGraph.ConnectNodeToAdjacentNodes(GameplayKit.GKGridGraphNode)" />
      <MemberSignature Language="F#" Value="abstract member ConnectNodeToAdjacentNodes : GameplayKit.GKGridGraphNode -&gt; unit&#xA;override this.ConnectNodeToAdjacentNodes : GameplayKit.GKGridGraphNode -&gt; unit" Usage="gKGridGraph.ConnectNodeToAdjacentNodes node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("connectNodeToAdjacentNodes:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="GameplayKit.GKGridGraphNode" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <summary>Adds <paramref name="node" /> to the <see cref="T:GameplayKit.GKGraph" /> and connects it to its nearest neighbors.</summary>
        <remarks>
          <para>This method does not alter the grid. It is intended for placing game <see cref="T:GameplayKit.GKEntity" /> objects on the grid.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiagonalsAllowed">
      <MemberSignature Language="C#" Value="public virtual bool DiagonalsAllowed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DiagonalsAllowed" />
      <MemberSignature Language="DocId" Value="P:GameplayKit.GKGridGraph.DiagonalsAllowed" />
      <MemberSignature Language="F#" Value="member this.DiagonalsAllowed : bool" Usage="GameplayKit.GKGridGraph.DiagonalsAllowed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("diagonalsAllowed")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether nodes in the grid are connected to their diagonal neighbors.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromGridStartingAt">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKGridGraph FromGridStartingAt (OpenTK.Vector2i position, int width, int height, bool diagonalsAllowed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKGridGraph FromGridStartingAt(valuetype OpenTK.Vector2i position, int32 width, int32 height, bool diagonalsAllowed) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKGridGraph.FromGridStartingAt(OpenTK.Vector2i,System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="F#" Value="static member FromGridStartingAt : OpenTK.Vector2i * int * int * bool -&gt; GameplayKit.GKGridGraph" Usage="GameplayKit.GKGridGraph.FromGridStartingAt (position, width, height, diagonalsAllowed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("graphFromGridStartingAt:width:height:diagonalsAllowed:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKGridGraph</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="OpenTK.Vector2i" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="diagonalsAllowed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <param name="diagonalsAllowed">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromGridStartingAt">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKGridGraph FromGridStartingAt (OpenTK.Vector2i position, int width, int height, bool diagonalsAllowed, ObjCRuntime.Class aClass);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKGridGraph FromGridStartingAt(valuetype OpenTK.Vector2i position, int32 width, int32 height, bool diagonalsAllowed, class ObjCRuntime.Class aClass) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKGridGraph.FromGridStartingAt(OpenTK.Vector2i,System.Int32,System.Int32,System.Boolean,ObjCRuntime.Class)" />
      <MemberSignature Language="F#" Value="static member FromGridStartingAt : OpenTK.Vector2i * int * int * bool * ObjCRuntime.Class -&gt; GameplayKit.GKGridGraph" Usage="GameplayKit.GKGridGraph.FromGridStartingAt (position, width, height, diagonalsAllowed, aClass)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("graphFromGridStartingAt:width:height:diagonalsAllowed:nodeClass:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKGridGraph</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="OpenTK.Vector2i" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="diagonalsAllowed" Type="System.Boolean" />
        <Parameter Name="aClass" Type="ObjCRuntime.Class" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <param name="diagonalsAllowed">To be added.</param>
        <param name="aClass">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromGridStartingAt">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKGridGraph FromGridStartingAt (OpenTK.Vector2i position, int width, int height, bool diagonalsAllowed, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKGridGraph FromGridStartingAt(valuetype OpenTK.Vector2i position, int32 width, int32 height, bool diagonalsAllowed, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKGridGraph.FromGridStartingAt(OpenTK.Vector2i,System.Int32,System.Int32,System.Boolean,System.Type)" />
      <MemberSignature Language="F#" Value="static member FromGridStartingAt : OpenTK.Vector2i * int * int * bool * Type -&gt; GameplayKit.GKGridGraph" Usage="GameplayKit.GKGridGraph.FromGridStartingAt (position, width, height, diagonalsAllowed, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKGridGraph</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="OpenTK.Vector2i" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="diagonalsAllowed" Type="System.Boolean" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <param name="width">To be added.</param>
        <param name="height">To be added.</param>
        <param name="diagonalsAllowed">To be added.</param>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClassForGenericArgument">
      <MemberSignature Language="C#" Value="public virtual ObjCRuntime.Class GetClassForGenericArgument (nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class ObjCRuntime.Class GetClassForGenericArgument(valuetype System.nuint index) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKGridGraph.GetClassForGenericArgument(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member GetClassForGenericArgument : nuint -&gt; ObjCRuntime.Class&#xA;override this.GetClassForGenericArgument : nuint -&gt; ObjCRuntime.Class" Usage="gKGridGraph.GetClassForGenericArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("classForGenericArgumentAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ObjCRuntime.Class</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNodeAt">
      <MemberSignature Language="C#" Value="public virtual GameplayKit.GKGridGraphNode GetNodeAt (OpenTK.Vector2i position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class GameplayKit.GKGridGraphNode GetNodeAt(valuetype OpenTK.Vector2i position) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKGridGraph.GetNodeAt(OpenTK.Vector2i)" />
      <MemberSignature Language="F#" Value="abstract member GetNodeAt : OpenTK.Vector2i -&gt; GameplayKit.GKGridGraphNode&#xA;override this.GetNodeAt : OpenTK.Vector2i -&gt; GameplayKit.GKGridGraphNode" Usage="gKGridGraph.GetNodeAt position" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>GameplayKit.GKGridGraphNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="OpenTK.Vector2i" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <summary>Retrieves the <see cref="T:GameplayKit.GKGridGraphNode" /> at <paramref name="position" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNodeAt&lt;NodeType&gt;">
      <MemberSignature Language="C#" Value="public NodeType GetNodeAt&lt;NodeType&gt; (OpenTK.Vector2i position) where NodeType : GameplayKit.GKGridGraphNode;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!NodeType GetNodeAt&lt;(class GameplayKit.GKGridGraphNode) NodeType&gt;(valuetype OpenTK.Vector2i position) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKGridGraph.GetNodeAt``1(OpenTK.Vector2i)" />
      <MemberSignature Language="F#" Value="member this.GetNodeAt : OpenTK.Vector2i -&gt; 'NodeType (requires 'NodeType :&gt; GameplayKit.GKGridGraphNode)" Usage="gKGridGraph.GetNodeAt position" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NodeType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="NodeType">
          <Constraints>
            <BaseTypeName>GameplayKit.GKGridGraphNode</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="position" Type="OpenTK.Vector2i" />
      </Parameters>
      <Docs>
        <typeparam name="NodeType">To be added.</typeparam>
        <param name="position">To be added.</param>
        <summary>Gets the node at the specified <paramref name="position" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeForGenericArgument">
      <MemberSignature Language="C#" Value="public Type GetTypeForGenericArgument (nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetTypeForGenericArgument(valuetype System.nuint index) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKGridGraph.GetTypeForGenericArgument(System.nuint)" />
      <MemberSignature Language="F#" Value="member this.GetTypeForGenericArgument : nuint -&gt; Type" Usage="gKGridGraph.GetTypeForGenericArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GridHeight">
      <MemberSignature Language="C#" Value="public virtual nuint GridHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint GridHeight" />
      <MemberSignature Language="DocId" Value="P:GameplayKit.GKGridGraph.GridHeight" />
      <MemberSignature Language="F#" Value="member this.GridHeight : nuint" Usage="GameplayKit.GKGridGraph.GridHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("gridHeight")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The vertical extent of the grid.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GridOrigin">
      <MemberSignature Language="C#" Value="public virtual OpenTK.Vector2i GridOrigin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype OpenTK.Vector2i GridOrigin" />
      <MemberSignature Language="DocId" Value="P:GameplayKit.GKGridGraph.GridOrigin" />
      <MemberSignature Language="F#" Value="member this.GridOrigin : OpenTK.Vector2i" Usage="GameplayKit.GKGridGraph.GridOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("gridOrigin")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>OpenTK.Vector2i</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The starting location of the grid.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GridWidth">
      <MemberSignature Language="C#" Value="public virtual nuint GridWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint GridWidth" />
      <MemberSignature Language="DocId" Value="P:GameplayKit.GKGridGraph.GridWidth" />
      <MemberSignature Language="F#" Value="member this.GridWidth : nuint" Usage="GameplayKit.GKGridGraph.GridWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("gridWidth")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The horizontal extent of the grid.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
