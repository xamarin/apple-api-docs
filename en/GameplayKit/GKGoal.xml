<Type Name="GKGoal" FullName="GameplayKit.GKGoal">
  <TypeSignature Language="C#" Value="public class GKGoal : Foundation.NSObject, Foundation.INSCopying, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GKGoal extends Foundation.NSObject implements class Foundation.INSCopying, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("GKGoal", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Influences the movement of one or more <see cref="T:GameplayKit.GKAgent" /> objects.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/GameplayKit/Reference/GKGoal_Class/index.html">Apple documentation for <c>GKGoal</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GKGoal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected GKGoal (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected GKGoal (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject Copy (Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject Copy(class Foundation.NSZone zone) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGoalToAlign">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKGoal GetGoalToAlign (GameplayKit.GKAgent[] agents, float maxDistance, float maxAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKGoal GetGoalToAlign(class GameplayKit.GKAgent[] agents, float32 maxDistance, float32 maxAngle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("goalToAlignWithAgents:maxDistance:maxAngle:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKGoal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="agents" Type="GameplayKit.GKAgent[]" />
        <Parameter Name="maxDistance" Type="System.Single" />
        <Parameter Name="maxAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="agents">To be added.</param>
        <param name="maxDistance">To be added.</param>
        <param name="maxAngle">To be added.</param>
        <summary>Factory method to produce a <see cref="T:GameplayKit.GKGoal" /> appropriate for flocking behavior, aligning the agents (see also <see cref="M:GameplayKit.GKGoal.GetGoalToSeparate" /> and <see cref="M:GameplayKit.GKGoal.GetGoalToCohere" />).</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGoalToAvoidAgents">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKGoal GetGoalToAvoidAgents (GameplayKit.GKAgent[] agents, double maxPredictionTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKGoal GetGoalToAvoidAgents(class GameplayKit.GKAgent[] agents, float64 maxPredictionTime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("goalToAvoidAgents:maxPredictionTime:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKGoal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="agents" Type="GameplayKit.GKAgent[]" />
        <Parameter Name="maxPredictionTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="agents">To be added.</param>
        <param name="maxPredictionTime">To be added.</param>
        <summary>Factory method to create a <see cref="T:GameplayKit.GKGoal" /> that attemps to avoid collisions with the specified <see cref="T:GameplayKit.GKAgent" /> objects.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGoalToAvoidObstacles">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKGoal GetGoalToAvoidObstacles (GameplayKit.GKObstacle[] obstacles, double maxPredictionTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKGoal GetGoalToAvoidObstacles(class GameplayKit.GKObstacle[] obstacles, float64 maxPredictionTime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("goalToAvoidObstacles:maxPredictionTime:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKGoal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obstacles" Type="GameplayKit.GKObstacle[]" />
        <Parameter Name="maxPredictionTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="obstacles">To be added.</param>
        <param name="maxPredictionTime">To be added.</param>
        <summary>Factory method to create a <see cref="T:GameplayKit.GKGoal" /> that attemps to avoid collisions with the specified <paramref name="obstacles" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGoalToCohere">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKGoal GetGoalToCohere (GameplayKit.GKAgent[] agents, float maxDistance, float maxAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKGoal GetGoalToCohere(class GameplayKit.GKAgent[] agents, float32 maxDistance, float32 maxAngle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("goalToCohereWithAgents:maxDistance:maxAngle:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKGoal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="agents" Type="GameplayKit.GKAgent[]" />
        <Parameter Name="maxDistance" Type="System.Single" />
        <Parameter Name="maxAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="agents">To be added.</param>
        <param name="maxDistance">To be added.</param>
        <param name="maxAngle">To be added.</param>
        <summary>Factory method to produce a <see cref="T:GameplayKit.GKGoal" /> appropriate for flocking behavior, staying near other agents (see also <see cref="M:GameplayKit.GKGoal.GetGoalToSeparate" /> and <see cref="M:GameplayKit.GKGoal.GetGoalToAlign" />).</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGoalToFleeAgent">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKGoal GetGoalToFleeAgent (GameplayKit.GKAgent agent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKGoal GetGoalToFleeAgent(class GameplayKit.GKAgent agent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("goalToFleeAgent:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKGoal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="agent" Type="GameplayKit.GKAgent" />
      </Parameters>
      <Docs>
        <param name="agent">To be added.</param>
        <summary>Factory method to create a <see cref="T:GameplayKit.GKGoal" /> that attemps to flee from the specified <paramref name="agent" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGoalToFollowPath">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKGoal GetGoalToFollowPath (GameplayKit.GKPath path, double maxPredictionTime, bool forward);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKGoal GetGoalToFollowPath(class GameplayKit.GKPath path, float64 maxPredictionTime, bool forward) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("goalToFollowPath:maxPredictionTime:forward:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKGoal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="GameplayKit.GKPath" />
        <Parameter Name="maxPredictionTime" Type="System.Double" />
        <Parameter Name="forward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="maxPredictionTime">To be added.</param>
        <param name="forward">To be added.</param>
        <summary>Factory method to create a <see cref="T:GameplayKit.GKGoal" /> that attemps to follow the <paramref name="path" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGoalToInterceptAgent">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKGoal GetGoalToInterceptAgent (GameplayKit.GKAgent target, double maxPredictionTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKGoal GetGoalToInterceptAgent(class GameplayKit.GKAgent target, float64 maxPredictionTime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("goalToInterceptAgent:maxPredictionTime:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKGoal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="GameplayKit.GKAgent" />
        <Parameter Name="maxPredictionTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="maxPredictionTime">To be added.</param>
        <summary>Factory method to create a <see cref="T:GameplayKit.GKGoal" /> that attemps to move to the projected location of the specified <paramref name="target" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGoalToReachTargetSpeed">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKGoal GetGoalToReachTargetSpeed (float targetSpeed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKGoal GetGoalToReachTargetSpeed(float32 targetSpeed) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("goalToReachTargetSpeed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKGoal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetSpeed" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="targetSpeed">To be added.</param>
        <summary>Factory method to create a <see cref="T:GameplayKit.GKGoal" /> that attemps to achieve the <paramref name="targetSpeed" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGoalToSeekAgent">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKGoal GetGoalToSeekAgent (GameplayKit.GKAgent agent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKGoal GetGoalToSeekAgent(class GameplayKit.GKAgent agent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("goalToSeekAgent:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKGoal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="agent" Type="GameplayKit.GKAgent" />
      </Parameters>
      <Docs>
        <param name="agent">To be added.</param>
        <summary>Factory method to create a <see cref="T:GameplayKit.GKGoal" /> that attemps to move to the current position of the specified <paramref name="agent" />. (see also <see cref="M:GameplayKit.GKGoal.GetGoalToInterceptAgent" />)</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGoalToSeparate">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKGoal GetGoalToSeparate (GameplayKit.GKAgent[] agents, float maxDistance, float maxAngle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKGoal GetGoalToSeparate(class GameplayKit.GKAgent[] agents, float32 maxDistance, float32 maxAngle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("goalToSeparateFromAgents:maxDistance:maxAngle:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKGoal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="agents" Type="GameplayKit.GKAgent[]" />
        <Parameter Name="maxDistance" Type="System.Single" />
        <Parameter Name="maxAngle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="agents">To be added.</param>
        <param name="maxDistance">To be added.</param>
        <param name="maxAngle">To be added.</param>
        <summary>Factory method to produce a <see cref="T:GameplayKit.GKGoal" /> appropriate for flocking behavior, avoiding other agents (see also <see cref="M:GameplayKit.GKGoal.GetGoalToCohere" /> and <see cref="M:GameplayKit.GKGoal.GetGoalToAlign" />).</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGoalToStayOnPath">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKGoal GetGoalToStayOnPath (GameplayKit.GKPath path, double maxPredictionTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKGoal GetGoalToStayOnPath(class GameplayKit.GKPath path, float64 maxPredictionTime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("goalToStayOnPath:maxPredictionTime:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKGoal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="GameplayKit.GKPath" />
        <Parameter Name="maxPredictionTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="maxPredictionTime">To be added.</param>
        <summary>Factory method to create a <see cref="T:GameplayKit.GKGoal" /> that attemps to maintain a position somewhere along the specified <paramref name="path" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGoalToWander">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKGoal GetGoalToWander (float speed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKGoal GetGoalToWander(float32 speed) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("goalToWander:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKGoal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="speed" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="speed">To be added.</param>
        <summary>Factory method to create a <see cref="T:GameplayKit.GKGoal" /> that turns and moves forward randomly.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
