<Type Name="GKRandomDistribution" FullName="GameplayKit.GKRandomDistribution">
  <TypeSignature Language="C#" Value="public class GKRandomDistribution : Foundation.NSObject, GameplayKit.IGKRandom, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GKRandomDistribution extends Foundation.NSObject implements class GameplayKit.IGKRandom, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:GameplayKit.GKRandomDistribution" />
  <TypeSignature Language="F#" Value="type GKRandomDistribution = class&#xA;    inherit NSObject&#xA;    interface IGKRandom&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>GameplayKit.IGKRandom</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("GKRandomDistribution", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Defines a probability distribution. This class defines a uniform distribution (all values equally likely), while subclasses <see cref="T:GameplayKit.GKGaussianDistribution" /> and <see cref="T:GameplayKit.GKShuffledDistribution" /> provide different likelihoods.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/GameplayKit/Reference/GKRandomDistribution_Class/index.html">Apple documentation for <c>GKRandomDistribution</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected GKRandomDistribution (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKRandomDistribution.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new GameplayKit.GKRandomDistribution : Foundation.NSObjectFlag -&gt; GameplayKit.GKRandomDistribution" Usage="new GameplayKit.GKRandomDistribution t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal GKRandomDistribution (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKRandomDistribution.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new GameplayKit.GKRandomDistribution : nativeint -&gt; GameplayKit.GKRandomDistribution" Usage="new GameplayKit.GKRandomDistribution handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GKRandomDistribution (GameplayKit.IGKRandom source, nint lowestInclusive, nint highestInclusive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class GameplayKit.IGKRandom source, valuetype System.nint lowestInclusive, valuetype System.nint highestInclusive) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKRandomDistribution.#ctor(GameplayKit.IGKRandom,System.nint,System.nint)" />
      <MemberSignature Language="F#" Value="new GameplayKit.GKRandomDistribution : GameplayKit.IGKRandom * nint * nint -&gt; GameplayKit.GKRandomDistribution" Usage="new GameplayKit.GKRandomDistribution (source, lowestInclusive, highestInclusive)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithRandomSource:lowestValue:highestValue:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="source" Type="GameplayKit.IGKRandom" />
        <Parameter Name="lowestInclusive" Type="System.nint" />
        <Parameter Name="highestInclusive" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="lowestInclusive">To be added.</param>
        <param name="highestInclusive">To be added.</param>
        <summary>Creates a distribution with the specified bounds.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:GameplayKit.GKRandomDistribution.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="GameplayKit.GKRandomDistribution.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetD20">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKRandomDistribution GetD20 ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKRandomDistribution GetD20() cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKRandomDistribution.GetD20" />
      <MemberSignature Language="F#" Value="static member GetD20 : unit -&gt; GameplayKit.GKRandomDistribution" Usage="GameplayKit.GKRandomDistribution.GetD20 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("d20")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKRandomDistribution</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Factory method to produce a <see cref="T:GameplayKit.GKRandomDistribution" /> that returns [1,20] with each value equally likely.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetD6">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKRandomDistribution GetD6 ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKRandomDistribution GetD6() cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKRandomDistribution.GetD6" />
      <MemberSignature Language="F#" Value="static member GetD6 : unit -&gt; GameplayKit.GKRandomDistribution" Usage="GameplayKit.GKRandomDistribution.GetD6 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("d6")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKRandomDistribution</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Factory method to produce a <see cref="T:GameplayKit.GKRandomDistribution" /> that uniformly returns [1,6] with each value equally likely..</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDie">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKRandomDistribution GetDie (nint sideCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKRandomDistribution GetDie(valuetype System.nint sideCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKRandomDistribution.GetDie(System.nint)" />
      <MemberSignature Language="F#" Value="static member GetDie : nint -&gt; GameplayKit.GKRandomDistribution" Usage="GameplayKit.GKRandomDistribution.GetDie sideCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("distributionForDieWithSideCount:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKRandomDistribution</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sideCount" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="sideCount">To be added.</param>
        <summary>Creates and returns a <see cref="T:GameplayKit.GKRandomDistribution" /> for a die with the specified number of sides.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDistributionBetween">
      <MemberSignature Language="C#" Value="public static GameplayKit.GKRandomDistribution GetDistributionBetween (nint lowestInclusive, nint highestInclusive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class GameplayKit.GKRandomDistribution GetDistributionBetween(valuetype System.nint lowestInclusive, valuetype System.nint highestInclusive) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKRandomDistribution.GetDistributionBetween(System.nint,System.nint)" />
      <MemberSignature Language="F#" Value="static member GetDistributionBetween : nint * nint -&gt; GameplayKit.GKRandomDistribution" Usage="GameplayKit.GKRandomDistribution.GetDistributionBetween (lowestInclusive, highestInclusive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("distributionWithLowestValue:highestValue:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>GameplayKit.GKRandomDistribution</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowestInclusive" Type="System.nint" />
        <Parameter Name="highestInclusive" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="lowestInclusive">To be added.</param>
        <param name="highestInclusive">To be added.</param>
        <summary>Creates and returns a <see cref="T:GameplayKit.GKRandomDistribution" /> between the provided values.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextBool">
      <MemberSignature Language="C#" Value="public virtual bool GetNextBool ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetNextBool() cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKRandomDistribution.GetNextBool" />
      <MemberSignature Language="F#" Value="abstract member GetNextBool : unit -&gt; bool&#xA;override this.GetNextBool : unit -&gt; bool" Usage="gKRandomDistribution.GetNextBool " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:GameplayKit.IGKRandom.GetNextBool</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("nextBool")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns either <see langword="true" /> or <see langword="false" /> according to the underlying distribution.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextInt">
      <MemberSignature Language="C#" Value="public virtual nint GetNextInt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint GetNextInt() cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKRandomDistribution.GetNextInt" />
      <MemberSignature Language="F#" Value="abstract member GetNextInt : unit -&gt; nint&#xA;override this.GetNextInt : unit -&gt; nint" Usage="gKRandomDistribution.GetNextInt " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:GameplayKit.IGKRandom.GetNextInt</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("nextInt")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an integer in the bounds of the distribution.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextInt">
      <MemberSignature Language="C#" Value="public virtual nuint GetNextInt (nuint upperBound);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nuint GetNextInt(valuetype System.nuint upperBound) cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKRandomDistribution.GetNextInt(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member GetNextInt : nuint -&gt; nuint&#xA;override this.GetNextInt : nuint -&gt; nuint" Usage="gKRandomDistribution.GetNextInt upperBound" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:GameplayKit.IGKRandom.GetNextInt(System.nuint)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("nextIntWithUpperBound:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="upperBound" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="upperBound">To be added.</param>
        <summary>Returns an integer in the bounds of the distribution, but not greater than <paramref name="upperBound" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextUniform">
      <MemberSignature Language="C#" Value="public virtual float GetNextUniform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 GetNextUniform() cil managed" />
      <MemberSignature Language="DocId" Value="M:GameplayKit.GKRandomDistribution.GetNextUniform" />
      <MemberSignature Language="F#" Value="abstract member GetNextUniform : unit -&gt; single&#xA;override this.GetNextUniform : unit -&gt; single" Usage="gKRandomDistribution.GetNextUniform " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:GameplayKit.IGKRandom.GetNextUniform</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("nextUniform")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a value in the range [<c>inverseRange</c>, 1.0] where <c>inverseRange</c> is the ratio between the lowest and highest values in the bounds.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>In a bounded distribution, such as that produced by <see cref="M:GameplayKit.GKRandomDistribution.GetD20" />, the value returned will always be a multiple of the ratio of the lowest and highest values. For exampple, with a D20 distribution (bounds [1, 20]), <see cref="M:GameplayKit.GKRandomDistribution.GetNextUniform" /> will return [0.05, 0.10, 0.15 ... 0.95, 1.0].</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HighestValue">
      <MemberSignature Language="C#" Value="public virtual nint HighestValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint HighestValue" />
      <MemberSignature Language="DocId" Value="P:GameplayKit.GKRandomDistribution.HighestValue" />
      <MemberSignature Language="F#" Value="member this.HighestValue : nint" Usage="GameplayKit.GKRandomDistribution.HighestValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("highestValue")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("highestValue", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The upper bound (inclusive) of the distribution.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LowestValue">
      <MemberSignature Language="C#" Value="public virtual nint LowestValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint LowestValue" />
      <MemberSignature Language="DocId" Value="P:GameplayKit.GKRandomDistribution.LowestValue" />
      <MemberSignature Language="F#" Value="member this.LowestValue : nint" Usage="GameplayKit.GKRandomDistribution.LowestValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("lowestValue")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("lowestValue", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The lower bound (inclusive) of the distribution.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfPossibleOutcomes">
      <MemberSignature Language="C#" Value="public virtual nuint NumberOfPossibleOutcomes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint NumberOfPossibleOutcomes" />
      <MemberSignature Language="DocId" Value="P:GameplayKit.GKRandomDistribution.NumberOfPossibleOutcomes" />
      <MemberSignature Language="F#" Value="member this.NumberOfPossibleOutcomes : nuint" Usage="GameplayKit.GKRandomDistribution.NumberOfPossibleOutcomes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("numberOfPossibleOutcomes")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("numberOfPossibleOutcomes", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Equivalent to <see cref="P:GameplayKit.GKRandomDistribution.HighestValue" /> - <see cref="P:GameplayKit.GKRandomDistribution.LowestValue" /> + 1.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
