<Type Name="WKInterfaceImage" FullName="WatchKit.WKInterfaceImage">
  <TypeSignature Language="C#" Value="public class WKInterfaceImage : WatchKit.WKInterfaceObject, IDisposable, WatchKit.IWKImageAnimatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WKInterfaceImage extends WatchKit.WKInterfaceObject implements class ObjCRuntime.INativeObject, class System.IDisposable, class WatchKit.IWKImageAnimatable" />
  <TypeSignature Language="DocId" Value="T:WatchKit.WKInterfaceImage" />
  <TypeSignature Language="F#" Value="type WKInterfaceImage = class&#xA;    inherit WKInterfaceObject&#xA;    interface IWKImageAnimatable&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>WatchKit.WKInterfaceObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>WatchKit.IWKImageAnimatable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("WKInterfaceImage", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A watch control that displays an image.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/WatchKit/Reference/WKInterfaceImage_class/index.html">Apple documentation for <c>WKInterfaceImage</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WKInterfaceImage (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceImage.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new WatchKit.WKInterfaceImage : Foundation.NSObjectFlag -&gt; WatchKit.WKInterfaceImage" Usage="new WatchKit.WKInterfaceImage t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WKInterfaceImage (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceImage.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new WatchKit.WKInterfaceImage : nativeint -&gt; WatchKit.WKInterfaceImage" Usage="new WatchKit.WKInterfaceImage handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceImage.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="WatchKit.WKInterfaceImage.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetImage">
      <MemberSignature Language="C#" Value="public virtual void SetImage (Foundation.NSData imageData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetImage(class Foundation.NSData imageData) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceImage.SetImage(Foundation.NSData)" />
      <MemberSignature Language="F#" Value="abstract member SetImage : Foundation.NSData -&gt; unit&#xA;override this.SetImage : Foundation.NSData -&gt; unit" Usage="wKInterfaceImage.SetImage imageData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setImageData:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageData" Type="Foundation.NSData" />
      </Parameters>
      <Docs>
        <param name="imageData">Raw image data or an archived <see cref="T:UIKit.UIImage" />.<para tool="nullallowed">This parameter can be <see langword="null" />.</para></param>
        <summary>Sets the image to the specified <paramref name="imageData" /> or shows nothing if <see langword="null" /> is passed.</summary>
        <remarks>
          <para>If the <paramref name="imageData" /> contains multiple images, the resulting image will be animated.</para>
          <para>The size of the <see cref="T:WatchKit.WKInterfaceImage" /> is determined by the <paramref name="imageData" />. If the result is larger than the screen, the image will be clipped.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetImage">
      <MemberSignature Language="C#" Value="public virtual void SetImage (string imageName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetImage(string imageName) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceImage.SetImage(System.String)" />
      <MemberSignature Language="F#" Value="abstract member SetImage : string -&gt; unit&#xA;override this.SetImage : string -&gt; unit" Usage="wKInterfaceImage.SetImage imageName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setImageNamed:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="imageName">
          <para>A file in the Watch bundle or on the device-side cache.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Sets the image to the specified <paramref name="imageName" /> file in the Watch bundle or device-side cache.</summary>
        <remarks>
          <para>The Watch bundle is searched first for the corresponding file name (which should include the file extension). If the bundle does not contain the image, the device-side cache is then searched.</para>
          <para>If the file contains multiple images, the resulting image will be animated.</para>
          <para>The size of the <see cref="T:WatchKit.WKInterfaceImage" /> is determined by the file. If the result is larger than the screen, the image will be clipped.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetImage">
      <MemberSignature Language="C#" Value="public virtual void SetImage (UIKit.UIImage image);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetImage(class UIKit.UIImage image) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceImage.SetImage(UIKit.UIImage)" />
      <MemberSignature Language="F#" Value="abstract member SetImage : UIKit.UIImage -&gt; unit&#xA;override this.SetImage : UIKit.UIImage -&gt; unit" Usage="wKInterfaceImage.SetImage image" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setImage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="UIKit.UIImage" />
      </Parameters>
      <Docs>
        <param name="image">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTintColor">
      <MemberSignature Language="C#" Value="public virtual void SetTintColor (UIKit.UIColor color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTintColor(class UIKit.UIColor color) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceImage.SetTintColor(UIKit.UIColor)" />
      <MemberSignature Language="F#" Value="abstract member SetTintColor : UIKit.UIColor -&gt; unit&#xA;override this.SetTintColor : UIKit.UIColor -&gt; unit" Usage="wKInterfaceImage.SetTintColor color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setTintColor:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="UIKit.UIColor" />
      </Parameters>
      <Docs>
        <param name="color">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartAnimating">
      <MemberSignature Language="C#" Value="public virtual void StartAnimating ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartAnimating() cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceImage.StartAnimating" />
      <MemberSignature Language="F#" Value="abstract member StartAnimating : unit -&gt; unit&#xA;override this.StartAnimating : unit -&gt; unit" Usage="wKInterfaceImage.StartAnimating " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:WatchKit.IWKImageAnimatable.StartAnimating</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("startAnimating")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Begins animating an image sequence.</summary>
        <remarks>
          <para>The animation begins with the first image in the data. If the data contains only a single image, this method does nothing.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartAnimating">
      <MemberSignature Language="C#" Value="public virtual void StartAnimating (Foundation.NSRange imageRange, double duration, nint repeatCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartAnimating(valuetype Foundation.NSRange imageRange, float64 duration, valuetype System.nint repeatCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceImage.StartAnimating(Foundation.NSRange,System.Double,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member StartAnimating : Foundation.NSRange * double * nint -&gt; unit&#xA;override this.StartAnimating : Foundation.NSRange * double * nint -&gt; unit" Usage="wKInterfaceImage.StartAnimating (imageRange, duration, repeatCount)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:WatchKit.IWKImageAnimatable.StartAnimating(Foundation.NSRange,System.Double,System.nint)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("startAnimatingWithImagesInRange:duration:repeatCount:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageRange" Type="Foundation.NSRange" />
        <Parameter Name="duration" Type="System.Double" />
        <Parameter Name="repeatCount" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="imageRange">The 0-based range of images to animate.</param>
        <param name="duration">The time, in seconds, of a single loop of the animation.</param>
        <param name="repeatCount">The number of times to repeat the animation. If 0, the animation will repeat indefinitely.</param>
        <summary>Animates the image sequence with a loop of the specified <paramref name="duration" />.</summary>
        <remarks>
          <para>The animation begins with the first image in the <paramref name="imageRange" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopAnimating">
      <MemberSignature Language="C#" Value="public virtual void StopAnimating ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopAnimating() cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceImage.StopAnimating" />
      <MemberSignature Language="F#" Value="abstract member StopAnimating : unit -&gt; unit&#xA;override this.StopAnimating : unit -&gt; unit" Usage="wKInterfaceImage.StopAnimating " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:WatchKit.IWKImageAnimatable.StopAnimating</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("stopAnimating")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops any currently running animations.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
