<Type Name="WKInterfaceButton" FullName="WatchKit.WKInterfaceButton">
  <TypeSignature Language="C#" Value="public class WKInterfaceButton : WatchKit.WKInterfaceObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WKInterfaceButton extends WatchKit.WKInterfaceObject" />
  <TypeSignature Language="DocId" Value="T:WatchKit.WKInterfaceButton" />
  <TypeSignature Language="F#" Value="type WKInterfaceButton = class&#xA;    inherit WKInterfaceObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>WatchKit.WKInterfaceObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("WKInterfaceButton", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A watch control that acts as a button.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/WatchKit/Reference/WKInterfaceButton_class/index.html">Apple documentation for <c>WKInterfaceButton</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WKInterfaceButton (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceButton.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new WatchKit.WKInterfaceButton : Foundation.NSObjectFlag -&gt; WatchKit.WKInterfaceButton" Usage="new WatchKit.WKInterfaceButton t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WKInterfaceButton (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceButton.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new WatchKit.WKInterfaceButton : nativeint -&gt; WatchKit.WKInterfaceButton" Usage="new WatchKit.WKInterfaceButton handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceButton.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="WatchKit.WKInterfaceButton.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBackgroundColor">
      <MemberSignature Language="C#" Value="public virtual void SetBackgroundColor (UIKit.UIColor color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBackgroundColor(class UIKit.UIColor color) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceButton.SetBackgroundColor(UIKit.UIColor)" />
      <MemberSignature Language="F#" Value="abstract member SetBackgroundColor : UIKit.UIColor -&gt; unit&#xA;override this.SetBackgroundColor : UIKit.UIColor -&gt; unit" Usage="wKInterfaceButton.SetBackgroundColor color" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setBackgroundColor:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="UIKit.UIColor" />
      </Parameters>
      <Docs>
        <param name="color">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBackgroundImage">
      <MemberSignature Language="C#" Value="public virtual void SetBackgroundImage (Foundation.NSData imageData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBackgroundImage(class Foundation.NSData imageData) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceButton.SetBackgroundImage(Foundation.NSData)" />
      <MemberSignature Language="F#" Value="abstract member SetBackgroundImage : Foundation.NSData -&gt; unit&#xA;override this.SetBackgroundImage : Foundation.NSData -&gt; unit" Usage="wKInterfaceButton.SetBackgroundImage imageData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setBackgroundImageData:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageData" Type="Foundation.NSData" />
      </Parameters>
      <Docs>
        <param name="imageData">The raw data for the image. If <see langword="null" />, the background image is cleared.<para tool="nullallowed">This parameter can be <see langword="null" />.</para></param>
        <summary>Sets the background image for the button.</summary>
        <remarks>
          <para>If the <paramref name="imageData" /> contains multiple images, the background image will be animated.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBackgroundImage">
      <MemberSignature Language="C#" Value="public virtual void SetBackgroundImage (string imageName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBackgroundImage(string imageName) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceButton.SetBackgroundImage(System.String)" />
      <MemberSignature Language="F#" Value="abstract member SetBackgroundImage : string -&gt; unit&#xA;override this.SetBackgroundImage : string -&gt; unit" Usage="wKInterfaceButton.SetBackgroundImage imageName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setBackgroundImageNamed:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="imageName">The name of the image file to be used as a background image. If <see langword="null" />, the background image is cleared.<para tool="nullallowed">This parameter can be <see langword="null" />.</para></param>
        <summary>Sets the background image for the button.</summary>
        <remarks>
          <para>If the <paramref name="imageName" /> file contains multiple images, the background image will be animated.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBackgroundImage">
      <MemberSignature Language="C#" Value="public virtual void SetBackgroundImage (UIKit.UIImage image);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBackgroundImage(class UIKit.UIImage image) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceButton.SetBackgroundImage(UIKit.UIImage)" />
      <MemberSignature Language="F#" Value="abstract member SetBackgroundImage : UIKit.UIImage -&gt; unit&#xA;override this.SetBackgroundImage : UIKit.UIImage -&gt; unit" Usage="wKInterfaceButton.SetBackgroundImage image" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setBackgroundImage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="UIKit.UIImage" />
      </Parameters>
      <Docs>
        <param name="image">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEnabled">
      <MemberSignature Language="C#" Value="public virtual void SetEnabled (bool enabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEnabled(bool enabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceButton.SetEnabled(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetEnabled : bool -&gt; unit&#xA;override this.SetEnabled : bool -&gt; unit" Usage="wKInterfaceButton.SetEnabled enabled" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setEnabled:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enabled">
          <see langword="true" /> if the button should be enabled.</param>
        <summary>Enables or disable the button.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTitle">
      <MemberSignature Language="C#" Value="public virtual void SetTitle (Foundation.NSAttributedString attributedTitle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTitle(class Foundation.NSAttributedString attributedTitle) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceButton.SetTitle(Foundation.NSAttributedString)" />
      <MemberSignature Language="F#" Value="abstract member SetTitle : Foundation.NSAttributedString -&gt; unit&#xA;override this.SetTitle : Foundation.NSAttributedString -&gt; unit" Usage="wKInterfaceButton.SetTitle attributedTitle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setAttributedTitle:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributedTitle" Type="Foundation.NSAttributedString" />
      </Parameters>
      <Docs>
        <param name="attributedTitle">
          <para>The formatted text to be displayed.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Sets the title to formatted text.</summary>
        <remarks>
          <para>The <paramref name="attributedTitle" /> may not contain any <see cref="T:UIKit.NSTextAttachment" /> objects.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTitle">
      <MemberSignature Language="C#" Value="public virtual void SetTitle (string title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTitle(string title) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceButton.SetTitle(System.String)" />
      <MemberSignature Language="F#" Value="abstract member SetTitle : string -&gt; unit&#xA;override this.SetTitle : string -&gt; unit" Usage="wKInterfaceButton.SetTitle title" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setTitle:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="title">
          <para>The text to be displayed on the button.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Sets the title text of the button.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
