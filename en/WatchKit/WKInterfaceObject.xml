<Type Name="WKInterfaceObject" FullName="WatchKit.WKInterfaceObject">
  <TypeSignature Language="C#" Value="public class WKInterfaceObject : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WKInterfaceObject extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:WatchKit.WKInterfaceObject" />
  <TypeSignature Language="F#" Value="type WKInterfaceObject = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("WKInterfaceObject", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Base class for Watch controls.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/WatchKit/Reference/WKInterfaceObject_class/index.html">Apple documentation for <c>WKInterfaceObject</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WKInterfaceObject (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceObject.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new WatchKit.WKInterfaceObject : Foundation.NSObjectFlag -&gt; WatchKit.WKInterfaceObject" Usage="new WatchKit.WKInterfaceObject t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WKInterfaceObject (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceObject.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new WatchKit.WKInterfaceObject : nativeint -&gt; WatchKit.WKInterfaceObject" Usage="new WatchKit.WKInterfaceObject handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityActivate">
      <MemberSignature Language="C#" Value="public virtual bool AccessibilityActivate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AccessibilityActivate() cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceObject.AccessibilityActivate" />
      <MemberSignature Language="F#" Value="abstract member AccessibilityActivate : unit -&gt; bool&#xA;override this.AccessibilityActivate : unit -&gt; bool" Usage="wKInterfaceObject.AccessibilityActivate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("accessibilityActivate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityActivationPoint">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint AccessibilityActivationPoint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGPoint AccessibilityActivationPoint" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.AccessibilityActivationPoint" />
      <MemberSignature Language="F#" Value="member this.AccessibilityActivationPoint : CoreGraphics.CGPoint with get, set" Usage="WatchKit.WKInterfaceObject.AccessibilityActivationPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("accessibilityActivationPoint")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAccessibilityActivationPoint:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityAttributedHint">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSAttributedString AccessibilityAttributedHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSAttributedString AccessibilityAttributedHint" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.AccessibilityAttributedHint" />
      <MemberSignature Language="F#" Value="member this.AccessibilityAttributedHint : Foundation.NSAttributedString with get, set" Usage="WatchKit.WKInterfaceObject.AccessibilityAttributedHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("accessibilityAttributedHint", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAccessibilityAttributedHint:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSAttributedString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityAttributedLabel">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSAttributedString AccessibilityAttributedLabel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSAttributedString AccessibilityAttributedLabel" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.AccessibilityAttributedLabel" />
      <MemberSignature Language="F#" Value="member this.AccessibilityAttributedLabel : Foundation.NSAttributedString with get, set" Usage="WatchKit.WKInterfaceObject.AccessibilityAttributedLabel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("accessibilityAttributedLabel", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAccessibilityAttributedLabel:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSAttributedString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityAttributedValue">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSAttributedString AccessibilityAttributedValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSAttributedString AccessibilityAttributedValue" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.AccessibilityAttributedValue" />
      <MemberSignature Language="F#" Value="member this.AccessibilityAttributedValue : Foundation.NSAttributedString with get, set" Usage="WatchKit.WKInterfaceObject.AccessibilityAttributedValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("accessibilityAttributedValue", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAccessibilityAttributedValue:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSAttributedString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityElementsHidden">
      <MemberSignature Language="C#" Value="public virtual bool AccessibilityElementsHidden { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AccessibilityElementsHidden" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.AccessibilityElementsHidden" />
      <MemberSignature Language="F#" Value="member this.AccessibilityElementsHidden : bool with get, set" Usage="WatchKit.WKInterfaceObject.AccessibilityElementsHidden" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("accessibilityElementsHidden")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAccessibilityElementsHidden:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityFrame">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect AccessibilityFrame { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGRect AccessibilityFrame" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.AccessibilityFrame" />
      <MemberSignature Language="F#" Value="member this.AccessibilityFrame : CoreGraphics.CGRect with get, set" Usage="WatchKit.WKInterfaceObject.AccessibilityFrame" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("accessibilityFrame")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAccessibilityFrame:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityHint">
      <MemberSignature Language="C#" Value="public virtual string AccessibilityHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibilityHint" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.AccessibilityHint" />
      <MemberSignature Language="F#" Value="member this.AccessibilityHint : string with get, set" Usage="WatchKit.WKInterfaceObject.AccessibilityHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("accessibilityHint", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAccessibilityHint:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityLabel">
      <MemberSignature Language="C#" Value="public virtual string AccessibilityLabel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibilityLabel" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.AccessibilityLabel" />
      <MemberSignature Language="F#" Value="member this.AccessibilityLabel : string with get, set" Usage="WatchKit.WKInterfaceObject.AccessibilityLabel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("accessibilityLabel", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAccessibilityLabel:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityLanguage">
      <MemberSignature Language="C#" Value="public virtual string AccessibilityLanguage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibilityLanguage" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.AccessibilityLanguage" />
      <MemberSignature Language="F#" Value="member this.AccessibilityLanguage : string with get, set" Usage="WatchKit.WKInterfaceObject.AccessibilityLanguage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("accessibilityLanguage", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAccessibilityLanguage:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityNavigationStyle">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIAccessibilityNavigationStyle AccessibilityNavigationStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIAccessibilityNavigationStyle AccessibilityNavigationStyle" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.AccessibilityNavigationStyle" />
      <MemberSignature Language="F#" Value="member this.AccessibilityNavigationStyle : UIKit.UIAccessibilityNavigationStyle with get, set" Usage="WatchKit.WKInterfaceObject.AccessibilityNavigationStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("accessibilityNavigationStyle")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAccessibilityNavigationStyle:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIAccessibilityNavigationStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityPath">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIBezierPath AccessibilityPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIBezierPath AccessibilityPath" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.AccessibilityPath" />
      <MemberSignature Language="F#" Value="member this.AccessibilityPath : UIKit.UIBezierPath with get, set" Usage="WatchKit.WKInterfaceObject.AccessibilityPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("accessibilityPath", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAccessibilityPath:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIBezierPath</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityTraits">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIAccessibilityTrait AccessibilityTraits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIAccessibilityTrait AccessibilityTraits" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.AccessibilityTraits" />
      <MemberSignature Language="F#" Value="member this.AccessibilityTraits : UIKit.UIAccessibilityTrait with get, set" Usage="WatchKit.WKInterfaceObject.AccessibilityTraits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("accessibilityTraits")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAccessibilityTraits:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIAccessibilityTrait</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityValue">
      <MemberSignature Language="C#" Value="public virtual string AccessibilityValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibilityValue" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.AccessibilityValue" />
      <MemberSignature Language="F#" Value="member this.AccessibilityValue : string with get, set" Usage="WatchKit.WKInterfaceObject.AccessibilityValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("accessibilityValue", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAccessibilityValue:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityViewIsModal">
      <MemberSignature Language="C#" Value="public virtual bool AccessibilityViewIsModal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AccessibilityViewIsModal" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.AccessibilityViewIsModal" />
      <MemberSignature Language="F#" Value="member this.AccessibilityViewIsModal : bool with get, set" Usage="WatchKit.WKInterfaceObject.AccessibilityViewIsModal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("accessibilityViewIsModal")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAccessibilityViewIsModal:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnnouncementDidFinishNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString AnnouncementDidFinishNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString AnnouncementDidFinishNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.AnnouncementDidFinishNotification" />
      <MemberSignature Language="F#" Value="member this.AnnouncementDidFinishNotification : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.AnnouncementDidFinishNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use WKInterfaceObject.Notifications.ObserveAnnouncementDidFinish helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityAnnouncementDidFinishNotification", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for AnnouncementDidFinish</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        WKInterfaceObject.AnnouncementDidFinishNotification, (notification) => {Console.WriteLine ("Received the notification WKInterfaceObject", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification WKInterfaceObject", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (WKInterfaceObject.AnnouncementDidFinishNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnnouncementNotification">
      <MemberSignature Language="C#" Value="public static int AnnouncementNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 AnnouncementNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.AnnouncementNotification" />
      <MemberSignature Language="F#" Value="member this.AnnouncementNotification : int" Usage="WatchKit.WKInterfaceObject.AnnouncementNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityAnnouncementNotification", "WatchKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssistiveTechnologyKey">
      <MemberSignature Language="C#" Value="public static Foundation.NSString AssistiveTechnologyKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString AssistiveTechnologyKey" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.AssistiveTechnologyKey" />
      <MemberSignature Language="F#" Value="member this.AssistiveTechnologyKey : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.AssistiveTechnologyKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use WKInterfaceObject.Notifications.ObserveAssistiveTechnologyKey helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityAssistiveTechnologyKey", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssistiveTouchStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString AssistiveTouchStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString AssistiveTouchStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.AssistiveTouchStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.AssistiveTouchStatusDidChangeNotification : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.AssistiveTouchStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use WKInterfaceObject.Notifications.ObserveAssistiveTouchStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityAssistiveTouchStatusDidChangeNotification", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for AssistiveTouchStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        WKInterfaceObject.AssistiveTouchStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification WKInterfaceObject", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification WKInterfaceObject", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (WKInterfaceObject.AssistiveTouchStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoldTextStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString BoldTextStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString BoldTextStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.BoldTextStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.BoldTextStatusDidChangeNotification : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.BoldTextStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use WKInterfaceObject.Notifications.ObserveBoldTextStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityBoldTextStatusDidChangeNotification", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for BoldTextStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        WKInterfaceObject.BoldTextStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification WKInterfaceObject", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification WKInterfaceObject", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (WKInterfaceObject.BoldTextStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="WatchKit.WKInterfaceObject.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClosedCaptioningStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ClosedCaptioningStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ClosedCaptioningStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.ClosedCaptioningStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.ClosedCaptioningStatusDidChangeNotification : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.ClosedCaptioningStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use WKInterfaceObject.Notifications.ObserveClosedCaptioningStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityClosedCaptioningStatusDidChangeNotification", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for ClosedCaptioningStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        WKInterfaceObject.ClosedCaptioningStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification WKInterfaceObject", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification WKInterfaceObject", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (WKInterfaceObject.ClosedCaptioningStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DarkerSystemColorsStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString DarkerSystemColorsStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString DarkerSystemColorsStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.DarkerSystemColorsStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.DarkerSystemColorsStatusDidChangeNotification : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.DarkerSystemColorsStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use WKInterfaceObject.Notifications.ObserveDarkerSystemColorsStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityDarkerSystemColorsStatusDidChangeNotification", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for DarkerSystemColorsStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        WKInterfaceObject.DarkerSystemColorsStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification WKInterfaceObject", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification WKInterfaceObject", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (WKInterfaceObject.DarkerSystemColorsStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementFocusedNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ElementFocusedNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ElementFocusedNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.ElementFocusedNotification" />
      <MemberSignature Language="F#" Value="member this.ElementFocusedNotification : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.ElementFocusedNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use WKInterfaceObject.Notifications.ObserveElementFocused helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityElementFocusedNotification", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for ElementFocused</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        WKInterfaceObject.ElementFocusedNotification, (notification) => {Console.WriteLine ("Received the notification WKInterfaceObject", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification WKInterfaceObject", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (WKInterfaceObject.ElementFocusedNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusedElementKey">
      <MemberSignature Language="C#" Value="public static Foundation.NSString FocusedElementKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString FocusedElementKey" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.FocusedElementKey" />
      <MemberSignature Language="F#" Value="member this.FocusedElementKey : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.FocusedElementKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use WKInterfaceObject.Notifications.ObserveFocusedElementKey helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityFocusedElementKey", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GrayscaleStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString GrayscaleStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString GrayscaleStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.GrayscaleStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.GrayscaleStatusDidChangeNotification : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.GrayscaleStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use WKInterfaceObject.Notifications.ObserveGrayscaleStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityGrayscaleStatusDidChangeNotification", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for GrayscaleStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        WKInterfaceObject.GrayscaleStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification WKInterfaceObject", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification WKInterfaceObject", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (WKInterfaceObject.GrayscaleStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GuidedAccessStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString GuidedAccessStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString GuidedAccessStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.GuidedAccessStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.GuidedAccessStatusDidChangeNotification : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.GuidedAccessStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use WKInterfaceObject.Notifications.ObserveGuidedAccessStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityGuidedAccessStatusDidChangeNotification", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for GuidedAccessStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        WKInterfaceObject.GuidedAccessStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification WKInterfaceObject", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification WKInterfaceObject", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (WKInterfaceObject.GuidedAccessStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HearingDevicePairedEarDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString HearingDevicePairedEarDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString HearingDevicePairedEarDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.HearingDevicePairedEarDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.HearingDevicePairedEarDidChangeNotification : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.HearingDevicePairedEarDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use WKInterfaceObject.Notifications.ObserveHearingDevicePairedEarDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityHearingDevicePairedEarDidChangeNotification", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for HearingDevicePairedEarDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        WKInterfaceObject.HearingDevicePairedEarDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification WKInterfaceObject", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification WKInterfaceObject", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (WKInterfaceObject.HearingDevicePairedEarDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InterfaceProperty">
      <MemberSignature Language="C#" Value="public virtual string InterfaceProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InterfaceProperty" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.InterfaceProperty" />
      <MemberSignature Language="F#" Value="member this.InterfaceProperty : string" Usage="WatchKit.WKInterfaceObject.InterfaceProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("interfaceProperty")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Corresponds to an outlet in the storyboard.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Application developers will not generally need to use this property, which is used by the operating system to hold the correspondence between storyboard outlets and interface objects.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvertColorsStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString InvertColorsStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString InvertColorsStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.InvertColorsStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.InvertColorsStatusDidChangeNotification : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.InvertColorsStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use WKInterfaceObject.Notifications.ObserveInvertColorsStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityInvertColorsStatusDidChangeNotification", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for InvertColorsStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        WKInterfaceObject.InvertColorsStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification WKInterfaceObject", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification WKInterfaceObject", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (WKInterfaceObject.InvertColorsStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAccessibilityElement">
      <MemberSignature Language="C#" Value="public virtual bool IsAccessibilityElement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAccessibilityElement" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.IsAccessibilityElement" />
      <MemberSignature Language="F#" Value="member this.IsAccessibilityElement : bool with get, set" Usage="WatchKit.WKInterfaceObject.IsAccessibilityElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isAccessibilityElement")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setIsAccessibilityElement:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutChangedNotification">
      <MemberSignature Language="C#" Value="public static int LayoutChangedNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 LayoutChangedNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.LayoutChangedNotification" />
      <MemberSignature Language="F#" Value="member this.LayoutChangedNotification : int" Usage="WatchKit.WKInterfaceObject.LayoutChangedNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityLayoutChangedNotification", "WatchKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MonoAudioStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString MonoAudioStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString MonoAudioStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.MonoAudioStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.MonoAudioStatusDidChangeNotification : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.MonoAudioStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use WKInterfaceObject.Notifications.ObserveMonoAudioStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityMonoAudioStatusDidChangeNotification", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for MonoAudioStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        WKInterfaceObject.MonoAudioStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification WKInterfaceObject", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification WKInterfaceObject", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (WKInterfaceObject.MonoAudioStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotificationSwitchControlIdentifier">
      <MemberSignature Language="C#" Value="public static Foundation.NSString NotificationSwitchControlIdentifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString NotificationSwitchControlIdentifier" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.NotificationSwitchControlIdentifier" />
      <MemberSignature Language="F#" Value="member this.NotificationSwitchControlIdentifier : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.NotificationSwitchControlIdentifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityNotificationSwitchControlIdentifier", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for NotificationSwitchContr</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        WKInterfaceObject.NotificationSwitchControlIdentifier, (notification) => {Console.WriteLine ("Received the notification WKInterfaceObject", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification WKInterfaceObject", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (WKInterfaceObject.NotificationSwitchControlIdentifier, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotificationVoiceOverIdentifier">
      <MemberSignature Language="C#" Value="public static Foundation.NSString NotificationVoiceOverIdentifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString NotificationVoiceOverIdentifier" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.NotificationVoiceOverIdentifier" />
      <MemberSignature Language="F#" Value="member this.NotificationVoiceOverIdentifier : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.NotificationVoiceOverIdentifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityNotificationVoiceOverIdentifier", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for NotificationVoiceOv</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        WKInterfaceObject.NotificationVoiceOverIdentifier, (notification) => {Console.WriteLine ("Received the notification WKInterfaceObject", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification WKInterfaceObject", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (WKInterfaceObject.NotificationVoiceOverIdentifier, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageScrolledNotification">
      <MemberSignature Language="C#" Value="public static int PageScrolledNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 PageScrolledNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.PageScrolledNotification" />
      <MemberSignature Language="F#" Value="member this.PageScrolledNotification : int" Usage="WatchKit.WKInterfaceObject.PageScrolledNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityPageScrolledNotification", "WatchKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PauseAssistiveTechnologyNotification">
      <MemberSignature Language="C#" Value="public static int PauseAssistiveTechnologyNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 PauseAssistiveTechnologyNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.PauseAssistiveTechnologyNotification" />
      <MemberSignature Language="F#" Value="member this.PauseAssistiveTechnologyNotification : int" Usage="WatchKit.WKInterfaceObject.PauseAssistiveTechnologyNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityPauseAssistiveTechnologyNotification", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceMotionStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ReduceMotionStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ReduceMotionStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.ReduceMotionStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.ReduceMotionStatusDidChangeNotification : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.ReduceMotionStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use WKInterfaceObject.Notifications.ObserveReduceMotionStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityReduceMotionStatusDidChangeNotification", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for ReduceMotionStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        WKInterfaceObject.ReduceMotionStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification WKInterfaceObject", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification WKInterfaceObject", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (WKInterfaceObject.ReduceMotionStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceTransparencyStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ReduceTransparencyStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ReduceTransparencyStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.ReduceTransparencyStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.ReduceTransparencyStatusDidChangeNotification : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.ReduceTransparencyStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use WKInterfaceObject.Notifications.ObserveReduceTransparencyStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityReduceTransparencyStatusDidChangeNotification", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for ReduceTransparencyStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        WKInterfaceObject.ReduceTransparencyStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification WKInterfaceObject", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification WKInterfaceObject", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (WKInterfaceObject.ReduceTransparencyStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeAssistiveTechnologyNotification">
      <MemberSignature Language="C#" Value="public static int ResumeAssistiveTechnologyNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 ResumeAssistiveTechnologyNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.ResumeAssistiveTechnologyNotification" />
      <MemberSignature Language="F#" Value="member this.ResumeAssistiveTechnologyNotification : int" Usage="WatchKit.WKInterfaceObject.ResumeAssistiveTechnologyNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityResumeAssistiveTechnologyNotification", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScreenChangedNotification">
      <MemberSignature Language="C#" Value="public static int ScreenChangedNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 ScreenChangedNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.ScreenChangedNotification" />
      <MemberSignature Language="F#" Value="member this.ScreenChangedNotification : int" Usage="WatchKit.WKInterfaceObject.ScreenChangedNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityScreenChangedNotification", "WatchKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAlpha">
      <MemberSignature Language="C#" Value="public virtual void SetAlpha (nfloat alpha);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAlpha(valuetype System.nfloat alpha) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceObject.SetAlpha(System.nfloat)" />
      <MemberSignature Language="F#" Value="abstract member SetAlpha : nfloat -&gt; unit&#xA;override this.SetAlpha : nfloat -&gt; unit" Usage="wKInterfaceObject.SetAlpha alpha" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setAlpha:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alpha" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="alpha">The alpha value, in the range 0 (totally transparent) to 1.0 (totally opaque).</param>
        <summary>Sets the transparency of the interface object.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHeight">
      <MemberSignature Language="C#" Value="public virtual void SetHeight (nfloat height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetHeight(valuetype System.nfloat height) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceObject.SetHeight(System.nfloat)" />
      <MemberSignature Language="F#" Value="abstract member SetHeight : nfloat -&gt; unit&#xA;override this.SetHeight : nfloat -&gt; unit" Usage="wKInterfaceObject.SetHeight height" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setHeight:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="height" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="height">The height, in points, of the object.</param>
        <summary>Sets the height, in points, of the object.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHidden">
      <MemberSignature Language="C#" Value="public virtual void SetHidden (bool hidden);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetHidden(bool hidden) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceObject.SetHidden(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetHidden : bool -&gt; unit&#xA;override this.SetHidden : bool -&gt; unit" Usage="wKInterfaceObject.SetHidden hidden" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setHidden:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hidden" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="hidden">
          <see langword="true" /> if the interface object is not displayed.</param>
        <summary>Hides or displays the interface object, potentially triggering a layout refresh.</summary>
        <remarks>
          <para>The Watch app's layout adjusts, if necessary, to display only objects that are being shown.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetWidth">
      <MemberSignature Language="C#" Value="public virtual void SetWidth (nfloat width);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetWidth(valuetype System.nfloat width) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchKit.WKInterfaceObject.SetWidth(System.nfloat)" />
      <MemberSignature Language="F#" Value="abstract member SetWidth : nfloat -&gt; unit&#xA;override this.SetWidth : nfloat -&gt; unit" Usage="wKInterfaceObject.SetWidth width" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setWidth:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="width">The width, in points, of the object.</param>
        <summary>Set the width, in points, of the object.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShakeToUndoDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ShakeToUndoDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ShakeToUndoDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.ShakeToUndoDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.ShakeToUndoDidChangeNotification : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.ShakeToUndoDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use WKInterfaceObject.Notifications.ObserveShakeToUndoDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityShakeToUndoDidChangeNotification", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for ShakeToUndoDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        WKInterfaceObject.ShakeToUndoDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification WKInterfaceObject", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification WKInterfaceObject", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (WKInterfaceObject.ShakeToUndoDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldGroupAccessibilityChildren">
      <MemberSignature Language="C#" Value="public virtual bool ShouldGroupAccessibilityChildren { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldGroupAccessibilityChildren" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.ShouldGroupAccessibilityChildren" />
      <MemberSignature Language="F#" Value="member this.ShouldGroupAccessibilityChildren : bool with get, set" Usage="WatchKit.WKInterfaceObject.ShouldGroupAccessibilityChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("shouldGroupAccessibilityChildren")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setShouldGroupAccessibilityChildren:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakScreenStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString SpeakScreenStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString SpeakScreenStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.SpeakScreenStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.SpeakScreenStatusDidChangeNotification : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.SpeakScreenStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use WKInterfaceObject.Notifications.ObserveSpeakScreenStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilitySpeakScreenStatusDidChangeNotification", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for SpeakScreenStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        WKInterfaceObject.SpeakScreenStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification WKInterfaceObject", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification WKInterfaceObject", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (WKInterfaceObject.SpeakScreenStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakSelectionStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString SpeakSelectionStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString SpeakSelectionStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.SpeakSelectionStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.SpeakSelectionStatusDidChangeNotification : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.SpeakSelectionStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use WKInterfaceObject.Notifications.ObserveSpeakSelectionStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilitySpeakSelectionStatusDidChangeNotification", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for SpeakSelectionStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        WKInterfaceObject.SpeakSelectionStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification WKInterfaceObject", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification WKInterfaceObject", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (WKInterfaceObject.SpeakSelectionStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeechAttributeIpaNotation">
      <MemberSignature Language="C#" Value="public static Foundation.NSString SpeechAttributeIpaNotation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString SpeechAttributeIpaNotation" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.SpeechAttributeIpaNotation" />
      <MemberSignature Language="F#" Value="member this.SpeechAttributeIpaNotation : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.SpeechAttributeIpaNotation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilitySpeechAttributeIPANotation", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeechAttributeLanguage">
      <MemberSignature Language="C#" Value="public static Foundation.NSString SpeechAttributeLanguage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString SpeechAttributeLanguage" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.SpeechAttributeLanguage" />
      <MemberSignature Language="F#" Value="member this.SpeechAttributeLanguage : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.SpeechAttributeLanguage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilitySpeechAttributeLanguage", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeechAttributePitch">
      <MemberSignature Language="C#" Value="public static Foundation.NSString SpeechAttributePitch { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString SpeechAttributePitch" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.SpeechAttributePitch" />
      <MemberSignature Language="F#" Value="member this.SpeechAttributePitch : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.SpeechAttributePitch" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilitySpeechAttributePitch", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeechAttributePunctuation">
      <MemberSignature Language="C#" Value="public static Foundation.NSString SpeechAttributePunctuation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString SpeechAttributePunctuation" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.SpeechAttributePunctuation" />
      <MemberSignature Language="F#" Value="member this.SpeechAttributePunctuation : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.SpeechAttributePunctuation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilitySpeechAttributePunctuation", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeechAttributeQueueAnnouncement">
      <MemberSignature Language="C#" Value="public static Foundation.NSString SpeechAttributeQueueAnnouncement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString SpeechAttributeQueueAnnouncement" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.SpeechAttributeQueueAnnouncement" />
      <MemberSignature Language="F#" Value="member this.SpeechAttributeQueueAnnouncement : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.SpeechAttributeQueueAnnouncement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilitySpeechAttributeQueueAnnouncement", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchControlStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString SwitchControlStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString SwitchControlStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.SwitchControlStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.SwitchControlStatusDidChangeNotification : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.SwitchControlStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use WKInterfaceObject.Notifications.ObserveSwitchControlStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilitySwitchControlStatusDidChangeNotification", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for SwitchControlStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        WKInterfaceObject.SwitchControlStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification WKInterfaceObject", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification WKInterfaceObject", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (WKInterfaceObject.SwitchControlStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextAttributeCustom">
      <MemberSignature Language="C#" Value="public static Foundation.NSString TextAttributeCustom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString TextAttributeCustom" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.TextAttributeCustom" />
      <MemberSignature Language="F#" Value="member this.TextAttributeCustom : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.TextAttributeCustom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityTextAttributeCustom", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextAttributeHeadingLevel">
      <MemberSignature Language="C#" Value="public static Foundation.NSString TextAttributeHeadingLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString TextAttributeHeadingLevel" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.TextAttributeHeadingLevel" />
      <MemberSignature Language="F#" Value="member this.TextAttributeHeadingLevel : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.TextAttributeHeadingLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityTextAttributeHeadingLevel", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitAdjustable">
      <MemberSignature Language="C#" Value="public static long TraitAdjustable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitAdjustable" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.TraitAdjustable" />
      <MemberSignature Language="F#" Value="member this.TraitAdjustable : int64" Usage="WatchKit.WKInterfaceObject.TraitAdjustable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityTraitAdjustable", "WatchKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitAllowsDirectInteraction">
      <MemberSignature Language="C#" Value="public static long TraitAllowsDirectInteraction { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitAllowsDirectInteraction" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.TraitAllowsDirectInteraction" />
      <MemberSignature Language="F#" Value="member this.TraitAllowsDirectInteraction : int64" Usage="WatchKit.WKInterfaceObject.TraitAllowsDirectInteraction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityTraitAllowsDirectInteraction", "WatchKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitButton">
      <MemberSignature Language="C#" Value="public static long TraitButton { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitButton" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.TraitButton" />
      <MemberSignature Language="F#" Value="member this.TraitButton : int64" Usage="WatchKit.WKInterfaceObject.TraitButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityTraitButton", "WatchKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitCausesPageTurn">
      <MemberSignature Language="C#" Value="public static long TraitCausesPageTurn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitCausesPageTurn" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.TraitCausesPageTurn" />
      <MemberSignature Language="F#" Value="member this.TraitCausesPageTurn : int64" Usage="WatchKit.WKInterfaceObject.TraitCausesPageTurn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityTraitCausesPageTurn", "WatchKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitHeader">
      <MemberSignature Language="C#" Value="public static long TraitHeader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitHeader" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.TraitHeader" />
      <MemberSignature Language="F#" Value="member this.TraitHeader : int64" Usage="WatchKit.WKInterfaceObject.TraitHeader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityTraitHeader", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitImage">
      <MemberSignature Language="C#" Value="public static long TraitImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitImage" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.TraitImage" />
      <MemberSignature Language="F#" Value="member this.TraitImage : int64" Usage="WatchKit.WKInterfaceObject.TraitImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityTraitImage", "WatchKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitKeyboardKey">
      <MemberSignature Language="C#" Value="public static long TraitKeyboardKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitKeyboardKey" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.TraitKeyboardKey" />
      <MemberSignature Language="F#" Value="member this.TraitKeyboardKey : int64" Usage="WatchKit.WKInterfaceObject.TraitKeyboardKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityTraitKeyboardKey", "WatchKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitLink">
      <MemberSignature Language="C#" Value="public static long TraitLink { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitLink" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.TraitLink" />
      <MemberSignature Language="F#" Value="member this.TraitLink : int64" Usage="WatchKit.WKInterfaceObject.TraitLink" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityTraitLink", "WatchKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitNone">
      <MemberSignature Language="C#" Value="public static long TraitNone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitNone" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.TraitNone" />
      <MemberSignature Language="F#" Value="member this.TraitNone : int64" Usage="WatchKit.WKInterfaceObject.TraitNone" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityTraitNone", "WatchKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitNotEnabled">
      <MemberSignature Language="C#" Value="public static long TraitNotEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitNotEnabled" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.TraitNotEnabled" />
      <MemberSignature Language="F#" Value="member this.TraitNotEnabled : int64" Usage="WatchKit.WKInterfaceObject.TraitNotEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityTraitNotEnabled", "WatchKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitPlaysSound">
      <MemberSignature Language="C#" Value="public static long TraitPlaysSound { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitPlaysSound" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.TraitPlaysSound" />
      <MemberSignature Language="F#" Value="member this.TraitPlaysSound : int64" Usage="WatchKit.WKInterfaceObject.TraitPlaysSound" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityTraitPlaysSound", "WatchKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitSearchField">
      <MemberSignature Language="C#" Value="public static long TraitSearchField { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitSearchField" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.TraitSearchField" />
      <MemberSignature Language="F#" Value="member this.TraitSearchField : int64" Usage="WatchKit.WKInterfaceObject.TraitSearchField" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityTraitSearchField", "WatchKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitSelected">
      <MemberSignature Language="C#" Value="public static long TraitSelected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitSelected" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.TraitSelected" />
      <MemberSignature Language="F#" Value="member this.TraitSelected : int64" Usage="WatchKit.WKInterfaceObject.TraitSelected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityTraitSelected", "WatchKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitStartsMediaSession">
      <MemberSignature Language="C#" Value="public static long TraitStartsMediaSession { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitStartsMediaSession" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.TraitStartsMediaSession" />
      <MemberSignature Language="F#" Value="member this.TraitStartsMediaSession : int64" Usage="WatchKit.WKInterfaceObject.TraitStartsMediaSession" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityTraitStartsMediaSession", "WatchKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitStaticText">
      <MemberSignature Language="C#" Value="public static long TraitStaticText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitStaticText" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.TraitStaticText" />
      <MemberSignature Language="F#" Value="member this.TraitStaticText : int64" Usage="WatchKit.WKInterfaceObject.TraitStaticText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityTraitStaticText", "WatchKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitSummaryElement">
      <MemberSignature Language="C#" Value="public static long TraitSummaryElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitSummaryElement" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.TraitSummaryElement" />
      <MemberSignature Language="F#" Value="member this.TraitSummaryElement : int64" Usage="WatchKit.WKInterfaceObject.TraitSummaryElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityTraitSummaryElement", "WatchKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitTabBar">
      <MemberSignature Language="C#" Value="public static long TraitTabBar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitTabBar" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.TraitTabBar" />
      <MemberSignature Language="F#" Value="member this.TraitTabBar : int64" Usage="WatchKit.WKInterfaceObject.TraitTabBar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityTraitTabBar", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitUpdatesFrequently">
      <MemberSignature Language="C#" Value="public static long TraitUpdatesFrequently { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitUpdatesFrequently" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.TraitUpdatesFrequently" />
      <MemberSignature Language="F#" Value="member this.TraitUpdatesFrequently : int64" Usage="WatchKit.WKInterfaceObject.TraitUpdatesFrequently" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityTraitUpdatesFrequently", "WatchKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnfocusedElementKey">
      <MemberSignature Language="C#" Value="public static Foundation.NSString UnfocusedElementKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString UnfocusedElementKey" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.UnfocusedElementKey" />
      <MemberSignature Language="F#" Value="member this.UnfocusedElementKey : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.UnfocusedElementKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use WKInterfaceObject.Notifications.ObserveUnfocusedElementKey helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityUnfocusedElementKey", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VoiceOverStatusChanged">
      <MemberSignature Language="C#" Value="public static Foundation.NSString VoiceOverStatusChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString VoiceOverStatusChanged" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.VoiceOverStatusChanged" />
      <MemberSignature Language="F#" Value="member this.VoiceOverStatusChanged : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.VoiceOverStatusChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityVoiceOverStatusChanged", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'VoiceOverStatusDidChangeNotification' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'VoiceOverStatusDidChangeNotification' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'VoiceOverStatusDidChangeNotification' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'VoiceOverStatusDidChangeNotification' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Developers should not use this deprecated property. Developers should use 'VoiceOverStatusDidChangeNotification' instead.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VoiceOverStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString VoiceOverStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString VoiceOverStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:WatchKit.WKInterfaceObject.VoiceOverStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.VoiceOverStatusDidChangeNotification : Foundation.NSString" Usage="WatchKit.WKInterfaceObject.VoiceOverStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use WKInterfaceObject.Notifications.ObserveVoiceOverStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Field("UIAccessibilityVoiceOverStatusDidChangeNotification", "WatchKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for VoiceOverStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification, also developers can use the strongly typed notification <see cref="M:WatchKit.WKInterfaceObject.Notifications.ObserveVoiceOverStatusDidChange*" /> instead.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        WKInterfaceObject.VoiceOverStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification WKInterfaceObject", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification WKInterfaceObject", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (WKInterfaceObject.VoiceOverStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
