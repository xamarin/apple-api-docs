<Type Name="HKWorkoutBuilder" FullName="HealthKit.HKWorkoutBuilder">
  <TypeSignature Language="C#" Value="public class HKWorkoutBuilder : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HKWorkoutBuilder extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:HealthKit.HKWorkoutBuilder" />
  <TypeSignature Language="F#" Value="type HKWorkoutBuilder = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("HKWorkoutBuilder", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 5, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Builds a workout from workout data as it is added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HKWorkoutBuilder (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKWorkoutBuilder.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new HealthKit.HKWorkoutBuilder : Foundation.NSObjectFlag -&gt; HealthKit.HKWorkoutBuilder" Usage="new HealthKit.HKWorkoutBuilder t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal HKWorkoutBuilder (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKWorkoutBuilder.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new HealthKit.HKWorkoutBuilder : nativeint -&gt; HealthKit.HKWorkoutBuilder" Usage="new HealthKit.HKWorkoutBuilder handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HKWorkoutBuilder (HealthKit.HKHealthStore healthStore, HealthKit.HKWorkoutConfiguration configuration, HealthKit.HKDevice device);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class HealthKit.HKHealthStore healthStore, class HealthKit.HKWorkoutConfiguration configuration, class HealthKit.HKDevice device) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKWorkoutBuilder.#ctor(HealthKit.HKHealthStore,HealthKit.HKWorkoutConfiguration,HealthKit.HKDevice)" />
      <MemberSignature Language="F#" Value="new HealthKit.HKWorkoutBuilder : HealthKit.HKHealthStore * HealthKit.HKWorkoutConfiguration * HealthKit.HKDevice -&gt; HealthKit.HKWorkoutBuilder" Usage="new HealthKit.HKWorkoutBuilder (healthStore, configuration, device)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithHealthStore:configuration:device:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="healthStore" Type="HealthKit.HKHealthStore" />
        <Parameter Name="configuration" Type="HealthKit.HKWorkoutConfiguration" />
        <Parameter Name="device" Type="HealthKit.HKDevice" />
      </Parameters>
      <Docs>
        <param name="healthStore">The Health Store for the workout.</param>
        <param name="configuration">The workout configuration to use.</param>
        <param name="device">The Health Kit device.</param>
        <summary>Creates a new workout builder.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="protected virtual void Add (Foundation.NSDictionary metadata, HealthKit.HKWorkoutBuilderCompletionHandler completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Add(class Foundation.NSDictionary metadata, class HealthKit.HKWorkoutBuilderCompletionHandler completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKWorkoutBuilder.Add(Foundation.NSDictionary,HealthKit.HKWorkoutBuilderCompletionHandler)" />
      <MemberSignature Language="F#" Value="abstract member Add : Foundation.NSDictionary * HealthKit.HKWorkoutBuilderCompletionHandler -&gt; unit&#xA;override this.Add : Foundation.NSDictionary * HealthKit.HKWorkoutBuilderCompletionHandler -&gt; unit" Usage="hKWorkoutBuilder.Add (metadata, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addMetadata:completion:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="Foundation.NSDictionary" />
        <Parameter Name="completionHandler" Type="HealthKit.HKWorkoutBuilderCompletionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDHKWorkoutBuilderCompletionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="metadata">The metadata to add.</param>
        <param name="completionHandler">A handler to run when the operation completes.</param>
        <summary>Adds the specified metadata to the workout and runs a handler when the operation completes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (HealthKit.HKMetadata metadata, HealthKit.HKWorkoutBuilderCompletionHandler completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class HealthKit.HKMetadata metadata, class HealthKit.HKWorkoutBuilderCompletionHandler completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKWorkoutBuilder.Add(HealthKit.HKMetadata,HealthKit.HKWorkoutBuilderCompletionHandler)" />
      <MemberSignature Language="F#" Value="member this.Add : HealthKit.HKMetadata * HealthKit.HKWorkoutBuilderCompletionHandler -&gt; unit" Usage="hKWorkoutBuilder.Add (metadata, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="HealthKit.HKMetadata" />
        <Parameter Name="completionHandler" Type="HealthKit.HKWorkoutBuilderCompletionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDHKWorkoutBuilderCompletionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="metadata">The metadata to add.</param>
        <param name="completionHandler">A handler to run when the operation completes.</param>
        <summary>Adds the specified metadata to the workout and runs a handler when the operation completes.</summary>
        <remarks>To be added.</remarks>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (HealthKit.HKSample[] samples, HealthKit.HKWorkoutBuilderCompletionHandler completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class HealthKit.HKSample[] samples, class HealthKit.HKWorkoutBuilderCompletionHandler completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKWorkoutBuilder.Add(HealthKit.HKSample[],HealthKit.HKWorkoutBuilderCompletionHandler)" />
      <MemberSignature Language="F#" Value="abstract member Add : HealthKit.HKSample[] * HealthKit.HKWorkoutBuilderCompletionHandler -&gt; unit&#xA;override this.Add : HealthKit.HKSample[] * HealthKit.HKWorkoutBuilderCompletionHandler -&gt; unit" Usage="hKWorkoutBuilder.Add (samples, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addSamples:completion:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="samples" Type="HealthKit.HKSample[]" />
        <Parameter Name="completionHandler" Type="HealthKit.HKWorkoutBuilderCompletionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDHKWorkoutBuilderCompletionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="samples">The samples to add.</param>
        <param name="completionHandler">A handler to run when the operation completes.</param>
        <summary>Adds the specified samples to the workout and runs a handler when the operation completes.</summary>
        <remarks>To be added.</remarks>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (HealthKit.HKWorkoutEvent[] workoutEvents, HealthKit.HKWorkoutBuilderCompletionHandler completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class HealthKit.HKWorkoutEvent[] workoutEvents, class HealthKit.HKWorkoutBuilderCompletionHandler completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKWorkoutBuilder.Add(HealthKit.HKWorkoutEvent[],HealthKit.HKWorkoutBuilderCompletionHandler)" />
      <MemberSignature Language="F#" Value="abstract member Add : HealthKit.HKWorkoutEvent[] * HealthKit.HKWorkoutBuilderCompletionHandler -&gt; unit&#xA;override this.Add : HealthKit.HKWorkoutEvent[] * HealthKit.HKWorkoutBuilderCompletionHandler -&gt; unit" Usage="hKWorkoutBuilder.Add (workoutEvents, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addWorkoutEvents:completion:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workoutEvents" Type="HealthKit.HKWorkoutEvent[]" />
        <Parameter Name="completionHandler" Type="HealthKit.HKWorkoutBuilderCompletionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDHKWorkoutBuilderCompletionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="workoutEvents">The workout events to add.</param>
        <param name="completionHandler">A handler to run when the operation completes.</param>
        <summary>Adds the specified workout events to the workout and runs a handler when the operation completes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task&lt;Tuple&lt;bool,Foundation.NSError&gt;&gt; AddAsync (Foundation.NSDictionary metadata);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Tuple`2&lt;bool, class Foundation.NSError&gt;&gt; AddAsync(class Foundation.NSDictionary metadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKWorkoutBuilder.AddAsync(Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="abstract member AddAsync : Foundation.NSDictionary -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;&#xA;override this.AddAsync : Foundation.NSDictionary -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;" Usage="hKWorkoutBuilder.AddAsync metadata" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Tuple&lt;System.Boolean,Foundation.NSError&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="metadata">The metadata to add.</param>
        <summary>Adds the specified metadata and returns a task that contains a success status and any error that occurred.</summary>
        <returns>A task that contains a success status and any error that occurred.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Tuple&lt;bool,Foundation.NSError&gt;&gt; AddAsync (HealthKit.HKMetadata metadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Tuple`2&lt;bool, class Foundation.NSError&gt;&gt; AddAsync(class HealthKit.HKMetadata metadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKWorkoutBuilder.AddAsync(HealthKit.HKMetadata)" />
      <MemberSignature Language="F#" Value="member this.AddAsync : HealthKit.HKMetadata -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;" Usage="hKWorkoutBuilder.AddAsync metadata" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Tuple&lt;System.Boolean,Foundation.NSError&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="HealthKit.HKMetadata" />
      </Parameters>
      <Docs>
        <param name="metadata">The metadata to add.</param>
        <summary>Adds the specified metadata and returns a task that contains a success status and any error that occurred.</summary>
        <returns>A task that contains a success status and any error that occurred.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Tuple&lt;bool,Foundation.NSError&gt;&gt; AddAsync (HealthKit.HKSample[] samples);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Tuple`2&lt;bool, class Foundation.NSError&gt;&gt; AddAsync(class HealthKit.HKSample[] samples) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKWorkoutBuilder.AddAsync(HealthKit.HKSample[])" />
      <MemberSignature Language="F#" Value="abstract member AddAsync : HealthKit.HKSample[] -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;&#xA;override this.AddAsync : HealthKit.HKSample[] -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;" Usage="hKWorkoutBuilder.AddAsync samples" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Tuple&lt;System.Boolean,Foundation.NSError&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="samples" Type="HealthKit.HKSample[]" />
      </Parameters>
      <Docs>
        <param name="samples">The samples to add.</param>
        <summary>Adds the specified samples and returns a task that contains a success status and any error that occurred.</summary>
        <returns>A task that contains a success status and any error that occurred.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Tuple&lt;bool,Foundation.NSError&gt;&gt; AddAsync (HealthKit.HKWorkoutEvent[] workoutEvents);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Tuple`2&lt;bool, class Foundation.NSError&gt;&gt; AddAsync(class HealthKit.HKWorkoutEvent[] workoutEvents) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKWorkoutBuilder.AddAsync(HealthKit.HKWorkoutEvent[])" />
      <MemberSignature Language="F#" Value="abstract member AddAsync : HealthKit.HKWorkoutEvent[] -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;&#xA;override this.AddAsync : HealthKit.HKWorkoutEvent[] -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;" Usage="hKWorkoutBuilder.AddAsync workoutEvents" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Tuple&lt;System.Boolean,Foundation.NSError&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workoutEvents" Type="HealthKit.HKWorkoutEvent[]" />
      </Parameters>
      <Docs>
        <param name="workoutEvents">The workout events to add.</param>
        <summary>Adds the specified workout events and returns a task that contains a success status and any error that occurred.</summary>
        <returns>A task that contains a success status and any error that occurred.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginCollection">
      <MemberSignature Language="C#" Value="public virtual void BeginCollection (Foundation.NSDate startDate, HealthKit.HKWorkoutBuilderCompletionHandler completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginCollection(class Foundation.NSDate startDate, class HealthKit.HKWorkoutBuilderCompletionHandler completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKWorkoutBuilder.BeginCollection(Foundation.NSDate,HealthKit.HKWorkoutBuilderCompletionHandler)" />
      <MemberSignature Language="F#" Value="abstract member BeginCollection : Foundation.NSDate * HealthKit.HKWorkoutBuilderCompletionHandler -&gt; unit&#xA;override this.BeginCollection : Foundation.NSDate * HealthKit.HKWorkoutBuilderCompletionHandler -&gt; unit" Usage="hKWorkoutBuilder.BeginCollection (startDate, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("beginCollectionWithStartDate:completion:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startDate" Type="Foundation.NSDate" />
        <Parameter Name="completionHandler" Type="HealthKit.HKWorkoutBuilderCompletionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDHKWorkoutBuilderCompletionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startDate">The date and time the workout starts.</param>
        <param name="completionHandler">A handler to run when the operation completes.</param>
        <summary>Starts the workout at the sepcified time. Begins collecting workout data.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginCollectionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Tuple&lt;bool,Foundation.NSError&gt;&gt; BeginCollectionAsync (Foundation.NSDate startDate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Tuple`2&lt;bool, class Foundation.NSError&gt;&gt; BeginCollectionAsync(class Foundation.NSDate startDate) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKWorkoutBuilder.BeginCollectionAsync(Foundation.NSDate)" />
      <MemberSignature Language="F#" Value="abstract member BeginCollectionAsync : Foundation.NSDate -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;&#xA;override this.BeginCollectionAsync : Foundation.NSDate -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;" Usage="hKWorkoutBuilder.BeginCollectionAsync startDate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Tuple&lt;System.Boolean,Foundation.NSError&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startDate" Type="Foundation.NSDate" />
      </Parameters>
      <Docs>
        <param name="startDate">The date and time the workout starts.</param>
        <summary>Starts the workout at the sepcified time, begins collecting workout data, and returns a task that contains a success status and any error that occurred.</summary>
        <returns>A task that contains a success status and any error that occurred.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:HealthKit.HKWorkoutBuilder.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="HealthKit.HKWorkoutBuilder.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Device">
      <MemberSignature Language="C#" Value="public virtual HealthKit.HKDevice Device { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class HealthKit.HKDevice Device" />
      <MemberSignature Language="DocId" Value="P:HealthKit.HKWorkoutBuilder.Device" />
      <MemberSignature Language="F#" Value="member this.Device : HealthKit.HKDevice" Usage="HealthKit.HKWorkoutBuilder.Device" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("device", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HealthKit.HKDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the device that is providing the workout data.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DiscardWorkout">
      <MemberSignature Language="C#" Value="public virtual void DiscardWorkout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DiscardWorkout() cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKWorkoutBuilder.DiscardWorkout" />
      <MemberSignature Language="F#" Value="abstract member DiscardWorkout : unit -&gt; unit&#xA;override this.DiscardWorkout : unit -&gt; unit" Usage="hKWorkoutBuilder.DiscardWorkout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("discardWorkout")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Discards the workout.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndCollection">
      <MemberSignature Language="C#" Value="public virtual void EndCollection (Foundation.NSDate endDate, HealthKit.HKWorkoutBuilderCompletionHandler completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndCollection(class Foundation.NSDate endDate, class HealthKit.HKWorkoutBuilderCompletionHandler completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKWorkoutBuilder.EndCollection(Foundation.NSDate,HealthKit.HKWorkoutBuilderCompletionHandler)" />
      <MemberSignature Language="F#" Value="abstract member EndCollection : Foundation.NSDate * HealthKit.HKWorkoutBuilderCompletionHandler -&gt; unit&#xA;override this.EndCollection : Foundation.NSDate * HealthKit.HKWorkoutBuilderCompletionHandler -&gt; unit" Usage="hKWorkoutBuilder.EndCollection (endDate, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("endCollectionWithEndDate:completion:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endDate" Type="Foundation.NSDate" />
        <Parameter Name="completionHandler" Type="HealthKit.HKWorkoutBuilderCompletionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDHKWorkoutBuilderCompletionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="endDate">The end time of the workout.</param>
        <param name="completionHandler">A handler to run when the operation completes.</param>
        <summary>Ends the workout and runs a handler when the operation completes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndCollectionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Tuple&lt;bool,Foundation.NSError&gt;&gt; EndCollectionAsync (Foundation.NSDate endDate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Tuple`2&lt;bool, class Foundation.NSError&gt;&gt; EndCollectionAsync(class Foundation.NSDate endDate) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKWorkoutBuilder.EndCollectionAsync(Foundation.NSDate)" />
      <MemberSignature Language="F#" Value="abstract member EndCollectionAsync : Foundation.NSDate -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;&#xA;override this.EndCollectionAsync : Foundation.NSDate -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;" Usage="hKWorkoutBuilder.EndCollectionAsync endDate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Tuple&lt;System.Boolean,Foundation.NSError&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endDate" Type="Foundation.NSDate" />
      </Parameters>
      <Docs>
        <param name="endDate">The end time of the workout.</param>
        <summary>Ends the workout and returns a task that contains a success status and any error that occured.</summary>
        <returns>A task that contains a success status and any error that occured.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndDate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDate EndDate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDate EndDate" />
      <MemberSignature Language="DocId" Value="P:HealthKit.HKWorkoutBuilder.EndDate" />
      <MemberSignature Language="F#" Value="member this.EndDate : Foundation.NSDate" Usage="HealthKit.HKWorkoutBuilder.EndDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("endDate", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the end time of the workout.</summary>
        <value>The end time of the workout.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishWorkout">
      <MemberSignature Language="C#" Value="public virtual void FinishWorkout (HealthKit.HKWorkoutBuilderCompletionHandler completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishWorkout(class HealthKit.HKWorkoutBuilderCompletionHandler completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKWorkoutBuilder.FinishWorkout(HealthKit.HKWorkoutBuilderCompletionHandler)" />
      <MemberSignature Language="F#" Value="abstract member FinishWorkout : HealthKit.HKWorkoutBuilderCompletionHandler -&gt; unit&#xA;override this.FinishWorkout : HealthKit.HKWorkoutBuilderCompletionHandler -&gt; unit" Usage="hKWorkoutBuilder.FinishWorkout completionHandler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("finishWorkoutWithCompletion:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="completionHandler" Type="HealthKit.HKWorkoutBuilderCompletionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDHKWorkoutBuilderCompletionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="completionHandler">A handler to run when the operation completes.</param>
        <summary>Saves a new workout, created with the collected data, to the Health Store.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishWorkoutAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Tuple&lt;bool,Foundation.NSError&gt;&gt; FinishWorkoutAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Tuple`2&lt;bool, class Foundation.NSError&gt;&gt; FinishWorkoutAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKWorkoutBuilder.FinishWorkoutAsync" />
      <MemberSignature Language="F#" Value="abstract member FinishWorkoutAsync : unit -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;&#xA;override this.FinishWorkoutAsync : unit -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;" Usage="hKWorkoutBuilder.FinishWorkoutAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Tuple&lt;System.Boolean,Foundation.NSError&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Saves a new workout, created with the collected data, to the Health Store. Returns a handler that contains a success status and any error that occurred.</summary>
        <returns>A handler that contains a success status and any error that occurred.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElapsedTime">
      <MemberSignature Language="C#" Value="public virtual double GetElapsedTime (Foundation.NSDate date);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GetElapsedTime(class Foundation.NSDate date) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKWorkoutBuilder.GetElapsedTime(Foundation.NSDate)" />
      <MemberSignature Language="F#" Value="abstract member GetElapsedTime : Foundation.NSDate -&gt; double&#xA;override this.GetElapsedTime : Foundation.NSDate -&gt; double" Usage="hKWorkoutBuilder.GetElapsedTime date" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("elapsedTimeAtDate:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="date" Type="Foundation.NSDate" />
      </Parameters>
      <Docs>
        <param name="date">The time to check.</param>
        <summary>Returns the time between the start of the workout and <paramref name="date" />.</summary>
        <returns>The time between the start of the workout and <paramref name="date" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSeriesBuilder">
      <MemberSignature Language="C#" Value="public virtual HealthKit.HKSeriesBuilder GetSeriesBuilder (HealthKit.HKSeriesType seriesType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class HealthKit.HKSeriesBuilder GetSeriesBuilder(class HealthKit.HKSeriesType seriesType) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKWorkoutBuilder.GetSeriesBuilder(HealthKit.HKSeriesType)" />
      <MemberSignature Language="F#" Value="abstract member GetSeriesBuilder : HealthKit.HKSeriesType -&gt; HealthKit.HKSeriesBuilder&#xA;override this.GetSeriesBuilder : HealthKit.HKSeriesType -&gt; HealthKit.HKSeriesBuilder" Usage="hKWorkoutBuilder.GetSeriesBuilder seriesType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("seriesBuilderForType:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HealthKit.HKSeriesBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seriesType" Type="HealthKit.HKSeriesType" />
      </Parameters>
      <Docs>
        <param name="seriesType">The series type for which to get a builder.</param>
        <summary>Returns a builder for the series type.</summary>
        <returns>A builder for the series type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStatistics">
      <MemberSignature Language="C#" Value="public virtual HealthKit.HKStatistics GetStatistics (HealthKit.HKQuantityType quantityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class HealthKit.HKStatistics GetStatistics(class HealthKit.HKQuantityType quantityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKWorkoutBuilder.GetStatistics(HealthKit.HKQuantityType)" />
      <MemberSignature Language="F#" Value="abstract member GetStatistics : HealthKit.HKQuantityType -&gt; HealthKit.HKStatistics&#xA;override this.GetStatistics : HealthKit.HKQuantityType -&gt; HealthKit.HKStatistics" Usage="hKWorkoutBuilder.GetStatistics quantityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("statisticsForType:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HealthKit.HKStatistics</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="quantityType" Type="HealthKit.HKQuantityType" />
      </Parameters>
      <Docs>
        <param name="quantityType">The quantity type for which to get a statistics object.</param>
        <summary>Returns a statistics object for data of the specified quantity type.</summary>
        <returns>A statistics object for data of the specified quantity type</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Metadata">
      <MemberSignature Language="C#" Value="public HealthKit.HKMetadata Metadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class HealthKit.HKMetadata Metadata" />
      <MemberSignature Language="DocId" Value="P:HealthKit.HKWorkoutBuilder.Metadata" />
      <MemberSignature Language="F#" Value="member this.Metadata : HealthKit.HKMetadata" Usage="HealthKit.HKWorkoutBuilder.Metadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HealthKit.HKMetadata</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the workout metadata.</summary>
        <value>The workout metadata.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NativeMetadata">
      <MemberSignature Language="C#" Value="protected virtual Foundation.NSDictionary NativeMetadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDictionary NativeMetadata" />
      <MemberSignature Language="DocId" Value="P:HealthKit.HKWorkoutBuilder.NativeMetadata" />
      <MemberSignature Language="F#" Value="member this.NativeMetadata : Foundation.NSDictionary" Usage="HealthKit.HKWorkoutBuilder.NativeMetadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("metadata", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the metadata as a NSDictionary.</summary>
        <value>The metadata as a NSDictionary.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartDate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDate StartDate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDate StartDate" />
      <MemberSignature Language="DocId" Value="P:HealthKit.HKWorkoutBuilder.StartDate" />
      <MemberSignature Language="F#" Value="member this.StartDate : Foundation.NSDate" Usage="HealthKit.HKWorkoutBuilder.StartDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("startDate", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the start time of the workout.</summary>
        <value>The start time of the workout.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkoutConfiguration">
      <MemberSignature Language="C#" Value="public virtual HealthKit.HKWorkoutConfiguration WorkoutConfiguration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class HealthKit.HKWorkoutConfiguration WorkoutConfiguration" />
      <MemberSignature Language="DocId" Value="P:HealthKit.HKWorkoutBuilder.WorkoutConfiguration" />
      <MemberSignature Language="F#" Value="member this.WorkoutConfiguration : HealthKit.HKWorkoutConfiguration" Usage="HealthKit.HKWorkoutBuilder.WorkoutConfiguration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("workoutConfiguration", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HealthKit.HKWorkoutConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the workout configuration.</summary>
        <value>The workout configuration.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkoutEvents">
      <MemberSignature Language="C#" Value="public virtual HealthKit.HKWorkoutEvent[] WorkoutEvents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class HealthKit.HKWorkoutEvent[] WorkoutEvents" />
      <MemberSignature Language="DocId" Value="P:HealthKit.HKWorkoutBuilder.WorkoutEvents" />
      <MemberSignature Language="F#" Value="member this.WorkoutEvents : HealthKit.HKWorkoutEvent[]" Usage="HealthKit.HKWorkoutBuilder.WorkoutEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("workoutEvents", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HealthKit.HKWorkoutEvent[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an array that contains the workout events.</summary>
        <value>An array that contains the workout events.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
