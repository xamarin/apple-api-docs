<Type Name="HKQuantitySample" FullName="HealthKit.HKQuantitySample">
  <TypeSignature Language="C#" Value="public class HKQuantitySample : HealthKit.HKSample" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HKQuantitySample extends HealthKit.HKSample" />
  <TypeSignature Language="DocId" Value="T:HealthKit.HKQuantitySample" />
  <TypeSignature Language="F#" Value="type HKQuantitySample = class&#xA;    inherit HKSample" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>HealthKit.HKSample</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("HKQuantitySample", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 2, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <see cref="T:HealthKit.HKSample" /> that has a magnitude (see <see cref="P:HealthKit.HKQuantitySample.Quantity" />).</summary>
    <remarks>
      <para>The following examples show how you can create a HKQuantitySample, one using standard C#, and another using named parameters to make their use more obvious:</para>
      <para />
      <example>
        <code lang="C#"><![CDATA[var bodyTemperature = HKQuantityType.Create (HKQuantityTypeIdentifier.BodyTemperature);
var temp = HKQuantity.FromQuantity (HKUnit.DegreeFahrenheit, 99);
var sample = HKQuantitySample.FromType (bodyTemperature, temp, NSDate.Now, NSDate.Now, new HKMetadata () {
	BodyTemperatureSensorLocation = HKBodyTemperatureSensorLocation.Mouth
});

        var sample2 = HKQuantitySample.FromType (
    quantityType: HKQuantityType.Create (HKQuantityTypeIdentifier.BodyTemperature),
    quantity: HKQuantity.FromQuantity (HKUnit.DegreeFahrenheit, 99),
    startDate: NSDate.Now, 
    endDate: NSDate.Now, 
    metadata: new HKMetadata () {
	BodyTemperatureSensorLocation = HKBodyTemperatureSensorLocation.Mouth
    }
);]]></code>
      </example>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/HealthKit/Reference/HKQuantitySample_Class/index.html">Apple documentation for <c>HKQuantitySample</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HKQuantitySample (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuantitySample.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new HealthKit.HKQuantitySample : Foundation.NSCoder -&gt; HealthKit.HKQuantitySample" Usage="new HealthKit.HKQuantitySample coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HKQuantitySample (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuantitySample.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new HealthKit.HKQuantitySample : Foundation.NSObjectFlag -&gt; HealthKit.HKQuantitySample" Usage="new HealthKit.HKQuantitySample t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal HKQuantitySample (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuantitySample.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new HealthKit.HKQuantitySample : nativeint -&gt; HealthKit.HKQuantitySample" Usage="new HealthKit.HKQuantitySample handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:HealthKit.HKQuantitySample.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="HealthKit.HKQuantitySample.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual nint Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint Count" />
      <MemberSignature Language="DocId" Value="P:HealthKit.HKQuantitySample.Count" />
      <MemberSignature Language="F#" Value="member this.Count : nint" Usage="HealthKit.HKQuantitySample.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 5, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("count")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 5, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of quantities that comprise the sample.</summary>
        <value>The number of quantities that comprise the sample.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromType">
      <MemberSignature Language="C#" Value="public static HealthKit.HKQuantitySample FromType (HealthKit.HKQuantityType quantityType, HealthKit.HKQuantity quantity, Foundation.NSDate startDate, Foundation.NSDate endDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class HealthKit.HKQuantitySample FromType(class HealthKit.HKQuantityType quantityType, class HealthKit.HKQuantity quantity, class Foundation.NSDate startDate, class Foundation.NSDate endDate) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuantitySample.FromType(HealthKit.HKQuantityType,HealthKit.HKQuantity,Foundation.NSDate,Foundation.NSDate)" />
      <MemberSignature Language="F#" Value="static member FromType : HealthKit.HKQuantityType * HealthKit.HKQuantity * Foundation.NSDate * Foundation.NSDate -&gt; HealthKit.HKQuantitySample" Usage="HealthKit.HKQuantitySample.FromType (quantityType, quantity, startDate, endDate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("quantitySampleWithType:quantity:startDate:endDate:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HealthKit.HKQuantitySample</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="quantityType" Type="HealthKit.HKQuantityType" />
        <Parameter Name="quantity" Type="HealthKit.HKQuantity" />
        <Parameter Name="startDate" Type="Foundation.NSDate" />
        <Parameter Name="endDate" Type="Foundation.NSDate" />
      </Parameters>
      <Docs>
        <param name="quantityType">To be added.</param>
        <param name="quantity">To be added.</param>
        <param name="startDate">To be added.</param>
        <param name="endDate">To be added.</param>
        <summary>Creates and returns a new <see cref="T:HealthKit.HKQuantitySample" /> for the specified data.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromType">
      <MemberSignature Language="C#" Value="public static HealthKit.HKQuantitySample FromType (HealthKit.HKQuantityType quantityType, HealthKit.HKQuantity quantity, Foundation.NSDate startDate, Foundation.NSDate endDate, Foundation.NSDictionary metadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class HealthKit.HKQuantitySample FromType(class HealthKit.HKQuantityType quantityType, class HealthKit.HKQuantity quantity, class Foundation.NSDate startDate, class Foundation.NSDate endDate, class Foundation.NSDictionary metadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuantitySample.FromType(HealthKit.HKQuantityType,HealthKit.HKQuantity,Foundation.NSDate,Foundation.NSDate,Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="static member FromType : HealthKit.HKQuantityType * HealthKit.HKQuantity * Foundation.NSDate * Foundation.NSDate * Foundation.NSDictionary -&gt; HealthKit.HKQuantitySample" Usage="HealthKit.HKQuantitySample.FromType (quantityType, quantity, startDate, endDate, metadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("quantitySampleWithType:quantity:startDate:endDate:metadata:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HealthKit.HKQuantitySample</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="quantityType" Type="HealthKit.HKQuantityType" />
        <Parameter Name="quantity" Type="HealthKit.HKQuantity" />
        <Parameter Name="startDate" Type="Foundation.NSDate" />
        <Parameter Name="endDate" Type="Foundation.NSDate" />
        <Parameter Name="metadata" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="quantityType">To be added.</param>
        <param name="quantity">To be added.</param>
        <param name="startDate">To be added.</param>
        <param name="endDate">To be added.</param>
        <param name="metadata">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new HKQuantitySample, using a loosely typed NSDictionary for metadata.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromType">
      <MemberSignature Language="C#" Value="public static HealthKit.HKQuantitySample FromType (HealthKit.HKQuantityType quantityType, HealthKit.HKQuantity quantity, Foundation.NSDate startDate, Foundation.NSDate endDate, HealthKit.HKMetadata metadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class HealthKit.HKQuantitySample FromType(class HealthKit.HKQuantityType quantityType, class HealthKit.HKQuantity quantity, class Foundation.NSDate startDate, class Foundation.NSDate endDate, class HealthKit.HKMetadata metadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuantitySample.FromType(HealthKit.HKQuantityType,HealthKit.HKQuantity,Foundation.NSDate,Foundation.NSDate,HealthKit.HKMetadata)" />
      <MemberSignature Language="F#" Value="static member FromType : HealthKit.HKQuantityType * HealthKit.HKQuantity * Foundation.NSDate * Foundation.NSDate * HealthKit.HKMetadata -&gt; HealthKit.HKQuantitySample" Usage="HealthKit.HKQuantitySample.FromType (quantityType, quantity, startDate, endDate, metadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HealthKit.HKQuantitySample</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="quantityType" Type="HealthKit.HKQuantityType" />
        <Parameter Name="quantity" Type="HealthKit.HKQuantity" />
        <Parameter Name="startDate" Type="Foundation.NSDate" />
        <Parameter Name="endDate" Type="Foundation.NSDate" />
        <Parameter Name="metadata" Type="HealthKit.HKMetadata" />
      </Parameters>
      <Docs>
        <param name="quantityType">To be added.</param>
        <param name="quantity">To be added.</param>
        <param name="startDate">To be added.</param>
        <param name="endDate">To be added.</param>
        <param name="metadata">To be added.</param>
        <summary>Creates a new HKQuantitySample, using a stronglty typed HKMetadata for the metadata.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromType">
      <MemberSignature Language="C#" Value="public static HealthKit.HKQuantitySample FromType (HealthKit.HKQuantityType quantityType, HealthKit.HKQuantity quantity, Foundation.NSDate startDate, Foundation.NSDate endDate, HealthKit.HKDevice device, Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt; metadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class HealthKit.HKQuantitySample FromType(class HealthKit.HKQuantityType quantityType, class HealthKit.HKQuantity quantity, class Foundation.NSDate startDate, class Foundation.NSDate endDate, class HealthKit.HKDevice device, class Foundation.NSDictionary`2&lt;class Foundation.NSString, class Foundation.NSObject&gt; metadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuantitySample.FromType(HealthKit.HKQuantityType,HealthKit.HKQuantity,Foundation.NSDate,Foundation.NSDate,HealthKit.HKDevice,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject})" />
      <MemberSignature Language="F#" Value="static member FromType : HealthKit.HKQuantityType * HealthKit.HKQuantity * Foundation.NSDate * Foundation.NSDate * HealthKit.HKDevice * Foundation.NSDictionary&lt;Foundation.NSString, Foundation.NSObject&gt; -&gt; HealthKit.HKQuantitySample" Usage="HealthKit.HKQuantitySample.FromType (quantityType, quantity, startDate, endDate, device, metadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("quantitySampleWithType:quantity:startDate:endDate:device:metadata:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HealthKit.HKQuantitySample</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="quantityType" Type="HealthKit.HKQuantityType" />
        <Parameter Name="quantity" Type="HealthKit.HKQuantity" />
        <Parameter Name="startDate" Type="Foundation.NSDate" />
        <Parameter Name="endDate" Type="Foundation.NSDate" />
        <Parameter Name="device" Type="HealthKit.HKDevice" />
        <Parameter Name="metadata" Type="Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt;" />
      </Parameters>
      <Docs>
        <param name="quantityType">To be added.</param>
        <param name="quantity">To be added.</param>
        <param name="startDate">To be added.</param>
        <param name="endDate">To be added.</param>
        <param name="device">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="metadata">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates and returns a new <see cref="T:HealthKit.HKQuantitySample" /> for the specified data.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Quantity">
      <MemberSignature Language="C#" Value="public virtual HealthKit.HKQuantity Quantity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class HealthKit.HKQuantity Quantity" />
      <MemberSignature Language="DocId" Value="P:HealthKit.HKQuantitySample.Quantity" />
      <MemberSignature Language="F#" Value="member this.Quantity : HealthKit.HKQuantity" Usage="HealthKit.HKQuantitySample.Quantity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("quantity")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("quantity", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HealthKit.HKQuantity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the quantity for this sample.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantityType">
      <MemberSignature Language="C#" Value="public virtual HealthKit.HKQuantityType QuantityType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class HealthKit.HKQuantityType QuantityType" />
      <MemberSignature Language="DocId" Value="P:HealthKit.HKQuantitySample.QuantityType" />
      <MemberSignature Language="F#" Value="member this.QuantityType : HealthKit.HKQuantityType" Usage="HealthKit.HKQuantitySample.QuantityType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("quantityType")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("quantityType", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HealthKit.HKQuantityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the quantity type for this sample.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
