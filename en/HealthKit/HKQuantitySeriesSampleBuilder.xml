<Type Name="HKQuantitySeriesSampleBuilder" FullName="HealthKit.HKQuantitySeriesSampleBuilder">
  <TypeSignature Language="C#" Value="public class HKQuantitySeriesSampleBuilder : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HKQuantitySeriesSampleBuilder extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:HealthKit.HKQuantitySeriesSampleBuilder" />
  <TypeSignature Language="F#" Value="type HKQuantitySeriesSampleBuilder = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("HKQuantitySeriesSampleBuilder", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 5, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Builds quantity sample series.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HKQuantitySeriesSampleBuilder (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuantitySeriesSampleBuilder.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new HealthKit.HKQuantitySeriesSampleBuilder : Foundation.NSObjectFlag -&gt; HealthKit.HKQuantitySeriesSampleBuilder" Usage="new HealthKit.HKQuantitySeriesSampleBuilder t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal HKQuantitySeriesSampleBuilder (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuantitySeriesSampleBuilder.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new HealthKit.HKQuantitySeriesSampleBuilder : nativeint -&gt; HealthKit.HKQuantitySeriesSampleBuilder" Usage="new HealthKit.HKQuantitySeriesSampleBuilder handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HKQuantitySeriesSampleBuilder (HealthKit.HKHealthStore healthStore, HealthKit.HKQuantityType quantityType, Foundation.NSDate startDate, HealthKit.HKDevice device);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class HealthKit.HKHealthStore healthStore, class HealthKit.HKQuantityType quantityType, class Foundation.NSDate startDate, class HealthKit.HKDevice device) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuantitySeriesSampleBuilder.#ctor(HealthKit.HKHealthStore,HealthKit.HKQuantityType,Foundation.NSDate,HealthKit.HKDevice)" />
      <MemberSignature Language="F#" Value="new HealthKit.HKQuantitySeriesSampleBuilder : HealthKit.HKHealthStore * HealthKit.HKQuantityType * Foundation.NSDate * HealthKit.HKDevice -&gt; HealthKit.HKQuantitySeriesSampleBuilder" Usage="new HealthKit.HKQuantitySeriesSampleBuilder (healthStore, quantityType, startDate, device)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithHealthStore:quantityType:startDate:device:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="healthStore" Type="HealthKit.HKHealthStore" />
        <Parameter Name="quantityType" Type="HealthKit.HKQuantityType" />
        <Parameter Name="startDate" Type="Foundation.NSDate" />
        <Parameter Name="device" Type="HealthKit.HKDevice" />
      </Parameters>
      <Docs>
        <param name="healthStore">The HealthKit Store for the builder.</param>
        <param name="quantityType">The quantity type that will be added to the series.</param>
        <param name="startDate">The start time of the series.</param>
        <param name="device">The device that is generating the data.</param>
        <summary>Creates a new quantity series builder.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:HealthKit.HKQuantitySeriesSampleBuilder.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="HealthKit.HKQuantitySeriesSampleBuilder.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Device">
      <MemberSignature Language="C#" Value="public virtual HealthKit.HKDevice Device { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class HealthKit.HKDevice Device" />
      <MemberSignature Language="DocId" Value="P:HealthKit.HKQuantitySeriesSampleBuilder.Device" />
      <MemberSignature Language="F#" Value="member this.Device : HealthKit.HKDevice" Usage="HealthKit.HKQuantitySeriesSampleBuilder.Device" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("device", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HealthKit.HKDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the device that is generating the data.</summary>
        <value>The device that is generating the data.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Discard">
      <MemberSignature Language="C#" Value="public virtual void Discard ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Discard() cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuantitySeriesSampleBuilder.Discard" />
      <MemberSignature Language="F#" Value="abstract member Discard : unit -&gt; unit&#xA;override this.Discard : unit -&gt; unit" Usage="hKQuantitySeriesSampleBuilder.Discard " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("discard")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Discards the samples in the series.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishSeries">
      <MemberSignature Language="C#" Value="protected virtual void FinishSeries (Foundation.NSDictionary metadata, HealthKit.HKQuantitySeriesSampleBuilderFinishSeriesDelegate completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FinishSeries(class Foundation.NSDictionary metadata, class HealthKit.HKQuantitySeriesSampleBuilderFinishSeriesDelegate completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuantitySeriesSampleBuilder.FinishSeries(Foundation.NSDictionary,HealthKit.HKQuantitySeriesSampleBuilderFinishSeriesDelegate)" />
      <MemberSignature Language="F#" Value="abstract member FinishSeries : Foundation.NSDictionary * HealthKit.HKQuantitySeriesSampleBuilderFinishSeriesDelegate -&gt; unit&#xA;override this.FinishSeries : Foundation.NSDictionary * HealthKit.HKQuantitySeriesSampleBuilderFinishSeriesDelegate -&gt; unit" Usage="hKQuantitySeriesSampleBuilder.FinishSeries (metadata, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("finishSeriesWithMetadata:completion:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="Foundation.NSDictionary" />
        <Parameter Name="completionHandler" Type="HealthKit.HKQuantitySeriesSampleBuilderFinishSeriesDelegate">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDHKQuantitySeriesSampleBuilderFinishSeriesDelegate))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="metadata">The metadata to add to the series.</param>
        <param name="completionHandler">A handler to run when the operation completes.</param>
        <summary>Finishes and saves the series.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishSeries">
      <MemberSignature Language="C#" Value="public void FinishSeries (HealthKit.HKMetadata metadata, HealthKit.HKQuantitySeriesSampleBuilderFinishSeriesDelegate completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FinishSeries(class HealthKit.HKMetadata metadata, class HealthKit.HKQuantitySeriesSampleBuilderFinishSeriesDelegate completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuantitySeriesSampleBuilder.FinishSeries(HealthKit.HKMetadata,HealthKit.HKQuantitySeriesSampleBuilderFinishSeriesDelegate)" />
      <MemberSignature Language="F#" Value="member this.FinishSeries : HealthKit.HKMetadata * HealthKit.HKQuantitySeriesSampleBuilderFinishSeriesDelegate -&gt; unit" Usage="hKQuantitySeriesSampleBuilder.FinishSeries (metadata, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="HealthKit.HKMetadata" />
        <Parameter Name="completionHandler" Type="HealthKit.HKQuantitySeriesSampleBuilderFinishSeriesDelegate">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDHKQuantitySeriesSampleBuilderFinishSeriesDelegate))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="metadata">The metadata to add to the series.</param>
        <param name="completionHandler">A handler to run when the operation completes.</param>
        <summary>Finishes and saves the series.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishSeriesAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task&lt;HealthKit.HKQuantitySample[]&gt; FinishSeriesAsync (Foundation.NSDictionary metadata);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class HealthKit.HKQuantitySample[]&gt; FinishSeriesAsync(class Foundation.NSDictionary metadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuantitySeriesSampleBuilder.FinishSeriesAsync(Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="abstract member FinishSeriesAsync : Foundation.NSDictionary -&gt; System.Threading.Tasks.Task&lt;HealthKit.HKQuantitySample[]&gt;&#xA;override this.FinishSeriesAsync : Foundation.NSDictionary -&gt; System.Threading.Tasks.Task&lt;HealthKit.HKQuantitySample[]&gt;" Usage="hKQuantitySeriesSampleBuilder.FinishSeriesAsync metadata" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;HealthKit.HKQuantitySample[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="metadata">The metadata to add to the series.</param>
        <summary>Finishes and saves the series and returns a task that contains the sample data.</summary>
        <returns>A task that contains the sample data.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishSeriesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;HealthKit.HKQuantitySample[]&gt; FinishSeriesAsync (HealthKit.HKMetadata metadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class HealthKit.HKQuantitySample[]&gt; FinishSeriesAsync(class HealthKit.HKMetadata metadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuantitySeriesSampleBuilder.FinishSeriesAsync(HealthKit.HKMetadata)" />
      <MemberSignature Language="F#" Value="member this.FinishSeriesAsync : HealthKit.HKMetadata -&gt; System.Threading.Tasks.Task&lt;HealthKit.HKQuantitySample[]&gt;" Usage="hKQuantitySeriesSampleBuilder.FinishSeriesAsync metadata" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;HealthKit.HKQuantitySample[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="HealthKit.HKMetadata" />
      </Parameters>
      <Docs>
        <param name="metadata">The metadata to add to the series.</param>
        <summary>Finishes and saves the series and returns a task that contains the sample data.</summary>
        <returns>A task that contains the sample data.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual bool Insert (HealthKit.HKQuantity quantity, Foundation.NSDate date, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Insert(class HealthKit.HKQuantity quantity, class Foundation.NSDate date, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuantitySeriesSampleBuilder.Insert(HealthKit.HKQuantity,Foundation.NSDate,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member Insert : HealthKit.HKQuantity * Foundation.NSDate *  -&gt; bool&#xA;override this.Insert : HealthKit.HKQuantity * Foundation.NSDate *  -&gt; bool" Usage="hKQuantitySeriesSampleBuilder.Insert (quantity, date, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("insertQuantity:date:error:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="quantity" Type="HealthKit.HKQuantity" />
        <Parameter Name="date" Type="Foundation.NSDate" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="quantity">The quantity data to insert.</param>
        <param name="date">The time at which to insert the data.</param>
        <param name="error">A location to store any error that occurs.</param>
        <summary>Inserts a quantity at a specified time.</summary>
        <returns>
          <see langword="true" /> if no error occurs. Otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuantityType">
      <MemberSignature Language="C#" Value="public virtual HealthKit.HKQuantityType QuantityType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class HealthKit.HKQuantityType QuantityType" />
      <MemberSignature Language="DocId" Value="P:HealthKit.HKQuantitySeriesSampleBuilder.QuantityType" />
      <MemberSignature Language="F#" Value="member this.QuantityType : HealthKit.HKQuantityType" Usage="HealthKit.HKQuantitySeriesSampleBuilder.QuantityType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("quantityType", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HealthKit.HKQuantityType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of data in the series.</summary>
        <value>The type of data in the series.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartDate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDate StartDate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDate StartDate" />
      <MemberSignature Language="DocId" Value="P:HealthKit.HKQuantitySeriesSampleBuilder.StartDate" />
      <MemberSignature Language="F#" Value="member this.StartDate : Foundation.NSDate" Usage="HealthKit.HKQuantitySeriesSampleBuilder.StartDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("startDate", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the start time of the series.</summary>
        <value>The start time of the series.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
