<Type Name="HKQuery" FullName="HealthKit.HKQuery">
  <TypeSignature Language="C#" Value="public class HKQuery : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HKQuery extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:HealthKit.HKQuery" />
  <TypeSignature Language="F#" Value="type HKQuery = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("HKQuery", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 2, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Base class for querying Health Kit databases.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/HealthKit/Reference/HKQuery_Class/index.html">Apple documentation for <c>HKQuery</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HKQuery (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new HealthKit.HKQuery : Foundation.NSObjectFlag -&gt; HealthKit.HKQuery" Usage="new HealthKit.HKQuery t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal HKQuery (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new HealthKit.HKQuery : nativeint -&gt; HealthKit.HKQuery" Usage="new HealthKit.HKQuery handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:HealthKit.HKQuery.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="HealthKit.HKQuery.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForActivitySummariesBetween">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForActivitySummariesBetween (Foundation.NSDateComponents startDateComponents, Foundation.NSDateComponents endDateComponents);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForActivitySummariesBetween(class Foundation.NSDateComponents startDateComponents, class Foundation.NSDateComponents endDateComponents) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForActivitySummariesBetween(Foundation.NSDateComponents,Foundation.NSDateComponents)" />
      <MemberSignature Language="F#" Value="static member GetPredicateForActivitySummariesBetween : Foundation.NSDateComponents * Foundation.NSDateComponents -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForActivitySummariesBetween (startDateComponents, endDateComponents)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForActivitySummariesBetweenStartDateComponents:endDateComponents:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 3, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 2, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startDateComponents" Type="Foundation.NSDateComponents" />
        <Parameter Name="endDateComponents" Type="Foundation.NSDateComponents" />
      </Parameters>
      <Docs>
        <param name="startDateComponents">To be added.</param>
        <param name="endDateComponents">To be added.</param>
        <summary>Returns a predicate that matches activity summaries for activities that occurred between the provided dates.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForActivitySummary">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForActivitySummary (Foundation.NSDateComponents dateComponents);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForActivitySummary(class Foundation.NSDateComponents dateComponents) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForActivitySummary(Foundation.NSDateComponents)" />
      <MemberSignature Language="F#" Value="static member GetPredicateForActivitySummary : Foundation.NSDateComponents -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForActivitySummary dateComponents" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForActivitySummaryWithDateComponents:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 3, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 2, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateComponents" Type="Foundation.NSDateComponents" />
      </Parameters>
      <Docs>
        <param name="dateComponents">To be added.</param>
        <summary>Returns a predicate that matches the activity summary for activities that occurred on the specifie day.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForCategorySamples">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForCategorySamples (Foundation.NSPredicateOperatorType operatorType, nint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForCategorySamples(valuetype Foundation.NSPredicateOperatorType operatorType, valuetype System.nint value) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForCategorySamples(Foundation.NSPredicateOperatorType,System.nint)" />
      <MemberSignature Language="F#" Value="static member GetPredicateForCategorySamples : Foundation.NSPredicateOperatorType * nint -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForCategorySamples (operatorType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForCategorySamplesWithOperatorType:value:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorType" Type="Foundation.NSPredicateOperatorType" />
        <Parameter Name="value" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="operatorType">To be added.</param>
        <param name="value">To be added.</param>
        <summary> Creates and returns a predicate that can be used to check the value of a category sample.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForClinicalRecords">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForClinicalRecords (HealthKit.HKFhirResourceType resourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForClinicalRecords(valuetype HealthKit.HKFhirResourceType resourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForClinicalRecords(HealthKit.HKFhirResourceType)" />
      <MemberSignature Language="F#" Value="static member GetPredicateForClinicalRecords : HealthKit.HKFhirResourceType -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForClinicalRecords resourceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceType" Type="HealthKit.HKFhirResourceType" />
      </Parameters>
      <Docs>
        <param name="resourceType">The resource type for which to generate a query predicate.</param>
        <summary>Creates and returns a predicate for a Fast Healthcare Interoperability Resources record of the specified resource type.</summary>
        <returns>A predicate for a Fast Healthcare Interoperability Resources record of the specified resource type.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForClinicalRecords">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForClinicalRecords (HealthKit.HKSource source, HealthKit.HKFhirResourceType resourceType, string identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForClinicalRecords(class HealthKit.HKSource source, valuetype HealthKit.HKFhirResourceType resourceType, string identifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForClinicalRecords(HealthKit.HKSource,HealthKit.HKFhirResourceType,System.String)" />
      <MemberSignature Language="F#" Value="static member GetPredicateForClinicalRecords : HealthKit.HKSource * HealthKit.HKFhirResourceType * string -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForClinicalRecords (source, resourceType, identifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="HealthKit.HKSource" />
        <Parameter Name="resourceType" Type="HealthKit.HKFhirResourceType" />
        <Parameter Name="identifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">The HealthKit source for the predicate.</param>
        <param name="resourceType">The resource type for which to generate a query predicate.</param>
        <param name="identifier">The record identifier.</param>
        <summary>Creates and returns a predicate for a Fast Healthcare Interoperability Resources record for the specified query parameters.</summary>
        <returns>A predicate for a Fast Healthcare Interoperability Resources record oor the specified query parameters.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForDuration">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForDuration (Foundation.NSPredicateOperatorType operatorType, double duration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForDuration(valuetype Foundation.NSPredicateOperatorType operatorType, float64 duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForDuration(Foundation.NSPredicateOperatorType,System.Double)" />
      <MemberSignature Language="F#" Value="static member GetPredicateForDuration : Foundation.NSPredicateOperatorType * double -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForDuration (operatorType, duration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForWorkoutsWithOperatorType:duration:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorType" Type="Foundation.NSPredicateOperatorType" />
        <Parameter Name="duration" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="operatorType">To be added.</param>
        <param name="duration">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get workouts by duration.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForMetadataKey">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForMetadataKey (Foundation.NSString metadataKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForMetadataKey(class Foundation.NSString metadataKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForMetadataKey(Foundation.NSString)" />
      <MemberSignature Language="F#" Value="static member GetPredicateForMetadataKey : Foundation.NSString -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForMetadataKey metadataKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForObjectsWithMetadataKey:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadataKey" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="metadataKey">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get objects by metadata key.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForMetadataKey">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForMetadataKey (Foundation.NSString metadataKey, Foundation.NSObject[] allowedValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForMetadataKey(class Foundation.NSString metadataKey, class Foundation.NSObject[] allowedValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForMetadataKey(Foundation.NSString,Foundation.NSObject[])" />
      <MemberSignature Language="F#" Value="static member GetPredicateForMetadataKey : Foundation.NSString * Foundation.NSObject[] -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForMetadataKey (metadataKey, allowedValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForObjectsWithMetadataKey:allowedValues:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadataKey" Type="Foundation.NSString" />
        <Parameter Name="allowedValues" Type="Foundation.NSObject[]" />
      </Parameters>
      <Docs>
        <param name="metadataKey">To be added.</param>
        <param name="allowedValues">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get objects by metadata key and value.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForMetadataKey">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForMetadataKey (Foundation.NSString metadataKey, Foundation.NSPredicateOperatorType operatorType, Foundation.NSObject value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForMetadataKey(class Foundation.NSString metadataKey, valuetype Foundation.NSPredicateOperatorType operatorType, class Foundation.NSObject value) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForMetadataKey(Foundation.NSString,Foundation.NSPredicateOperatorType,Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="static member GetPredicateForMetadataKey : Foundation.NSString * Foundation.NSPredicateOperatorType * Foundation.NSObject -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForMetadataKey (metadataKey, operatorType, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForObjectsWithMetadataKey:operatorType:value:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadataKey" Type="Foundation.NSString" />
        <Parameter Name="operatorType" Type="Foundation.NSPredicateOperatorType" />
        <Parameter Name="value" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="metadataKey">To be added.</param>
        <param name="operatorType">To be added.</param>
        <param name="value">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get objects by metadata key and value.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForObject">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForObject (Foundation.NSUuid objectUuid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForObject(class Foundation.NSUuid objectUuid) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForObject(Foundation.NSUuid)" />
      <MemberSignature Language="F#" Value="static member GetPredicateForObject : Foundation.NSUuid -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForObject objectUuid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForObjectWithUUID:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectUuid" Type="Foundation.NSUuid" />
      </Parameters>
      <Docs>
        <param name="objectUuid">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get objects by UUID.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForObjects">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForObjects (Foundation.NSSet objectUuids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForObjects(class Foundation.NSSet objectUuids) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForObjects(Foundation.NSSet)" />
      <MemberSignature Language="F#" Value="static member GetPredicateForObjects : Foundation.NSSet -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForObjects objectUuids" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForObjectsWithUUIDs:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectUuids" Type="Foundation.NSSet" />
      </Parameters>
      <Docs>
        <param name="objectUuids">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get multiple objects by UUID.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForObjectsFromDevices">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForObjectsFromDevices (Foundation.NSSet&lt;HealthKit.HKDevice&gt; devices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForObjectsFromDevices(class Foundation.NSSet`1&lt;class HealthKit.HKDevice&gt; devices) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForObjectsFromDevices(Foundation.NSSet{HealthKit.HKDevice})" />
      <MemberSignature Language="F#" Value="static member GetPredicateForObjectsFromDevices : Foundation.NSSet&lt;HealthKit.HKDevice&gt; -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForObjectsFromDevices devices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForObjectsFromDevices:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="devices" Type="Foundation.NSSet&lt;HealthKit.HKDevice&gt;" />
      </Parameters>
      <Docs>
        <param name="devices">To be added.</param>
        <summary>Returns a predicate that matches objects for activities from the specified devices.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForObjectsFromSource">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForObjectsFromSource (HealthKit.HKSource source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForObjectsFromSource(class HealthKit.HKSource source) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForObjectsFromSource(HealthKit.HKSource)" />
      <MemberSignature Language="F#" Value="static member GetPredicateForObjectsFromSource : HealthKit.HKSource -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForObjectsFromSource source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForObjectsFromSource:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="HealthKit.HKSource" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get objects from a specified source.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForObjectsFromSourceRevisions">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForObjectsFromSourceRevisions (Foundation.NSSet&lt;HealthKit.HKSourceRevision&gt; sourceRevisions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForObjectsFromSourceRevisions(class Foundation.NSSet`1&lt;class HealthKit.HKSourceRevision&gt; sourceRevisions) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForObjectsFromSourceRevisions(Foundation.NSSet{HealthKit.HKSourceRevision})" />
      <MemberSignature Language="F#" Value="static member GetPredicateForObjectsFromSourceRevisions : Foundation.NSSet&lt;HealthKit.HKSourceRevision&gt; -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForObjectsFromSourceRevisions sourceRevisions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForObjectsFromSourceRevisions:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceRevisions" Type="Foundation.NSSet&lt;HealthKit.HKSourceRevision&gt;" />
      </Parameters>
      <Docs>
        <param name="sourceRevisions">To be added.</param>
        <summary>Returns a predicate that matches objects from the specified source revisions.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForObjectsFromSources">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForObjectsFromSources (Foundation.NSSet sources);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForObjectsFromSources(class Foundation.NSSet sources) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForObjectsFromSources(Foundation.NSSet)" />
      <MemberSignature Language="F#" Value="static member GetPredicateForObjectsFromSources : Foundation.NSSet -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForObjectsFromSources sources" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForObjectsFromSources:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sources" Type="Foundation.NSSet" />
      </Parameters>
      <Docs>
        <param name="sources">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get objects from a set of sources.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForObjectsFromWorkout">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForObjectsFromWorkout (HealthKit.HKWorkout workout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForObjectsFromWorkout(class HealthKit.HKWorkout workout) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForObjectsFromWorkout(HealthKit.HKWorkout)" />
      <MemberSignature Language="F#" Value="static member GetPredicateForObjectsFromWorkout : HealthKit.HKWorkout -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForObjectsFromWorkout workout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForObjectsFromWorkout:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workout" Type="HealthKit.HKWorkout" />
      </Parameters>
      <Docs>
        <param name="workout">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get objects from a workout.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForObjectsWithDeviceProperty">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForObjectsWithDeviceProperty (string key, Foundation.NSSet&lt;Foundation.NSString&gt; allowedValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForObjectsWithDeviceProperty(string key, class Foundation.NSSet`1&lt;class Foundation.NSString&gt; allowedValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForObjectsWithDeviceProperty(System.String,Foundation.NSSet{Foundation.NSString})" />
      <MemberSignature Language="F#" Value="static member GetPredicateForObjectsWithDeviceProperty : string * Foundation.NSSet&lt;Foundation.NSString&gt; -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForObjectsWithDeviceProperty (key, allowedValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForObjectsWithDeviceProperty:allowedValues:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="allowedValues" Type="Foundation.NSSet&lt;Foundation.NSString&gt;" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="allowedValues">To be added.</param>
        <summary>Returns a predicate that matches objects that have any of the allowed values for the property that is identified by the specified <paramref name="key" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForQuantitySamples">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForQuantitySamples (Foundation.NSPredicateOperatorType operatorType, HealthKit.HKQuantity quantity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForQuantitySamples(valuetype Foundation.NSPredicateOperatorType operatorType, class HealthKit.HKQuantity quantity) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForQuantitySamples(Foundation.NSPredicateOperatorType,HealthKit.HKQuantity)" />
      <MemberSignature Language="F#" Value="static member GetPredicateForQuantitySamples : Foundation.NSPredicateOperatorType * HealthKit.HKQuantity -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForQuantitySamples (operatorType, quantity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForQuantitySamplesWithOperatorType:quantity:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorType" Type="Foundation.NSPredicateOperatorType" />
        <Parameter Name="quantity" Type="HealthKit.HKQuantity" />
      </Parameters>
      <Docs>
        <param name="operatorType">To be added.</param>
        <param name="quantity">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get samples by quantity.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForSamples">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForSamples (Foundation.NSDate startDate, Foundation.NSDate endDate, HealthKit.HKQueryOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForSamples(class Foundation.NSDate startDate, class Foundation.NSDate endDate, valuetype HealthKit.HKQueryOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForSamples(Foundation.NSDate,Foundation.NSDate,HealthKit.HKQueryOptions)" />
      <MemberSignature Language="F#" Value="static member GetPredicateForSamples : Foundation.NSDate * Foundation.NSDate * HealthKit.HKQueryOptions -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForSamples (startDate, endDate, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForSamplesWithStartDate:endDate:options:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startDate" Type="Foundation.NSDate" />
        <Parameter Name="endDate" Type="Foundation.NSDate" />
        <Parameter Name="options" Type="HealthKit.HKQueryOptions" />
      </Parameters>
      <Docs>
        <param name="startDate">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="endDate">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="options">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get samples that are in a date range.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForTotalDistance">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForTotalDistance (Foundation.NSPredicateOperatorType operatorType, HealthKit.HKQuantity totalDistance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForTotalDistance(valuetype Foundation.NSPredicateOperatorType operatorType, class HealthKit.HKQuantity totalDistance) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForTotalDistance(Foundation.NSPredicateOperatorType,HealthKit.HKQuantity)" />
      <MemberSignature Language="F#" Value="static member GetPredicateForTotalDistance : Foundation.NSPredicateOperatorType * HealthKit.HKQuantity -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForTotalDistance (operatorType, totalDistance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForWorkoutsWithOperatorType:totalDistance:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorType" Type="Foundation.NSPredicateOperatorType" />
        <Parameter Name="totalDistance" Type="HealthKit.HKQuantity" />
      </Parameters>
      <Docs>
        <param name="operatorType">To be added.</param>
        <param name="totalDistance">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get workouts by distance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForTotalEnergyBurned">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForTotalEnergyBurned (Foundation.NSPredicateOperatorType operatorType, HealthKit.HKQuantity totalEnergyBurned);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForTotalEnergyBurned(valuetype Foundation.NSPredicateOperatorType operatorType, class HealthKit.HKQuantity totalEnergyBurned) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForTotalEnergyBurned(Foundation.NSPredicateOperatorType,HealthKit.HKQuantity)" />
      <MemberSignature Language="F#" Value="static member GetPredicateForTotalEnergyBurned : Foundation.NSPredicateOperatorType * HealthKit.HKQuantity -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForTotalEnergyBurned (operatorType, totalEnergyBurned)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForWorkoutsWithOperatorType:totalEnergyBurned:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorType" Type="Foundation.NSPredicateOperatorType" />
        <Parameter Name="totalEnergyBurned" Type="HealthKit.HKQuantity" />
      </Parameters>
      <Docs>
        <param name="operatorType">To be added.</param>
        <param name="totalEnergyBurned">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get workouts by energy consumed.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForTotalFlightsClimbed">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForTotalFlightsClimbed (Foundation.NSPredicateOperatorType operatorType, HealthKit.HKQuantity totalFlightsClimbed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForTotalFlightsClimbed(valuetype Foundation.NSPredicateOperatorType operatorType, class HealthKit.HKQuantity totalFlightsClimbed) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForTotalFlightsClimbed(Foundation.NSPredicateOperatorType,HealthKit.HKQuantity)" />
      <MemberSignature Language="F#" Value="static member GetPredicateForTotalFlightsClimbed : Foundation.NSPredicateOperatorType * HealthKit.HKQuantity -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForTotalFlightsClimbed (operatorType, totalFlightsClimbed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForWorkoutsWithOperatorType:totalFlightsClimbed:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorType" Type="Foundation.NSPredicateOperatorType" />
        <Parameter Name="totalFlightsClimbed" Type="HealthKit.HKQuantity" />
      </Parameters>
      <Docs>
        <param name="operatorType">To be added.</param>
        <param name="totalFlightsClimbed">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForTotalSwimmingStrokeCount">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForTotalSwimmingStrokeCount (Foundation.NSPredicateOperatorType operatorType, HealthKit.HKQuantity totalSwimmingStrokeCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForTotalSwimmingStrokeCount(valuetype Foundation.NSPredicateOperatorType operatorType, class HealthKit.HKQuantity totalSwimmingStrokeCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForTotalSwimmingStrokeCount(Foundation.NSPredicateOperatorType,HealthKit.HKQuantity)" />
      <MemberSignature Language="F#" Value="static member GetPredicateForTotalSwimmingStrokeCount : Foundation.NSPredicateOperatorType * HealthKit.HKQuantity -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForTotalSwimmingStrokeCount (operatorType, totalSwimmingStrokeCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForWorkoutsWithOperatorType:totalSwimmingStrokeCount:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorType" Type="Foundation.NSPredicateOperatorType" />
        <Parameter Name="totalSwimmingStrokeCount" Type="HealthKit.HKQuantity" />
      </Parameters>
      <Docs>
        <param name="operatorType">To be added.</param>
        <param name="totalSwimmingStrokeCount">To be added.</param>
        <summary>Returns a predicate that matches workousts that have the specified <paramref name="totalSwimmingStrokeCount" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForWorkouts">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForWorkouts (HealthKit.HKWorkoutActivityType workoutActivityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForWorkouts(valuetype HealthKit.HKWorkoutActivityType workoutActivityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.GetPredicateForWorkouts(HealthKit.HKWorkoutActivityType)" />
      <MemberSignature Language="F#" Value="static member GetPredicateForWorkouts : HealthKit.HKWorkoutActivityType -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.GetPredicateForWorkouts workoutActivityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForWorkoutsWithWorkoutActivityType:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workoutActivityType" Type="HealthKit.HKWorkoutActivityType" />
      </Parameters>
      <Docs>
        <param name="workoutActivityType">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get workouts by activity type.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectType">
      <MemberSignature Language="C#" Value="public virtual HealthKit.HKObjectType ObjectType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class HealthKit.HKObjectType ObjectType" />
      <MemberSignature Language="DocId" Value="P:HealthKit.HKQuery.ObjectType" />
      <MemberSignature Language="F#" Value="member this.ObjectType : HealthKit.HKObjectType" Usage="HealthKit.HKQuery.ObjectType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 3, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 2, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("objectType")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 3, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 2, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("objectType", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HealthKit.HKObjectType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of object that will be queried.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Predicate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSPredicate Predicate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSPredicate Predicate" />
      <MemberSignature Language="DocId" Value="P:HealthKit.HKQuery.Predicate" />
      <MemberSignature Language="F#" Value="member this.Predicate : Foundation.NSPredicate" Usage="HealthKit.HKQuery.Predicate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("predicate")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("predicate", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a predicate that filters objects that are returned from the HealthKit store.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PredicateForObjectsWithNoCorrelation">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate PredicateForObjectsWithNoCorrelation ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate PredicateForObjectsWithNoCorrelation() cil managed" />
      <MemberSignature Language="DocId" Value="M:HealthKit.HKQuery.PredicateForObjectsWithNoCorrelation" />
      <MemberSignature Language="F#" Value="static member PredicateForObjectsWithNoCorrelation : unit -&gt; Foundation.NSPredicate" Usage="HealthKit.HKQuery.PredicateForObjectsWithNoCorrelation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForObjectsWithNoCorrelation")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Creates and returns a predicate for objects that do not have a HealthKit correlation.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SampleType">
      <MemberSignature Language="C#" Value="public virtual HealthKit.HKSampleType SampleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class HealthKit.HKSampleType SampleType" />
      <MemberSignature Language="DocId" Value="P:HealthKit.HKQuery.SampleType" />
      <MemberSignature Language="F#" Value="member this.SampleType : HealthKit.HKSampleType" Usage="HealthKit.HKQuery.SampleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.WatchOS, 2, 2, ObjCRuntime.PlatformArchitecture.None, "Use 'ObjectType' property.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 9, 3, ObjCRuntime.PlatformArchitecture.None, "Use 'ObjectType' property.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 2, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("sampleType")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.WatchOS, 2, 2, ObjCRuntime.PlatformArchitecture.None, "Use 'ObjectType' property.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 9, 3, ObjCRuntime.PlatformArchitecture.None, "Use 'ObjectType' property.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 2, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("sampleType", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HealthKit.HKSampleType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Developers should not use this deprecated property. Developers should use 'ObjectType' property.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
