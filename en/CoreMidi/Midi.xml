<Type Name="Midi" FullName="CoreMidi.Midi">
  <TypeSignature Language="C#" Value="public static class Midi" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Midi extends System.Object" />
  <TypeSignature Language="DocId" Value="T:CoreMidi.Midi" />
  <TypeSignature Language="F#" Value="type Midi = class" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.MacOSX, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Global methods and constants for using CoreMidi.</summary>
    <remarks>
    </remarks>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/CoreMidiSample/">CoreMidiSample</related>
  </Docs>
  <Members>
    <Member MemberName="DestinationCount">
      <MemberSignature Language="C#" Value="public static nint DestinationCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.nint DestinationCount" />
      <MemberSignature Language="DocId" Value="P:CoreMidi.Midi.DestinationCount" />
      <MemberSignature Language="F#" Value="member this.DestinationCount : nint" Usage="CoreMidi.Midi.DestinationCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of MIDI destinations.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeviceCount">
      <MemberSignature Language="C#" Value="public static nint DeviceCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.nint DeviceCount" />
      <MemberSignature Language="DocId" Value="P:CoreMidi.Midi.DeviceCount" />
      <MemberSignature Language="F#" Value="member this.DeviceCount : nint" Usage="CoreMidi.Midi.DeviceCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of MIDI devices in the system (do not confused with external connected devices).</summary>
        <value>
        </value>
        <remarks>You can retrieve a specific MIDI device by using the <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=T:CoreMidi.Midi.GetDevice(int)&amp;scope=Xamarin" title="T:CoreMidi.Midi.GetDevice(int)">T:CoreMidi.Midi.GetDevice(int)</a></format>.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExternalDeviceCount">
      <MemberSignature Language="C#" Value="public static nint ExternalDeviceCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.nint ExternalDeviceCount" />
      <MemberSignature Language="DocId" Value="P:CoreMidi.Midi.ExternalDeviceCount" />
      <MemberSignature Language="F#" Value="member this.ExternalDeviceCount : nint" Usage="CoreMidi.Midi.ExternalDeviceCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of external devices connected to this system.</summary>
        <value>
        </value>
        <remarks>You can retrieve a specific MIDI device by using the <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=T:CoreMidi.Midi.GetExternalDevice(int)&amp;scope=Xamarin" title="T:CoreMidi.Midi.GetExternalDevice(int)">T:CoreMidi.Midi.GetExternalDevice(int)</a></format>.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDevice">
      <MemberSignature Language="C#" Value="public static CoreMidi.MidiDevice GetDevice (nint deviceIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreMidi.MidiDevice GetDevice(valuetype System.nint deviceIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMidi.Midi.GetDevice(System.nint)" />
      <MemberSignature Language="F#" Value="static member GetDevice : nint -&gt; CoreMidi.MidiDevice" Usage="CoreMidi.Midi.GetDevice deviceIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreMidi.MidiDevice</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deviceIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="deviceIndex">The device index.</param>
        <summary>Returns an object representing the specified MIDI device.</summary>
        <returns>An instance of MidiDevice, or null on error.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExternalDevice">
      <MemberSignature Language="C#" Value="public static CoreMidi.MidiDevice GetExternalDevice (nint deviceIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreMidi.MidiDevice GetExternalDevice(valuetype System.nint deviceIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMidi.Midi.GetExternalDevice(System.nint)" />
      <MemberSignature Language="F#" Value="static member GetExternalDevice : nint -&gt; CoreMidi.MidiDevice" Usage="CoreMidi.Midi.GetExternalDevice deviceIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreMidi.MidiDevice</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deviceIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="deviceIndex">The external MIDI device index.</param>
        <summary>Returns an object representing the specified external MIDI device.</summary>
        <returns>An instance of MidiDevice, or null on error.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkBonjourServiceType">
      <MemberSignature Language="C#" Value="public static Foundation.NSString NetworkBonjourServiceType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString NetworkBonjourServiceType" />
      <MemberSignature Language="DocId" Value="P:CoreMidi.Midi.NetworkBonjourServiceType" />
      <MemberSignature Language="F#" Value="member this.NetworkBonjourServiceType : Foundation.NSString" Usage="CoreMidi.Midi.NetworkBonjourServiceType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("MIDINetworkBonjourServiceType", "CoreMidi")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant MIDINetworkBonjourServiceType</summary>
        <value>
        </value>
        <remarks>You can pass this type to <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=M:Foundation.NSNetServiceBrowser.SearchForServices(System.String type, System.String domain)&amp;scope=Xamarin" title="M:Foundation.NSNetServiceBrowser.SearchForServices(System.String type, System.String domain)">M:Foundation.NSNetServiceBrowser.SearchForServices(System.String type, System.String domain)</a></format> to find MIDI devices available
        over bonjour.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkNotificationContactsDidChange">
      <MemberSignature Language="C#" Value="public static Foundation.NSString NetworkNotificationContactsDidChange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString NetworkNotificationContactsDidChange" />
      <MemberSignature Language="DocId" Value="P:CoreMidi.Midi.NetworkNotificationContactsDidChange" />
      <MemberSignature Language="F#" Value="member this.NetworkNotificationContactsDidChange : Foundation.NSString" Usage="CoreMidi.Midi.NetworkNotificationContactsDidChange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use Midi.Notifications.ObserveNetworkNotificationContactsDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("MIDINetworkNotificationContactsDidChange", "CoreMidi")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification raised when the MIDI network has changed.</summary>
        <value>
        </value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="T:MediaPlayer.MPMediaLibrary.Notifications" />.<see cref="M:CoreMidi.Midi.Notifications.ObserveNetworkNotificationContactsDidChange(Foundation.NSObject,System.EventHandler{Foundation.NSNotificationEventArgs})" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = Midi.Notifications.ObserveNetworkNotificationContactsDidChange ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = Midi.Notifications.ObserveNetworkNotificationContactsDidChange (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        Midi.NetworkNotificationContactsDidChange, (notification) => {Console.WriteLine ("Received the notification Midi", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification Midi", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (Midi.NetworkNotificationContactsDidChange, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkNotificationSessionDidChange">
      <MemberSignature Language="C#" Value="public static Foundation.NSString NetworkNotificationSessionDidChange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString NetworkNotificationSessionDidChange" />
      <MemberSignature Language="DocId" Value="P:CoreMidi.Midi.NetworkNotificationSessionDidChange" />
      <MemberSignature Language="F#" Value="member this.NetworkNotificationSessionDidChange : Foundation.NSString" Usage="CoreMidi.Midi.NetworkNotificationSessionDidChange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use Midi.Notifications.ObserveNetworkNotificationSessionDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("MIDINetworkNotificationSessionDidChange", "CoreMidi")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification raised when the MIDI session has changed</summary>
        <value>
        </value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="T:MediaPlayer.MPMediaLibrary.Notifications" />.<see cref="M:CoreMidi.Midi.Notifications.ObserveNetworkNotificationSessionDidChange(Foundation.NSObject,System.EventHandler{Foundation.NSNotificationEventArgs})" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = Midi.Notifications.ObserveNetworkNotificationSessionDidChange ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = Midi.Notifications.ObserveNetworkNotificationSessionDidChange (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        Midi.NetworkNotificationSessionDidChange, (notification) => {Console.WriteLine ("Received the notification Midi", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification Midi", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (Midi.NetworkNotificationSessionDidChange, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Restart">
      <MemberSignature Language="C#" Value="public static void Restart ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Restart() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreMidi.Midi.Restart" />
      <MemberSignature Language="F#" Value="static member Restart : unit -&gt; unit" Usage="CoreMidi.Midi.Restart " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restarts the MIDI Subsystem.</summary>
        <remarks>This stops the MIDI subsystems and forces it to be reinitialized.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceCount">
      <MemberSignature Language="C#" Value="public static nint SourceCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.nint SourceCount" />
      <MemberSignature Language="DocId" Value="P:CoreMidi.Midi.SourceCount" />
      <MemberSignature Language="F#" Value="member this.SourceCount : nint" Usage="CoreMidi.Midi.SourceCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of sources in the system.</summary>
        <value>
        </value>
        <remarks>Use the <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=T:CoreMidi.MidiEndpoint.GetSource(int)&amp;scope=Xamarin" title="T:CoreMidi.MidiEndpoint.GetSource(int)">T:CoreMidi.MidiEndpoint.GetSource(int)</a></format> to fetch a specific source (represented by a MidiEndpoint).</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
