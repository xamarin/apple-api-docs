<Type Name="MCSession" FullName="MultipeerConnectivity.MCSession">
  <TypeSignature Language="C#" Value="public class MCSession : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MCSession extends Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("MCSession", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a persistent connection between multiple devices.</summary>
    <remarks>
      <para>Multipeer Connectivity has two phases: discovery and the session. The role of the discovery phase is to associate an <see cref="T:MultipeerConnectivity.MCSession" /> object on each device with an <see cref="T:MultipeerConnectivity.MCSession" /> object on the peer devices. In the session phase, the <see cref="T:MultipeerConnectivity.MCSession" /> object is the channel through which devices communicate and its lifecycle events are associated with connections, disconnections, transmissions, and receptions.</para>
      <para>The <see cref="T:MultipeerConnectivity.MCSession" /> is instantiated by the application developer. During the discovery phase, there are two roles: advertisers that broadcast their willingness to connect to a certain protocol and browsers that discover these advertisers and invite them to sessions. </para>
      <para> Advertising is managed by either the stock <see cref="T:MultipeerConnectivity.MCAdvertiserAssistant" /> or custom controller that uses a <see cref="T:MultipeerConnectivity.MCNearbyServiceAdvertiser" />. Similarly, browsing is managed by a  <see cref="T:MultipeerConnectivity.UIViewController" />, either the stock <see cref="T:MultipeerConnectivity.MCBrowserViewController" /> or a custom controller that uses a <see cref="T:MultipeerConnectivity.MCNearbyServiceBrowser" /> object to programmatically discover peers. Once a peer is discovered, an invitation is sent with <see cref="M:MultipeerConnectivity.MCNearbyServiceBrowser.InvitePeer" />). The application user interacts with a system dialog informing them of the invitation. If they accept, the <see cref="T:MultipeerConnectivity.MCSession" /> connects.</para>
      <para>The following image shows the sequence of functions with programmatic advertising and browsing:</para>
      <para>
        <img href="MultipeerConnectivity.ProgrammaticAdvertisingAndDiscovery.png" />
      </para>
      <para>
        <list type="table">
          <listheader>
            <term>Advertiser</term>
            <description>Browser</description>
            <description>Discussion</description>
          </listheader>
          <item>
            <term>Create a new <see cref="T:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate" /> and assign it to the <see cref="P:MultipeerConnectivity.MCNearbyServiceAdvertiser.Delegate" /> property.</term>
            <description>Create a new <see cref="T:MultipeerConnectivity.MCNearbyServiceBrowserDelegate" /> and assign it to <see cref="P:MultipeerConnectivity.MCNearbyServiceBrowser.Delegate" /> property.</description>
            <description>Discovery and connection is taken care of by the delegate objects for the <see cref="T:MultipeerConnectivity.MCNearbyServiceAdvertiser" /> and <see cref="T:MultipeerConnectivity.MCNearbyServiceBrowser" />.</description>
          </item>
          <item>
            <term>The advertiser may instantiate a new <see cref="T:MultipeerConnectivity.MCSession" /> now or wait until it receives an invitation.</term>
            <description>Instantiate a new <see cref="T:MultipeerConnectivity.MCSession" />.</description>
            <description>The browser should maintain a reference to a single <see cref="T:MultipeerConnectivity.MCSession" /> object no matter how many peers ultimately connect.</description>
          </item>
          <item>
            <term>
              <see cref="M:MultipeerConnectivity.MCNearbyServiceAdvertiser.StartAdvertisingPeer" />
            </term>
            <description>
              <see cref="M:MultipeerConnectivity.MCNearbyServiceBrowser.StartBrowsingForPeers" />
            </description>
            <description>Advertiser and browser must use identical <c>serviceType</c> strings to identify their protocol / application. Peer IDs should be unique to each device.</description>
          </item>
          <item>
            <term>
            </term>
            <description>The system will call <see cref="M:MultipeerConnectivity.MCNearbyServiceBrowserDelegate.FoundPeer" />, passing in a reference to the <see cref="T:MultipeerConnectivity.MCNearbyServiceBrowser" />. The application developer calls <see cref="M:MultipeerConnectivity.MCNearbyServiceBrowser.InvitePeer" />, passing in a reference to the previously-created <see cref="T:MultipeerConnectivity.MCSession" />.</description>
            <description>The callback is likely to occur on a background thread. If the application developer wishes to update the display, they must use <see cref="M:Foundation.NSObject.InvokeOnMainThread" />.</description>
          </item>
          <item>
            <term>The system will call <see cref="M:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate.DidReceiveInvitationFromPeer" />. To connect the devices, the application developer must invoke the passed-in <c>invitationHandler</c> with it's <c>context</c> argument set to <see langword="true" /> and it's <c>session</c> argument set to an <see cref="T:MultipeerConnectivity.MCSession" />.</term>
            <description>
            </description>
            <description>The callback is likely to occur on a background thread. If the application developer wishes to update the display, they must use <see cref="M:Foundation.NSObject.InvokeOnMainThread" />. </description>
          </item>
          <item>
            <term>
            </term>
            <description>
            </description>
            <description>Once the devices are connected, the <see cref="T:MultipeerConnectivity.MCSession" /> objects can be used to transmit messages and data between devices.</description>
          </item>
        </list>
      </para>
    </remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/MultipeerConnectivity/Reference/MCSessionClassRef/index.html">Apple documentation for <c>MCSession</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MCSession (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MCSession (MultipeerConnectivity.MCPeerID myPeerID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MultipeerConnectivity.MCPeerID myPeerID) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithPeer:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="myPeerID" Type="MultipeerConnectivity.MCPeerID" />
      </Parameters>
      <Docs>
        <param name="myPeerID">The identity of the local peer.</param>
        <summary>Constructs a session with the specified identity for the local peer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MCSession (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MCSession (MultipeerConnectivity.MCPeerID myPeerID, Security.SecIdentity identity, MultipeerConnectivity.MCEncryptionPreference encryptionPreference);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MultipeerConnectivity.MCPeerID myPeerID, class Security.SecIdentity identity, valuetype MultipeerConnectivity.MCEncryptionPreference encryptionPreference) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="myPeerID" Type="MultipeerConnectivity.MCPeerID" />
        <Parameter Name="identity" Type="Security.SecIdentity" />
        <Parameter Name="encryptionPreference" Type="MultipeerConnectivity.MCEncryptionPreference" />
      </Parameters>
      <Docs>
        <param name="myPeerID">To be added.</param>
        <param name="identity">To be added.</param>
        <param name="encryptionPreference">To be added.</param>
        <summary>Constructor that allows the application developer to specify security constraints.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MCSession (MultipeerConnectivity.MCPeerID myPeerID, Security.SecIdentity identity, Security.SecCertificate[] certificates, MultipeerConnectivity.MCEncryptionPreference encryptionPreference);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MultipeerConnectivity.MCPeerID myPeerID, class Security.SecIdentity identity, class Security.SecCertificate[] certificates, valuetype MultipeerConnectivity.MCEncryptionPreference encryptionPreference) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="myPeerID" Type="MultipeerConnectivity.MCPeerID" />
        <Parameter Name="identity" Type="Security.SecIdentity" />
        <Parameter Name="certificates" Type="Security.SecCertificate[]" />
        <Parameter Name="encryptionPreference" Type="MultipeerConnectivity.MCEncryptionPreference" />
      </Parameters>
      <Docs>
        <param name="myPeerID">To be added.</param>
        <param name="identity">To be added.</param>
        <param name="certificates">To be added.</param>
        <param name="encryptionPreference">To be added.</param>
        <summary>Constructor that allows the application developer to specify security constraints and certificates.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelConnectPeer">
      <MemberSignature Language="C#" Value="public virtual void CancelConnectPeer (MultipeerConnectivity.MCPeerID peerID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelConnectPeer(class MultipeerConnectivity.MCPeerID peerID) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("cancelConnectPeer:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peerID" Type="MultipeerConnectivity.MCPeerID" />
      </Parameters>
      <Docs>
        <param name="peerID">The ID of the peer whose connection should be cancelled.</param>
        <summary>Cancel's a pending connection to the <paramref name="peerID" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectedPeers">
      <MemberSignature Language="C#" Value="public virtual MultipeerConnectivity.MCPeerID[] ConnectedPeers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MultipeerConnectivity.MCPeerID[] ConnectedPeers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("connectedPeers")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MultipeerConnectivity.MCPeerID[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of the currently connected devices.</summary>
        <value>The array will be non-null, but of length 0, if no peers are connected.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectPeer">
      <MemberSignature Language="C#" Value="public virtual void ConnectPeer (MultipeerConnectivity.MCPeerID peerID, Foundation.NSData data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConnectPeer(class MultipeerConnectivity.MCPeerID peerID, class Foundation.NSData data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("connectPeer:withNearbyConnectionData:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peerID" Type="MultipeerConnectivity.MCPeerID" />
        <Parameter Name="data" Type="Foundation.NSData" />
      </Parameters>
      <Docs>
        <param name="peerID">The remote peer's identifier.</param>
        <param name="data">To be added.</param>
        <summary>Initiates a connection to a peer identified by <paramref name="peerID" />.</summary>
        <remarks>
          <para>Application developers may use a non-Multipeer Connectivity discovery technique, such as Bonjour / <see cref="T:Foundation.NSNetService" />, and manually manage peer connection. However, the <paramref name="peerID" /> used here and in <see cref="M:MultipeerConnectivity.MCSession.NearbyConnectionDataForPeer" /> must originate from a <see cref="T:Foundation.NSKeyedArchiver" /> serializing an <see cref="T:MultipeerConnectivity.MCPeerID" /> on the remote peer. (This raises the question: if discovery and enough message-passing code to transmit the <paramref name="peerID" /> is done by Bonjour, what's the advantage of using MPC for further communication? One answer might be the evolution of a legacy system, another answer might lie in the simpler message- and resource-passing of MPC.)</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public MultipeerConnectivity.IMCSessionDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MultipeerConnectivity.IMCSessionDelegate Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MultipeerConnectivity.IMCSessionDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the MultipeerConnectivity.IMCSessionDelegate model class which acts as the class delegate.</summary>
        <value>
          <para>The instance of the MultipeerConnectivity.IMCSessionDelegate model class</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Disconnect">
      <MemberSignature Language="C#" Value="public virtual void Disconnect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Disconnect() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("disconnect")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disconnects this peer from the session.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the MCSession object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the MCSession class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the MCSession ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncryptionPreference">
      <MemberSignature Language="C#" Value="public virtual MultipeerConnectivity.MCEncryptionPreference EncryptionPreference { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MultipeerConnectivity.MCEncryptionPreference EncryptionPreference" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("encryptionPreference")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MultipeerConnectivity.MCEncryptionPreference</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>What type, if any, encryption s preferred.</summary>
        <value>The default value is <see cref="F:MultipeerConnectivity.MCEncryptionPreference.Optional" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumNumberOfPeers">
      <MemberSignature Language="C#" Value="public static nint MaximumNumberOfPeers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.nint MaximumNumberOfPeers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kMCSessionMaximumNumberOfPeers", "MultipeerConnectivity")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kMCSessionMaximumNumberOfPeers</summary>
        <value>The value is 8.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:MultipeerConnectivity.MCBrowserViewController.MaximumNumberOfPeers" />
      </Docs>
    </Member>
    <Member MemberName="MinimumNumberOfPeers">
      <MemberSignature Language="C#" Value="public static nint MinimumNumberOfPeers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.nint MinimumNumberOfPeers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kMCSessionMinimumNumberOfPeers", "MultipeerConnectivity")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kMCSessionMinimumNumberOfPeers</summary>
        <value>The value is 2.
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="P:MultipeerConnectivity.MCBrowserViewController.MinimumNumberOfPeers" />
      </Docs>
    </Member>
    <Member MemberName="MyPeerID">
      <MemberSignature Language="C#" Value="public virtual MultipeerConnectivity.MCPeerID MyPeerID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MultipeerConnectivity.MCPeerID MyPeerID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("myPeerID")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MultipeerConnectivity.MCPeerID</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The peer ID associated with this device.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NearbyConnectionDataForPeer">
      <MemberSignature Language="C#" Value="public virtual void NearbyConnectionDataForPeer (MultipeerConnectivity.MCPeerID peerID, MultipeerConnectivity.MCSessionNearbyConnectionDataForPeerCompletionHandler completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NearbyConnectionDataForPeer(class MultipeerConnectivity.MCPeerID peerID, class MultipeerConnectivity.MCSessionNearbyConnectionDataForPeerCompletionHandler completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("nearbyConnectionDataForPeer:withCompletionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peerID" Type="MultipeerConnectivity.MCPeerID" />
        <Parameter Name="completionHandler" Type="MultipeerConnectivity.MCSessionNearbyConnectionDataForPeerCompletionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDMCSessionNearbyConnectionDataForPeerCompletionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="peerID">Created from data serialized on a remote peer.</param>
        <param name="completionHandler">The completion handler called after processing is complete.</param>
        <summary>Creates the necessary data for a  manually-managed peer connection.</summary>
        <remarks>
          <para>Application developers may use a non-Multipeer Connectivity discovery technique, such as Bonjour / <see cref="T:Foundation.NSNetService" />, and manually manage peer connection. However, the <paramref name="peerID" /> used here and in <see cref="M:MultipeerConnectivity.MCSession.ConnectPeer" /> must originate from a <see cref="T:Foundation.NSKeyedArchiver" /> serializing an <see cref="T:MultipeerConnectivity.MCPeerID" /> on the remote peer. (This raises the question: if discovery and enough message-passing code to transmit the <paramref name="peerID" /> is done by Bonjour, what's the advantage of using MPC for further communication? One answer might be the evolution of a legacy system, another answer might lie in the simpler message- and resource-passing of MPC.)</para>
          <para>Once the application developer has the <paramref name="peerID" />, the rest of the code to connect a peer would be:</para>
          <example>
            <code lang="C#"><![CDATA[
//User code: Perhaps using Bonjour or other discovery and messaging service
var peerID = DeserializedPeerID();
//Request connection data, with completionHandler lambda as continuation
session.NearbyConnectionDataForPeer(peerID, (connectionData, error) => { 
    if(error != null){
        //Note: peerID is serialized version, connectionData is passed in to continuation
        session.ConnectPeer(peerID, connectionData);
    }else{
         throw new Exception(error);
    }
});              
              ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NearbyConnectionDataForPeerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Foundation.NSData&gt; NearbyConnectionDataForPeerAsync (MultipeerConnectivity.MCPeerID peerID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Foundation.NSData&gt; NearbyConnectionDataForPeerAsync(class MultipeerConnectivity.MCPeerID peerID) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Foundation.NSData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="peerID" Type="MultipeerConnectivity.MCPeerID" />
      </Parameters>
      <Docs>
        <param name="peerID">Created from data serialized on a remote peer.</param>
        <summary>Creates the necessary data for a  manually-managed peer connection.</summary>
        <returns>
          <para>A task that represents the asynchronous NearbyConnectionDataForPeer operation.   The value of the TResult parameter is a <see cref="MultipeerConnectivity.MCSessionNearbyConnectionDataForPeerCompletionHandler" />.</para>
        </returns>
        <remarks>
          <para copied="true">The NearbyConnectionDataForPeerAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">Application developers may use a non-Multipeer Connectivity discovery technique, such as Bonjour / <see cref="T:Foundation.NSNetService" />, and manually manage peer connection. However, the <paramref name="peerID" /> used here and in <see cref="M:MultipeerConnectivity.MCSession.ConnectPeer" /> must originate from a <see cref="T:Foundation.NSKeyedArchiver" /> serializing an <see cref="T:MultipeerConnectivity.MCPeerID" /> on the remote peer. (This raises the question: if discovery and enough message-passing code to transmit the <paramref name="peerID" /> is done by Bonjour, what's the advantage of using MPC for further communication? One answer might be the evolution of a legacy system, another answer might lie in the simpler message- and resource-passing of MPC.)</para>
          <para copied="true">Once the application developer has the <paramref name="peerID" />, the rest of the code to connect a peer would be:</para>
          <example copied="true">
            <code lang="C#"><![CDATA[
//User code: Perhaps using Bonjour or other discovery and messaging service
var peerID = DeserializedPeerID();
//Request connection data, with completionHandler lambda as continuation
session.NearbyConnectionDataForPeer(peerID, (connectionData, error) => { 
    if(error != null){
        //Note: peerID is serialized version, connectionData is passed in to continuation
        session.ConnectPeer(peerID, connectionData);
    }else{
         throw new Exception(error);
    }
});              
              ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecurityIdentity">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSArray SecurityIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSArray SecurityIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("securityIdentity")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSArray</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The security identity of this peer.</summary>
        <value>Location [0] holds a <c>SecIdentityRef</c> for the local peer. Additional values (if they exist) will be for connected peers.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendData">
      <MemberSignature Language="C#" Value="public virtual bool SendData (Foundation.NSData data, MultipeerConnectivity.MCPeerID[] peerIDs, MultipeerConnectivity.MCSessionSendDataMode mode, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SendData(class Foundation.NSData data, class MultipeerConnectivity.MCPeerID[] peerIDs, valuetype MultipeerConnectivity.MCSessionSendDataMode mode, class Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("sendData:toPeers:withMode:error:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Foundation.NSData" />
        <Parameter Name="peerIDs" Type="MultipeerConnectivity.MCPeerID[]" />
        <Parameter Name="mode" Type="MultipeerConnectivity.MCSessionSendDataMode" />
        <Parameter Name="error" Type="Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="peerIDs">To be added.</param>
        <param name="mode">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Enqueues for delivery the <paramref name="data" /> to the peers in <paramref name="peerIDs" />.</summary>
        <returns>
          <see langword="true" /> if the message was enqueued for delivery.</returns>
        <remarks>
          <para>Note that the return value only indicates successful enqueueing of the data for transmission, not a confirmation of delivery.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendResource">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSProgress SendResource (Foundation.NSUrl resourceUrl, string resourceName, MultipeerConnectivity.MCPeerID peerID, Action&lt;Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSProgress SendResource(class Foundation.NSUrl resourceUrl, string resourceName, class MultipeerConnectivity.MCPeerID peerID, class System.Action`1&lt;class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("sendResourceAtURL:withName:toPeer:withCompletionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSProgress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceUrl" Type="Foundation.NSUrl" />
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="peerID" Type="MultipeerConnectivity.MCPeerID" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V0))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="resourceUrl">The URL to the resource.</param>
        <param name="resourceName">The name of the resource.</param>
        <param name="peerID">The ID of the receiving peer.</param>
        <param name="completionHandler">
          <para>A handler that is run after delivery or failure.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Enqueues for delivery to <paramref name="peerID" /> the resource at <paramref name="resourceUrl" />.</summary>
        <returns>
          <see langword="true" /> if the resource was enqueued for delivery.</returns>
        <remarks>
          <para>Note that the return value only indicates successful enqueueing of the resource for transmission, not a confirmation of delivery. Delivery success or failure is passed in to the <paramref name="completionHandler" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendResourceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SendResourceAsync (Foundation.NSUrl resourceUrl, string resourceName, MultipeerConnectivity.MCPeerID peerID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SendResourceAsync(class Foundation.NSUrl resourceUrl, string resourceName, class MultipeerConnectivity.MCPeerID peerID) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceUrl" Type="Foundation.NSUrl" />
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="peerID" Type="MultipeerConnectivity.MCPeerID" />
      </Parameters>
      <Docs>
        <param name="resourceUrl">The URL to the resource.</param>
        <param name="resourceName">The name of the resource.</param>
        <param name="peerID">The ID of the receiving peer.</param>
        <summary>Enqueues for delivery to <paramref name="peerID" /> the resource at <paramref name="resourceUrl" />.</summary>
        <returns>A task that represents the asynchronous SendResource operation</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SendResourceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SendResourceAsync (Foundation.NSUrl resourceUrl, string resourceName, MultipeerConnectivity.MCPeerID peerID, out Foundation.NSProgress result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SendResourceAsync(class Foundation.NSUrl resourceUrl, string resourceName, class MultipeerConnectivity.MCPeerID peerID, class Foundation.NSProgress result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceUrl" Type="Foundation.NSUrl" />
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="peerID" Type="MultipeerConnectivity.MCPeerID" />
        <Parameter Name="result" Type="Foundation.NSProgress&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceUrl">The URL to the resource.</param>
        <param name="resourceName">The name of the resource.</param>
        <param name="peerID">The ID of the receiving peer.</param>
        <param name="result">A progress result.</param>
        <summary>Asynchronously enqueues for delivery to <paramref name="resourceName" /> the resource at <paramref name="resourceUrl" />, returning a task that represents the operation.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartStream">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSOutputStream StartStream (string streamName, MultipeerConnectivity.MCPeerID peerID, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSOutputStream StartStream(string streamName, class MultipeerConnectivity.MCPeerID peerID, class Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("startStreamWithName:toPeer:error:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSOutputStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamName" Type="System.String" />
        <Parameter Name="peerID" Type="MultipeerConnectivity.MCPeerID" />
        <Parameter Name="error" Type="Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="streamName">To be added.</param>
        <param name="peerID">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Creates a named stream to <paramref name="peerID" />.</summary>
        <returns>A byte stream or <see langword="null" /> if the stream could not be created.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("delegate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDelegate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for this type</summary>
        <value>
          <para>The instance that will respond to events and data requests.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>   Methods must be decorated with the [Export ("selectorName")] attribute to respond to each method from the protocol.   Alternatively use the Delegate method which is strongly typed and does not require the [Export] attributes on methods.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
