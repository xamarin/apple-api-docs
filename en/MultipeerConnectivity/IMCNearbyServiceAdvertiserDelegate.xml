<Type Name="IMCNearbyServiceAdvertiserDelegate" FullName="MultipeerConnectivity.IMCNearbyServiceAdvertiserDelegate">
  <TypeSignature Language="C#" Value="public interface IMCNearbyServiceAdvertiserDelegate : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMCNearbyServiceAdvertiserDelegate implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:MultipeerConnectivity.IMCNearbyServiceAdvertiserDelegate" />
  <TypeSignature Language="F#" Value="type IMCNearbyServiceAdvertiserDelegate = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol(Name="MCNearbyServiceAdvertiserDelegate", WrapperType=typeof(MultipeerConnectivity.MCNearbyServiceAdvertiserDelegateWrapper))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="DidReceiveInvitationFromPeer", ParameterBlockProxy=Mono.Cecil.CustomAttributeArgument[], ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="advertiser:didReceiveInvitationFromPeer:withContext:invitationHandler:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidNotStartAdvertisingPeer", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="advertiser:didNotStartAdvertisingPeer:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="DidReceiveInvitationFromPeer", ParameterByRef=new System.Boolean[] { false, false, false, false }, ParameterType=new System.Type[] { typeof(MultipeerConnectivity.MCNearbyServiceAdvertiser), typeof(MultipeerConnectivity.MCPeerID), typeof(Foundation.NSData), typeof(MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler) }, Selector="advertiser:didReceiveInvitationFromPeer:withContext:invitationHandler:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidNotStartAdvertisingPeer", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(MultipeerConnectivity.MCNearbyServiceAdvertiser), typeof(Foundation.NSError) }, Selector="advertiser:didNotStartAdvertisingPeer:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface representing the required methods (if any) of the protocol <see cref="T:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate" />.</summary>
    <remarks>
      <para>This interface contains the required methods (if any) from the protocol defined by <see cref="T:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate" />.</para>
      <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="T:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate" /> protocol.</para>
      <para>Optional methods (if any) are provided by the <see cref="T:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DidReceiveInvitationFromPeer">
      <MemberSignature Language="C#" Value="public void DidReceiveInvitationFromPeer (MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, MultipeerConnectivity.MCPeerID peerID, Foundation.NSData context, MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler invitationHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidReceiveInvitationFromPeer(class MultipeerConnectivity.MCNearbyServiceAdvertiser advertiser, class MultipeerConnectivity.MCPeerID peerID, class Foundation.NSData context, class MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler invitationHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:MultipeerConnectivity.IMCNearbyServiceAdvertiserDelegate.DidReceiveInvitationFromPeer(MultipeerConnectivity.MCNearbyServiceAdvertiser,MultipeerConnectivity.MCPeerID,Foundation.NSData,MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler)" />
      <MemberSignature Language="F#" Value="abstract member DidReceiveInvitationFromPeer : MultipeerConnectivity.MCNearbyServiceAdvertiser * MultipeerConnectivity.MCPeerID * Foundation.NSData * MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler -&gt; unit" Usage="iMCNearbyServiceAdvertiserDelegate.DidReceiveInvitationFromPeer (advertiser, peerID, context, invitationHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("advertiser:didReceiveInvitationFromPeer:withContext:invitationHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="advertiser" Type="MultipeerConnectivity.MCNearbyServiceAdvertiser" />
        <Parameter Name="peerID" Type="MultipeerConnectivity.MCPeerID" />
        <Parameter Name="context" Type="Foundation.NSData" />
        <Parameter Name="invitationHandler" Type="MultipeerConnectivity.MCNearbyServiceAdvertiserInvitationHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDMCNearbyServiceAdvertiserInvitationHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="advertiser">To be added.</param>
        <param name="peerID">To be added.</param>
        <param name="context">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="invitationHandler">Continuation that the app developer must call.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
