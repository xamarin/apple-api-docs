<Type Name="MCSessionDelegate" FullName="MultipeerConnectivity.MCSessionDelegate">
  <TypeSignature Language="C#" Value="public abstract class MCSessionDelegate : Foundation.NSObject, IDisposable, MultipeerConnectivity.IMCSessionDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MCSessionDelegate extends Foundation.NSObject implements class MultipeerConnectivity.IMCSessionDelegate, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:MultipeerConnectivity.MCSessionDelegate" />
  <TypeSignature Language="F#" Value="type MCSessionDelegate = class&#xA;    inherit NSObject&#xA;    interface IMCSessionDelegate&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MultipeerConnectivity.IMCSessionDelegate</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Register("MCSessionDelegate", false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A delegate object whose functions relate to events in the <see cref="T:MultipeerConnectivity.MCSession" /> life-cycle, such as connection status changes and data reception.</summary>
    <remarks>
      <para>Callbacks to the <see cref="T:MultipeerConnectivity.MCSessionDelegate" /> object are likely to be made on background threads. Application developers who wish to update the display must use, for instance, <see cref="M:Foundation.NSObject.InvokeOnMainThread(ObjCRuntime.Selector,Foundation.NSObject)" />.</para>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/MultipeerConnectivity/Reference/MCSessionDelegateRef/index.html">Apple documentation for <c>MCSessionDelegate</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MCSessionDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:MultipeerConnectivity.MCSessionDelegate.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MCSessionDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:MultipeerConnectivity.MCSessionDelegate.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new MultipeerConnectivity.MCSessionDelegate : Foundation.NSObjectFlag -&gt; MultipeerConnectivity.MCSessionDelegate" Usage="new MultipeerConnectivity.MCSessionDelegate t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal MCSessionDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:MultipeerConnectivity.MCSessionDelegate.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new MultipeerConnectivity.MCSessionDelegate : nativeint -&gt; MultipeerConnectivity.MCSessionDelegate" Usage="new MultipeerConnectivity.MCSessionDelegate handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidChangeState">
      <MemberSignature Language="C#" Value="public abstract void DidChangeState (MultipeerConnectivity.MCSession session, MultipeerConnectivity.MCPeerID peerID, MultipeerConnectivity.MCSessionState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidChangeState(class MultipeerConnectivity.MCSession session, class MultipeerConnectivity.MCPeerID peerID, valuetype MultipeerConnectivity.MCSessionState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:MultipeerConnectivity.MCSessionDelegate.DidChangeState(MultipeerConnectivity.MCSession,MultipeerConnectivity.MCPeerID,MultipeerConnectivity.MCSessionState)" />
      <MemberSignature Language="F#" Value="abstract member DidChangeState : MultipeerConnectivity.MCSession * MultipeerConnectivity.MCPeerID * MultipeerConnectivity.MCSessionState -&gt; unit" Usage="mCSessionDelegate.DidChangeState (session, peerID, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:MultipeerConnectivity.IMCSessionDelegate.DidChangeState(MultipeerConnectivity.MCSession,MultipeerConnectivity.MCPeerID,MultipeerConnectivity.MCSessionState)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("session:peer:didChangeState:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="MultipeerConnectivity.MCSession" />
        <Parameter Name="peerID" Type="MultipeerConnectivity.MCPeerID" />
        <Parameter Name="state" Type="MultipeerConnectivity.MCSessionState" />
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="peerID">To be added.</param>
        <param name="state">To be added.</param>
        <summary>Indicates that the <paramref name="session" /> has transitioned to the new <paramref name="state" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidFinishReceivingResource">
      <MemberSignature Language="C#" Value="public abstract void DidFinishReceivingResource (MultipeerConnectivity.MCSession session, string resourceName, MultipeerConnectivity.MCPeerID fromPeer, Foundation.NSUrl localUrl, Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidFinishReceivingResource(class MultipeerConnectivity.MCSession session, string resourceName, class MultipeerConnectivity.MCPeerID fromPeer, class Foundation.NSUrl localUrl, class Foundation.NSError error) cil managed" />
      <MemberSignature Language="DocId" Value="M:MultipeerConnectivity.MCSessionDelegate.DidFinishReceivingResource(MultipeerConnectivity.MCSession,System.String,MultipeerConnectivity.MCPeerID,Foundation.NSUrl,Foundation.NSError)" />
      <MemberSignature Language="F#" Value="abstract member DidFinishReceivingResource : MultipeerConnectivity.MCSession * string * MultipeerConnectivity.MCPeerID * Foundation.NSUrl * Foundation.NSError -&gt; unit" Usage="mCSessionDelegate.DidFinishReceivingResource (session, resourceName, fromPeer, localUrl, error)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:MultipeerConnectivity.IMCSessionDelegate.DidFinishReceivingResource(MultipeerConnectivity.MCSession,System.String,MultipeerConnectivity.MCPeerID,Foundation.NSUrl,Foundation.NSError)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("session:didFinishReceivingResourceWithName:fromPeer:atURL:withError:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="MultipeerConnectivity.MCSession" />
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="fromPeer" Type="MultipeerConnectivity.MCPeerID" />
        <Parameter Name="localUrl" Type="Foundation.NSUrl" />
        <Parameter Name="error" Type="Foundation.NSError" />
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="resourceName">To be added.</param>
        <param name="fromPeer">To be added.</param>
        <param name="localUrl">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="error">
          <para>The error (if any) that occurred during transfer.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Indicates that the transfer of <paramref name="resourceName" /> has completed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidReceiveCertificate">
      <MemberSignature Language="C#" Value="public virtual bool DidReceiveCertificate (MultipeerConnectivity.MCSession session, Security.SecCertificate[] certificate, MultipeerConnectivity.MCPeerID peerID, Action&lt;bool&gt; certificateHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DidReceiveCertificate(class MultipeerConnectivity.MCSession session, class Security.SecCertificate[] certificate, class MultipeerConnectivity.MCPeerID peerID, class System.Action`1&lt;bool&gt; certificateHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:MultipeerConnectivity.MCSessionDelegate.DidReceiveCertificate(MultipeerConnectivity.MCSession,Security.SecCertificate[],MultipeerConnectivity.MCPeerID,System.Action{System.Boolean})" />
      <MemberSignature Language="F#" Value="abstract member DidReceiveCertificate : MultipeerConnectivity.MCSession * Security.SecCertificate[] * MultipeerConnectivity.MCPeerID * Action&lt;bool&gt; -&gt; bool&#xA;override this.DidReceiveCertificate : MultipeerConnectivity.MCSession * Security.SecCertificate[] * MultipeerConnectivity.MCPeerID * Action&lt;bool&gt; -&gt; bool" Usage="mCSessionDelegate.DidReceiveCertificate (session, certificate, peerID, certificateHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("session:didReceiveCertificate:fromPeer:certificateHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="MultipeerConnectivity.MCSession" />
        <Parameter Name="certificate" Type="Security.SecCertificate[]" />
        <Parameter Name="peerID" Type="MultipeerConnectivity.MCPeerID" />
        <Parameter Name="certificateHandler" Type="System.Action&lt;System.Boolean&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V2))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="certificate">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="peerID">To be added.</param>
        <param name="certificateHandler">To be added.</param>
        <summary>Indicates <paramref name="peerID" /> wishes to join the <paramref name="session" />. <paramref name="certificateHandler" /> must be called.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>When overriding this method, the application developer must invoke the <paramref name="certificateHandler" />, passing in <see langword="true" /> if the peer should be accepted to the <paramref name="session" />.</para>
          <para>The Multipeer Connectivity framework makes no attempt to validate passed certificates. It is the application developer's responsibility to ensure their validity.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidReceiveData">
      <MemberSignature Language="C#" Value="public abstract void DidReceiveData (MultipeerConnectivity.MCSession session, Foundation.NSData data, MultipeerConnectivity.MCPeerID peerID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidReceiveData(class MultipeerConnectivity.MCSession session, class Foundation.NSData data, class MultipeerConnectivity.MCPeerID peerID) cil managed" />
      <MemberSignature Language="DocId" Value="M:MultipeerConnectivity.MCSessionDelegate.DidReceiveData(MultipeerConnectivity.MCSession,Foundation.NSData,MultipeerConnectivity.MCPeerID)" />
      <MemberSignature Language="F#" Value="abstract member DidReceiveData : MultipeerConnectivity.MCSession * Foundation.NSData * MultipeerConnectivity.MCPeerID -&gt; unit" Usage="mCSessionDelegate.DidReceiveData (session, data, peerID)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:MultipeerConnectivity.IMCSessionDelegate.DidReceiveData(MultipeerConnectivity.MCSession,Foundation.NSData,MultipeerConnectivity.MCPeerID)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("session:didReceiveData:fromPeer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="MultipeerConnectivity.MCSession" />
        <Parameter Name="data" Type="Foundation.NSData" />
        <Parameter Name="peerID" Type="MultipeerConnectivity.MCPeerID" />
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="data">To be added.</param>
        <param name="peerID">To be added.</param>
        <summary>Indicates the arrival of <paramref name="data" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidReceiveStream">
      <MemberSignature Language="C#" Value="public abstract void DidReceiveStream (MultipeerConnectivity.MCSession session, Foundation.NSInputStream stream, string streamName, MultipeerConnectivity.MCPeerID peerID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidReceiveStream(class MultipeerConnectivity.MCSession session, class Foundation.NSInputStream stream, string streamName, class MultipeerConnectivity.MCPeerID peerID) cil managed" />
      <MemberSignature Language="DocId" Value="M:MultipeerConnectivity.MCSessionDelegate.DidReceiveStream(MultipeerConnectivity.MCSession,Foundation.NSInputStream,System.String,MultipeerConnectivity.MCPeerID)" />
      <MemberSignature Language="F#" Value="abstract member DidReceiveStream : MultipeerConnectivity.MCSession * Foundation.NSInputStream * string * MultipeerConnectivity.MCPeerID -&gt; unit" Usage="mCSessionDelegate.DidReceiveStream (session, stream, streamName, peerID)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:MultipeerConnectivity.IMCSessionDelegate.DidReceiveStream(MultipeerConnectivity.MCSession,Foundation.NSInputStream,System.String,MultipeerConnectivity.MCPeerID)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("session:didReceiveStream:withName:fromPeer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="MultipeerConnectivity.MCSession" />
        <Parameter Name="stream" Type="Foundation.NSInputStream" />
        <Parameter Name="streamName" Type="System.String" />
        <Parameter Name="peerID" Type="MultipeerConnectivity.MCPeerID" />
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="stream">To be added.</param>
        <param name="streamName">To be added.</param>
        <param name="peerID">To be added.</param>
        <summary>Indicates the arrival of <paramref name="stream" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidStartReceivingResource">
      <MemberSignature Language="C#" Value="public abstract void DidStartReceivingResource (MultipeerConnectivity.MCSession session, string resourceName, MultipeerConnectivity.MCPeerID fromPeer, Foundation.NSProgress progress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidStartReceivingResource(class MultipeerConnectivity.MCSession session, string resourceName, class MultipeerConnectivity.MCPeerID fromPeer, class Foundation.NSProgress progress) cil managed" />
      <MemberSignature Language="DocId" Value="M:MultipeerConnectivity.MCSessionDelegate.DidStartReceivingResource(MultipeerConnectivity.MCSession,System.String,MultipeerConnectivity.MCPeerID,Foundation.NSProgress)" />
      <MemberSignature Language="F#" Value="abstract member DidStartReceivingResource : MultipeerConnectivity.MCSession * string * MultipeerConnectivity.MCPeerID * Foundation.NSProgress -&gt; unit" Usage="mCSessionDelegate.DidStartReceivingResource (session, resourceName, fromPeer, progress)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:MultipeerConnectivity.IMCSessionDelegate.DidStartReceivingResource(MultipeerConnectivity.MCSession,System.String,MultipeerConnectivity.MCPeerID,Foundation.NSProgress)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("session:didStartReceivingResourceWithName:fromPeer:withProgress:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="MultipeerConnectivity.MCSession" />
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="fromPeer" Type="MultipeerConnectivity.MCPeerID" />
        <Parameter Name="progress" Type="Foundation.NSProgress" />
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="resourceName">To be added.</param>
        <param name="fromPeer">To be added.</param>
        <param name="progress">To be added.</param>
        <summary>Indicates that <paramref name="resourceName" /> has begun to arrive.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
