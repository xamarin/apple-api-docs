<Type Name="IMTLCommandBuffer" FullName="Metal.IMTLCommandBuffer">
  <TypeSignature Language="C#" Value="public interface IMTLCommandBuffer : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMTLCommandBuffer implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Metal.IMTLCommandBuffer" />
  <TypeSignature Language="F#" Value="type IMTLCommandBuffer = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol(Name="MTLCommandBuffer", WrapperType=typeof(Metal.MTLCommandBufferWrapper))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="Enqueue", Selector="enqueue")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="Commit", Selector="commit")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="AddScheduledHandler", ParameterBlockProxy=Mono.Cecil.CustomAttributeArgument[], ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="addScheduledHandler:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="WaitUntilScheduled", Selector="waitUntilScheduled")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="AddCompletedHandler", ParameterBlockProxy=Mono.Cecil.CustomAttributeArgument[], ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="addCompletedHandler:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="WaitUntilCompleted", Selector="waitUntilCompleted")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ComputeCommandEncoderDispatch", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(Metal.IMTLComputeCommandEncoder), Selector="computeCommandEncoderWithDispatchType:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="EncodeWait", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="encodeWaitForEvent:value:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="EncodeSignal", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="encodeSignalEvent:value:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="CreateParallelRenderCommandEncoder", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(Metal.IMTLParallelRenderCommandEncoder), Selector="parallelRenderCommandEncoderWithDescriptor:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="PresentDrawable", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="presentDrawable:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="PresentDrawable", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="presentDrawable:atTime:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="PresentDrawableAfter", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="presentDrawable:afterMinimumDuration:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="CreateRenderCommandEncoder", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(Metal.IMTLRenderCommandEncoder), Selector="renderCommandEncoderWithDescriptor:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="PushDebugGroup", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="pushDebugGroup:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="PopDebugGroup", Selector="popDebugGroup")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="device", IsProperty=true, IsRequired=true, IsStatic=false, Name="Device", PropertyType=typeof(Metal.IMTLDevice), Selector="device")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="commandQueue", IsProperty=true, IsRequired=true, IsStatic=false, Name="CommandQueue", PropertyType=typeof(Metal.IMTLCommandQueue), Selector="commandQueue")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="retainedReferences", IsProperty=true, IsRequired=true, IsStatic=false, Name="RetainedReferences", PropertyType=typeof(System.Boolean), Selector="retainedReferences")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="label", IsProperty=true, IsRequired=true, IsStatic=false, Name="Label", PropertyType=typeof(System.String), Selector="label", SetterSelector="setLabel:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="status", IsProperty=true, IsRequired=true, IsStatic=false, Name="Status", PropertyType=typeof(Metal.MTLCommandBufferStatus), Selector="status")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="error", IsProperty=true, IsRequired=true, IsStatic=false, Name="Error", PropertyType=typeof(Foundation.NSError), Selector="error")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="blitCommandEncoder", IsProperty=true, IsRequired=true, IsStatic=false, Name="BlitCommandEncoder", PropertyType=typeof(Metal.IMTLBlitCommandEncoder), Selector="blitCommandEncoder")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="computeCommandEncoder", IsProperty=true, IsRequired=true, IsStatic=false, Name="ComputeCommandEncoder", PropertyType=typeof(Metal.IMTLComputeCommandEncoder), Selector="computeCommandEncoder")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="kernelStartTime", IsProperty=true, IsRequired=false, IsStatic=false, Name="KernelStartTime", PropertyType=typeof(System.Double), Selector="kernelStartTime")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="kernelEndTime", IsProperty=true, IsRequired=false, IsStatic=false, Name="KernelEndTime", PropertyType=typeof(System.Double), Selector="kernelEndTime")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="GPUStartTime", IsProperty=true, IsRequired=false, IsStatic=false, Name="GpuStartTime", PropertyType=typeof(System.Double), Selector="GPUStartTime")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="GPUEndTime", IsProperty=true, IsRequired=false, IsStatic=false, Name="GpuEndTime", PropertyType=typeof(System.Double), Selector="GPUEndTime")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="AddScheduledHandler", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(System.Action`1&lt;Metal.IMTLCommandBuffer&gt;) }, Selector="addScheduledHandler:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="AddCompletedHandler", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(System.Action`1&lt;Metal.IMTLCommandBuffer&gt;) }, Selector="addCompletedHandler:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="CreateParallelRenderCommandEncoder", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(Metal.MTLRenderPassDescriptor) }, ReturnType=typeof(Metal.IMTLParallelRenderCommandEncoder), Selector="parallelRenderCommandEncoderWithDescriptor:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="PresentDrawable", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(Metal.IMTLDrawable) }, Selector="presentDrawable:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="PresentDrawable", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(Metal.IMTLDrawable), typeof(System.Double) }, Selector="presentDrawable:atTime:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="PresentDrawableAfter", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(Metal.IMTLDrawable), typeof(System.Double) }, Selector="presentDrawable:afterMinimumDuration:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="CreateRenderCommandEncoder", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(Metal.MTLRenderPassDescriptor) }, ReturnType=typeof(Metal.IMTLRenderCommandEncoder), Selector="renderCommandEncoderWithDescriptor:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="PushDebugGroup", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(System.String) }, Selector="pushDebugGroup:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Protocol for commands that are run on a GPU</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddCompletedHandler">
      <MemberSignature Language="C#" Value="public void AddCompletedHandler (Action&lt;Metal.IMTLCommandBuffer&gt; block);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddCompletedHandler(class System.Action`1&lt;class Metal.IMTLCommandBuffer&gt; block) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLCommandBuffer.AddCompletedHandler(System.Action{Metal.IMTLCommandBuffer})" />
      <MemberSignature Language="F#" Value="abstract member AddCompletedHandler : Action&lt;Metal.IMTLCommandBuffer&gt; -&gt; unit" Usage="iMTLCommandBuffer.AddCompletedHandler block" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("addCompletedHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="block" Type="System.Action&lt;Metal.IMTLCommandBuffer&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V7))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="block">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddScheduledHandler">
      <MemberSignature Language="C#" Value="public void AddScheduledHandler (Action&lt;Metal.IMTLCommandBuffer&gt; block);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddScheduledHandler(class System.Action`1&lt;class Metal.IMTLCommandBuffer&gt; block) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLCommandBuffer.AddScheduledHandler(System.Action{Metal.IMTLCommandBuffer})" />
      <MemberSignature Language="F#" Value="abstract member AddScheduledHandler : Action&lt;Metal.IMTLCommandBuffer&gt; -&gt; unit" Usage="iMTLCommandBuffer.AddScheduledHandler block" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("addScheduledHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="block" Type="System.Action&lt;Metal.IMTLCommandBuffer&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V7))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="block">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BlitCommandEncoder">
      <MemberSignature Language="C#" Value="public Metal.IMTLBlitCommandEncoder BlitCommandEncoder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Metal.IMTLBlitCommandEncoder BlitCommandEncoder" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLCommandBuffer.BlitCommandEncoder" />
      <MemberSignature Language="F#" Value="member this.BlitCommandEncoder : Metal.IMTLBlitCommandEncoder" Usage="Metal.IMTLCommandBuffer.BlitCommandEncoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("blitCommandEncoder")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLBlitCommandEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandQueue">
      <MemberSignature Language="C#" Value="public Metal.IMTLCommandQueue CommandQueue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Metal.IMTLCommandQueue CommandQueue" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLCommandBuffer.CommandQueue" />
      <MemberSignature Language="F#" Value="member this.CommandQueue : Metal.IMTLCommandQueue" Usage="Metal.IMTLCommandBuffer.CommandQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("commandQueue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLCommandQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLCommandBuffer.Commit" />
      <MemberSignature Language="F#" Value="abstract member Commit : unit -&gt; unit" Usage="iMTLCommandBuffer.Commit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("commit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeCommandEncoder">
      <MemberSignature Language="C#" Value="public Metal.IMTLComputeCommandEncoder ComputeCommandEncoder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Metal.IMTLComputeCommandEncoder ComputeCommandEncoder" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLCommandBuffer.ComputeCommandEncoder" />
      <MemberSignature Language="F#" Value="member this.ComputeCommandEncoder : Metal.IMTLComputeCommandEncoder" Usage="Metal.IMTLCommandBuffer.ComputeCommandEncoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("computeCommandEncoder")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLComputeCommandEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParallelRenderCommandEncoder">
      <MemberSignature Language="C#" Value="public Metal.IMTLParallelRenderCommandEncoder CreateParallelRenderCommandEncoder (Metal.MTLRenderPassDescriptor renderPassDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Metal.IMTLParallelRenderCommandEncoder CreateParallelRenderCommandEncoder(class Metal.MTLRenderPassDescriptor renderPassDescriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLCommandBuffer.CreateParallelRenderCommandEncoder(Metal.MTLRenderPassDescriptor)" />
      <MemberSignature Language="F#" Value="abstract member CreateParallelRenderCommandEncoder : Metal.MTLRenderPassDescriptor -&gt; Metal.IMTLParallelRenderCommandEncoder" Usage="iMTLCommandBuffer.CreateParallelRenderCommandEncoder renderPassDescriptor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("parallelRenderCommandEncoderWithDescriptor:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLParallelRenderCommandEncoder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="renderPassDescriptor" Type="Metal.MTLRenderPassDescriptor" />
      </Parameters>
      <Docs>
        <param name="renderPassDescriptor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRenderCommandEncoder">
      <MemberSignature Language="C#" Value="public Metal.IMTLRenderCommandEncoder CreateRenderCommandEncoder (Metal.MTLRenderPassDescriptor renderPassDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Metal.IMTLRenderCommandEncoder CreateRenderCommandEncoder(class Metal.MTLRenderPassDescriptor renderPassDescriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLCommandBuffer.CreateRenderCommandEncoder(Metal.MTLRenderPassDescriptor)" />
      <MemberSignature Language="F#" Value="abstract member CreateRenderCommandEncoder : Metal.MTLRenderPassDescriptor -&gt; Metal.IMTLRenderCommandEncoder" Usage="iMTLCommandBuffer.CreateRenderCommandEncoder renderPassDescriptor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("renderCommandEncoderWithDescriptor:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLRenderCommandEncoder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="renderPassDescriptor" Type="Metal.MTLRenderPassDescriptor" />
      </Parameters>
      <Docs>
        <param name="renderPassDescriptor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Device">
      <MemberSignature Language="C#" Value="public Metal.IMTLDevice Device { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Metal.IMTLDevice Device" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLCommandBuffer.Device" />
      <MemberSignature Language="F#" Value="member this.Device : Metal.IMTLDevice" Usage="Metal.IMTLCommandBuffer.Device" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("device")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enqueue">
      <MemberSignature Language="C#" Value="public void Enqueue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Enqueue() cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLCommandBuffer.Enqueue" />
      <MemberSignature Language="F#" Value="abstract member Enqueue : unit -&gt; unit" Usage="iMTLCommandBuffer.Enqueue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("enqueue")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public Foundation.NSError Error { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSError Error" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLCommandBuffer.Error" />
      <MemberSignature Language="F#" Value="member this.Error : Foundation.NSError" Usage="Metal.IMTLCommandBuffer.Error" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("error")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public string Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLCommandBuffer.Label" />
      <MemberSignature Language="F#" Value="member this.Label : string with get, set" Usage="Metal.IMTLCommandBuffer.Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("label")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setLabel:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentDrawable">
      <MemberSignature Language="C#" Value="public void PresentDrawable (Metal.IMTLDrawable drawable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PresentDrawable(class Metal.IMTLDrawable drawable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLCommandBuffer.PresentDrawable(Metal.IMTLDrawable)" />
      <MemberSignature Language="F#" Value="abstract member PresentDrawable : Metal.IMTLDrawable -&gt; unit" Usage="iMTLCommandBuffer.PresentDrawable drawable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("presentDrawable:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drawable" Type="Metal.IMTLDrawable" />
      </Parameters>
      <Docs>
        <param name="drawable">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentDrawable">
      <MemberSignature Language="C#" Value="public void PresentDrawable (Metal.IMTLDrawable drawable, double presentationTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PresentDrawable(class Metal.IMTLDrawable drawable, float64 presentationTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLCommandBuffer.PresentDrawable(Metal.IMTLDrawable,System.Double)" />
      <MemberSignature Language="F#" Value="abstract member PresentDrawable : Metal.IMTLDrawable * double -&gt; unit" Usage="iMTLCommandBuffer.PresentDrawable (drawable, presentationTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("presentDrawable:atTime:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drawable" Type="Metal.IMTLDrawable" />
        <Parameter Name="presentationTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="drawable">To be added.</param>
        <param name="presentationTime">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RetainedReferences">
      <MemberSignature Language="C#" Value="public bool RetainedReferences { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RetainedReferences" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLCommandBuffer.RetainedReferences" />
      <MemberSignature Language="F#" Value="member this.RetainedReferences : bool" Usage="Metal.IMTLCommandBuffer.RetainedReferences" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("retainedReferences")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public Metal.MTLCommandBufferStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Metal.MTLCommandBufferStatus Status" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLCommandBuffer.Status" />
      <MemberSignature Language="F#" Value="member this.Status : Metal.MTLCommandBufferStatus" Usage="Metal.IMTLCommandBuffer.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("status")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.MTLCommandBufferStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitUntilCompleted">
      <MemberSignature Language="C#" Value="public void WaitUntilCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WaitUntilCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLCommandBuffer.WaitUntilCompleted" />
      <MemberSignature Language="F#" Value="abstract member WaitUntilCompleted : unit -&gt; unit" Usage="iMTLCommandBuffer.WaitUntilCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("waitUntilCompleted")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitUntilScheduled">
      <MemberSignature Language="C#" Value="public void WaitUntilScheduled ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WaitUntilScheduled() cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLCommandBuffer.WaitUntilScheduled" />
      <MemberSignature Language="F#" Value="abstract member WaitUntilScheduled : unit -&gt; unit" Usage="iMTLCommandBuffer.WaitUntilScheduled " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("waitUntilScheduled")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
