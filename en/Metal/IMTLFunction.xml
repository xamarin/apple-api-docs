<Type Name="IMTLFunction" FullName="Metal.IMTLFunction">
  <TypeSignature Language="C#" Value="public interface IMTLFunction : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMTLFunction implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Metal.IMTLFunction" />
  <TypeSignature Language="F#" Value="type IMTLFunction = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol(Name="MTLFunction", WrapperType=typeof(Metal.MTLFunctionWrapper))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="CreateArgumentEncoder", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(Metal.IMTLArgumentEncoder), Selector="newArgumentEncoderWithBufferIndex:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="CreateArgumentEncoder", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(Metal.IMTLArgumentEncoder), Selector="newArgumentEncoderWithBufferIndex:reflection:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="label", IsProperty=true, IsRequired=false, IsStatic=false, Name="Label", PropertyType=typeof(System.String), Selector="label", SetterSelector="setLabel:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="device", IsProperty=true, IsRequired=true, IsStatic=false, Name="Device", PropertyType=typeof(Metal.IMTLDevice), Selector="device")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="functionType", IsProperty=true, IsRequired=true, IsStatic=false, Name="FunctionType", PropertyType=typeof(Metal.MTLFunctionType), Selector="functionType")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="vertexAttributes", IsProperty=true, IsRequired=true, IsStatic=false, Name="VertexAttributes", PropertyType=typeof(Metal.MTLVertexAttribute[]), Selector="vertexAttributes")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="name", IsProperty=true, IsRequired=true, IsStatic=false, Name="Name", PropertyType=typeof(System.String), Selector="name")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="patchType", IsProperty=true, IsRequired=false, IsStatic=false, Name="PatchType", PropertyType=typeof(Metal.MTLPatchType), Selector="patchType")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="patchControlPointCount", IsProperty=true, IsRequired=false, IsStatic=false, Name="PatchControlPointCount", PropertyType=typeof(System.nint), Selector="patchControlPointCount")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="stageInputAttributes", IsProperty=true, IsRequired=false, IsStatic=false, Name="StageInputAttributes", PropertyType=typeof(Metal.MTLAttribute[]), Selector="stageInputAttributes")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="functionConstantsDictionary", IsProperty=true, IsRequired=false, IsStatic=false, Name="FunctionConstants", PropertyType=typeof(Foundation.NSDictionary`2&lt;Foundation.NSString,Metal.MTLFunctionConstant&gt;), Selector="functionConstantsDictionary")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="CreateArgumentEncoder", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(System.nuint) }, ReturnType=typeof(Metal.IMTLArgumentEncoder), Selector="newArgumentEncoderWithBufferIndex:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="CreateArgumentEncoder", ParameterByRef=new System.Boolean[] { false, true }, ParameterType=new System.Type[] { typeof(System.nuint), typeof(Metal.MTLArgument) }, ReturnType=typeof(Metal.IMTLArgumentEncoder), Selector="newArgumentEncoderWithBufferIndex:reflection:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>System protocol for shader functions that are suitable for use on a GPU in a shader or compute function.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Device">
      <MemberSignature Language="C#" Value="public Metal.IMTLDevice Device { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Metal.IMTLDevice Device" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLFunction.Device" />
      <MemberSignature Language="F#" Value="member this.Device : Metal.IMTLDevice" Usage="Metal.IMTLFunction.Device" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("device")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FunctionType">
      <MemberSignature Language="C#" Value="public Metal.MTLFunctionType FunctionType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Metal.MTLFunctionType FunctionType" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLFunction.FunctionType" />
      <MemberSignature Language="F#" Value="member this.FunctionType : Metal.MTLFunctionType" Usage="Metal.IMTLFunction.FunctionType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("functionType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.MTLFunctionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLFunction.Name" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="Metal.IMTLFunction.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("name")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VertexAttributes">
      <MemberSignature Language="C#" Value="public Metal.MTLVertexAttribute[] VertexAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Metal.MTLVertexAttribute[] VertexAttributes" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLFunction.VertexAttributes" />
      <MemberSignature Language="F#" Value="member this.VertexAttributes : Metal.MTLVertexAttribute[]" Usage="Metal.IMTLFunction.VertexAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("vertexAttributes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.MTLVertexAttribute[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
