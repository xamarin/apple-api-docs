<Type Name="IMTLRenderCommandEncoder" FullName="Metal.IMTLRenderCommandEncoder">
  <TypeSignature Language="C#" Value="public interface IMTLRenderCommandEncoder : IDisposable, Metal.IMTLCommandEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMTLRenderCommandEncoder implements class Metal.IMTLCommandEncoder, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Metal.IMTLCommandEncoder</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="MTLRenderCommandEncoder", WrapperType=typeof(Metal.MTLRenderCommandEncoderWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetRenderPipelineState", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setRenderPipelineState:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetVertexBuffer", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setVertexBuffer:offset:atIndex:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetVertexTexture", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setVertexTexture:atIndex:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetVertexSamplerState", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setVertexSamplerState:atIndex:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetVertexSamplerState", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setVertexSamplerState:lodMinClamp:lodMaxClamp:atIndex:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetViewport", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setViewport:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetFrontFacingWinding", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setFrontFacingWinding:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetCullMode", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setCullMode:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SetDepthClipMode", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setDepthClipMode:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetDepthBias", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setDepthBias:slopeScale:clamp:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetScissorRect", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setScissorRect:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetTriangleFillMode", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setTriangleFillMode:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetFragmentBuffer", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setFragmentBuffer:offset:atIndex:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetFragmentBufferOffset", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setFragmentBufferOffset:atIndex:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetFragmentBytes", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setFragmentBytes:length:atIndex:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetFragmentTexture", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setFragmentTexture:atIndex:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetFragmentSamplerState", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setFragmentSamplerState:atIndex:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetFragmentSamplerState", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setFragmentSamplerState:lodMinClamp:lodMaxClamp:atIndex:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetBlendColor", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setBlendColorRed:green:blue:alpha:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetDepthStencilState", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setDepthStencilState:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetStencilReferenceValue", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setStencilReferenceValue:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SetStencilFrontReferenceValue", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setStencilFrontReferenceValue:backReferenceValue:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetVisibilityResultMode", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setVisibilityResultMode:offset:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SetColorStoreAction", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setColorStoreAction:atIndex:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SetDepthStoreAction", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setDepthStoreAction:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SetStencilStoreAction", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setStencilStoreAction:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="DrawPrimitives", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="drawPrimitives:vertexStart:vertexCount:instanceCount:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="DrawPrimitives", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="drawPrimitives:vertexStart:vertexCount:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="DrawIndexedPrimitives", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="DrawIndexedPrimitives", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DrawPrimitives", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DrawIndexedPrimitives", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DrawPrimitives", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="drawPrimitives:indirectBuffer:indirectBufferOffset:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DrawIndexedPrimitives", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetFragmentBuffers", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setFragmentBuffers:offsets:withRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetFragmentSamplerStates", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setFragmentSamplerStates:lodMinClamps:lodMaxClamps:withRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetFragmentSamplerStates", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setFragmentSamplerStates:withRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetFragmentTextures", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setFragmentTextures:withRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetVertexBuffers", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setVertexBuffers:offsets:withRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetVertexBufferOffset", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setVertexBufferOffset:atIndex:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetVertexBytes", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setVertexBytes:length:atIndex:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetVertexSamplerStates", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setVertexSamplerStates:lodMinClamps:lodMaxClamps:withRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetVertexSamplerStates", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setVertexSamplerStates:withRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetVertexTextures", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setVertexTextures:withRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="Update", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="updateFence:afterStages:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="Wait", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="waitForFence:beforeStages:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SetTessellationFactorBuffer", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setTessellationFactorBuffer:offset:instanceStride:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SetTessellationFactorScale", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setTessellationFactorScale:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DrawPatches", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DrawIndexedPatches", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SetColorStoreActionOptions", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setColorStoreActionOptions:atIndex:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SetDepthStoreActionOptions", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setDepthStoreActionOptions:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SetStencilStoreActionOptions", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setStencilStoreActionOptions:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="UseResource", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="useResource:usage:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="UseResources", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="useResources:count:usage:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="UseHeap", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="useHeap:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="UseHeaps", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="useHeaps:count:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SetTileBytes", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setTileBytes:length:atIndex:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SetTileBuffer", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setTileBuffer:offset:atIndex:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SetTileBufferOffset", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setTileBufferOffset:atIndex:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SetTileBuffers", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setTileBuffers:offsets:withRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SetTileTexture", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setTileTexture:atIndex:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SetTileTextures", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setTileTextures:withRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SetTileSamplerState", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setTileSamplerState:atIndex:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SetTileSamplerStates", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setTileSamplerStates:withRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SetTileSamplerState", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setTileSamplerState:lodMinClamp:lodMaxClamp:atIndex:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SetTileSamplerStates", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setTileSamplerStates:lodMinClamps:lodMaxClamps:withRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DispatchThreadsPerTile", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="dispatchThreadsPerTile:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SetThreadgroupMemoryLength", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setThreadgroupMemoryLength:offset:atIndex:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="tileWidth", IsProperty=true, IsRequired=false, IsStatic=false, Name="TileWidth", PropertyType=typeof(System.nuint), Selector="tileWidth")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="tileHeight", IsProperty=true, IsRequired=false, IsStatic=false, Name="TileHeight", PropertyType=typeof(System.nuint), Selector="tileHeight")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>System protocol for encoding render commands and state into a buffer.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="DrawIndexedPrimitives">
      <MemberSignature Language="C#" Value="public void DrawIndexedPrimitives (Metal.MTLPrimitiveType primitiveType, nuint indexCount, Metal.MTLIndexType indexType, Metal.IMTLBuffer indexBuffer, nuint indexBufferOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawIndexedPrimitives(valuetype Metal.MTLPrimitiveType primitiveType, valuetype System.nuint indexCount, valuetype Metal.MTLIndexType indexType, class Metal.IMTLBuffer indexBuffer, valuetype System.nuint indexBufferOffset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="primitiveType" Type="Metal.MTLPrimitiveType" />
        <Parameter Name="indexCount" Type="System.nuint" />
        <Parameter Name="indexType" Type="Metal.MTLIndexType" />
        <Parameter Name="indexBuffer" Type="Metal.IMTLBuffer" />
        <Parameter Name="indexBufferOffset" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="primitiveType">To be added.</param>
        <param name="indexCount">To be added.</param>
        <param name="indexType">To be added.</param>
        <param name="indexBuffer">To be added.</param>
        <param name="indexBufferOffset">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawIndexedPrimitives">
      <MemberSignature Language="C#" Value="public void DrawIndexedPrimitives (Metal.MTLPrimitiveType primitiveType, nuint indexCount, Metal.MTLIndexType indexType, Metal.IMTLBuffer indexBuffer, nuint indexBufferOffset, nuint instanceCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawIndexedPrimitives(valuetype Metal.MTLPrimitiveType primitiveType, valuetype System.nuint indexCount, valuetype Metal.MTLIndexType indexType, class Metal.IMTLBuffer indexBuffer, valuetype System.nuint indexBufferOffset, valuetype System.nuint instanceCount) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="primitiveType" Type="Metal.MTLPrimitiveType" />
        <Parameter Name="indexCount" Type="System.nuint" />
        <Parameter Name="indexType" Type="Metal.MTLIndexType" />
        <Parameter Name="indexBuffer" Type="Metal.IMTLBuffer" />
        <Parameter Name="indexBufferOffset" Type="System.nuint" />
        <Parameter Name="instanceCount" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="primitiveType">To be added.</param>
        <param name="indexCount">To be added.</param>
        <param name="indexType">To be added.</param>
        <param name="indexBuffer">To be added.</param>
        <param name="indexBufferOffset">To be added.</param>
        <param name="instanceCount">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPrimitives">
      <MemberSignature Language="C#" Value="public void DrawPrimitives (Metal.MTLPrimitiveType primitiveType, nuint vertexStart, nuint vertexCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPrimitives(valuetype Metal.MTLPrimitiveType primitiveType, valuetype System.nuint vertexStart, valuetype System.nuint vertexCount) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("drawPrimitives:vertexStart:vertexCount:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="primitiveType" Type="Metal.MTLPrimitiveType" />
        <Parameter Name="vertexStart" Type="System.nuint" />
        <Parameter Name="vertexCount" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="primitiveType">To be added.</param>
        <param name="vertexStart">To be added.</param>
        <param name="vertexCount">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPrimitives">
      <MemberSignature Language="C#" Value="public void DrawPrimitives (Metal.MTLPrimitiveType primitiveType, nuint vertexStart, nuint vertexCount, nuint instanceCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPrimitives(valuetype Metal.MTLPrimitiveType primitiveType, valuetype System.nuint vertexStart, valuetype System.nuint vertexCount, valuetype System.nuint instanceCount) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("drawPrimitives:vertexStart:vertexCount:instanceCount:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="primitiveType" Type="Metal.MTLPrimitiveType" />
        <Parameter Name="vertexStart" Type="System.nuint" />
        <Parameter Name="vertexCount" Type="System.nuint" />
        <Parameter Name="instanceCount" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="primitiveType">To be added.</param>
        <param name="vertexStart">To be added.</param>
        <param name="vertexCount">To be added.</param>
        <param name="instanceCount">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBlendColor">
      <MemberSignature Language="C#" Value="public void SetBlendColor (float red, float green, float blue, float alpha);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBlendColor(float32 red, float32 green, float32 blue, float32 alpha) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setBlendColorRed:green:blue:alpha:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="red" Type="System.Single" />
        <Parameter Name="green" Type="System.Single" />
        <Parameter Name="blue" Type="System.Single" />
        <Parameter Name="alpha" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="red">To be added.</param>
        <param name="green">To be added.</param>
        <param name="blue">To be added.</param>
        <param name="alpha">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCullMode">
      <MemberSignature Language="C#" Value="public void SetCullMode (Metal.MTLCullMode cullMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCullMode(valuetype Metal.MTLCullMode cullMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setCullMode:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cullMode" Type="Metal.MTLCullMode" />
      </Parameters>
      <Docs>
        <param name="cullMode">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDepthBias">
      <MemberSignature Language="C#" Value="public void SetDepthBias (float depthBias, float slopeScale, float clamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDepthBias(float32 depthBias, float32 slopeScale, float32 clamp) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setDepthBias:slopeScale:clamp:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="depthBias" Type="System.Single" />
        <Parameter Name="slopeScale" Type="System.Single" />
        <Parameter Name="clamp" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="depthBias">To be added.</param>
        <param name="slopeScale">To be added.</param>
        <param name="clamp">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDepthStencilState">
      <MemberSignature Language="C#" Value="public void SetDepthStencilState (Metal.IMTLDepthStencilState depthStencilState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDepthStencilState(class Metal.IMTLDepthStencilState depthStencilState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setDepthStencilState:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="depthStencilState" Type="Metal.IMTLDepthStencilState" />
      </Parameters>
      <Docs>
        <param name="depthStencilState">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFragmentBuffer">
      <MemberSignature Language="C#" Value="public void SetFragmentBuffer (Metal.IMTLBuffer buffer, nuint offset, nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFragmentBuffer(class Metal.IMTLBuffer buffer, valuetype System.nuint offset, valuetype System.nuint index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setFragmentBuffer:offset:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="Metal.IMTLBuffer" />
        <Parameter Name="offset" Type="System.nuint" />
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFragmentBufferOffset">
      <MemberSignature Language="C#" Value="public void SetFragmentBufferOffset (nuint offset, nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFragmentBufferOffset(valuetype System.nuint offset, valuetype System.nuint index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setFragmentBufferOffset:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 3, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 3, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.nuint" />
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="offset">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFragmentBuffers">
      <MemberSignature Language="C#" Value="public void SetFragmentBuffers (Metal.IMTLBuffer buffers, IntPtr IntPtrOffsets, Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFragmentBuffers(class Metal.IMTLBuffer buffers, native int IntPtrOffsets, valuetype Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setFragmentBuffers:offsets:withRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="Metal.IMTLBuffer" />
        <Parameter Name="IntPtrOffsets" Type="System.IntPtr" />
        <Parameter Name="range" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="buffers">To be added.</param>
        <param name="IntPtrOffsets">To be added.</param>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFragmentBytes">
      <MemberSignature Language="C#" Value="public void SetFragmentBytes (IntPtr bytes, nuint length, nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFragmentBytes(native int bytes, valuetype System.nuint length, valuetype System.nuint index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setFragmentBytes:length:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 3, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 3, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.nuint" />
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <param name="length">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFragmentSamplerState">
      <MemberSignature Language="C#" Value="public void SetFragmentSamplerState (Metal.IMTLSamplerState sampler, nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFragmentSamplerState(class Metal.IMTLSamplerState sampler, valuetype System.nuint index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setFragmentSamplerState:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sampler" Type="Metal.IMTLSamplerState" />
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="sampler">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFragmentSamplerState">
      <MemberSignature Language="C#" Value="public void SetFragmentSamplerState (Metal.IMTLSamplerState sampler, float lodMinClamp, float lodMaxClamp, nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFragmentSamplerState(class Metal.IMTLSamplerState sampler, float32 lodMinClamp, float32 lodMaxClamp, valuetype System.nuint index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setFragmentSamplerState:lodMinClamp:lodMaxClamp:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sampler" Type="Metal.IMTLSamplerState" />
        <Parameter Name="lodMinClamp" Type="System.Single" />
        <Parameter Name="lodMaxClamp" Type="System.Single" />
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="sampler">To be added.</param>
        <param name="lodMinClamp">To be added.</param>
        <param name="lodMaxClamp">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFragmentSamplerStates">
      <MemberSignature Language="C#" Value="public void SetFragmentSamplerStates (Metal.IMTLSamplerState[] samplers, Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFragmentSamplerStates(class Metal.IMTLSamplerState[] samplers, valuetype Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setFragmentSamplerStates:withRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="samplers" Type="Metal.IMTLSamplerState[]" />
        <Parameter Name="range" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="samplers">To be added.</param>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFragmentSamplerStates">
      <MemberSignature Language="C#" Value="public void SetFragmentSamplerStates (Metal.IMTLSamplerState[] samplers, IntPtr floatArrayPtrLodMinClamps, IntPtr floatArrayPtrLodMaxClamps, Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFragmentSamplerStates(class Metal.IMTLSamplerState[] samplers, native int floatArrayPtrLodMinClamps, native int floatArrayPtrLodMaxClamps, valuetype Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setFragmentSamplerStates:lodMinClamps:lodMaxClamps:withRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="samplers" Type="Metal.IMTLSamplerState[]" />
        <Parameter Name="floatArrayPtrLodMinClamps" Type="System.IntPtr" />
        <Parameter Name="floatArrayPtrLodMaxClamps" Type="System.IntPtr" />
        <Parameter Name="range" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="samplers">To be added.</param>
        <param name="floatArrayPtrLodMinClamps">To be added.</param>
        <param name="floatArrayPtrLodMaxClamps">To be added.</param>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFragmentTexture">
      <MemberSignature Language="C#" Value="public void SetFragmentTexture (Metal.IMTLTexture texture, nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFragmentTexture(class Metal.IMTLTexture texture, valuetype System.nuint index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setFragmentTexture:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="texture" Type="Metal.IMTLTexture" />
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="texture">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFragmentTextures">
      <MemberSignature Language="C#" Value="public void SetFragmentTextures (Metal.IMTLTexture[] textures, Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFragmentTextures(class Metal.IMTLTexture[] textures, valuetype Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setFragmentTextures:withRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textures" Type="Metal.IMTLTexture[]" />
        <Parameter Name="range" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="textures">To be added.</param>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFrontFacingWinding">
      <MemberSignature Language="C#" Value="public void SetFrontFacingWinding (Metal.MTLWinding frontFacingWinding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFrontFacingWinding(valuetype Metal.MTLWinding frontFacingWinding) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setFrontFacingWinding:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frontFacingWinding" Type="Metal.MTLWinding" />
      </Parameters>
      <Docs>
        <param name="frontFacingWinding">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRenderPipelineState">
      <MemberSignature Language="C#" Value="public void SetRenderPipelineState (Metal.IMTLRenderPipelineState pipelineState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetRenderPipelineState(class Metal.IMTLRenderPipelineState pipelineState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setRenderPipelineState:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pipelineState" Type="Metal.IMTLRenderPipelineState" />
      </Parameters>
      <Docs>
        <param name="pipelineState">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetScissorRect">
      <MemberSignature Language="C#" Value="public void SetScissorRect (Metal.MTLScissorRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetScissorRect(valuetype Metal.MTLScissorRect rect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setScissorRect:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="Metal.MTLScissorRect" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStencilReferenceValue">
      <MemberSignature Language="C#" Value="public void SetStencilReferenceValue (uint referenceValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetStencilReferenceValue(unsigned int32 referenceValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setStencilReferenceValue:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="referenceValue" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="referenceValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTriangleFillMode">
      <MemberSignature Language="C#" Value="public void SetTriangleFillMode (Metal.MTLTriangleFillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTriangleFillMode(valuetype Metal.MTLTriangleFillMode fillMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setTriangleFillMode:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fillMode" Type="Metal.MTLTriangleFillMode" />
      </Parameters>
      <Docs>
        <param name="fillMode">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVertexBuffer">
      <MemberSignature Language="C#" Value="public void SetVertexBuffer (Metal.IMTLBuffer buffer, nuint offset, nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVertexBuffer(class Metal.IMTLBuffer buffer, valuetype System.nuint offset, valuetype System.nuint index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setVertexBuffer:offset:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="Metal.IMTLBuffer" />
        <Parameter Name="offset" Type="System.nuint" />
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVertexBufferOffset">
      <MemberSignature Language="C#" Value="public void SetVertexBufferOffset (nuint offset, nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVertexBufferOffset(valuetype System.nuint offset, valuetype System.nuint index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setVertexBufferOffset:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 3, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 3, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.nuint" />
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="offset">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVertexBuffers">
      <MemberSignature Language="C#" Value="public void SetVertexBuffers (Metal.IMTLBuffer[] buffers, IntPtr uintArrayPtrOffsets, Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVertexBuffers(class Metal.IMTLBuffer[] buffers, native int uintArrayPtrOffsets, valuetype Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setVertexBuffers:offsets:withRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="Metal.IMTLBuffer[]" />
        <Parameter Name="uintArrayPtrOffsets" Type="System.IntPtr" />
        <Parameter Name="range" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="buffers">To be added.</param>
        <param name="uintArrayPtrOffsets">To be added.</param>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVertexBytes">
      <MemberSignature Language="C#" Value="public void SetVertexBytes (IntPtr bytes, nuint length, nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVertexBytes(native int bytes, valuetype System.nuint length, valuetype System.nuint index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setVertexBytes:length:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 3, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 3, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.nuint" />
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="bytes">To be added.</param>
        <param name="length">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVertexSamplerState">
      <MemberSignature Language="C#" Value="public void SetVertexSamplerState (Metal.IMTLSamplerState sampler, nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVertexSamplerState(class Metal.IMTLSamplerState sampler, valuetype System.nuint index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setVertexSamplerState:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sampler" Type="Metal.IMTLSamplerState" />
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="sampler">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVertexSamplerState">
      <MemberSignature Language="C#" Value="public void SetVertexSamplerState (Metal.IMTLSamplerState sampler, float lodMinClamp, float lodMaxClamp, nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVertexSamplerState(class Metal.IMTLSamplerState sampler, float32 lodMinClamp, float32 lodMaxClamp, valuetype System.nuint index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setVertexSamplerState:lodMinClamp:lodMaxClamp:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sampler" Type="Metal.IMTLSamplerState" />
        <Parameter Name="lodMinClamp" Type="System.Single" />
        <Parameter Name="lodMaxClamp" Type="System.Single" />
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="sampler">To be added.</param>
        <param name="lodMinClamp">To be added.</param>
        <param name="lodMaxClamp">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVertexSamplerStates">
      <MemberSignature Language="C#" Value="public void SetVertexSamplerStates (Metal.IMTLSamplerState[] samplers, Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVertexSamplerStates(class Metal.IMTLSamplerState[] samplers, valuetype Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setVertexSamplerStates:withRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="samplers" Type="Metal.IMTLSamplerState[]" />
        <Parameter Name="range" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="samplers">To be added.</param>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVertexSamplerStates">
      <MemberSignature Language="C#" Value="public void SetVertexSamplerStates (Metal.IMTLSamplerState[] samplers, IntPtr floatArrayPtrLodMinClamps, IntPtr floatArrayPtrLodMaxClamps, Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVertexSamplerStates(class Metal.IMTLSamplerState[] samplers, native int floatArrayPtrLodMinClamps, native int floatArrayPtrLodMaxClamps, valuetype Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setVertexSamplerStates:lodMinClamps:lodMaxClamps:withRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="samplers" Type="Metal.IMTLSamplerState[]" />
        <Parameter Name="floatArrayPtrLodMinClamps" Type="System.IntPtr" />
        <Parameter Name="floatArrayPtrLodMaxClamps" Type="System.IntPtr" />
        <Parameter Name="range" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="samplers">To be added.</param>
        <param name="floatArrayPtrLodMinClamps">To be added.</param>
        <param name="floatArrayPtrLodMaxClamps">To be added.</param>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVertexTexture">
      <MemberSignature Language="C#" Value="public void SetVertexTexture (Metal.IMTLTexture texture, nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVertexTexture(class Metal.IMTLTexture texture, valuetype System.nuint index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setVertexTexture:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="texture" Type="Metal.IMTLTexture" />
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="texture">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVertexTextures">
      <MemberSignature Language="C#" Value="public void SetVertexTextures (Metal.IMTLTexture[] textures, Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVertexTextures(class Metal.IMTLTexture[] textures, valuetype Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setVertexTextures:withRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textures" Type="Metal.IMTLTexture[]" />
        <Parameter Name="range" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="textures">To be added.</param>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetViewport">
      <MemberSignature Language="C#" Value="public void SetViewport (Metal.MTLViewport viewport);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetViewport(valuetype Metal.MTLViewport viewport) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setViewport:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewport" Type="Metal.MTLViewport" />
      </Parameters>
      <Docs>
        <param name="viewport">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVisibilityResultMode">
      <MemberSignature Language="C#" Value="public void SetVisibilityResultMode (Metal.MTLVisibilityResultMode mode, nuint offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVisibilityResultMode(valuetype Metal.MTLVisibilityResultMode mode, valuetype System.nuint offset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setVisibilityResultMode:offset:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Metal.MTLVisibilityResultMode" />
        <Parameter Name="offset" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="mode">To be added.</param>
        <param name="offset">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
