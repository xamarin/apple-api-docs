<Type Name="IMTLTexture" FullName="Metal.IMTLTexture">
  <TypeSignature Language="C#" Value="public interface IMTLTexture : IDisposable, Metal.IMTLResource" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMTLTexture implements class Metal.IMTLResource, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Metal.IMTLTexture" />
  <TypeSignature Language="F#" Value="type IMTLTexture = interface&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface IMTLResource" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Metal.IMTLResource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="MTLTexture", WrapperType=typeof(Metal.MTLTextureWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="rootResource", IsProperty=true, IsRequired=true, IsStatic=false, Name="RootResource", PropertyType=typeof(Metal.IMTLResource), Selector="rootResource")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="parentTexture", IsProperty=true, IsRequired=false, IsStatic=false, Name="ParentTexture", PropertyType=typeof(Metal.IMTLTexture), Selector="parentTexture")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="parentRelativeLevel", IsProperty=true, IsRequired=false, IsStatic=false, Name="ParentRelativeLevel", PropertyType=typeof(System.nuint), Selector="parentRelativeLevel")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="parentRelativeSlice", IsProperty=true, IsRequired=false, IsStatic=false, Name="ParentRelativeSlice", PropertyType=typeof(System.nuint), Selector="parentRelativeSlice")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="buffer", IsProperty=true, IsRequired=false, IsStatic=false, Name="Buffer", PropertyType=typeof(Metal.IMTLBuffer), Selector="buffer")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="bufferOffset", IsProperty=true, IsRequired=false, IsStatic=false, Name="BufferOffset", PropertyType=typeof(System.nuint), Selector="bufferOffset")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="bufferBytesPerRow", IsProperty=true, IsRequired=false, IsStatic=false, Name="BufferBytesPerRow", PropertyType=typeof(System.nuint), Selector="bufferBytesPerRow")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="textureType", IsProperty=true, IsRequired=true, IsStatic=false, Name="TextureType", PropertyType=typeof(Metal.MTLTextureType), Selector="textureType")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="pixelFormat", IsProperty=true, IsRequired=true, IsStatic=false, Name="PixelFormat", PropertyType=typeof(Metal.MTLPixelFormat), Selector="pixelFormat")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="width", IsProperty=true, IsRequired=true, IsStatic=false, Name="Width", PropertyType=typeof(System.nuint), Selector="width")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="height", IsProperty=true, IsRequired=true, IsStatic=false, Name="Height", PropertyType=typeof(System.nuint), Selector="height")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="depth", IsProperty=true, IsRequired=true, IsStatic=false, Name="Depth", PropertyType=typeof(System.nuint), Selector="depth")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="mipmapLevelCount", IsProperty=true, IsRequired=true, IsStatic=false, Name="MipmapLevelCount", PropertyType=typeof(System.nuint), Selector="mipmapLevelCount")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="sampleCount", IsProperty=true, IsRequired=true, IsStatic=false, Name="SampleCount", PropertyType=typeof(System.nuint), Selector="sampleCount")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="arrayLength", IsProperty=true, IsRequired=true, IsStatic=false, Name="ArrayLength", PropertyType=typeof(System.nuint), Selector="arrayLength")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="isFramebufferOnly", IsProperty=true, IsRequired=true, IsStatic=false, Name="FramebufferOnly", PropertyType=typeof(System.Boolean), Selector="framebufferOnly")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="allowGPUOptimizedContents", IsProperty=true, IsRequired=false, IsStatic=false, Name="AllowGpuOptimizedContents", PropertyType=typeof(System.Boolean), Selector="allowGPUOptimizedContents")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="usage", IsProperty=true, IsRequired=false, IsStatic=false, Name="Usage", PropertyType=typeof(Metal.MTLTextureUsage), Selector="usage")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="iosurface", IsProperty=true, IsRequired=false, IsStatic=false, Name="IOSurface", PropertyType=typeof(IOSurface.IOSurface), Selector="iosurface")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="iosurfacePlane", IsProperty=true, IsRequired=false, IsStatic=false, Name="IOSurfacePlane", PropertyType=typeof(System.nuint), Selector="iosurfacePlane")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="CreateTextureView", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(Metal.MTLPixelFormat) }, ReturnType=typeof(Metal.IMTLTexture), Selector="newTextureViewWithPixelFormat:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="CreateTextureView", ParameterByRef=new System.Boolean[] { false, false, false, false }, ParameterType=new System.Type[] { typeof(Metal.MTLPixelFormat), typeof(Metal.MTLTextureType), typeof(Foundation.NSRange), typeof(Foundation.NSRange) }, ReturnType=typeof(Metal.IMTLTexture), Selector="newTextureViewWithPixelFormat:textureType:levels:slices:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetBytes", ParameterByRef=new System.Boolean[] { false, false, false, false, false, false }, ParameterType=new System.Type[] { typeof(System.IntPtr), typeof(System.nuint), typeof(System.nuint), typeof(Metal.MTLRegion), typeof(System.nuint), typeof(System.nuint) }, Selector="getBytes:bytesPerRow:bytesPerImage:fromRegion:mipmapLevel:slice:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetBytes", ParameterByRef=new System.Boolean[] { false, false, false, false }, ParameterType=new System.Type[] { typeof(System.IntPtr), typeof(System.nuint), typeof(Metal.MTLRegion), typeof(System.nuint) }, Selector="getBytes:bytesPerRow:fromRegion:mipmapLevel:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="ReplaceRegion", ParameterByRef=new System.Boolean[] { false, false, false, false, false, false }, ParameterType=new System.Type[] { typeof(Metal.MTLRegion), typeof(System.nuint), typeof(System.nuint), typeof(System.IntPtr), typeof(System.nuint), typeof(System.nuint) }, Selector="replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="ReplaceRegion", ParameterByRef=new System.Boolean[] { false, false, false, false }, ParameterType=new System.Type[] { typeof(Metal.MTLRegion), typeof(System.nuint), typeof(System.IntPtr), typeof(System.nuint) }, Selector="replaceRegion:mipmapLevel:withBytes:bytesPerRow:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>System protocol for image data that is used by vertex shaders, fragment shaders, and compute kernels.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ArrayLength">
      <MemberSignature Language="C#" Value="public nuint ArrayLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint ArrayLength" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLTexture.ArrayLength" />
      <MemberSignature Language="F#" Value="member this.ArrayLength : nuint" Usage="Metal.IMTLTexture.ArrayLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("arrayLength")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTextureView">
      <MemberSignature Language="C#" Value="public Metal.IMTLTexture CreateTextureView (Metal.MTLPixelFormat pixelFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Metal.IMTLTexture CreateTextureView(valuetype Metal.MTLPixelFormat pixelFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLTexture.CreateTextureView(Metal.MTLPixelFormat)" />
      <MemberSignature Language="F#" Value="abstract member CreateTextureView : Metal.MTLPixelFormat -&gt; Metal.IMTLTexture" Usage="iMTLTexture.CreateTextureView pixelFormat" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("newTextureViewWithPixelFormat:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLTexture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pixelFormat" Type="Metal.MTLPixelFormat" />
      </Parameters>
      <Docs>
        <param name="pixelFormat">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="C#" Value="public nuint Depth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint Depth" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLTexture.Depth" />
      <MemberSignature Language="F#" Value="member this.Depth : nuint" Usage="Metal.IMTLTexture.Depth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("depth")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FramebufferOnly">
      <MemberSignature Language="C#" Value="public bool FramebufferOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FramebufferOnly" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLTexture.FramebufferOnly" />
      <MemberSignature Language="F#" Value="member this.FramebufferOnly : bool" Usage="Metal.IMTLTexture.FramebufferOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isFramebufferOnly")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public void GetBytes (IntPtr pixelBytes, nuint bytesPerRow, Metal.MTLRegion region, nuint level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetBytes(native int pixelBytes, valuetype System.nuint bytesPerRow, valuetype Metal.MTLRegion region, valuetype System.nuint level) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLTexture.GetBytes(System.IntPtr,System.nuint,Metal.MTLRegion,System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member GetBytes : nativeint * nuint * Metal.MTLRegion * nuint -&gt; unit" Usage="iMTLTexture.GetBytes (pixelBytes, bytesPerRow, region, level)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("getBytes:bytesPerRow:fromRegion:mipmapLevel:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pixelBytes" Type="System.IntPtr" />
        <Parameter Name="bytesPerRow" Type="System.nuint" />
        <Parameter Name="region" Type="Metal.MTLRegion" />
        <Parameter Name="level" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="pixelBytes">To be added.</param>
        <param name="bytesPerRow">To be added.</param>
        <param name="region">To be added.</param>
        <param name="level">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public void GetBytes (IntPtr pixelBytes, nuint bytesPerRow, nuint bytesPerImage, Metal.MTLRegion region, nuint level, nuint slice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetBytes(native int pixelBytes, valuetype System.nuint bytesPerRow, valuetype System.nuint bytesPerImage, valuetype Metal.MTLRegion region, valuetype System.nuint level, valuetype System.nuint slice) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLTexture.GetBytes(System.IntPtr,System.nuint,System.nuint,Metal.MTLRegion,System.nuint,System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member GetBytes : nativeint * nuint * nuint * Metal.MTLRegion * nuint * nuint -&gt; unit" Usage="iMTLTexture.GetBytes (pixelBytes, bytesPerRow, bytesPerImage, region, level, slice)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("getBytes:bytesPerRow:bytesPerImage:fromRegion:mipmapLevel:slice:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pixelBytes" Type="System.IntPtr" />
        <Parameter Name="bytesPerRow" Type="System.nuint" />
        <Parameter Name="bytesPerImage" Type="System.nuint" />
        <Parameter Name="region" Type="Metal.MTLRegion" />
        <Parameter Name="level" Type="System.nuint" />
        <Parameter Name="slice" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="pixelBytes">To be added.</param>
        <param name="bytesPerRow">To be added.</param>
        <param name="bytesPerImage">To be added.</param>
        <param name="region">To be added.</param>
        <param name="level">To be added.</param>
        <param name="slice">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public nuint Height { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint Height" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLTexture.Height" />
      <MemberSignature Language="F#" Value="member this.Height : nuint" Usage="Metal.IMTLTexture.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("height")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MipmapLevelCount">
      <MemberSignature Language="C#" Value="public nuint MipmapLevelCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint MipmapLevelCount" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLTexture.MipmapLevelCount" />
      <MemberSignature Language="F#" Value="member this.MipmapLevelCount : nuint" Usage="Metal.IMTLTexture.MipmapLevelCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("mipmapLevelCount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PixelFormat">
      <MemberSignature Language="C#" Value="public Metal.MTLPixelFormat PixelFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Metal.MTLPixelFormat PixelFormat" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLTexture.PixelFormat" />
      <MemberSignature Language="F#" Value="member this.PixelFormat : Metal.MTLPixelFormat" Usage="Metal.IMTLTexture.PixelFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("pixelFormat")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.MTLPixelFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceRegion">
      <MemberSignature Language="C#" Value="public void ReplaceRegion (Metal.MTLRegion region, nuint level, IntPtr pixelBytes, nuint bytesPerRow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReplaceRegion(valuetype Metal.MTLRegion region, valuetype System.nuint level, native int pixelBytes, valuetype System.nuint bytesPerRow) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLTexture.ReplaceRegion(Metal.MTLRegion,System.nuint,System.IntPtr,System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceRegion : Metal.MTLRegion * nuint * nativeint * nuint -&gt; unit" Usage="iMTLTexture.ReplaceRegion (region, level, pixelBytes, bytesPerRow)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("replaceRegion:mipmapLevel:withBytes:bytesPerRow:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="Metal.MTLRegion" />
        <Parameter Name="level" Type="System.nuint" />
        <Parameter Name="pixelBytes" Type="System.IntPtr" />
        <Parameter Name="bytesPerRow" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="region">To be added.</param>
        <param name="level">To be added.</param>
        <param name="pixelBytes">To be added.</param>
        <param name="bytesPerRow">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceRegion">
      <MemberSignature Language="C#" Value="public void ReplaceRegion (Metal.MTLRegion region, nuint level, nuint slice, IntPtr pixelBytes, nuint bytesPerRow, nuint bytesPerImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReplaceRegion(valuetype Metal.MTLRegion region, valuetype System.nuint level, valuetype System.nuint slice, native int pixelBytes, valuetype System.nuint bytesPerRow, valuetype System.nuint bytesPerImage) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLTexture.ReplaceRegion(Metal.MTLRegion,System.nuint,System.nuint,System.IntPtr,System.nuint,System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceRegion : Metal.MTLRegion * nuint * nuint * nativeint * nuint * nuint -&gt; unit" Usage="iMTLTexture.ReplaceRegion (region, level, slice, pixelBytes, bytesPerRow, bytesPerImage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="Metal.MTLRegion" />
        <Parameter Name="level" Type="System.nuint" />
        <Parameter Name="slice" Type="System.nuint" />
        <Parameter Name="pixelBytes" Type="System.IntPtr" />
        <Parameter Name="bytesPerRow" Type="System.nuint" />
        <Parameter Name="bytesPerImage" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="region">To be added.</param>
        <param name="level">To be added.</param>
        <param name="slice">To be added.</param>
        <param name="pixelBytes">To be added.</param>
        <param name="bytesPerRow">To be added.</param>
        <param name="bytesPerImage">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RootResource">
      <MemberSignature Language="C#" Value="public Metal.IMTLResource RootResource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Metal.IMTLResource RootResource" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLTexture.RootResource" />
      <MemberSignature Language="F#" Value="member this.RootResource : Metal.IMTLResource" Usage="Metal.IMTLTexture.RootResource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("rootResource")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLResource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SampleCount">
      <MemberSignature Language="C#" Value="public nuint SampleCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint SampleCount" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLTexture.SampleCount" />
      <MemberSignature Language="F#" Value="member this.SampleCount : nuint" Usage="Metal.IMTLTexture.SampleCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("sampleCount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextureType">
      <MemberSignature Language="C#" Value="public Metal.MTLTextureType TextureType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Metal.MTLTextureType TextureType" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLTexture.TextureType" />
      <MemberSignature Language="F#" Value="member this.TextureType : Metal.MTLTextureType" Usage="Metal.IMTLTexture.TextureType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("textureType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.MTLTextureType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public nuint Width { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint Width" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLTexture.Width" />
      <MemberSignature Language="F#" Value="member this.Width : nuint" Usage="Metal.IMTLTexture.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("width")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
