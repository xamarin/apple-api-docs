<Type Name="MTLCaptureManager" FullName="Metal.MTLCaptureManager">
  <TypeSignature Language="C#" Value="public class MTLCaptureManager : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MTLCaptureManager extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:Metal.MTLCaptureManager" />
  <TypeSignature Language="F#" Value="type MTLCaptureManager = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("MTLCaptureManager", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Manages GPU captures for apps launched from Xcode.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MTLCaptureManager (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.MTLCaptureManager.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new Metal.MTLCaptureManager : Foundation.NSObjectFlag -&gt; Metal.MTLCaptureManager" Usage="new Metal.MTLCaptureManager t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal MTLCaptureManager (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.MTLCaptureManager.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new Metal.MTLCaptureManager : nativeint -&gt; Metal.MTLCaptureManager" Usage="new Metal.MTLCaptureManager handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:Metal.MTLCaptureManager.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="Metal.MTLCaptureManager.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateNewCaptureScope">
      <MemberSignature Language="C#" Value="public virtual Metal.IMTLCaptureScope CreateNewCaptureScope (Metal.IMTLCommandQueue commandQueue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Metal.IMTLCaptureScope CreateNewCaptureScope(class Metal.IMTLCommandQueue commandQueue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.MTLCaptureManager.CreateNewCaptureScope(Metal.IMTLCommandQueue)" />
      <MemberSignature Language="F#" Value="abstract member CreateNewCaptureScope : Metal.IMTLCommandQueue -&gt; Metal.IMTLCaptureScope&#xA;override this.CreateNewCaptureScope : Metal.IMTLCommandQueue -&gt; Metal.IMTLCaptureScope" Usage="mTLCaptureManager.CreateNewCaptureScope commandQueue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("newCaptureScopeWithCommandQueue:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLCaptureScope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandQueue" Type="Metal.IMTLCommandQueue" />
      </Parameters>
      <Docs>
        <param name="commandQueue">The command queue to which to limit the capture scope.</param>
        <summary>Creates a new capture scope with the specified command queue.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateNewCaptureScope">
      <MemberSignature Language="C#" Value="public virtual Metal.IMTLCaptureScope CreateNewCaptureScope (Metal.IMTLDevice device);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Metal.IMTLCaptureScope CreateNewCaptureScope(class Metal.IMTLDevice device) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.MTLCaptureManager.CreateNewCaptureScope(Metal.IMTLDevice)" />
      <MemberSignature Language="F#" Value="abstract member CreateNewCaptureScope : Metal.IMTLDevice -&gt; Metal.IMTLCaptureScope&#xA;override this.CreateNewCaptureScope : Metal.IMTLDevice -&gt; Metal.IMTLCaptureScope" Usage="mTLCaptureManager.CreateNewCaptureScope device" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("newCaptureScopeWithDevice:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLCaptureScope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="device" Type="Metal.IMTLDevice" />
      </Parameters>
      <Docs>
        <param name="device">The device to capture.</param>
        <summary>Creates a new capture scope for the specified device.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultCaptureScope">
      <MemberSignature Language="C#" Value="public virtual Metal.IMTLCaptureScope DefaultCaptureScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Metal.IMTLCaptureScope DefaultCaptureScope" />
      <MemberSignature Language="DocId" Value="P:Metal.MTLCaptureManager.DefaultCaptureScope" />
      <MemberSignature Language="F#" Value="member this.DefaultCaptureScope : Metal.IMTLCaptureScope with get, set" Usage="Metal.MTLCaptureManager.DefaultCaptureScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("defaultCaptureScope", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDefaultCaptureScope:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLCaptureScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the default capture scope.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCapturing">
      <MemberSignature Language="C#" Value="public virtual bool IsCapturing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCapturing" />
      <MemberSignature Language="DocId" Value="P:Metal.MTLCaptureManager.IsCapturing" />
      <MemberSignature Language="F#" Value="member this.IsCapturing : bool" Usage="Metal.MTLCaptureManager.IsCapturing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isCapturing")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether Metal command capture is taking place.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Shared">
      <MemberSignature Language="C#" Value="public static Metal.MTLCaptureManager Shared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Metal.MTLCaptureManager Shared" />
      <MemberSignature Language="DocId" Value="P:Metal.MTLCaptureManager.Shared" />
      <MemberSignature Language="F#" Value="member this.Shared : Metal.MTLCaptureManager" Usage="Metal.MTLCaptureManager.Shared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("sharedCaptureManager")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.MTLCaptureManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the shared capture manager instance.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartCapture">
      <MemberSignature Language="C#" Value="public virtual void StartCapture (Metal.IMTLCaptureScope captureScope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartCapture(class Metal.IMTLCaptureScope captureScope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.MTLCaptureManager.StartCapture(Metal.IMTLCaptureScope)" />
      <MemberSignature Language="F#" Value="abstract member StartCapture : Metal.IMTLCaptureScope -&gt; unit&#xA;override this.StartCapture : Metal.IMTLCaptureScope -&gt; unit" Usage="mTLCaptureManager.StartCapture captureScope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("startCaptureWithScope:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="captureScope" Type="Metal.IMTLCaptureScope" />
      </Parameters>
      <Docs>
        <param name="captureScope">The scope for which to start capturing.</param>
        <summary>Begins capturing for the specified scope.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartCapture">
      <MemberSignature Language="C#" Value="public virtual void StartCapture (Metal.IMTLCommandQueue commandQueue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartCapture(class Metal.IMTLCommandQueue commandQueue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.MTLCaptureManager.StartCapture(Metal.IMTLCommandQueue)" />
      <MemberSignature Language="F#" Value="abstract member StartCapture : Metal.IMTLCommandQueue -&gt; unit&#xA;override this.StartCapture : Metal.IMTLCommandQueue -&gt; unit" Usage="mTLCaptureManager.StartCapture commandQueue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("startCaptureWithCommandQueue:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandQueue" Type="Metal.IMTLCommandQueue" />
      </Parameters>
      <Docs>
        <param name="commandQueue">The command queue for which to start capturing.</param>
        <summary>Starts capture on the specified command queue.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartCapture">
      <MemberSignature Language="C#" Value="public virtual void StartCapture (Metal.IMTLDevice device);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartCapture(class Metal.IMTLDevice device) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.MTLCaptureManager.StartCapture(Metal.IMTLDevice)" />
      <MemberSignature Language="F#" Value="abstract member StartCapture : Metal.IMTLDevice -&gt; unit&#xA;override this.StartCapture : Metal.IMTLDevice -&gt; unit" Usage="mTLCaptureManager.StartCapture device" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("startCaptureWithDevice:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="device" Type="Metal.IMTLDevice" />
      </Parameters>
      <Docs>
        <param name="device">The device for which to start capturing.</param>
        <summary>Starts capture on the specified device.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopCapture">
      <MemberSignature Language="C#" Value="public virtual void StopCapture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopCapture() cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.MTLCaptureManager.StopCapture" />
      <MemberSignature Language="F#" Value="abstract member StopCapture : unit -&gt; unit&#xA;override this.StopCapture : unit -&gt; unit" Usage="mTLCaptureManager.StopCapture " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("stopCapture")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops capture.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
