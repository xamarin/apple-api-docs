<Type Name="IMTLArgumentEncoder" FullName="Metal.IMTLArgumentEncoder">
  <TypeSignature Language="C#" Value="public interface IMTLArgumentEncoder : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMTLArgumentEncoder implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Metal.IMTLArgumentEncoder" />
  <TypeSignature Language="F#" Value="type IMTLArgumentEncoder = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol(Name="MTLArgumentEncoder", WrapperType=typeof(Metal.MTLArgumentEncoderWrapper))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetArgumentBuffer", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setArgumentBuffer:offset:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetArgumentBuffer", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setArgumentBuffer:startOffset:arrayElement:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetBuffer", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setBuffer:offset:atIndex:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetBuffers", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setBuffers:offsets:withRange:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetTexture", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setTexture:atIndex:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetTextures", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setTextures:withRange:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetSamplerState", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setSamplerState:atIndex:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetSamplerStates", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setSamplerStates:withRange:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetConstantData", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.IntPtr), Selector="constantDataAtIndex:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SetIndirectCommandBuffer", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setIndirectCommandBuffer:atIndex:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SetIndirectCommandBuffers", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setIndirectCommandBuffers:withRange:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="CreateArgumentEncoder", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(Metal.IMTLArgumentEncoder), Selector="newArgumentEncoderForBufferAtIndex:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="device", IsProperty=true, IsRequired=true, IsStatic=false, Name="Device", PropertyType=typeof(Metal.IMTLDevice), Selector="device")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="label", IsProperty=true, IsRequired=true, IsStatic=false, Name="Label", PropertyType=typeof(System.String), Selector="label", SetterSelector="setLabel:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="encodedLength", IsProperty=true, IsRequired=true, IsStatic=false, Name="EncodedLength", PropertyType=typeof(System.nuint), Selector="encodedLength")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="alignment", IsProperty=true, IsRequired=true, IsStatic=false, Name="Alignment", PropertyType=typeof(System.nuint), Selector="alignment")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetArgumentBuffer", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(Metal.IMTLBuffer), typeof(System.nuint) }, Selector="setArgumentBuffer:offset:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetArgumentBuffer", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(Metal.IMTLBuffer), typeof(System.nuint), typeof(System.nuint) }, Selector="setArgumentBuffer:startOffset:arrayElement:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetBuffer", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(Metal.IMTLBuffer), typeof(System.nuint), typeof(System.nuint) }, Selector="setBuffer:offset:atIndex:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetBuffers", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(Metal.IMTLBuffer[]), typeof(System.IntPtr), typeof(Foundation.NSRange) }, Selector="setBuffers:offsets:withRange:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetTexture", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(Metal.IMTLTexture), typeof(System.nuint) }, Selector="setTexture:atIndex:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetTextures", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(Metal.IMTLTexture[]), typeof(Foundation.NSRange) }, Selector="setTextures:withRange:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetSamplerState", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(Metal.IMTLSamplerState), typeof(System.nuint) }, Selector="setSamplerState:atIndex:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetSamplerStates", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(Metal.IMTLSamplerState[]), typeof(Foundation.NSRange) }, Selector="setSamplerStates:withRange:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetConstantData", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(System.nuint) }, ReturnType=typeof(System.IntPtr), Selector="constantDataAtIndex:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Encodes data into argument buffers.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Alignment">
      <MemberSignature Language="C#" Value="public nuint Alignment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint Alignment" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLArgumentEncoder.Alignment" />
      <MemberSignature Language="F#" Value="member this.Alignment : nuint" Usage="Metal.IMTLArgumentEncoder.Alignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("alignment")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the byte alignment for the encoded data.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Device">
      <MemberSignature Language="C#" Value="public Metal.IMTLDevice Device { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Metal.IMTLDevice Device" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLArgumentEncoder.Device" />
      <MemberSignature Language="F#" Value="member this.Device : Metal.IMTLDevice" Usage="Metal.IMTLArgumentEncoder.Device" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("device")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the device for the encoder.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodedLength">
      <MemberSignature Language="C#" Value="public nuint EncodedLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint EncodedLength" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLArgumentEncoder.EncodedLength" />
      <MemberSignature Language="F#" Value="member this.EncodedLength : nuint" Usage="Metal.IMTLArgumentEncoder.EncodedLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("encodedLength")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of bytes that are required to store the encoded resources in the buffer.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstantData">
      <MemberSignature Language="C#" Value="public IntPtr GetConstantData (nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetConstantData(valuetype System.nuint index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLArgumentEncoder.GetConstantData(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member GetConstantData : nuint -&gt; nativeint" Usage="iMTLArgumentEncoder.GetConstantData index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("constantDataAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="index">The index for the constant. Either a Metal index ID or the index member of a <see cref="T:Metal.MTLArgumentDescriptor" />.</param>
        <summary>Returns a pointer to the constant at the specified <paramref name="index" /> into the buffer.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public string Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberSignature Language="DocId" Value="P:Metal.IMTLArgumentEncoder.Label" />
      <MemberSignature Language="F#" Value="member this.Label : string with get, set" Usage="Metal.IMTLArgumentEncoder.Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("label")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setLabel:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a descriptive label for the encoder.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetArgumentBuffer">
      <MemberSignature Language="C#" Value="public void SetArgumentBuffer (Metal.IMTLBuffer argumentBuffer, nuint offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetArgumentBuffer(class Metal.IMTLBuffer argumentBuffer, valuetype System.nuint offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLArgumentEncoder.SetArgumentBuffer(Metal.IMTLBuffer,System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member SetArgumentBuffer : Metal.IMTLBuffer * nuint -&gt; unit" Usage="iMTLArgumentEncoder.SetArgumentBuffer (argumentBuffer, offset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setArgumentBuffer:offset:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argumentBuffer" Type="Metal.IMTLBuffer" />
        <Parameter Name="offset" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="argumentBuffer">The destination buffer.</param>
        <param name="offset">The offset of the buffer, in bytes.</param>
        <summary>Sets the target buffer to which arguments will be encoded.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetArgumentBuffer">
      <MemberSignature Language="C#" Value="public void SetArgumentBuffer (Metal.IMTLBuffer argumentBuffer, nuint startOffset, nuint arrayElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetArgumentBuffer(class Metal.IMTLBuffer argumentBuffer, valuetype System.nuint startOffset, valuetype System.nuint arrayElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLArgumentEncoder.SetArgumentBuffer(Metal.IMTLBuffer,System.nuint,System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member SetArgumentBuffer : Metal.IMTLBuffer * nuint * nuint -&gt; unit" Usage="iMTLArgumentEncoder.SetArgumentBuffer (argumentBuffer, startOffset, arrayElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setArgumentBuffer:startOffset:arrayElement:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argumentBuffer" Type="Metal.IMTLBuffer" />
        <Parameter Name="startOffset" Type="System.nuint" />
        <Parameter Name="arrayElement" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="argumentBuffer">The destination buffer.</param>
        <param name="startOffset">The offset of the buffer, in bytes.</param>
        <param name="arrayElement">The index, into the targeted buffer, of the argument.</param>
        <summary>Sets the target buffer to which arguments will be encoded.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBuffer">
      <MemberSignature Language="C#" Value="public void SetBuffer (Metal.IMTLBuffer buffer, nuint offset, nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBuffer(class Metal.IMTLBuffer buffer, valuetype System.nuint offset, valuetype System.nuint index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLArgumentEncoder.SetBuffer(Metal.IMTLBuffer,System.nuint,System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member SetBuffer : Metal.IMTLBuffer * nuint * nuint -&gt; unit" Usage="iMTLArgumentEncoder.SetBuffer (buffer, offset, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setBuffer:offset:atIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="Metal.IMTLBuffer" />
        <Parameter Name="offset" Type="System.nuint" />
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="buffer">A buffer in an argument buffer.</param>
        <param name="offset">The byte offset of <paramref name="buffer" />.</param>
        <param name="index">The index of the nested buffer. Either a Metal index ID or the index member of a <see cref="T:Metal.MTLArgumentDescriptor" />.</param>
        <summary>Encodes <paramref name="buffer" /> to the argument buffer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBuffers">
      <MemberSignature Language="C#" Value="public void SetBuffers (Metal.IMTLBuffer[] buffers, IntPtr offsets, Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBuffers(class Metal.IMTLBuffer[] buffers, native int offsets, valuetype Foundation.NSRange range) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLArgumentEncoder.SetBuffers(Metal.IMTLBuffer[],System.IntPtr,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member SetBuffers : Metal.IMTLBuffer[] * nativeint * Foundation.NSRange -&gt; unit" Usage="iMTLArgumentEncoder.SetBuffers (buffers, offsets, range)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setBuffers:offsets:withRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="Metal.IMTLBuffer[]" />
        <Parameter Name="offsets" Type="System.IntPtr" />
        <Parameter Name="range" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="buffers">An array of buffers in an argument buffer.</param>
        <param name="offsets">The byte offsets of <paramref name="buffers" /> in the containing buffer.</param>
        <param name="range">Indices into the target buffer of the buffers in <paramref name="buffers" />. Either Metal index IDs or the index members of <see cref="T:Metal.MTLArgumentDescriptor" />s.</param>
        <summary>Encodes <paramref name="buffers" /> to the argument buffer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSamplerState">
      <MemberSignature Language="C#" Value="public void SetSamplerState (Metal.IMTLSamplerState sampler, nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSamplerState(class Metal.IMTLSamplerState sampler, valuetype System.nuint index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLArgumentEncoder.SetSamplerState(Metal.IMTLSamplerState,System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member SetSamplerState : Metal.IMTLSamplerState * nuint -&gt; unit" Usage="iMTLArgumentEncoder.SetSamplerState (sampler, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setSamplerState:atIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sampler" Type="Metal.IMTLSamplerState" />
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="sampler">A sampler within an argument buffer.</param>
        <param name="index">The sampler index. Either a Metal index ID or the index member of a <see cref="T:Metal.MTLArgumentDescriptor" />.</param>
        <summary>Encodes <paramref name="sampler" /> into the argument buffer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSamplerStates">
      <MemberSignature Language="C#" Value="public void SetSamplerStates (Metal.IMTLSamplerState[] samplers, Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSamplerStates(class Metal.IMTLSamplerState[] samplers, valuetype Foundation.NSRange range) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLArgumentEncoder.SetSamplerStates(Metal.IMTLSamplerState[],Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member SetSamplerStates : Metal.IMTLSamplerState[] * Foundation.NSRange -&gt; unit" Usage="iMTLArgumentEncoder.SetSamplerStates (samplers, range)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setSamplerStates:withRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="samplers" Type="Metal.IMTLSamplerState[]" />
        <Parameter Name="range" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="samplers">An array of samplers from which to select the samplers to encode.</param>
        <param name="range">Indices into <paramref name="samplers" />. Either Metal index IDs or the index members of <see cref="T:Metal.MTLArgumentDescriptor" />s.</param>
        <summary>Encodes the provided <paramref name="samplers" /> into the argument buffer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTexture">
      <MemberSignature Language="C#" Value="public void SetTexture (Metal.IMTLTexture texture, nuint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTexture(class Metal.IMTLTexture texture, valuetype System.nuint index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLArgumentEncoder.SetTexture(Metal.IMTLTexture,System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member SetTexture : Metal.IMTLTexture * nuint -&gt; unit" Usage="iMTLArgumentEncoder.SetTexture (texture, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setTexture:atIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="texture" Type="Metal.IMTLTexture" />
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="texture">A texture within an argument buffer.</param>
        <param name="index">The index of the texture. Either a Metal index ID or the index member of a <see cref="T:Metal.MTLArgumentDescriptor" />.</param>
        <summary>Encodes the provided <paramref name="texture" /> into the argument buffer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTextures">
      <MemberSignature Language="C#" Value="public void SetTextures (Metal.IMTLTexture[] textures, Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTextures(class Metal.IMTLTexture[] textures, valuetype Foundation.NSRange range) cil managed" />
      <MemberSignature Language="DocId" Value="M:Metal.IMTLArgumentEncoder.SetTextures(Metal.IMTLTexture[],Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member SetTextures : Metal.IMTLTexture[] * Foundation.NSRange -&gt; unit" Usage="iMTLArgumentEncoder.SetTextures (textures, range)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setTextures:withRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textures" Type="Metal.IMTLTexture[]" />
        <Parameter Name="range" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="textures">An array of textures from which to select the textures to encode.</param>
        <param name="range">Indices into <paramref name="textures" />. Either Metal index IDs or the index members of <see cref="T:Metal.MTLArgumentDescriptor" />s.</param>
        <summary>Encodes the provided <paramref name="textures" /> into the argument buffer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
