<Type Name="ASCredentialIdentityStore" FullName="AuthenticationServices.ASCredentialIdentityStore">
  <TypeSignature Language="C#" Value="public class ASCredentialIdentityStore : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ASCredentialIdentityStore extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:AuthenticationServices.ASCredentialIdentityStore" />
  <TypeSignature Language="F#" Value="type ASCredentialIdentityStore = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("ASCredentialIdentityStore", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A class whose shared instance (see <see cref="P:AuthenticationServices.ASCredentialIdentityStore.SharedStore" />) holds credentials across providers.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ASCredentialIdentityStore (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:AuthenticationServices.ASCredentialIdentityStore.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new AuthenticationServices.ASCredentialIdentityStore : Foundation.NSObjectFlag -&gt; AuthenticationServices.ASCredentialIdentityStore" Usage="new AuthenticationServices.ASCredentialIdentityStore t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal ASCredentialIdentityStore (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:AuthenticationServices.ASCredentialIdentityStore.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new AuthenticationServices.ASCredentialIdentityStore : nativeint -&gt; AuthenticationServices.ASCredentialIdentityStore" Usage="new AuthenticationServices.ASCredentialIdentityStore handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:AuthenticationServices.ASCredentialIdentityStore.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="AuthenticationServices.ASCredentialIdentityStore.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCredentialIdentityStoreState">
      <MemberSignature Language="C#" Value="public virtual void GetCredentialIdentityStoreState (Action&lt;AuthenticationServices.ASCredentialIdentityStoreState&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetCredentialIdentityStoreState(class System.Action`1&lt;class AuthenticationServices.ASCredentialIdentityStoreState&gt; completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:AuthenticationServices.ASCredentialIdentityStore.GetCredentialIdentityStoreState(System.Action{AuthenticationServices.ASCredentialIdentityStoreState})" />
      <MemberSignature Language="F#" Value="abstract member GetCredentialIdentityStoreState : Action&lt;AuthenticationServices.ASCredentialIdentityStoreState&gt; -&gt; unit&#xA;override this.GetCredentialIdentityStoreState : Action&lt;AuthenticationServices.ASCredentialIdentityStoreState&gt; -&gt; unit" Usage="aSCredentialIdentityStore.GetCredentialIdentityStoreState completion" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("getCredentialIdentityStoreStateWithCompletion:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="completion" Type="System.Action&lt;AuthenticationServices.ASCredentialIdentityStoreState&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V12))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="completion">To be added.</param>
        <summary>Retrieves the state of store, which is passed as an argument to the <paramref name="completion" /> handler.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCredentialIdentityStoreStateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;AuthenticationServices.ASCredentialIdentityStoreState&gt; GetCredentialIdentityStoreStateAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class AuthenticationServices.ASCredentialIdentityStoreState&gt; GetCredentialIdentityStoreStateAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:AuthenticationServices.ASCredentialIdentityStore.GetCredentialIdentityStoreStateAsync" />
      <MemberSignature Language="F#" Value="abstract member GetCredentialIdentityStoreStateAsync : unit -&gt; System.Threading.Tasks.Task&lt;AuthenticationServices.ASCredentialIdentityStoreState&gt;&#xA;override this.GetCredentialIdentityStoreStateAsync : unit -&gt; System.Threading.Tasks.Task&lt;AuthenticationServices.ASCredentialIdentityStoreState&gt;" Usage="aSCredentialIdentityStore.GetCredentialIdentityStoreStateAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;AuthenticationServices.ASCredentialIdentityStoreState&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Asynchronously gets the state of the identity store.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllCredentialIdentities">
      <MemberSignature Language="C#" Value="public virtual void RemoveAllCredentialIdentities (Action&lt;bool,Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllCredentialIdentities(class System.Action`2&lt;bool, class Foundation.NSError&gt; completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:AuthenticationServices.ASCredentialIdentityStore.RemoveAllCredentialIdentities(System.Action{System.Boolean,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member RemoveAllCredentialIdentities : Action&lt;bool, Foundation.NSError&gt; -&gt; unit&#xA;override this.RemoveAllCredentialIdentities : Action&lt;bool, Foundation.NSError&gt; -&gt; unit" Usage="aSCredentialIdentityStore.RemoveAllCredentialIdentities completion" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeAllCredentialIdentitiesWithCompletion:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="completion" Type="System.Action&lt;System.Boolean,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V5))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="completion">To be added.</param>
        <summary>Removes all credential identities from the store. The <paramref name="completion" /> handler is called after the process completes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllCredentialIdentitiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Tuple&lt;bool,Foundation.NSError&gt;&gt; RemoveAllCredentialIdentitiesAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Tuple`2&lt;bool, class Foundation.NSError&gt;&gt; RemoveAllCredentialIdentitiesAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:AuthenticationServices.ASCredentialIdentityStore.RemoveAllCredentialIdentitiesAsync" />
      <MemberSignature Language="F#" Value="abstract member RemoveAllCredentialIdentitiesAsync : unit -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;&#xA;override this.RemoveAllCredentialIdentitiesAsync : unit -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;" Usage="aSCredentialIdentityStore.RemoveAllCredentialIdentitiesAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Tuple&lt;System.Boolean,Foundation.NSError&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Asynchronously removes all credential identities from the store. The returned tuple will have a first value of <see langword="true" /> if all identities were removed without error.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveCredentialIdentities">
      <MemberSignature Language="C#" Value="public virtual void RemoveCredentialIdentities (AuthenticationServices.ASPasswordCredentialIdentity[] credentialIdentities, AuthenticationServices.ASCredentialIdentityStoreCompletionHandler completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveCredentialIdentities(class AuthenticationServices.ASPasswordCredentialIdentity[] credentialIdentities, class AuthenticationServices.ASCredentialIdentityStoreCompletionHandler completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:AuthenticationServices.ASCredentialIdentityStore.RemoveCredentialIdentities(AuthenticationServices.ASPasswordCredentialIdentity[],AuthenticationServices.ASCredentialIdentityStoreCompletionHandler)" />
      <MemberSignature Language="F#" Value="abstract member RemoveCredentialIdentities : AuthenticationServices.ASPasswordCredentialIdentity[] * AuthenticationServices.ASCredentialIdentityStoreCompletionHandler -&gt; unit&#xA;override this.RemoveCredentialIdentities : AuthenticationServices.ASPasswordCredentialIdentity[] * AuthenticationServices.ASCredentialIdentityStoreCompletionHandler -&gt; unit" Usage="aSCredentialIdentityStore.RemoveCredentialIdentities (credentialIdentities, completion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeCredentialIdentities:completion:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credentialIdentities" Type="AuthenticationServices.ASPasswordCredentialIdentity[]" />
        <Parameter Name="completion" Type="AuthenticationServices.ASCredentialIdentityStoreCompletionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDASCredentialIdentityStoreCompletionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="credentialIdentities">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>Removes the specified <paramref name="credentialIdentities" /> from the store. The <paramref name="completion" /> handler is called after the process completes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveCredentialIdentitiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Tuple&lt;bool,Foundation.NSError&gt;&gt; RemoveCredentialIdentitiesAsync (AuthenticationServices.ASPasswordCredentialIdentity[] credentialIdentities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Tuple`2&lt;bool, class Foundation.NSError&gt;&gt; RemoveCredentialIdentitiesAsync(class AuthenticationServices.ASPasswordCredentialIdentity[] credentialIdentities) cil managed" />
      <MemberSignature Language="DocId" Value="M:AuthenticationServices.ASCredentialIdentityStore.RemoveCredentialIdentitiesAsync(AuthenticationServices.ASPasswordCredentialIdentity[])" />
      <MemberSignature Language="F#" Value="abstract member RemoveCredentialIdentitiesAsync : AuthenticationServices.ASPasswordCredentialIdentity[] -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;&#xA;override this.RemoveCredentialIdentitiesAsync : AuthenticationServices.ASPasswordCredentialIdentity[] -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;" Usage="aSCredentialIdentityStore.RemoveCredentialIdentitiesAsync credentialIdentities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Tuple&lt;System.Boolean,Foundation.NSError&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credentialIdentities" Type="AuthenticationServices.ASPasswordCredentialIdentity[]" />
      </Parameters>
      <Docs>
        <param name="credentialIdentities">To be added.</param>
        <summary>Asynchronously removes the specified <paramref name="credentialIdentities" /> from the store. The returned tuple will have a first value of <see langword="true" /> if all identities were removed without error.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceCredentialIdentities">
      <MemberSignature Language="C#" Value="public virtual void ReplaceCredentialIdentities (AuthenticationServices.ASPasswordCredentialIdentity[] newCredentialIdentities, AuthenticationServices.ASCredentialIdentityStoreCompletionHandler completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReplaceCredentialIdentities(class AuthenticationServices.ASPasswordCredentialIdentity[] newCredentialIdentities, class AuthenticationServices.ASCredentialIdentityStoreCompletionHandler completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:AuthenticationServices.ASCredentialIdentityStore.ReplaceCredentialIdentities(AuthenticationServices.ASPasswordCredentialIdentity[],AuthenticationServices.ASCredentialIdentityStoreCompletionHandler)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceCredentialIdentities : AuthenticationServices.ASPasswordCredentialIdentity[] * AuthenticationServices.ASCredentialIdentityStoreCompletionHandler -&gt; unit&#xA;override this.ReplaceCredentialIdentities : AuthenticationServices.ASPasswordCredentialIdentity[] * AuthenticationServices.ASCredentialIdentityStoreCompletionHandler -&gt; unit" Usage="aSCredentialIdentityStore.ReplaceCredentialIdentities (newCredentialIdentities, completion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("replaceCredentialIdentitiesWithIdentities:completion:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newCredentialIdentities" Type="AuthenticationServices.ASPasswordCredentialIdentity[]" />
        <Parameter Name="completion" Type="AuthenticationServices.ASCredentialIdentityStoreCompletionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDASCredentialIdentityStoreCompletionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newCredentialIdentities">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>Replaces the existing identities with the specified <paramref name="newCredentialIdentities" /> from the store. The <paramref name="completion" /> handler is called after the process completes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceCredentialIdentitiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Tuple&lt;bool,Foundation.NSError&gt;&gt; ReplaceCredentialIdentitiesAsync (AuthenticationServices.ASPasswordCredentialIdentity[] newCredentialIdentities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Tuple`2&lt;bool, class Foundation.NSError&gt;&gt; ReplaceCredentialIdentitiesAsync(class AuthenticationServices.ASPasswordCredentialIdentity[] newCredentialIdentities) cil managed" />
      <MemberSignature Language="DocId" Value="M:AuthenticationServices.ASCredentialIdentityStore.ReplaceCredentialIdentitiesAsync(AuthenticationServices.ASPasswordCredentialIdentity[])" />
      <MemberSignature Language="F#" Value="abstract member ReplaceCredentialIdentitiesAsync : AuthenticationServices.ASPasswordCredentialIdentity[] -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;&#xA;override this.ReplaceCredentialIdentitiesAsync : AuthenticationServices.ASPasswordCredentialIdentity[] -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;" Usage="aSCredentialIdentityStore.ReplaceCredentialIdentitiesAsync newCredentialIdentities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Tuple&lt;System.Boolean,Foundation.NSError&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newCredentialIdentities" Type="AuthenticationServices.ASPasswordCredentialIdentity[]" />
      </Parameters>
      <Docs>
        <param name="newCredentialIdentities">To be added.</param>
        <summary>Asynchronously replaces the existing identities with the specified <paramref name="newCredentialIdentities" /> from the store. The returned tuple will have a first value of <see langword="true" /> if all identities were removed without error.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveCredentialIdentities">
      <MemberSignature Language="C#" Value="public virtual void SaveCredentialIdentities (AuthenticationServices.ASPasswordCredentialIdentity[] credentialIdentities, AuthenticationServices.ASCredentialIdentityStoreCompletionHandler completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SaveCredentialIdentities(class AuthenticationServices.ASPasswordCredentialIdentity[] credentialIdentities, class AuthenticationServices.ASCredentialIdentityStoreCompletionHandler completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:AuthenticationServices.ASCredentialIdentityStore.SaveCredentialIdentities(AuthenticationServices.ASPasswordCredentialIdentity[],AuthenticationServices.ASCredentialIdentityStoreCompletionHandler)" />
      <MemberSignature Language="F#" Value="abstract member SaveCredentialIdentities : AuthenticationServices.ASPasswordCredentialIdentity[] * AuthenticationServices.ASCredentialIdentityStoreCompletionHandler -&gt; unit&#xA;override this.SaveCredentialIdentities : AuthenticationServices.ASPasswordCredentialIdentity[] * AuthenticationServices.ASCredentialIdentityStoreCompletionHandler -&gt; unit" Usage="aSCredentialIdentityStore.SaveCredentialIdentities (credentialIdentities, completion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("saveCredentialIdentities:completion:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credentialIdentities" Type="AuthenticationServices.ASPasswordCredentialIdentity[]" />
        <Parameter Name="completion" Type="AuthenticationServices.ASCredentialIdentityStoreCompletionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDASCredentialIdentityStoreCompletionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="credentialIdentities">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>Saves (or replaces, if the store does not support incremental updates) the <paramref name="credentialIdentities" /> to the store.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveCredentialIdentitiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Tuple&lt;bool,Foundation.NSError&gt;&gt; SaveCredentialIdentitiesAsync (AuthenticationServices.ASPasswordCredentialIdentity[] credentialIdentities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Tuple`2&lt;bool, class Foundation.NSError&gt;&gt; SaveCredentialIdentitiesAsync(class AuthenticationServices.ASPasswordCredentialIdentity[] credentialIdentities) cil managed" />
      <MemberSignature Language="DocId" Value="M:AuthenticationServices.ASCredentialIdentityStore.SaveCredentialIdentitiesAsync(AuthenticationServices.ASPasswordCredentialIdentity[])" />
      <MemberSignature Language="F#" Value="abstract member SaveCredentialIdentitiesAsync : AuthenticationServices.ASPasswordCredentialIdentity[] -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;&#xA;override this.SaveCredentialIdentitiesAsync : AuthenticationServices.ASPasswordCredentialIdentity[] -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;" Usage="aSCredentialIdentityStore.SaveCredentialIdentitiesAsync credentialIdentities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Tuple&lt;System.Boolean,Foundation.NSError&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credentialIdentities" Type="AuthenticationServices.ASPasswordCredentialIdentity[]" />
      </Parameters>
      <Docs>
        <param name="credentialIdentities">To be added.</param>
        <summary>Asynchronously saves (or replaces, if the store does not support incremental updates) the <paramref name="credentialIdentities" /> to the store.</summary>
        <returns>The first value will be <see langword="true" /> on success. The second value will be non-null on error.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SharedStore">
      <MemberSignature Language="C#" Value="public static AuthenticationServices.ASCredentialIdentityStore SharedStore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class AuthenticationServices.ASCredentialIdentityStore SharedStore" />
      <MemberSignature Language="DocId" Value="P:AuthenticationServices.ASCredentialIdentityStore.SharedStore" />
      <MemberSignature Language="F#" Value="member this.SharedStore : AuthenticationServices.ASCredentialIdentityStore" Usage="AuthenticationServices.ASCredentialIdentityStore.SharedStore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("sharedStore")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AuthenticationServices.ASCredentialIdentityStore</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The singleton shared credential identity store.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
