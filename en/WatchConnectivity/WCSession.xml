<Type Name="WCSession" FullName="WatchConnectivity.WCSession">
  <TypeSignature Language="C#" Value="public class WCSession : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WCSession extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:WatchConnectivity.WCSession" />
  <TypeSignature Language="F#" Value="type WCSession = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("WCSession", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Mediates the transfer of information between a WatchKit extension app and the container app on the device.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/WatchConnectivity/Reference/WCSession_class/index.html">Apple documentation for <c>WCSession</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WCSession (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchConnectivity.WCSession.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new WatchConnectivity.WCSession : Foundation.NSObjectFlag -&gt; WatchConnectivity.WCSession" Usage="new WatchConnectivity.WCSession t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WCSession (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchConnectivity.WCSession.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new WatchConnectivity.WCSession : nativeint -&gt; WatchConnectivity.WCSession" Usage="new WatchConnectivity.WCSession handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivateSession">
      <MemberSignature Language="C#" Value="public virtual void ActivateSession ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ActivateSession() cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchConnectivity.WCSession.ActivateSession" />
      <MemberSignature Language="F#" Value="abstract member ActivateSession : unit -&gt; unit&#xA;override this.ActivateSession : unit -&gt; unit" Usage="wCSession.ActivateSession " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("activateSession")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:WatchConnectivity.WCSession" /> objects must be activated on both devices prior to data transfer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivationState">
      <MemberSignature Language="C#" Value="public virtual WatchConnectivity.WCSessionActivationState ActivationState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype WatchConnectivity.WCSessionActivationState ActivationState" />
      <MemberSignature Language="DocId" Value="P:WatchConnectivity.WCSession.ActivationState" />
      <MemberSignature Language="F#" Value="member this.ActivationState : WatchConnectivity.WCSessionActivationState" Usage="WatchConnectivity.WCSession.ActivationState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 2, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 3, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("activationState")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 2, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 3, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WatchConnectivity.WCSessionActivationState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the activation state of the session.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationContext">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt; ApplicationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDictionary`2&lt;class Foundation.NSString, class Foundation.NSObject&gt; ApplicationContext" />
      <MemberSignature Language="DocId" Value="P:WatchConnectivity.WCSession.ApplicationContext" />
      <MemberSignature Language="F#" Value="member this.ApplicationContext : Foundation.NSDictionary&lt;Foundation.NSString, Foundation.NSObject&gt;" Usage="WatchConnectivity.WCSession.ApplicationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("applicationContext", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The most recent contextual data sent to the companion app.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:WatchConnectivity.WCSession.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="WatchConnectivity.WCSession.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComplicationEnabled">
      <MemberSignature Language="C#" Value="public virtual bool ComplicationEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ComplicationEnabled" />
      <MemberSignature Language="DocId" Value="P:WatchConnectivity.WCSession.ComplicationEnabled" />
      <MemberSignature Language="F#" Value="member this.ComplicationEnabled : bool" Usage="WatchConnectivity.WCSession.ComplicationEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isComplicationEnabled")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this application's complication is in use on the watch face.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSession">
      <MemberSignature Language="C#" Value="public static WatchConnectivity.WCSession DefaultSession { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class WatchConnectivity.WCSession DefaultSession" />
      <MemberSignature Language="DocId" Value="P:WatchConnectivity.WCSession.DefaultSession" />
      <MemberSignature Language="F#" Value="member this.DefaultSession : WatchConnectivity.WCSession" Usage="WatchConnectivity.WCSession.DefaultSession" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("defaultSession")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WatchConnectivity.WCSession</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Produces the shared view of the app's <see cref="T:WatchConnectivity.WCSession" /> on the current device.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public virtual WatchConnectivity.IWCSessionDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class WatchConnectivity.IWCSessionDelegate Delegate" />
      <MemberSignature Language="DocId" Value="P:WatchConnectivity.WCSession.Delegate" />
      <MemberSignature Language="F#" Value="member this.Delegate : WatchConnectivity.IWCSessionDelegate with get, set" Usage="WatchConnectivity.WCSession.Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("delegate", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDelegate:", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WatchConnectivity.IWCSessionDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the WatchConnectivity.IWCSessionDelegate model class which acts as the class delegate.</summary>
        <value>The instance of the WatchConnectivity.IWCSessionDelegate model class</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchConnectivity.WCSession.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="wCSession.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the WCSession object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the WCSession class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the WCSession ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at https://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorDomain">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ErrorDomain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ErrorDomain" />
      <MemberSignature Language="DocId" Value="P:WatchConnectivity.WCSession.ErrorDomain" />
      <MemberSignature Language="F#" Value="member this.ErrorDomain : Foundation.NSString" Usage="WatchConnectivity.WCSession.ErrorDomain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("WCErrorDomain", "WatchConnectivity")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the error domain in which errors are reported.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasContentPending">
      <MemberSignature Language="C#" Value="public virtual bool HasContentPending { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasContentPending" />
      <MemberSignature Language="DocId" Value="P:WatchConnectivity.WCSession.HasContentPending" />
      <MemberSignature Language="F#" Value="member this.HasContentPending : bool" Usage="WatchConnectivity.WCSession.HasContentPending" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("hasContentPending")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether there is more content to transfer.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupported">
      <MemberSignature Language="C#" Value="public static bool IsSupported { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsSupported" />
      <MemberSignature Language="DocId" Value="P:WatchConnectivity.WCSession.IsSupported" />
      <MemberSignature Language="F#" Value="member this.IsSupported : bool" Usage="WatchConnectivity.WCSession.IsSupported" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isSupported")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the current device supports <see cref="T:WatchConnectivity.WCSession" /> objects.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutstandingFileTransfers">
      <MemberSignature Language="C#" Value="public virtual WatchConnectivity.WCSessionFileTransfer[] OutstandingFileTransfers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class WatchConnectivity.WCSessionFileTransfer[] OutstandingFileTransfers" />
      <MemberSignature Language="DocId" Value="P:WatchConnectivity.WCSession.OutstandingFileTransfers" />
      <MemberSignature Language="F#" Value="member this.OutstandingFileTransfers : WatchConnectivity.WCSessionFileTransfer[]" Usage="WatchConnectivity.WCSession.OutstandingFileTransfers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("outstandingFileTransfers", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WatchConnectivity.WCSessionFileTransfer[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The currently in-progress file transfers.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutstandingUserInfoTransfers">
      <MemberSignature Language="C#" Value="public virtual WatchConnectivity.WCSessionUserInfoTransfer[] OutstandingUserInfoTransfers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class WatchConnectivity.WCSessionUserInfoTransfer[] OutstandingUserInfoTransfers" />
      <MemberSignature Language="DocId" Value="P:WatchConnectivity.WCSession.OutstandingUserInfoTransfers" />
      <MemberSignature Language="F#" Value="member this.OutstandingUserInfoTransfers : WatchConnectivity.WCSessionUserInfoTransfer[]" Usage="WatchConnectivity.WCSession.OutstandingUserInfoTransfers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("outstandingUserInfoTransfers", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WatchConnectivity.WCSessionUserInfoTransfer[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The currently in-progress data transfers.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Paired">
      <MemberSignature Language="C#" Value="public virtual bool Paired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Paired" />
      <MemberSignature Language="DocId" Value="P:WatchConnectivity.WCSession.Paired" />
      <MemberSignature Language="F#" Value="member this.Paired : bool" Usage="WatchConnectivity.WCSession.Paired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isPaired")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the current iPhone is paired to an Apple Watch.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reachable">
      <MemberSignature Language="C#" Value="public virtual bool Reachable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Reachable" />
      <MemberSignature Language="DocId" Value="P:WatchConnectivity.WCSession.Reachable" />
      <MemberSignature Language="F#" Value="member this.Reachable : bool" Usage="WatchConnectivity.WCSession.Reachable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isReachable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the paired device is reachable.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceivedApplicationContext">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt; ReceivedApplicationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDictionary`2&lt;class Foundation.NSString, class Foundation.NSObject&gt; ReceivedApplicationContext" />
      <MemberSignature Language="DocId" Value="P:WatchConnectivity.WCSession.ReceivedApplicationContext" />
      <MemberSignature Language="F#" Value="member this.ReceivedApplicationContext : Foundation.NSDictionary&lt;Foundation.NSString, Foundation.NSObject&gt;" Usage="WatchConnectivity.WCSession.ReceivedApplicationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("receivedApplicationContext", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The most recent data sent from the companion app.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemainingComplicationUserInfoTransfers">
      <MemberSignature Language="C#" Value="public virtual nuint RemainingComplicationUserInfoTransfers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint RemainingComplicationUserInfoTransfers" />
      <MemberSignature Language="DocId" Value="P:WatchConnectivity.WCSession.RemainingComplicationUserInfoTransfers" />
      <MemberSignature Language="F#" Value="member this.RemainingComplicationUserInfoTransfers : nuint" Usage="WatchConnectivity.WCSession.RemainingComplicationUserInfoTransfers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("remainingComplicationUserInfoTransfers")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of remaining times that complication data can be sent to the extension.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendMessage">
      <MemberSignature Language="C#" Value="public virtual void SendMessage (Foundation.NSData data, WatchConnectivity.WCSessionReplyDataHandler replyHandler, Action&lt;Foundation.NSError&gt; errorHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendMessage(class Foundation.NSData data, class WatchConnectivity.WCSessionReplyDataHandler replyHandler, class System.Action`1&lt;class Foundation.NSError&gt; errorHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchConnectivity.WCSession.SendMessage(Foundation.NSData,WatchConnectivity.WCSessionReplyDataHandler,System.Action{Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member SendMessage : Foundation.NSData * WatchConnectivity.WCSessionReplyDataHandler * Action&lt;Foundation.NSError&gt; -&gt; unit&#xA;override this.SendMessage : Foundation.NSData * WatchConnectivity.WCSessionReplyDataHandler * Action&lt;Foundation.NSError&gt; -&gt; unit" Usage="wCSession.SendMessage (data, replyHandler, errorHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("sendMessageData:replyHandler:errorHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Foundation.NSData" />
        <Parameter Name="replyHandler" Type="WatchConnectivity.WCSessionReplyDataHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDWCSessionReplyDataHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="errorHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V9))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="replyHandler">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="errorHandler">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Sends <paramref name="data" /> to the companion app.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendMessage">
      <MemberSignature Language="C#" Value="public virtual void SendMessage (Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt; message, WatchConnectivity.WCSessionReplyHandler replyHandler, Action&lt;Foundation.NSError&gt; errorHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendMessage(class Foundation.NSDictionary`2&lt;class Foundation.NSString, class Foundation.NSObject&gt; message, class WatchConnectivity.WCSessionReplyHandler replyHandler, class System.Action`1&lt;class Foundation.NSError&gt; errorHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchConnectivity.WCSession.SendMessage(Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject},WatchConnectivity.WCSessionReplyHandler,System.Action{Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member SendMessage : Foundation.NSDictionary&lt;Foundation.NSString, Foundation.NSObject&gt; * WatchConnectivity.WCSessionReplyHandler * Action&lt;Foundation.NSError&gt; -&gt; unit&#xA;override this.SendMessage : Foundation.NSDictionary&lt;Foundation.NSString, Foundation.NSObject&gt; * WatchConnectivity.WCSessionReplyHandler * Action&lt;Foundation.NSError&gt; -&gt; unit" Usage="wCSession.SendMessage (message, replyHandler, errorHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("sendMessage:replyHandler:errorHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt;" />
        <Parameter Name="replyHandler" Type="WatchConnectivity.WCSessionReplyHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDWCSessionReplyHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="errorHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V9))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="message">To be added.</param>
        <param name="replyHandler">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="errorHandler">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Sends the message to the active paired device.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransferCurrentComplicationUserInfo">
      <MemberSignature Language="C#" Value="public virtual WatchConnectivity.WCSessionUserInfoTransfer TransferCurrentComplicationUserInfo (Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt; userInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class WatchConnectivity.WCSessionUserInfoTransfer TransferCurrentComplicationUserInfo(class Foundation.NSDictionary`2&lt;class Foundation.NSString, class Foundation.NSObject&gt; userInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchConnectivity.WCSession.TransferCurrentComplicationUserInfo(Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject})" />
      <MemberSignature Language="F#" Value="abstract member TransferCurrentComplicationUserInfo : Foundation.NSDictionary&lt;Foundation.NSString, Foundation.NSObject&gt; -&gt; WatchConnectivity.WCSessionUserInfoTransfer&#xA;override this.TransferCurrentComplicationUserInfo : Foundation.NSDictionary&lt;Foundation.NSString, Foundation.NSObject&gt; -&gt; WatchConnectivity.WCSessionUserInfoTransfer" Usage="wCSession.TransferCurrentComplicationUserInfo userInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("transferCurrentComplicationUserInfo:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WatchConnectivity.WCSessionUserInfoTransfer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userInfo" Type="Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt;" />
      </Parameters>
      <Docs>
        <param name="userInfo">To be added.</param>
        <summary>Sends the complication user info data to the extension.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransferFile">
      <MemberSignature Language="C#" Value="public virtual WatchConnectivity.WCSessionFileTransfer TransferFile (Foundation.NSUrl file, Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt; metadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class WatchConnectivity.WCSessionFileTransfer TransferFile(class Foundation.NSUrl file, class Foundation.NSDictionary`2&lt;class Foundation.NSString, class Foundation.NSObject&gt; metadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchConnectivity.WCSession.TransferFile(Foundation.NSUrl,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject})" />
      <MemberSignature Language="F#" Value="abstract member TransferFile : Foundation.NSUrl * Foundation.NSDictionary&lt;Foundation.NSString, Foundation.NSObject&gt; -&gt; WatchConnectivity.WCSessionFileTransfer&#xA;override this.TransferFile : Foundation.NSUrl * Foundation.NSDictionary&lt;Foundation.NSString, Foundation.NSObject&gt; -&gt; WatchConnectivity.WCSessionFileTransfer" Usage="wCSession.TransferFile (file, metadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("transferFile:metadata:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WatchConnectivity.WCSessionFileTransfer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="Foundation.NSUrl" />
        <Parameter Name="metadata" Type="Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt;" />
      </Parameters>
      <Docs>
        <param name="file">To be added.</param>
        <param name="metadata">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Sends the file and metadata to the device.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransferUserInfo">
      <MemberSignature Language="C#" Value="public virtual WatchConnectivity.WCSessionUserInfoTransfer TransferUserInfo (Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt; userInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class WatchConnectivity.WCSessionUserInfoTransfer TransferUserInfo(class Foundation.NSDictionary`2&lt;class Foundation.NSString, class Foundation.NSObject&gt; userInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchConnectivity.WCSession.TransferUserInfo(Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject})" />
      <MemberSignature Language="F#" Value="abstract member TransferUserInfo : Foundation.NSDictionary&lt;Foundation.NSString, Foundation.NSObject&gt; -&gt; WatchConnectivity.WCSessionUserInfoTransfer&#xA;override this.TransferUserInfo : Foundation.NSDictionary&lt;Foundation.NSString, Foundation.NSObject&gt; -&gt; WatchConnectivity.WCSessionUserInfoTransfer" Usage="wCSession.TransferUserInfo userInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("transferUserInfo:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>WatchConnectivity.WCSessionUserInfoTransfer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userInfo" Type="Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt;" />
      </Parameters>
      <Docs>
        <param name="userInfo">To be added.</param>
        <summary>Sends the provided user info to the peer.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateApplicationContext">
      <MemberSignature Language="C#" Value="public virtual bool UpdateApplicationContext (Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt; applicationContext, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool UpdateApplicationContext(class Foundation.NSDictionary`2&lt;class Foundation.NSString, class Foundation.NSObject&gt; applicationContext, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:WatchConnectivity.WCSession.UpdateApplicationContext(Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject},Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member UpdateApplicationContext : Foundation.NSDictionary&lt;Foundation.NSString, Foundation.NSObject&gt; *  -&gt; bool&#xA;override this.UpdateApplicationContext : Foundation.NSDictionary&lt;Foundation.NSString, Foundation.NSObject&gt; *  -&gt; bool" Usage="wCSession.UpdateApplicationContext (applicationContext, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("updateApplicationContext:error:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationContext" Type="Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt;" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="applicationContext">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Sends the application context data to the device.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WatchAppInstalled">
      <MemberSignature Language="C#" Value="public virtual bool WatchAppInstalled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WatchAppInstalled" />
      <MemberSignature Language="DocId" Value="P:WatchConnectivity.WCSession.WatchAppInstalled" />
      <MemberSignature Language="F#" Value="member this.WatchAppInstalled : bool" Usage="WatchConnectivity.WCSession.WatchAppInstalled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isWatchAppInstalled")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the watch app is installed on the paired Apple Watch.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WatchDirectoryUrl">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSUrl WatchDirectoryUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSUrl WatchDirectoryUrl" />
      <MemberSignature Language="DocId" Value="P:WatchConnectivity.WCSession.WatchDirectoryUrl" />
      <MemberSignature Language="F#" Value="member this.WatchDirectoryUrl : Foundation.NSUrl" Usage="WatchConnectivity.WCSession.WatchDirectoryUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("watchDirectoryURL")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSUrl</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The directory in which information about the paired Apple Watch is stored.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
