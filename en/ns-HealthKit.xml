<Namespace Name="HealthKit">
  <Docs>
    <summary>The HealthKit namespace provides secure data storage and retrieval of health-related information.</summary>
    <remarks>
      <para>The Health Kit namespace, introduced in iOS 8, allows applications to record, track, and access health-related information to a common persistent store.</para>
      <format type="text/html">
        <h2>Provisioning, Permissions, and Profiles</h2>
      </format>
      <para>To use Health Kit services, applications must be developed using an "Explicit App ID" and a provisioning profile that includes the explicit ID and Health Kit permissions.</para>
      <para>In addition, applications must have an Entitlements.plist that contains the key <c>com.apple.developer.healthkit</c> of type <c>Boolean</c> with a value of <c>true</c>.</para>
      <para>At runtime, the application must request access to the specific types of health data in which it is interested. The user will interact with a permissions dialog in the Health app that allows them fine-grained control over what health information they will allow. </para>
      <example>
        <code lang="C#"><![CDATA[
var temperatureKey = HKQuantityTypeIdentifierKey.BodyTemperature;
var tempQuantityType = HKObjectType.GetQuantityType (temperatureKey);

var hks = new HKHealthStore ();
var success = await hks.RequestAuthorizationToShareAsync (new NSSet (new [] { tempQuantityType }), new NSSet ());
        
          ]]></code>
      </example>
      <para>The result of the <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=T:HealthKit.HKHealthStore.RequestAuthorizationtoShareAsync&amp;scope=Xamarin" title="T:HealthKit.HKHealthStore.RequestAuthorizationtoShareAsync">T:HealthKit.HKHealthStore.RequestAuthorizationtoShareAsync</a></format> method indicates only that the user interacted with the permissions dialog, it does not indicate whether the user allowed any data sharing. For that, applications can use the <see cref="M:HealthKit.HKHealthStore.GetAuthorizationStatus*" /> method:</para>
      <example>
        <code lang="C#"><![CDATA[
var access = healthKitStore.GetAuthorizationStatus (HKObjectType.GetQuantityType (HKQuantityTypeIdentifierKey.HeartRate));
if (access.HasFlag (HKAuthorizationStatus.SharingAuthorized)) {
//...etc...
          ]]></code>
      </example>
      <format type="text/html">
        <h2>Creating and storing data</h2>
      </format>
      <para>Once permissions have been granted, creating and storing data involves creating an <see cref="T:HealthKit.HKSample" /> of a particular <see cref="T:HealthKit.HKSampleType" /> and then calling <see cref="M:HealthKit.HKHealthStore.SaveObject*" /> or <see cref="M:HealthKit.HKHealthStore.SaveObjectAsync*" />. </para>
      <format type="text/html">
        <h2>Exception-handling differences between async and non-async methods</h2>
      </format>
      <para>Apple's philosophy regarding attempts to store or read non-permitted information is that such attempts should not cause runtime exceptions. Rather, methods such as <see cref="M:HealthKit.HKHealthStore.RequestAuthorizationToShare*" /> and <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=M:HealthKit.HKStore.SaveObject*&amp;scope=Xamarin" title="M:HealthKit.HKStore.SaveObject*">M:HealthKit.HKStore.SaveObject*</a></format> are defined with completion callback handlers that are passed a non-null <see cref="T:Foundation.NSError" /> argument in the case of an error. Application developers using such methods should take special care to check for success, as it is highly likely that users will be cautious about access to their health data.</para>
      <para>In contrast, Xamarin's asynchronous versions of such methods (such as <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=M:HealthKit.HKHealthStore.RequestAutorizationToShareAsync*&amp;scope=Xamarin" title="M:HealthKit.HKHealthStore.RequestAutorizationToShareAsync*">M:HealthKit.HKHealthStore.RequestAutorizationToShareAsync*</a></format> and <see cref="M:HealthKit.HKHealthStore.SaveObjectAsync*" />) will throw an <see cref="T:Foundation.NSErrorException" /> on failure or if the method is not allowed by the end user.</para>
      <example>
        <code lang="C#"><![CDATA[
//Apple's philosophy: no exception
var myCurrentTemp = HKQuantity.FromQuantity (HKUnit.DegreeFahrenheit, 98.6);
var tempSample = HKQuantitySample.FromType (tempQuantityType, myCurrentTemp, new NSDate (), new NSDate (), new NSDictionary());

hks.SaveObject(tempSample, (success, error) => {
	if(error != null)
	{
   //...etc...
          ]]></code>
      </example>
      <example>
        <code lang="C#"><![CDATA[
//Xamarin's philosophy: Lack of permissions raises exception
protected async void StoreAsync(HKHealthStore store, HKQuantitySample sample)
{
	try
	{
		var success = await store.SaveObjectAsync (sample);

	}catch(NSErrorException x)
	{
		Console.WriteLine (x);
	}
}
          ]]></code>
      </example>
      <para>There are several types of <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=T:HealthKit.HKObjecType&amp;scope=Xamarin" title="T:HealthKit.HKObjecType">T:HealthKit.HKObjecType</a></format>s:</para>
      <para>
        <img href="~/HealthKit/_images/HealthKit.HKObjectType.Hierarchy.png" />
      </para>
      <para>
        <see cref="T:HealthKit.HKCharacteristicType" /> objects represent static characterics of the user, such as date of birth or blood type (see <see cref="T:HealthKit.HKCharacteristicTypeIdentifierKey" />), while <see cref="T:HealthKit.HKSampleType" /> objects represent data that are sampled over time. As of iOS 8, there is only one type of <see cref="T:HealthKit.HKCategorySample" />, which is <see cref="P:HealthKit.HKCategoryTypeIdentifierKey.SleepAnalysis" />. The large majority of Health Kit data types are defined in <see cref="T:HealthKit.HKQuantityTypeIdentifierKey" />.</para>
      <para>Manipulating data samples involves both an <see cref="T:HealthKit.HKSampleType" /> object and an <see cref="T:HealthKit.HKSample" /> to carry the data:</para>
      <para>
        <img href="~/HealthKit/_images/HealthKit.HKSampleType.Factories.png" />
      </para>
      <para>
        <see cref="T:HealthKit.HKQuantitySample" />s may refer to an instantaneous measurement, in which case their <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=P:HealthKit.HKQuantitySample.StartDate&amp;scope=Xamarin" title="P:HealthKit.HKQuantitySample.StartDate">P:HealthKit.HKQuantitySample.StartDate</a></format> and <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=P:HealthKit.HKQuantitySample.EndDate&amp;scope=Xamarin" title="P:HealthKit.HKQuantitySample.EndDate">P:HealthKit.HKQuantitySample.EndDate</a></format> properties should be set to the same value. Other samples, such as step count, are measured over time and the start and end time should be set appropriately.</para>
      <para>Data may have metadata associated with it. There are a number of predefined metadata keys in <see cref="T:HealthKit.HKMetadataKey" />, but application developers are encouraged to created their own keys for metadata as well.</para>
      <format type="text/html">
        <h2>Units of measurement and conversion</h2>
      </format>
      <para>Health Kit supports units of measurement in the categories of mass, length, volume, and energy. This support includes conversion of values between measurement systems (for instance, if a user prefers Fahrenheit degrees but has a sensor that reports its data in Celsius). This is automatically supported within the Health app, but explicit conversions are also possible, as shown in the following example:</para>
      <example>
        <code lang="C#"><![CDATA[
var myFahrenheitTemp = HKQuantity.FromQuantity (HKUnit.DegreeFahrenheit, 98.6);
var myCelsiusTemp = myFahrenheitTemp.GetDoubleValue (HKUnit.DegreeCelsius);
          ]]></code>
      </example>
      <!-- TODO: 
           <format type="text/html"><h2>Retrieving data</h2></format>
-->
    </remarks>
  </Docs>
</Namespace>
