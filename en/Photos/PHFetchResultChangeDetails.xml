<Type Name="PHFetchResultChangeDetails" FullName="Photos.PHFetchResultChangeDetails">
  <TypeSignature Language="C#" Value="public class PHFetchResultChangeDetails : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PHFetchResultChangeDetails extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:Photos.PHFetchResultChangeDetails" />
  <TypeSignature Language="F#" Value="type PHFetchResultChangeDetails = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("PHFetchResultChangeDetails", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Differences between a fetch previously performed and what would be the results if the same fetch were performed now.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/Photos/Reference/PHFetchResultChangeDetails_Class/index.html">Apple documentation for <c>PHFetchResultChangeDetails</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PHFetchResultChangeDetails ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Photos.PHFetchResultChangeDetails.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PHFetchResultChangeDetails (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Photos.PHFetchResultChangeDetails.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new Photos.PHFetchResultChangeDetails : Foundation.NSObjectFlag -&gt; Photos.PHFetchResultChangeDetails" Usage="new Photos.PHFetchResultChangeDetails t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal PHFetchResultChangeDetails (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Photos.PHFetchResultChangeDetails.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new Photos.PHFetchResultChangeDetails : nativeint -&gt; Photos.PHFetchResultChangeDetails" Usage="new Photos.PHFetchResultChangeDetails handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeDetails">
      <MemberSignature Language="C#" Value="public static Photos.PHFetchResultChangeDetails ChangeDetails (Photos.PHFetchResult fromResult, Photos.PHFetchResult toResult, Photos.PHObject[] changedObjects);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Photos.PHFetchResultChangeDetails ChangeDetails(class Photos.PHFetchResult fromResult, class Photos.PHFetchResult toResult, class Photos.PHObject[] changedObjects) cil managed" />
      <MemberSignature Language="DocId" Value="M:Photos.PHFetchResultChangeDetails.ChangeDetails(Photos.PHFetchResult,Photos.PHFetchResult,Photos.PHObject[])" />
      <MemberSignature Language="F#" Value="static member ChangeDetails : Photos.PHFetchResult * Photos.PHFetchResult * Photos.PHObject[] -&gt; Photos.PHFetchResultChangeDetails" Usage="Photos.PHFetchResultChangeDetails.ChangeDetails (fromResult, toResult, changedObjects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("changeDetailsFromFetchResult:toFetchResult:changedObjects:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Photos.PHFetchResultChangeDetails</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromResult" Type="Photos.PHFetchResult" />
        <Parameter Name="toResult" Type="Photos.PHFetchResult" />
        <Parameter Name="changedObjects" Type="Photos.PHObject[]" />
      </Parameters>
      <Docs>
        <param name="fromResult">To be added.</param>
        <param name="toResult">To be added.</param>
        <param name="changedObjects">To be added.</param>
        <summary>Compares the different between two <see cref="T:Photos.PHFetchResult" /> objects.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangedIndexes">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexSet ChangedIndexes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSIndexSet ChangedIndexes" />
      <MemberSignature Language="DocId" Value="P:Photos.PHFetchResultChangeDetails.ChangedIndexes" />
      <MemberSignature Language="F#" Value="member this.ChangedIndexes : Foundation.NSIndexSet" Usage="Photos.PHFetchResultChangeDetails.ChangedIndexes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("changedIndexes")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("changedIndexes", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The indices of the objects in the <see cref="T:Photos.PHFetchResult" /> whose content or metadata has changed.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangedObjects">
      <MemberSignature Language="C#" Value="public virtual Photos.PHObject[] ChangedObjects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Photos.PHObject[] ChangedObjects" />
      <MemberSignature Language="DocId" Value="P:Photos.PHFetchResultChangeDetails.ChangedObjects" />
      <MemberSignature Language="F#" Value="member this.ChangedObjects : Photos.PHObject[]" Usage="Photos.PHFetchResultChangeDetails.ChangedObjects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("changedObjects")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("changedObjects", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Photos.PHObject[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The objects in the <see cref="T:Photos.PHFetchResult" /> whose content or metadata has changed.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:Photos.PHFetchResultChangeDetails.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="Photos.PHFetchResultChangeDetails.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateMoves">
      <MemberSignature Language="C#" Value="public virtual void EnumerateMoves (Photos.PHChangeDetailEnumerator handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnumerateMoves(class Photos.PHChangeDetailEnumerator handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Photos.PHFetchResultChangeDetails.EnumerateMoves(Photos.PHChangeDetailEnumerator)" />
      <MemberSignature Language="F#" Value="abstract member EnumerateMoves : Photos.PHChangeDetailEnumerator -&gt; unit&#xA;override this.EnumerateMoves : Photos.PHChangeDetailEnumerator -&gt; unit" Usage="pHFetchResultChangeDetails.EnumerateMoves handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("enumerateMovesWithBlock:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="Photos.PHChangeDetailEnumerator">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDPHChangeDetailEnumerator))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="handler">To be added.</param>
        <summary>Calls <paramref name="handler" /> on each object in the <see cref="T:Photos.PHFetchResult" /> that has changed its index.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FetchResultAfterChanges">
      <MemberSignature Language="C#" Value="public virtual Photos.PHFetchResult FetchResultAfterChanges { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Photos.PHFetchResult FetchResultAfterChanges" />
      <MemberSignature Language="DocId" Value="P:Photos.PHFetchResultChangeDetails.FetchResultAfterChanges" />
      <MemberSignature Language="F#" Value="member this.FetchResultAfterChanges : Photos.PHFetchResult" Usage="Photos.PHFetchResultChangeDetails.FetchResultAfterChanges" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("fetchResultAfterChanges")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("fetchResultAfterChanges", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Photos.PHFetchResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The current <see cref="T:Photos.PHFetchResult" />, incorporating recent changes.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FetchResultBeforeChanges">
      <MemberSignature Language="C#" Value="public virtual Photos.PHFetchResult FetchResultBeforeChanges { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Photos.PHFetchResult FetchResultBeforeChanges" />
      <MemberSignature Language="DocId" Value="P:Photos.PHFetchResultChangeDetails.FetchResultBeforeChanges" />
      <MemberSignature Language="F#" Value="member this.FetchResultBeforeChanges : Photos.PHFetchResult" Usage="Photos.PHFetchResultChangeDetails.FetchResultBeforeChanges" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("fetchResultBeforeChanges")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("fetchResultBeforeChanges", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Photos.PHFetchResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The original <see cref="T:Photos.PHFetchResult" />, without recent changes.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasIncrementalChanges">
      <MemberSignature Language="C#" Value="public virtual bool HasIncrementalChanges { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasIncrementalChanges" />
      <MemberSignature Language="DocId" Value="P:Photos.PHFetchResultChangeDetails.HasIncrementalChanges" />
      <MemberSignature Language="F#" Value="member this.HasIncrementalChanges : bool" Usage="Photos.PHFetchResultChangeDetails.HasIncrementalChanges" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("hasIncrementalChanges")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the changes to the <see cref="T:Photos.PHFetchResult" /> can be described incrementally.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasMoves">
      <MemberSignature Language="C#" Value="public virtual bool HasMoves { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasMoves" />
      <MemberSignature Language="DocId" Value="P:Photos.PHFetchResultChangeDetails.HasMoves" />
      <MemberSignature Language="F#" Value="member this.HasMoves : bool" Usage="Photos.PHFetchResultChangeDetails.HasMoves" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("hasMoves")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether any objects have been rearranged in the <see cref="T:Photos.PHFetchResult" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertedIndexes">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexSet InsertedIndexes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSIndexSet InsertedIndexes" />
      <MemberSignature Language="DocId" Value="P:Photos.PHFetchResultChangeDetails.InsertedIndexes" />
      <MemberSignature Language="F#" Value="member this.InsertedIndexes : Foundation.NSIndexSet" Usage="Photos.PHFetchResultChangeDetails.InsertedIndexes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("insertedIndexes")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("insertedIndexes", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indices of objects added to the <see cref="T:Photos.PHFetchResult" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertedObjects">
      <MemberSignature Language="C#" Value="public virtual Photos.PHObject[] InsertedObjects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Photos.PHObject[] InsertedObjects" />
      <MemberSignature Language="DocId" Value="P:Photos.PHFetchResultChangeDetails.InsertedObjects" />
      <MemberSignature Language="F#" Value="member this.InsertedObjects : Photos.PHObject[]" Usage="Photos.PHFetchResultChangeDetails.InsertedObjects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("insertedObjects")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("insertedObjects", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Photos.PHObject[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Objects added to the <see cref="T:Photos.PHFetchResult" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovedIndexes">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexSet RemovedIndexes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSIndexSet RemovedIndexes" />
      <MemberSignature Language="DocId" Value="P:Photos.PHFetchResultChangeDetails.RemovedIndexes" />
      <MemberSignature Language="F#" Value="member this.RemovedIndexes : Foundation.NSIndexSet" Usage="Photos.PHFetchResultChangeDetails.RemovedIndexes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("removedIndexes")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("removedIndexes", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indices of objects removed from the <see cref="T:Photos.PHFetchResult" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovedObjects">
      <MemberSignature Language="C#" Value="public virtual Photos.PHObject[] RemovedObjects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Photos.PHObject[] RemovedObjects" />
      <MemberSignature Language="DocId" Value="P:Photos.PHFetchResultChangeDetails.RemovedObjects" />
      <MemberSignature Language="F#" Value="member this.RemovedObjects : Photos.PHObject[]" Usage="Photos.PHFetchResultChangeDetails.RemovedObjects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("removedObjects")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("removedObjects", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Photos.PHObject[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Objects removed from the <see cref="T:Photos.PHFetchResult" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
